<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于如何养成Django女皇的那件事（Ⅱ）</title>
      <link href="/2020/07/23/Django%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2020/07/23/Django%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Django是一个优秀的Python web框架，被众多python开发者所喜爱。新开这个Django专栏，<strong>并不是从零开始详细使用Django框架来开发web网页，而是用来开发api。前后分离是当前的技术栈潮流</strong>。</p><blockquote><p>1.serializers序列化<br>2.分页查询<br>3.request</p></blockquote><a id="more"></a><h3 id="1-serializers序列化"><a href="#1-serializers序列化" class="headerlink" title="1.serializers序列化"></a>1.serializers序列化</h3><p>序列化帮助我们提供了</p><ul><li>数据校验</li><li>序列化（即字符串化，网络传输都是以字符串形式传输）</li></ul><ol><li>创建一个serializers.py文件</li></ol><p>在APP目录下创建一个名为serializers.py文件，用于描述序列化逻辑<br>PS：<strong>序列化时一定要继承<code>serializers.ModelSerializer</code> 序列化类</strong>，不然会出很多问题，e.g. post请求时，缺少的create方法；put请求时，缺少update方法。</p><ul><li><p>最简单的一个序列化案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewCategorySerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = models.Category <span class="comment"># 声明模型名</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        fields表示要展示的字段，有两种写法：</span></span><br><span class="line"><span class="string">        写法一：</span></span><br><span class="line"><span class="string">            fields = "__all__"：表示全部展示Category模型里的所有字段</span></span><br><span class="line"><span class="string">        写法二：</span></span><br><span class="line"><span class="string">            fields = ['id','name',...]：将想要展示的Category模型里的特定字段添加到数组中</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        fields = [<span class="string">'id'</span>,<span class="string">'name'</span>]</span><br><span class="line">        depth = <span class="number">1</span>  <span class="comment"># 此字段表示查看嵌套几层的数据【推荐0-3】，不建议太大，性能损耗</span></span><br></pre></td></tr></table></figure></li><li><p>序列化深入:source用法</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    category_txt = serializers.CharField(source=<span class="string">'category.name'</span>,required=<span class="literal">False</span>)</span><br><span class="line">    x1 = serializers.SerializerMethodField()</span><br><span class="line"></span><br><span class="line">    status_txt = serializers.CharField(source=<span class="string">'get_status_display'</span>,required=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    x2 = serializers.SerializerMethodField()</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = models.Article</span><br><span class="line">        <span class="comment"># fields = "__all__"</span></span><br><span class="line">        fields = [<span class="string">'id'</span>,<span class="string">'title'</span>,<span class="string">'summary'</span>,<span class="string">'content'</span>,<span class="string">'category'</span>,<span class="string">'category_txt'</span>,<span class="string">'x1'</span>,<span class="string">'status'</span>,<span class="string">'status_txt'</span>,<span class="string">'x2'</span>]</span><br><span class="line">        <span class="comment"># depth = 1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_x1</span><span class="params">(self,obj)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> obj.category.name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_x2</span><span class="params">(self,obj)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> obj.get_status_display()</span><br></pre></td></tr></table></figure><p>对序列化深入的详细说明</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># fields添加展示字段方式一：直接使用定义的models的字段</span></span><br><span class="line">fields = [<span class="string">'title'</span>,<span class="string">'summary'</span>,<span class="string">'content'</span>,<span class="string">'category'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># fields添加展示字段方式二：使用source，引用category模型的name字段</span></span><br><span class="line">category_txt = serializers.CharField(source=<span class="string">'category.name'</span>,required=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># fields添加展示字段方式三：自定义函数</span></span><br><span class="line">x1 = serializers.SerializerMethodField() <span class="comment"># 先定义x1，并声明为序列化方法字段</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_x1</span><span class="params">(self,obj)</span>:</span>   <span class="comment"># 函数命名方式：get_自定义的字段名</span></span><br><span class="line">        <span class="keyword">return</span> obj.category.name</span><br></pre></td></tr></table></figure><ol start="2"><li>创建一个views.py实例</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> ArticleSerializer</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Category, Article</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        pk = kwargs.get(<span class="string">'pk'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pk:</span><br><span class="line">            queryset = Article.objects.all()</span><br><span class="line">            ser = ArticleSerializer(instance=queryset, many=<span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">return</span> Response(ser.data)</span><br><span class="line">        article_object = Article.objects.filter(id=pk).first()</span><br><span class="line">        ser = ArticleSerializer(instance=article_object, many=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(ser.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        ser = ArticleSerializer(data=request.data)</span><br><span class="line">        <span class="keyword">if</span> ser.is_valid():</span><br><span class="line">            ser.save()</span><br><span class="line">            <span class="keyword">return</span> Response(ser.data)</span><br><span class="line">        <span class="keyword">return</span> Response(ser.errors)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        pk = kwargs.get(<span class="string">'pk'</span>)</span><br><span class="line">        article_object = Article.objects.filter(id=pk).first()</span><br><span class="line">        ser = ArticleSerializer(instance=article_object, data=request.data)</span><br><span class="line">        <span class="keyword">if</span> ser.is_valid():</span><br><span class="line">            ser.save()</span><br><span class="line">            <span class="keyword">return</span> Response(ser.data)</span><br><span class="line">        <span class="keyword">return</span> Response(ser.errors)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">patch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""局部"""</span></span><br><span class="line">        pk = kwargs.get(<span class="string">'pk'</span>)</span><br><span class="line">        article_object = Article.objects.filter(id=pk).first()</span><br><span class="line">        ser = ArticleSerializer(instance=article_object, data=request.data, partial=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">if</span> ser.is_valid():</span><br><span class="line">            ser.save()</span><br><span class="line">            <span class="keyword">return</span> Response(ser.data)</span><br><span class="line">        <span class="keyword">return</span> Response(ser.errors)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        pk = kwargs.get(<span class="string">'pk'</span>)</span><br><span class="line">        Article.objects.filter(id=pk).delete()</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">'删除成功'</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li>urls.py进行映射</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views  <span class="comment"># 导入views文件中的视图函数(标准写法)</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># get获取列表；post增加数据</span></span><br><span class="line">    re_path(<span class="string">r'^drf/article/$'</span>, views.ArticleView.as_view()),</span><br><span class="line">    re_path(<span class="string">r'^drf/article/(?P&lt;pk&gt;\d+)/$'</span>, views.ArticleView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="2-分页查询"><a href="#2-分页查询" class="headerlink" title="2.分页查询"></a>2.分页查询</h3><p>drf中的分页查询有两种：</p><ul><li>PageNumberPagination类：访问url形如page/view/article/?page=2</li><li>LimitOffsetPagination类：访问url形如page/article/?offset=0&amp;limit=3</li></ul><blockquote><p>PageNumberPagination类</p></blockquote><p>views.py文件：<strong>必须重写父类PageNumberPagination，重设每页展示数据量，不设置，则默认不分页</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> PageArticleSerializer</span><br><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> PageNumberPagination</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类似于Java中的接口interface，必须重写父类方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewPageNumberPagination</span><span class="params">(PageNumberPagination)</span>:</span></span><br><span class="line">    page_size = <span class="number">3</span>   <span class="comment"># 重写，每页展示数据数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PageViewArticleView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        queryset = Article.objects.all()</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        # 方式一：仅数据</span></span><br><span class="line"><span class="string">        # 分页对象</span></span><br><span class="line"><span class="string">        page_object = NewPageNumberPagination()</span></span><br><span class="line"><span class="string">        # 调用 分页对象.paginate_queryset方法进行分页，得到的结果是分页之后的数据</span></span><br><span class="line"><span class="string">        # result就是分完页的一部分数据</span></span><br><span class="line"><span class="string">        result = page_object.paginate_queryset(queryset, request, self)</span></span><br><span class="line"><span class="string">        # 序列化分页之后的数据</span></span><br><span class="line"><span class="string">        ser = PageArticleSerializer(instance=result, many=True)</span></span><br><span class="line"><span class="string">        return Response(ser.data)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 方式二：数据 + 分页信息</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        page_object = NewPageNumberPagination()</span></span><br><span class="line"><span class="string">        result = page_object.paginate_queryset(queryset, request, self)</span></span><br><span class="line"><span class="string">        ser = PageArticleSerializer(instance=result, many=True)</span></span><br><span class="line"><span class="string">        return page_object.get_paginated_response(ser.data)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 方式三：数据 + 部分分页信息</span></span><br><span class="line"></span><br><span class="line">        page_object = NewPageNumberPagination()</span><br><span class="line">        result = page_object.paginate_queryset(queryset, request, self)</span><br><span class="line">        ser = PageArticleSerializer(instance=result, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">'count'</span>: page_object.page.paginator.count, <span class="string">'result'</span>: ser.data&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>LimitOffsetPagination分页</p></blockquote><p>views.py文件：<strong>必须重写父类LimitOffsetPagination，限制每页最大偏移量。不设置，有可能会被黑客攻击</strong><br>比如：有一个黑衣人调用api后，修改请求url：offset=0&amp;limit=200000000…，如此庞大的数据量一下子加载到内存中，服务器直接宕机</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分页方式二：</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> LimitOffsetPagination</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> PageArticleSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HulaLimitOffsetPagination</span><span class="params">(LimitOffsetPagination)</span>:</span></span><br><span class="line">    <span class="comment"># 覆盖重写父类max_limit属性,设置最大数据量</span></span><br><span class="line">    max_limit = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PageArticleView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        queryset = Article.objects.all()</span><br><span class="line">        <span class="comment"># 声明分页类</span></span><br><span class="line">        page_object = HulaLimitOffsetPagination()</span><br><span class="line">        result = page_object.paginate_queryset(queryset, request, self)</span><br><span class="line">        ser = PageArticleSerializer(instance=result, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(ser.data)</span><br></pre></td></tr></table></figure><h3 id="3-request"><a href="#3-request" class="headerlink" title="3. request"></a>3. request</h3><p>DRF引入了一个扩展Django常规 HttpRequest 对象的 Request 对象，并提供了更灵活的请求 解析能力。Request 对象的核心功能是 request.data 属性</p><ul><li>request.headers 获取请求头，将其转化为字典dict</li><li>request.method 获取请求方法</li><li>request.data 获取携带参数，为字典类型</li></ul>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于如何养成Django女皇的那件事（Ⅰ）</title>
      <link href="/2020/07/21/Django%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2020/07/21/Django%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Django是一个优秀的Python web框架，被众多python开发者所喜爱。新开这个Django专栏，<strong>并不是从零开始详细使用Django框架来开发web网页，而是用来开发api。前后分离是当前的技术栈潮流</strong>。</p><blockquote><p>1.Django基础知识<br>2.初识drf<br>3.创建程序并初始化模型<br>4.model.py模块<br>5.urls.py模块</p></blockquote><a id="more"></a><h3 id="1-Django基础知识"><a href="#1-Django基础知识" class="headerlink" title="1.Django基础知识"></a>1.Django基础知识</h3><p>Django搭建web页面的知识，我在GitHub上已经写过了，若想了解搭建网站，请移步👉👉👉<a href="https://github.com/FioraLove/Tips/tree/Dev-1/Django" target="_blank" rel="noopener">Django搭建网站知识基础</a></p><p>首先，我们需要了解三种开发模式：</p><ul><li>MVT(model,view,templates)模式：Django</li><li>MVC(model,view,controller)模式：php</li><li>MVVM(model,view,view—model)模式：vue</li></ul><p>django是典行的mvt模式，前后分离，后端给前段返回json数据，所以我们编写API时仅需要考虑model层，view层，抛弃template层。</p><h3 id="2-初识drf"><a href="#2-初识drf" class="headerlink" title="2. 初识drf"></a>2. 初识drf</h3><ol><li>安装restful框架</li></ol><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install djangorestframework</span><br></pre></td></tr></table></figure><ol start="2"><li>使用</li></ol><ul><li>注册app（rest_framework本质上也是一个APP，也需要注册）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">  <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">  <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">  <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">  <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">  <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">  <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">  <span class="string">'rest_framework'</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>写路由</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">  url(<span class="string">r'^drf/info/'</span>, views.DrfInfoView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>写视图</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrfInfoView</span><span class="params">(APIView)</span>:</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">      data = [</span><br><span class="line">          &#123;<span class="string">'id'</span>: <span class="number">1</span>, <span class="string">'title'</span>: <span class="string">'震惊了...王阳居然...'</span>, <span class="string">'content'</span>: <span class="string">'...'</span>&#125;,</span><br><span class="line">          &#123;<span class="string">'id'</span>: <span class="number">2</span>, <span class="string">'title'</span>: <span class="string">'震惊了...王阳居然...'</span>, <span class="string">'content'</span>: <span class="string">'...'</span>&#125;,</span><br><span class="line">          &#123;<span class="string">'id'</span>: <span class="number">3</span>, <span class="string">'title'</span>: <span class="string">'震惊了...王阳居然...'</span>, <span class="string">'content'</span>: <span class="string">'...'</span>&#125;,</span><br><span class="line">          &#123;<span class="string">'id'</span>: <span class="number">4</span>, <span class="string">'title'</span>: <span class="string">'震惊了...王阳居然...'</span>, <span class="string">'content'</span>: <span class="string">'...'</span>&#125;,</span><br><span class="line">      ]</span><br><span class="line">      <span class="keyword">return</span> Response(data)</span><br></pre></td></tr></table></figure><ol start="3"><li>DRF的应用场景</li></ol><p>以后在公司参与前后端分离项目、参与为app写接口时，用drf会比较方便。</p><ul><li>restful规范</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">- URL中一般用名词： </span><br><span class="line">http://www.luffycity.com/article/ (面向资源编程，网络上东西都视为资源)</span><br><span class="line">- 根据请求不同做不同操作：GET/POST/PUT/DELETE/PATCH</span><br><span class="line">- 筛选条件，在URL参数中进行传递：</span><br><span class="line">http://www.luffycity.com/article/?page=1&amp;category=1</span><br><span class="line"></span><br><span class="line">一般传输的数据格式都是JSON</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1. 建议用https代替http</span><br><span class="line">2. 在URL中体现api，添加api标识</span><br><span class="line">    https://www.cnblogs.com/xwgblog/p/11812244.html   # 错误</span><br><span class="line">    https://www.cnblogs.com/api/xwgblog/p/11812244.html  # 正确</span><br><span class="line">    https://api.cnblogs.com/xwgblog/p/11812244.html # 正确</span><br><span class="line"></span><br><span class="line">    建议：https://www.cnblogs.com/api/...</span><br><span class="line">3. 在URL中要体现版本</span><br><span class="line">    https://www.cnblogs.com/api/v1/userinfo/</span><br><span class="line">    https://www.cnblogs.com/api/v2/userinfo/</span><br><span class="line">4. 一般情况下对于api接口，用名词不用动词。</span><br><span class="line">    https://www.cnblogs.com/api/v1/userinfo/</span><br><span class="line">5. 如果有条件的话，在URL后面进行传递。</span><br><span class="line">    https://www.cnblogs.com/api/v1/userinfo/?page=1&amp;category=2</span><br><span class="line">6. 根据method不同做不同操作</span><br><span class="line">    get/post/put/patch/delete</span><br></pre></td></tr></table></figure><ul><li>drf框架</li></ul><p>不基于drf也可以实现restful规范来开发接口程序。<br>使用了drf之后，可以快速帮我们开发restful规范来开发接口。</p><h3 id="3-创建程序并初始化模型"><a href="#3-创建程序并初始化模型" class="headerlink" title="3. 创建程序并初始化模型"></a>3. 创建程序并初始化模型</h3><p>DRF引入了一个扩展Django常规 HttpRequest 对象的 Request 对象，并提供了更灵活的请求 解析能力。 Request 对象的核心功能是 request.data 属性，它与 request.POST 类似，但 对于使用Web API更为有用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request.POST  # 只处理表单数据  只适用于&apos;POST&apos;方法</span><br><span class="line">request.data  # 处理任意数据  适用于&apos;POST&apos;，&apos;PUT&apos;和&apos;PATCH&apos;等方法,是字典型</span><br></pre></td></tr></table></figure><p>rest_framework框架默认传输数据格式为x-www-urlencoded，并不是通常的json<br><strong>在DRF中，请始终使用 request.data ，不要使用 request.POST</strong></p><h3 id="4-model-py模块"><a href="#4-model-py模块" class="headerlink" title="4. model.py模块"></a>4. model.py模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Category</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章分类表</span></span><br><span class="line"><span class="string">    verbose_name 代表别名</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    name = models.CharField(verbose_name=<span class="string">"分类"</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    objects = models.Manager()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    文章明细表</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    title = models.CharField(verbose_name=<span class="string">"标题"</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    summary = models.CharField(verbose_name=<span class="string">"简介"</span>, max_length=<span class="number">255</span>)</span><br><span class="line">    content = models.TextField(verbose_name=<span class="string">"内容"</span>)</span><br><span class="line">    category = models.ForeignKey(verbose_name=<span class="string">"分类"</span>, to=<span class="string">"Category"</span>, on_delete=models.CASCADE)</span><br><span class="line">    objects = models.Manager()</span><br></pre></td></tr></table></figure><blockquote><p>关于objects的说明：</p></blockquote><p>objects : 管理器对象，Manager类型的对象，定义在from django.db import models中，用于模型对象和数据库交互，是默认自动生成的属性，但是可以自定义管理器对象</p><p>自定义管理器对象：例如 books= models.Manager()，一旦自定义管理器对象，默认的objects 就不再自动生成</p><blockquote><p>表字段类型及说明</p></blockquote><table><thead><tr><th align="center">表字段</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">models.AutoField</td><td align="center">默认会生成一个名为id的字段并未int类型</td></tr><tr><td align="center">models.CharField</td><td align="center">字符串类型</td></tr><tr><td align="center">models.BooleanField</td><td align="center">布尔类型</td></tr><tr><td align="center">models.ComaSeparatedIntegerField</td><td align="center">用逗号分隔的整数类型</td></tr><tr><td align="center">models.DateField</td><td align="center">日期（Date）类型</td></tr><tr><td align="center">models.DateTimeField</td><td align="center">日期（datetime）类型</td></tr><tr><td align="center">models.DecimalField</td><td align="center">十进制小数类型</td></tr><tr><td align="center">models.EmailField</td><td align="center">字符串类型（正则表达式邮箱）</td></tr><tr><td align="center">models.FloatField</td><td align="center">浮点类型</td></tr><tr><td align="center">models.IntegerField</td><td align="center">整数类型</td></tr><tr><td align="center">models.BigIntegerField</td><td align="center">长整数类型</td></tr><tr><td align="center">models.IPAddressField</td><td align="center">字符串类型（IPV4正则表达式）</td></tr><tr><td align="center">models.GenericIPAddressField</td><td align="center">字符串类型，参数protocol可以是: both，IPv4 和ipv6，验证IP地址</td></tr><tr><td align="center">models.NullBooleanField</td><td align="center">允许为空的布尔类型</td></tr><tr><td align="center">models.PositivelntegerField</td><td align="center">正整数的整数类型</td></tr><tr><td align="center">models.PositiveSmallIntegerField</td><td align="center">小正整数类型</td></tr><tr><td align="center">models.SlugField</td><td align="center">包含字母、数字、下曲线和连字符的字符串， 常用于URL</td></tr><tr><td align="center">models.SmaIlIntegerField</td><td align="center">小整数类型， 取值范围C -32,768—+32,767 )</td></tr><tr><td align="center">models.TextField</td><td align="center">长文本类型</td></tr><tr><td align="center">models. TimeField</td><td align="center">时间类型， 显东时分秒HH:MM[:ss[ .uuuuuu]]</td></tr><tr><td align="center">models. URLField</td><td align="center">字符串， 地址为正则表达式</td></tr><tr><td align="center">models.Binary Field</td><td align="center">二进制数据类型</td></tr><tr><td align="center">-</td><td align="center">-</td></tr><tr><td align="center"><strong>表字段参数及说明</strong></td><td align="center"><strong>参数说明</strong></td></tr><tr><td align="center">Null</td><td align="center">如为True，字段是否可以为空</td></tr><tr><td align="center">Blank</td><td align="center">如为True，设置添加数据时可以允许空值</td></tr><tr><td align="center">Default</td><td align="center">设置默认值</td></tr><tr><td align="center">primary_key</td><td align="center">如为True，将字段设置成主键</td></tr><tr><td align="center">db_column</td><td align="center">设置数据库中的字段名称</td></tr><tr><td align="center">Unique</td><td align="center">如为True，将字段设置成唯一属性，默认为False</td></tr><tr><td align="center">db_index</td><td align="center">如为True，为字段添加数据库索引</td></tr><tr><td align="center">verbose_name</td><td align="center">设置字段的显示名称,别名</td></tr><tr><td align="center">related_name</td><td align="center">关联对象反向引用描述符，用于多表查询，可解决一个数据表有两个外键同时指向另一个数据表而出现重名的问题</td></tr></tbody></table><p>拓：表结构设计</p><ul><li><em>不会经常变化的值放在内存：choices形式</em>，避免跨表性能低</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">choices形式</span><br><span class="line">category_choices = (</span><br><span class="line">    (1,&apos;咨询&apos;),</span><br><span class="line">    (2,&apos;公司动态&apos;),</span><br><span class="line">    (3,&apos;分享&apos;),</span><br><span class="line">    (4,&apos;答疑&apos;),</span><br><span class="line">    (5,&apos;其他&apos;)</span><br><span class="line">)</span><br><span class="line">category = models.IntegerField(verbose_name=&apos;分类&apos;,choices=category_choices)</span><br></pre></td></tr></table></figure><ul><li>分表：如果表中列太多/大量内容可以选择水平分表</li><li>表自关联</li></ul><blockquote><p>关系模型</p></blockquote><p><a href="https://www.jianshu.com/p/f5200ad4df90" target="_blank" rel="noopener">关系型数据库的关系包括三种类型</a>：</p><ul><li>ForeignKey：一对多，将字段定义在多的一端中。</li><li>ManyToManyField：多对多，将字段定义在任意一端中。</li><li>OneToOneField：一对一，将字段定义在任意一端中</li></ul><p>举例：一对多关系</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ServerInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    server_hostname = models.CharField(max_length=<span class="number">20</span>, default=<span class="literal">None</span>)</span><br><span class="line">    server_intranet_ip = models.CharField(max_length=<span class="number">20</span>, default=<span class="literal">None</span>)</span><br><span class="line">    server_internet_ip = models.CharField(max_length=<span class="number">20</span>, default=<span class="literal">None</span>)</span><br><span class="line">    server_shelves_date = models.DateField(auto_now_add=<span class="literal">True</span>) <span class="comment"># 数据加入时间</span></span><br><span class="line">    update_time = models.DateTimeField(auto_now=<span class="literal">True</span>) <span class="comment"># 数据更新时间</span></span><br><span class="line">    is_delete = models.BooleanField(default=<span class="literal">False</span>) <span class="comment"># 逻辑删除</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiddlewareInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    port = models.IntegerField()</span><br><span class="line">    server = models.ForeignKey(<span class="string">'ServerInfo'</span>,on_delete=models.CASCADE, default=<span class="literal">None</span>)</span><br><span class="line">    shelves_date = models.DateTimeField(auto_now_add=<span class="literal">True</span>) <span class="comment"># 数据加入时间</span></span><br><span class="line">    update_time = models.DateTimeField(auto_now=<span class="literal">True</span>)  <span class="comment"># 数据更新时间</span></span><br><span class="line">    is_delete = models.BooleanField(default=<span class="literal">False</span>) <span class="comment"># 逻辑删除</span></span><br></pre></td></tr></table></figure><h3 id="5-urls-py模块"><a href="#5-urls-py模块" class="headerlink" title="5. urls.py模块"></a>5. urls.py模块</h3><p><a href="https://www.cnblogs.com/cpl9412290130/p/9611293.html" target="_blank" rel="noopener">关于路由url，path，re_path的说明</a></p><p>在新版本Django2.x中，url的路由表示用path和re_path代替，<br>模块的导入由django1.x版本的 <code>from django.conf.urls import url,include</code><br>变成现在的Django2.x中的 <code>from django.urls import path, re_path, include</code>。</p><p><strong>path中不能有正则表达式，不然会找不到页面，此时可以使用re_path</strong></p><p>path(‘delete/(\d+)’, views.delete), # 删除点击的图书,path中有正则，找不到页面<br>使用re_path可以解决这个情况<br>re_path(‘delete/(\d+)’, views.delete), # 删除点击的图书</p><h3 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h3><p>urls.py模块 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 管理员后台</span></span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">    <span class="comment"># as_view()是将类作为view</span></span><br><span class="line">    url(<span class="string">r'^info/'</span>, views.InfoView.as_view()),</span><br><span class="line">    url(<span class="string">r'^drf/info/'</span>, views.DrfInfoView.as_view()),</span><br><span class="line">    url(<span class="string">r'^drf/category/'</span>, views.DrfCategoryView.as_view()),</span><br><span class="line">    <span class="comment"># 获取一条数据</span></span><br><span class="line">    url(<span class="string">r'^drf/category/$'</span>, views.DrfCategoryView.as_view()),</span><br><span class="line">    url(<span class="string">r'^drf/category/(?P&lt;pk&gt;\d+)/$'</span>, views.DrfCategoryView.as_view()),</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>接口：实现访问接口时，创建一个文章类型</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> Category, Article</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrfCategoryView</span><span class="params">(APIView)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""增加一条分类信息"""</span></span><br><span class="line">        Category.objects.create(**request.data)</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">'成功'</span>)</span><br></pre></td></tr></table></figure><ul><li>接口：获取所有文章类型</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrfCategoryView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""获取所有文章分类"""</span></span><br><span class="line">        queryset = Category.objects.all().values(<span class="string">'id'</span>,<span class="string">'name'</span>)</span><br><span class="line">        data_list = list(queryset)</span><br><span class="line">        <span class="keyword">return</span> Response(data_list)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""增加一条分类信息"""</span></span><br><span class="line">        Category.objects.create(**request.data)</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">'成功'</span>)</span><br></pre></td></tr></table></figure><ul><li>接口：获取一条文章类型的详细信息</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> api <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.forms.models <span class="keyword">import</span> model_to_dict</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrfCategoryView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""获取所有文章分类/单个文章分类"""</span></span><br><span class="line">        pk = kwargs.get(<span class="string">'pk'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pk:</span><br><span class="line">            queryset = models.Category.objects.all().values(<span class="string">'id'</span>,<span class="string">'name'</span>)</span><br><span class="line">            data_list = list(queryset)</span><br><span class="line">            <span class="keyword">return</span> Response(data_list)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            category_object = models.Category.objects.filter(id=pk).first()</span><br><span class="line">            data = model_to_dict(category_object)</span><br><span class="line">            <span class="keyword">return</span> Response(data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""增加一条分类信息"""</span></span><br><span class="line">        models.Category.objects.create(**request.data)</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">'成功'</span>)</span><br></pre></td></tr></table></figure><ul><li>接口：文章分类的更新和删除</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> api <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^drf/category/$'</span>, views.DrfCategoryView.as_view()),</span><br><span class="line">    url(<span class="string">r'^drf/category/(?P&lt;pk&gt;\d+)/$'</span>, views.DrfCategoryView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>views.py模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> api <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.forms.models <span class="keyword">import</span> model_to_dict</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrfCategoryView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""获取所有文章分类/单个文章分类"""</span></span><br><span class="line">        pk = kwargs.get(<span class="string">'pk'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pk:</span><br><span class="line">            queryset = models.Category.objects.all().values(<span class="string">'id'</span>,<span class="string">'name'</span>)</span><br><span class="line">            data_list = list(queryset)</span><br><span class="line">            <span class="keyword">return</span> Response(data_list)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            category_object = models.Category.objects.filter(id=pk).first()</span><br><span class="line">            data = model_to_dict(category_object)</span><br><span class="line">            <span class="keyword">return</span> Response(data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""增加一条分类信息"""</span></span><br><span class="line">        models.Category.objects.create(**request.data)</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">'成功'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""删除"""</span></span><br><span class="line">        pk = kwargs.get(<span class="string">'pk'</span>)</span><br><span class="line">        models.Category.objects.filter(id=pk).delete()</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">'删除成功'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""更新"""</span></span><br><span class="line">        pk = kwargs.get(<span class="string">'pk'</span>)</span><br><span class="line">        models.Category.objects.filter(id=pk).update(**request.data)</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">'更新成功'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>总是招惹病态RSA、AES、MD5、Eval的我该何去何从</title>
      <link href="/2020/07/18/Javascript%E7%AF%87%E7%AB%A0%E5%8D%81%E4%BA%8C/"/>
      <url>/2020/07/18/Javascript%E7%AF%87%E7%AB%A0%E5%8D%81%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<p>前端虽然开源， 但是由于前端代码量很多，也有一些特殊的保护代码的方法，其中Eval、js混淆是常用的方式，但是在大的互联网产品上用得很少，因为前端加密（RSA、AES、MD5等）是为了保证数据传输中的安全性，而非要让人难以模仿数据传输请求。<br><strong>本章内容：</strong></p><blockquote><p>1.Eval加密<br>2.RSA加密原理<br>3.其它常见的加密方式</p></blockquote><a id="more"></a><h3 id="1-Eval加密"><a href="#1-Eval加密" class="headerlink" title="1.Eval加密"></a>1.Eval加密</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;前端中的js混淆、eval对于专业的人来说形同虚设，所以也没必要做混淆和eval，并且对于代码维护是及其不利的，所以在接触的百度、腾讯、京东的一些产品上没遇到过上面两种问题。<br>js中的eval()方法就是一个js语言的执行器，它能把其中的参数按照JavaScript语法进行解析并执行，简单来说就是把原本的js代码变成了eval的参数，变成参数后代码就成了字符串，其中的一些字符就会被按照特定格式“编码”。</p><p>如何实现eval加密呢？其实利用<a href="http://www.oicqzone.com/tool/eval/" target="_blank" rel="noopener">Eval Encode/Decode工具网站</a></p><ul><li>将我们编写好的加密函数放置Eval网站中，选择<code>Dean Edwards Packer方式编码</code></li><li>加密结果展示</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="function"><span class="keyword">function</span>(<span class="params">p,a,c,k,e,r</span>)</span>&#123;e=<span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123;<span class="keyword">return</span>(c&lt;<span class="number">62</span>?<span class="string">''</span>:e(<span class="built_in">parseInt</span>(c/<span class="number">62</span>)))+((c=c%<span class="number">62</span>)&gt;<span class="number">35</span>?<span class="built_in">String</span>.fromCharCode(c+<span class="number">29</span>):c.toString(<span class="number">36</span>))&#125;;<span class="keyword">if</span>(<span class="string">'0'</span>.replace(<span class="number">0</span>,e)==<span class="number">0</span>)&#123;<span class="keyword">while</span>(c--)r[e(c)]=k[c];k=[<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> r[e]||e&#125;];e=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">'[578b-dhj-mpqv-zB-P]'</span>&#125;;c=<span class="number">1</span>&#125;;<span class="keyword">while</span>(c--)<span class="keyword">if</span>(k[c])p=p.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'\\b'</span>+e(c)+<span class="string">'\\b'</span>,<span class="string">'g'</span>),k[c]);<span class="keyword">return</span> p&#125;(<span class="string">'5 l=&#123;b:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",E:v(e)&#123;5 t="";5 n,r,i,s,o,u,a;5 f=0;e=l.F(e);B(f&lt;e.w)&#123;n=e.c(f++);r=e.c(f++);i=e.c(f++);s=n&gt;&gt;2;o=(n&amp;3)&lt;&lt;4|r&gt;&gt;4;u=(r&amp;C)&lt;&lt;2|i&gt;&gt;6;a=i&amp;k;d(G(r))&#123;u=a=x&#125;m d(G(i))&#123;a=x&#125;t=t+h.b.j(s)+h.b.j(o)+h.b.j(u)+h.b.j(a)&#125;y t&#125;,H:v(e)&#123;5 t="";5 n,r,i;5 s,o,u,a;5 f=0;e=e.I(/[^A-Za-z0-9+/=]/g,"");B(f&lt;e.w)&#123;s=h.b.z(e.j(f++));o=h.b.z(e.j(f++));u=h.b.z(e.j(f++));a=h.b.z(e.j(f++));n=s&lt;&lt;2|o&gt;&gt;4;r=(o&amp;C)&lt;&lt;4|u&gt;&gt;2;i=(u&amp;3)&lt;&lt;6|a;t=t+7.8(n);d(u!=x)&#123;t=t+7.8(r)&#125;d(a!=x)&#123;t=t+7.8(i)&#125;&#125;t=l.J(t);y t&#125;,F:v(e)&#123;e=e.I(/rn/g,"n");5 t="";for(5 n=0;n&lt;e.w;n++)&#123;5 r=e.c(n);d(r&lt;p)&#123;t+=7.8(r)&#125;m d(r&gt;127&amp;&amp;r&lt;2048)&#123;t+=7.8(r&gt;&gt;6|192);t+=7.8(r&amp;k|p)&#125;m&#123;t+=7.8(r&gt;&gt;12|K);t+=7.8(r&gt;&gt;6&amp;k|p);t+=7.8(r&amp;k|p)&#125;&#125;y t&#125;,J:v(e)&#123;5 t="";5 n=0;5 r=c1=q=0;B(n&lt;e.w)&#123;r=e.c(n);d(r&lt;p)&#123;t+=7.8(r);n++&#125;m d(r&gt;191&amp;&amp;r&lt;K)&#123;q=e.c(n+1);t+=7.8((r&amp;31)&lt;&lt;6|q&amp;k);n+=2&#125;m&#123;q=e.c(n+1);L=e.c(n+2);t+=7.8((r&amp;C)&lt;&lt;12|(q&amp;k)&lt;&lt;6|L&amp;k);n+=3&#125;&#125;y t&#125;&#125;5 M=\'Hello World!\';5 D=l.E(M);N.O(D);5 P=l.H(D);N.O(P);'</span>,[],<span class="number">52</span>,<span class="string">'|||||var||String|fromCharCode|||_keyStr|charCodeAt|if||||this||charAt|63|Base64|else|||128|c2|||||function|length|64|return|indexOf||while|15|encodedString|encode|_utf8_encode|isNaN|decode|replace|_utf8_decode|224|c3|string|console|log|decodedString'</span>.split(<span class="string">'|'</span>),<span class="number">0</span>,&#123;&#125;))</span><br></pre></td></tr></table></figure><p>对于js混淆很好理解就是，把其中的变量、方法位置顺序打乱，但是又用一些无关的变量或者方法来保证执行顺序，这种js混淆的也很好处理，复制完整的混淆代码去js混淆还原网站还原</p><h3 id="2-RSA加密原理"><a href="#2-RSA加密原理" class="headerlink" title="2.RSA加密原理"></a>2.RSA加密原理</h3><p>RSA：非对称加密算法，号称地球上最安全的加密算法，首先需要了解一点数学背景。</p><h4 id="数论知识介绍"><a href="#数论知识介绍" class="headerlink" title="数论知识介绍"></a>数论知识介绍</h4><p>其实RSA算法加解密其实就是两个公式，只是为了理解这两个公式我们需要学习数论中的四个概念：互质、欧拉函数、欧拉定理、模反元素</p><p>这里就不再赘诉相关数学背景了，但是请务必要理解这些概念，贴一个我觉着讲得特别清晰的概念，便于理解：</p><p><a href="https://blog.csdn.net/u014044812/article/details/80782448" target="_blank" rel="noopener">https://blog.csdn.net/u014044812/article/details/80782448</a></p><h4 id="RSA密匙生成过程"><a href="#RSA密匙生成过程" class="headerlink" title="RSA密匙生成过程"></a>RSA密匙生成过程</h4><ol><li>随机选择两个不等的质数p和q</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. 计算p与q的乘积n</span><br><span class="line"></span><br><span class="line">```text</span><br><span class="line">n = p*q</span><br><span class="line">n的长度就是密钥长度，然后把n写成二进制，共有多少位，这个密钥就有多少位，</span><br><span class="line">在一般场景中rsa密钥一般是1024位，重要场合位2048位</span><br></pre></td></tr></table></figure><ol start="3"><li><p>计算n的欧拉函数φ(n)</p></li><li><p>随机选择一个整数e，条件是1&lt;e&lt;φ(n),且e与φ(n)互质</p></li><li><p>计算e对于φ(n)的模反元素d</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ed-kφ(n)=1</span><br></pre></td></tr></table></figure><h3 id="3-其它常见的加密方式"><a href="#3-其它常见的加密方式" class="headerlink" title="3.其它常见的加密方式"></a>3.其它常见的加密方式</h3><blockquote><p>对称加密</p></blockquote><p>1976年以前，所有的加密方法都是同一种模式即对称加密，它采用了对称密码编码技术。它的特点是文件加密和解密使用相同的密钥，即加密密钥也可以用作解密密钥，这种方法在密码学中叫做对称加密算法，对称加密算法使用起来简单快捷，密钥较短，且破译困难。</p><p><img src="https://img-blog.csdn.net/20180618214056767?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQwNDQ4MTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="对称加密演示图"></p><ul><li>优点：对称加密算法的优点是算法公开、计算量小、加密速度快、加密效率高。</li><li>缺点：在数据传送前，发送方和接收方必须商定好秘钥，然后双方保存好秘钥。如果一方的秘钥被泄露，那么加密信息也就不安全了</li><li>使用场景：本地数据加密、https通信、网络传输等</li><li>常见算法：AES、DES、3DES、DESX、Blowfish、IDEA、RC4、RC5、RC6</li></ul><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><a href="https://www.cnblogs.com/yuan233/p/10787469.html" target="_blank" rel="noopener">rsa加密算法及js的JSEncrypt实现前端加密</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RSA </tag>
            
            <tag> Eval </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS属性补充(Ⅲ)</title>
      <link href="/2020/06/28/html%E4%B8%8Ecss(%E2%85%A4)/"/>
      <url>/2020/06/28/html%E4%B8%8Ecss(%E2%85%A4)/</url>
      
        <content type="html"><![CDATA[<p><strong>本章内容：</strong></p><blockquote><p>1.移动端div左右滑动展示<br>2.跨域问题<br>3.css头像制作<br>4.点击关闭悬浮框功能</p></blockquote><a id="more"></a><h3 id="1-移动端div左右滑动展示"><a href="#1-移动端div左右滑动展示" class="headerlink" title="1.移动端div左右滑动展示"></a>1.移动端div左右滑动展示</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于手机屏幕的宽度有限，内容太多移动设备一行装不下的，所以很多移动端网站的导航栏都有左右滑动效果，下面我就用CSS+HTML实现移动端div左右滑动展示。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tabBar"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>三层嵌套模型：</p><ul><li>box层： 各个div模块</li><li>tabBar： 滚动条隐藏层</li><li>app层： .box::-webkit-scrollbar的兼用性较差，有些浏览器无效(如：IE等)，容器外面再嵌套一层 overflow:hidden 内部内容再限制尺寸和外部嵌套层一样，就变相隐藏了</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.app</span>&#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">118px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tabBar</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;<span class="comment">/*文本不会换行，文本会在在同一行上继续*/</span></span><br><span class="line">    <span class="attribute">overflow-y</span>: auto;<span class="comment">/*可滑动*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">8em</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">3%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block; <span class="comment">/*行内块级元素*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-跨域问题"><a href="#2-跨域问题" class="headerlink" title="2.跨域问题"></a>2.跨域问题</h3><ol><li><p>ajax只能下载同源的数据，跨源的数据是禁止下载的。同源策略：同协议，同域名（ip），同端口号</p></li><li><p>html的<strong>src属性是可以跨域的，没有同源策略约束</strong>，比如可以任意访问其它数据源的图片url，script标签的src属性</p></li><li><p>对于计算机来说，文件的后缀是没有任何用处的，后缀名的作用是快速识别应该用什么软件打开</p></li><li><p>jsonp跨域的使用流程</p></li></ol><p><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/kuayu.jpg" alt=""></fancybox></p><p>跨域参考文章：</p><ul><li><a href="https://www.cnblogs.com/PheonixHkbxoic/p/5760838.html" target="_blank" rel="noopener">浏览器拦截跨域请求处理方法</a></li><li><a href="https://segmentfault.com/a/1190000015597029" target="_blank" rel="noopener">不要再问我跨域的问题了</a></li></ul><p>举例说明：目录结构</p><pre>nmsl    |___nmsl.txt    |___nmsl.json    |___跨域问题.html</pre><p>   先导入Ajax的cdn文件<br>      &lt;script src=”<a href="https://unpkg.com/axios/dist/axios.min.js&quot;&gt;\" target="_blank" rel="noopener">https://unpkg.com/axios/dist/axios.min.js&quot;&gt;\</a>&lt;/script&gt;</p><p>   接下来axios的简单举例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"xon"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> axios(&#123;</span></span><br><span class="line"><span class="actionscript">                url:<span class="string">"./nmsl.json"</span>,</span></span><br><span class="line"><span class="actionscript">                method:<span class="string">"get"</span>,</span></span><br><span class="line">                headers:&#123;</span><br><span class="line"><span class="actionscript">                    <span class="string">'x-requested-with'</span>:<span class="string">"XMLHttpRequest"</span>,</span></span><br><span class="line"><span class="actionscript">                    <span class="string">"x-csrf-token"</span>: <span class="string">"SJoNf6r3hhcqe0TYsMArfcH6lth6L2htr14ZiruL"</span>,</span></span><br><span class="line"><span class="actionscript">                    <span class="string">"Access-Control-Allow-Origin"</span>:<span class="string">"*"</span></span></span><br><span class="line">                &#125;,</span><br><span class="line">                timeout:5000</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        axios.all([getInfo()])</span><br><span class="line"><span class="actionscript">        .then(axios.spread(<span class="function"><span class="keyword">function</span> <span class="params">(response)</span> </span>&#123;</span></span><br><span class="line"><span class="vbscript">            console.<span class="built_in">log</span>(<span class="built_in">response</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">"xon"</span>).innerHTML = (response.data)[<span class="string">"page40"</span>][<span class="number">6</span>];</span></span><br><span class="line"></span><br><span class="line">        &#125;))</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-css头像制作"><a href="#3-css头像制作" class="headerlink" title="3.css头像制作"></a>3.css头像制作</h3><h4 id="3-1-div里面设置背景图片"><a href="#3-1-div里面设置背景图片" class="headerlink" title="3.1 div里面设置背景图片"></a>3.1 div里面设置背景图片</h4><p>avatar层来包裹头像</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./demo.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"avatar"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./2.jpg"</span> <span class="attr">alt</span>=<span class="string">"touxiang"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.app</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.avatar</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(./2.jpg);</span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">    <span class="comment">/*设置边角*/</span></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-object-fit属性"><a href="#3-2-object-fit属性" class="headerlink" title="3.2 object-fit属性"></a>3.2 <a href="https://www.runoob.com/cssref/pr-object-fit.html" target="_blank" rel="noopener">object-fit属性</a></h4><p>object-fit 属性指定元素的内容应该如何去适应指定容器的高度与宽度。</p><p>object-fit 一般用于 img 和 video 标签，一般可以对这些原素进行保留原始比例的剪切、缩放或者直接进行拉伸等<br>object-position 属性一般与 object-fit一起使用，用来设置元素的位置。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.app</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.inner</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">object-fit</span>: cover; </span><br><span class="line">    <span class="attribute">object-position</span>: left;<span class="comment">/*可能有时候图片不是从头部开始截图的 所以需要定位一下*/</span></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终成果：<br><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/object.jpg" alt=""></fancybox></p><h3 id="4-点击关闭悬浮框功能"><a href="#4-点击关闭悬浮框功能" class="headerlink" title="4.点击关闭悬浮框功能"></a>4.点击关闭悬浮框功能</h3><p>设计思路：准备两张图片，一张是带×提示关闭按钮，另一张是广告内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        html&#123;</span><br><span class="line">            height: 3800px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-image</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">to</span> <span class="selector-tag">top</span>, <span class="selector-id">#d9afd9</span> 0%, <span class="selector-id">#97d9e1</span> 100%);</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.app</span>&#123;</span></span><br><span class="line">            position: fixed;</span><br><span class="line">            right: 1em;</span><br><span class="line">            bottom: 1em;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.app</span> <span class="selector-tag">i</span>&#123;</span></span><br><span class="line">            margin-left: 80%;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">id</span>=<span class="string">"outer"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./bullet.png"</span> <span class="attr">alt</span>=<span class="string">"点击取消"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./bee.png"</span> <span class="attr">alt</span>=<span class="string">"广告弹窗"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"outer"</span>);</span></span><br><span class="line"><span class="actionscript">            btn.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> img = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"app"</span>);</span></span><br><span class="line"><span class="actionscript">                img[<span class="number">0</span>].style.display = <span class="string">"none"</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>青春猪头少年不会遇到Ajax异步请求</title>
      <link href="/2020/06/24/%E9%9D%92%E6%98%A5%E7%8C%AA%E5%A4%B4%E5%B0%91%E5%B9%B4%E4%B8%8D%E4%BC%9A%E9%81%87%E5%88%B0Ajax%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82/"/>
      <url>/2020/06/24/%E9%9D%92%E6%98%A5%E7%8C%AA%E5%A4%B4%E5%B0%91%E5%B9%B4%E4%B8%8D%E4%BC%9A%E9%81%87%E5%88%B0Ajax%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html><head>  <meta charset="utf-8">  <meta http-equiv="X-UA-Compatible" content="IE=edge" />    <title>AhriLove</title>    <meta name="HandheldFriendly" content="True" />  <meta name="apple-mobile-web-app-capable" content="yes">  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">  <!-- meta -->    <!-- link -->  <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.css" />    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/node-waves@0.7.6/dist/waves.min.css">    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@5.10.1/css/all.min.css">      <link rel="shortcut icon" type='image/x-icon' href="https://cdn.jsdelivr.net/gh/FioraLove/CDN@1.0/万圣节鬼魂.ico">        <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-material-x@19.10.22/css/style.css">    <script>    function setLoadingBarProgress(num) {      document.getElementById('loading-bar').style.width=num+"%";    }  </script>      <script>    (function(){        var bp = document.createElement('script');        var curProtocol = window.location.protocol.split(':')[0];        if (curProtocol === 'https') {            bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';        }        else {            bp.src = 'http://push.zhanzhang.baidu.com/push.js';        }        var s = document.getElementsByTagName("script")[0];        s.parentNode.insertBefore(bp, s);    })();    </script></head><!-- 样式二（飘动的彩带） --><meta name="baidu-site-verification" content="iMtC1b2Kmy" /><script src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@2.0.2/js/instantclick-1.2.2.js" type="module"></script><body>      <div class="cover-wrapper">    <cover class='cover post half'>                <img class='logo' src='https://cdn.jsdelivr.net/gh/FioraLove/Images/D:/data/imagesaaa.png'/>  <div class="m_search">    <form name="searchform" class="form u-search-form">      <input type="text" class="input u-search-input" placeholder="搜索" />      <i class="icon fas fa-search fa-fw"></i>    </form>  </div><div class='menu navgation'>  <ul class='h-list'>                  <li>          <a class="nav home" href="/"                                    id="home">            <i class='fas fa-home fa-fw'></i>&nbsp;主页          </a>        </li>              <li>          <a class="nav home" href="/friends/"                          rel="nofollow"                                    id="friends">            <i class='fas fa-users fa-fw'></i>&nbsp;朋友          </a>        </li>              <li>          <a class="nav home" href="/about/"                          rel="nofollow"                                    id="about">            <i class='fas fa-info-circle fa-fw'></i>&nbsp;关于          </a>        </li>            </ul></div>          </cover>    <header class="l_header material">  <div id="loading-bar-wrapper">    <div id="loading-bar" class="material"></div>  </div><div class='wrapper'><div class="nav-main container container--flex">      <a class="logo flat-box" href='/' >                  AhriLove              </a><div class='menu navgation'><ul class='h-list'>              <li><a class="nav flat-box" href="/"                                                      id="home"><i class='fas fa-grin fa-fw'></i>&nbsp;博文</a></li>        <li><a class="nav flat-box" href="/categories/"                                      rel="nofollow"                                                      id="categories"><i class='fas fa-folder-open fa-fw'></i>&nbsp;分类</a></li>        <li><a class="nav flat-box" href="/tags/"                                      rel="nofollow"                                                      id="tags"><i class='fas fa-ribbon fa-fw'></i>&nbsp;标签</a></li>        <li><a class="nav flat-box" href="/friends/"                                      rel="nofollow"                                                      id="friends"><i class='fab fa-suse fa-fw'></i>&nbsp;友链</a></li>        <li><a class="nav flat-box" href="/plan/"                                      rel="nofollow"                                                      id="plan"><i class='fas fa-paper-plane fa-fw'></i>&nbsp;每日计划</a></li>        <li><a class="nav flat-box" href="/mylist/"                                      rel="nofollow"                                                      id="mylist"><i class='fas fa-archive fa-fw'></i>&nbsp;资料文档</a></li>        <li><a class="nav flat-box" href="/feiyan2020/"                                      rel="nofollow"                                                      id="feiyan2020"><i class='far fa-heart fa-fw'></i>&nbsp;肺炎疫情图</a></li>            </ul></div><div class="m_search"><form name="searchform" class="form u-search-form"><input type="text" class="input u-search-input" placeholder="搜索" /><i class="icon fas fa-search fa-fw"></i></form></div><ul class='switcher h-list'><li class='s-search'><a class="fas fa-search fa-fw" href='javascript:void(0)'></a></li><li class='s-menu'><a class="fas fa-bars fa-fw" href='javascript:void(0)'></a></li></ul></div><div class='nav-sub container container--flex'><a class="logo flat-box"></a><ul class='switcher h-list'><li class='s-comment'><a class="flat-btn fas fa-comments fa-fw" href='javascript:void(0)'></a></li>                  <li class='s-toc'><a class="flat-btn fas fa-list fa-fw" href='javascript:void(0)'></a></li>        </ul></div></div></header><aside class="menu-phone">    <header><nav class="menu navgation">      <ul>                              <li><a class="nav flat-box" href="/"                                                id="home"><i class='fas fa-clock fa-fw'></i>&nbsp;近期文章</a>            </li>                      <li><a class="nav flat-box" href="/archives/"                                  rel="nofollow"                                                id="archives"><i class='fas fa-archive fa-fw'></i>&nbsp;文章归档</a>            </li>                      <li><a class="nav flat-box" href="https://github.com/FioraLove?tab=repositories"                                                id="https:github.comFioraLove?tab=repositories"><i class='fas fa-code-branch fa-fw'></i>&nbsp;开源项目</a>            </li>                      <li><a class="nav flat-box" href="/friends/"                                  rel="nofollow"                                                id="friends"><i class='fas fa-link fa-fw'></i>&nbsp;我的友链</a>            </li>                      <li><a class="nav flat-box" href="https://xaoxuu.com/wiki/material-x/"                                  rel="nofollow"                                                id="https:xaoxuu.comwikimaterial-x"><i class='fas fa-book fa-fw'></i>&nbsp;主题文档</a>            </li>                      <li><a class="nav flat-box" href="/feiyan2020/"                                  rel="nofollow"                                                id="feiyan2020"><i class='far fa-heart fa-fw'></i>&nbsp;肺炎疫情图</a>            </li>                      <li><a class="nav flat-box" href="/about/"                                  rel="nofollow"                                                id="about"><i class='fas fa-info-circle fa-fw'></i>&nbsp;关于小站</a>            </li>                       </ul></nav>    </header></aside><script>setLoadingBarProgress(40);</script>  </div>  <div class="l_body">    <div class='body-wrapper'>      <div class='l_main'>    <article id="post" class="post white-box article-type-post" itemscope itemprop="blogPost">      <section class='meta'>            <div class="meta" id="header-meta">                    <h1 class="title">      <a href="/2020/06/11/Javascript%E7%AF%87%E7%AB%A0%E5%8D%81/">        青春猪头少年不会遇到Ajax异步请求      </a>    </h1>              <div class='new-meta-box'>                                                  <div class='new-meta-item author'>          <a href="/" rel="nofollow">                  <img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/D:/data/imagesNaruto.jpg">                <p>陈浩东</p>      </a>      </div>                                        <div class="new-meta-item date">  <a class='notlink'>    <i class="fas fa-calendar-alt" aria-hidden="true"></i>    <p>2020-06-11</p>  </a></div>                                            <div class='new-meta-item category'>    <a href='/categories/javascript/' rel="nofollow">      <i class="fas fa-folder-open" aria-hidden="true"></i>      <p>javascript</p>    </a>  </div>                                              <div class="new-meta-item browse busuanzi">      <a class='notlink'>        <i class="fas fa-eye" aria-hidden="true"></i>        <p>          <span id="busuanzi_value_page_pv">            <i class="fas fa-spinner fa-spin fa-fw" aria-hidden="true"></i>          </span>        </p>      </a>    </div>                                                                  </div>              <hr>          </div>  </section>    <section class="article typo">      <div class="article-entry" itemprop="articleBody">        <p>Ajax全名为Asynchronous JavaScript And XML，Ajax 允许通过与场景后面的 Web 服务器交换数据来异步更新网页。这意味着可以更新网页的部分，而不需要重新加载整个页面.<br>归纳一下发送HTTP请求的技术方法大全<br><strong>本章内容：</strong></p><blockquote><p>1.Ajax工作原理<br>2.jQuery的$.post(),$.get()<br>3.vue的axios</p></blockquote><a id="more"></a><h3 id="1-原生Ajax"><a href="#1-原生Ajax" class="headerlink" title="1.原生Ajax"></a>1.原生Ajax</h3><p><fancybox><img src="https://www.w3school.com.cn/i/ajax.gif" alt="Ajax原理图"></fancybox></p><p>整个执行过程：<br>网页中发生一个事件（页面加载、按钮点击）<br>👇👇👇<br>由 JavaScript 创建 XMLHttpRequest 对象<br>👇👇👇<br>XMLHttpRequest 对象向 web 服务器发送请求<br>👇👇👇<br>服务器处理该请求<br>👇👇👇<br>服务器将响应发送回网页<br>👇👇👇<br>由 JavaScript 读取响应<br>👇👇👇<br>由 JavaScript 执行正确的动作（比如更新页面）</p><h4 id="1-XMLHttpRequest对象"><a href="#1-XMLHttpRequest对象" class="headerlink" title="1.XMLHttpRequest对象"></a>1.XMLHttpRequest对象</h4><p>Ajax的核心就是XMLHttpRequest对象，几乎所有的现代浏览器都支持，用于同幕后服务器交换数据，意味着可以更新网页部分内容，而不需要重新加载整个页面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> http;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)&#123;</span><br><span class="line">    <span class="comment">// 用于现代浏览器的代码</span></span><br><span class="line">   http = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// 应对老版本的IE浏览器</span></span><br><span class="line">    http = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>XMLHttpRequest对象方法与属性：</p><table><thead><tr><th>方法与属性</th><th>描述</th></tr></thead><tbody><tr><td><font color=#FF3030>XMLHttpRequest 对象方法</font></td><td></td></tr><tr><td>abort()</td><td>取消当前请求</td></tr><tr><td>getAllResponseHeaders()</td><td>返回头部信息</td></tr><tr><td>getResponseHeader()</td><td>返回头部信息</td></tr><tr><td>getAllResponseHeaders()</td><td>返回特定的头部信息</td></tr><tr><td><strong>open(method, url, async)</strong></td><td>规定请求: <br> method：请求类型 GET 或 POST <br> url：文件位置 <br> async：true（异步）或 false（同步）</td></tr><tr><td>send()</td><td>将请求发送到服务器，用于 GET 请求</td></tr><tr><td>send(string)</td><td>将请求发送到服务器，用于 POST 请求</td></tr><tr><td>setRequestHeader()</td><td>向要发送的报头添加标签/值对</td></tr><tr><td><font color=#FF3030>XMLHttpRequest 对象属性</font></td><td></td></tr><tr><td>onreadystatechange</td><td>定义当 readyState 属性发生变化时被调用的函数</td></tr><tr><td>readyState</td><td>保存 XMLHttpRequest 的状态:<br> 0：请求未初始化<br> 1：服务器连接已建立<br> 2：请求已收到<br>3：正在处理请求<br>4：请求已完成且响应已就绪</td></tr><tr><td>responseText</td><td>以字符串返回响应数据</td></tr><tr><td>responseXML</td><td>以 XML 数据返回响应数据</td></tr><tr><td>status</td><td>返回请求的状态号:<br> 200: “OK”<br>403: “Forbidden”<br>404: “Not Found” …</td></tr></tbody></table><h4 id="2-onreadystatechange-属性"><a href="#2-onreadystatechange-属性" class="headerlink" title="2.onreadystatechange 属性"></a>2.onreadystatechange 属性</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xhttp.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.readyState == <span class="number">4</span> &amp;&amp; <span class="keyword">this</span>.status == <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = <span class="keyword">this</span>.responseText;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhttp.open(<span class="string">"GET"</span>, <span class="string">"ajax_info.txt"</span>, <span class="literal">true</span>);</span><br><span class="line">xhttp.send();</span><br></pre></td></tr></table></figure><h4 id="3-setRequestHeader请求头设置"><a href="#3-setRequestHeader请求头设置" class="headerlink" title="3.setRequestHeader请求头设置"></a>3.setRequestHeader请求头设置</h4><p>如需像 HTML 表单那样 POST 数据，请通过 setRequestHeader() 添加一个 HTTP 头部。请在 send() 方法中规定您需要发送的数据：<br><strong>计算机传送的始终都是字符</strong></p><ol><li>urlencoded数据格式</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xhttp.open(<span class="string">"POST"</span>, <span class="string">"ajax_test.asp"</span>, <span class="literal">true</span>);</span><br><span class="line">xhttp.setRequestHeader(<span class="string">"Content-type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">xhttp.send(<span class="string">"fname=Bill&amp;lname=Gates"</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>传输json数据格式</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> body = <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">  a: <span class="string">'111'</span>,</span><br><span class="line">  b: <span class="string">'222'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/json'</span>);</span><br><span class="line">xhr.open(<span class="string">'POST'</span>, <span class="string">'url'</span>,<span class="literal">true</span>);</span><br><span class="line">xhr.send(body); <span class="comment">// http请求一般来说就是发送字符串，所以必须先将json转换为json字符串</span></span><br></pre></td></tr></table></figure><p><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/1591776585.jpg" alt=""></fancybox></p><h4 id="4-完整案例"><a href="#4-完整案例" class="headerlink" title="4.完整案例"></a>4.完整案例</h4><p>可以完善一下，封装成一个类似于jQuery的$.post方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadDoc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> xhttp = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  xhttp.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.readyState == <span class="number">4</span> &amp;&amp; <span class="keyword">this</span>.status == <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = <span class="keyword">this</span>.responseText;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  xhttp.open(<span class="string">"POST"</span>, <span class="string">"/demo/demo_post2.asp"</span>, <span class="literal">true</span>);</span><br><span class="line">  xhttp.setRequestHeader(<span class="string">"Content-type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">  xhttp.send(<span class="string">"fname=Bill&amp;lname=Gates"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-jQuery的-post-get"><a href="#2-jQuery的-post-get" class="headerlink" title="2. jQuery的$.post(),$.get()"></a>2. jQuery的$.post(),$.get()</h3><p>jQuery使用很简单，也封装的很好，这里就不再重复造轮子了，参考网址：<a href="https://www.cnblogs.com/sexintercourse/p/7017195.html" target="_blank" rel="noopener">https://www.cnblogs.com/sexintercourse/p/7017195.html</a></p><h3 id="3-vue的axios"><a href="#3-vue的axios" class="headerlink" title="3.vue的axios"></a>3.vue的axios</h3><p>因为vue.js中没有内置任何ajax请求方法。所以需要借助第三方资源库在发送ajax请求。比如vue-resource资源库和axios。详情请参考<a href="http://www.axios-js.com/zh-cn/docs/index.html" target="_blank" rel="noopener">axios官方文档</a></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>使用npm：npm install axios<br>使用bower: bower install axios<br>使用cdn: &lt;script src=”<a href="https://unpkg.com/axios/dist/axios.min.js&quot;&gt;" target="_blank" rel="noopener">https://unpkg.com/axios/dist/axios.min.js&quot;&gt;</a>&lt;/script&gt;</p><h4 id="执行get请求案例"><a href="#执行get请求案例" class="headerlink" title="执行get请求案例"></a>执行get请求案例</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为给定 ID 的 user 创建请求</span></span><br><span class="line">axios.get(<span class="string">'/user'</span>, &#123;</span><br><span class="line">    params: &#123;</span><br><span class="line">        ID: <span class="string">"123456"</span>,</span><br><span class="line">        PWD:<span class="string">"9527"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h4 id="执行post请求的案例"><a href="#执行post请求的案例" class="headerlink" title="执行post请求的案例"></a>执行post请求的案例</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 携带参数的post请求</span></span><br><span class="line">axios.post(<span class="string">'/user'</span>,data=&#123;</span><br><span class="line">    firstName: <span class="string">'Fred'</span>,</span><br><span class="line">    lastName: <span class="string">'FlintStone'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 获取响应结果</span></span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 异常捕获 </span></span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h4 id="执行多个并发请求"><a href="#执行多个并发请求" class="headerlink" title="执行多个并发请求"></a>执行多个并发请求</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserAccount</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> axios.get(<span class="string">'/user/12345'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserPermissions</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> axios.get(<span class="string">'/user/12345/permissions'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">axios.all([getUserAccount(), getUserPermissions()])</span><br><span class="line">   <span class="comment">// response1，2 分别代表并发请求的各响应函数 </span></span><br><span class="line">  .then(axios.spread(<span class="function"><span class="keyword">function</span> (<span class="params">response1, response2</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 两个请求现在都执行完成(业务代码模块)</span></span><br><span class="line">    <span class="built_in">console</span>.log(response1);</span><br><span class="line">    <span class="built_in">console</span>.log(response2);</span><br><span class="line">  &#125;));</span><br></pre></td></tr></table></figure><p>PS：上述发送Ajax请求的时，格式不统一，这里以后都统一一下，<strong>统一采用<code>axios(config)</code>传递配置参数来创建请求</strong>，如下所示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">    method:<span class="string">"post"</span>,</span><br><span class="line">    url:<span class="string">"https://AhriLove.top"</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        model: <span class="number">23</span>,</span><br><span class="line">        condition: condition,</span><br><span class="line">        field: <span class="string">"overdue_type as overdue_type,"</span></span><br><span class="line">                + <span class="string">"round(sum(overdue_money)/10000,2) as overdue_money"</span>,</span><br><span class="line">        group: <span class="string">"overdue_type"</span>,</span><br><span class="line">        having: <span class="string">"not ( round(sum(overdue_money)/10000,2)=0)"</span>,</span><br><span class="line">        showTotal: <span class="number">0</span>,</span><br><span class="line">        sortname: <span class="string">"overdue_money"</span>,</span><br><span class="line">        sortorder: <span class="string">"desc"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="axios-config-配置参数大全"><a href="#axios-config-配置参数大全" class="headerlink" title="axios(config)配置参数大全"></a>axios(config)配置参数大全</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">   <span class="comment">// `url` 是用于请求的服务器 URL</span></span><br><span class="line">  url: <span class="string">'/user'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `method` 是创建请求时使用的方法</span></span><br><span class="line">  method: <span class="string">'get'</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。</span></span><br><span class="line">  <span class="comment">// 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL</span></span><br><span class="line">  baseURL: <span class="string">'https://some-domain.com/api/'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `transformRequest` 允许在向服务器发送前，修改请求数据</span></span><br><span class="line">  <span class="comment">// 只能用在 'PUT', 'POST' 和 'PATCH' 这几个请求方法</span></span><br><span class="line">  <span class="comment">// 后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream</span></span><br><span class="line">  transformRequest: [<span class="function"><span class="keyword">function</span> (<span class="params">data, headers</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对 data 进行任意转换处理</span></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `transformResponse` 在传递给 then/catch 前，允许修改响应数据</span></span><br><span class="line">  transformResponse: [<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对 data 进行任意转换处理</span></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `headers` 是即将被发送的自定义请求头</span></span><br><span class="line">  headers: &#123;<span class="string">'X-Requested-With'</span>: <span class="string">'XMLHttpRequest'</span>&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `params` 是即将与请求一起发送的 URL 参数</span></span><br><span class="line">  <span class="comment">// 必须是一个无格式对象(plain object)或 URLSearchParams 对象</span></span><br><span class="line">  params: &#123;</span><br><span class="line">    ID: <span class="number">12345</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">   <span class="comment">// `paramsSerializer` 是一个负责 `params` 序列化的函数</span></span><br><span class="line">  <span class="comment">// (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)</span></span><br><span class="line">  paramsSerializer: <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Qs.stringify(params, &#123;<span class="attr">arrayFormat</span>: <span class="string">'brackets'</span>&#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `data` 是作为请求主体被发送的数据</span></span><br><span class="line">  <span class="comment">// 只适用于这些请求方法 'PUT', 'POST', 和 'PATCH'</span></span><br><span class="line">  <span class="comment">// 在没有设置 `transformRequest` 时，必须是以下类型之一：</span></span><br><span class="line">  <span class="comment">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span></span><br><span class="line">  <span class="comment">// - 浏览器专属：FormData, File, Blob</span></span><br><span class="line">  <span class="comment">// - Node 专属： Stream</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: <span class="string">'Fred'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `timeout` 指定请求超时的毫秒数(0 表示无超时时间)</span></span><br><span class="line">  <span class="comment">// 如果请求话费了超过 `timeout` 的时间，请求将被中断</span></span><br><span class="line">  timeout: <span class="number">1000</span>,</span><br><span class="line"></span><br><span class="line">   <span class="comment">// `withCredentials` 表示跨域请求时是否需要使用凭证</span></span><br><span class="line">  withCredentials: <span class="literal">false</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `adapter` 允许自定义处理请求，以使测试更轻松</span></span><br><span class="line">  <span class="comment">// 返回一个 promise 并应用一个有效的响应 (查阅 [response docs](#response-api)).</span></span><br><span class="line">  adapter: <span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line"> <span class="comment">// `auth` 表示应该使用 HTTP 基础验证，并提供凭据</span></span><br><span class="line">  <span class="comment">// 这将设置一个 `Authorization` 头，覆写掉现有的任意使用 `headers` 设置的自定义 `Authorization`头</span></span><br><span class="line">  auth: &#123;</span><br><span class="line">    username: <span class="string">'janedoe'</span>,</span><br><span class="line">    password: <span class="string">'s00pers3cret'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">   <span class="comment">// `responseType` 表示服务器响应的数据类型，可以是 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'</span></span><br><span class="line">  responseType: <span class="string">'json'</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `responseEncoding` indicates encoding to use for decoding responses</span></span><br><span class="line">  <span class="comment">// Note: Ignored for `responseType` of 'stream' or client-side requests</span></span><br><span class="line">  responseEncoding: <span class="string">'utf8'</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// `xsrfCookieName` 是用作 xsrf token 的值的cookie的名称</span></span><br><span class="line">  xsrfCookieName: <span class="string">'XSRF-TOKEN'</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `xsrfHeaderName` is the name of the http header that carries the xsrf token value</span></span><br><span class="line">  xsrfHeaderName: <span class="string">'X-XSRF-TOKEN'</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// `onUploadProgress` 允许为上传处理进度事件</span></span><br><span class="line">  onUploadProgress: <span class="function"><span class="keyword">function</span> (<span class="params">progressEvent</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do whatever you want with the native progress event</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `onDownloadProgress` 允许为下载处理进度事件</span></span><br><span class="line">  onDownloadProgress: <span class="function"><span class="keyword">function</span> (<span class="params">progressEvent</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对原生进度事件的处理</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">   <span class="comment">// `maxContentLength` 定义允许的响应内容的最大尺寸</span></span><br><span class="line">  maxContentLength: <span class="number">2000</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `validateStatus` 定义对于给定的HTTP 响应状态码是 resolve 或 reject  promise 。如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，promise 将被 resolve; 否则，promise 将被 rejecte</span></span><br><span class="line">  validateStatus: <span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> status &gt;= <span class="number">200</span> &amp;&amp; status &lt; <span class="number">300</span>; <span class="comment">// default</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `maxRedirects` 定义在 node.js 中 follow 的最大重定向数目</span></span><br><span class="line">  <span class="comment">// 如果设置为0，将不会 follow 任何重定向</span></span><br><span class="line">  maxRedirects: <span class="number">5</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `socketPath` defines a UNIX Socket to be used in node.js.</span></span><br><span class="line">  <span class="comment">// e.g. '/var/run/docker.sock' to send requests to the docker daemon.</span></span><br><span class="line">  <span class="comment">// Only either `socketPath` or `proxy` can be specified.</span></span><br><span class="line">  <span class="comment">// If both are specified, `socketPath` is used.</span></span><br><span class="line">  socketPath: <span class="literal">null</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `httpAgent` 和 `httpsAgent` 分别在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理。允许像这样配置选项：</span></span><br><span class="line">  <span class="comment">// `keepAlive` 默认没有启用</span></span><br><span class="line">  httpAgent: <span class="keyword">new</span> http.Agent(&#123; <span class="attr">keepAlive</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">  httpsAgent: <span class="keyword">new</span> https.Agent(&#123; <span class="attr">keepAlive</span>: <span class="literal">true</span> &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 'proxy' 定义代理服务器的主机名称和端口</span></span><br><span class="line">  <span class="comment">// `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据</span></span><br><span class="line">  <span class="comment">// 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。</span></span><br><span class="line">  proxy: &#123;</span><br><span class="line">    host: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">    port: <span class="number">9000</span>,</span><br><span class="line">    auth: &#123;</span><br><span class="line">      username: <span class="string">'mikeymike'</span>,</span><br><span class="line">      password: <span class="string">'rapunz3l'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `cancelToken` 指定用于取消请求的 cancel token</span></span><br><span class="line">  <span class="comment">// （查看后面的 Cancellation 这节了解更多）</span></span><br><span class="line">  cancelToken: <span class="keyword">new</span> CancelToken(<span class="function"><span class="keyword">function</span> (<span class="params">cancel</span>) </span>&#123;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/20200611104720.png" alt=""></fancybox></p>      </div>              <br>          <section class='meta' id="footer-meta">    <div class='new-meta-box'>                        <div class="new-meta-item date" itemprop="dateUpdated" datetime="2020-06-17T15:12:29+08:00">  <a class='notlink'>    <i class="fas fa-clock" aria-hidden="true"></i>    <p>更新于 2020年6月17日</p>  </a></div>                                    <div class="new-meta-item meta-tags"><a class="tag" href="/tags/js/" rel="nofollow"><i class="fas fa-tag" aria-hidden="true"></i><p>js</p></a></div>                                  <div class="new-meta-item share -mob-share-list">  <div class="-mob-share-list share-body">                  <a class="-mob-share-qq" title="QQ好友" rel="external nofollow noopener noreferrer"                    href="http://connect.qq.com/widget/shareqq/index.html?url=https://ahrilove.top/2020/06/11/Javascript%E7%AF%87%E7%AB%A0%E5%8D%81/&title=青春猪头少年不会遇到Ajax异步请求 | AhriLove&summary=Ajax全名为Asynchronous JavaScript And XML，Ajax 允许通过与场景后面的 Web 服务器交换数据来异步更新网页。这意味着可以更新网页的部分，而不需要重新加载整个页面.归纳一下发送HTTP请求的技术方法大全本章内容：1.Ajax工作原理2.jQuery的$.post(),$.get()3.vue的axios"                    >                      <img src="https://cdn.jsdelivr.net/gh/xaoxuu/assets@19.1.9/logo/128/qq.png">                  </a>                        <a class="-mob-share-qzone" title="QQ空间" rel="external nofollow noopener noreferrer"                    href="https://sns.qzone.qq.com/cgi-bin/qzshare/cgi_qzshare_onekey?url=https://ahrilove.top/2020/06/11/Javascript%E7%AF%87%E7%AB%A0%E5%8D%81/&title=青春猪头少年不会遇到Ajax异步请求 | AhriLove&summary=Ajax全名为Asynchronous JavaScript And XML，Ajax 允许通过与场景后面的 Web 服务器交换数据来异步更新网页。这意味着可以更新网页的部分，而不需要重新加载整个页面.归纳一下发送HTTP请求的技术方法大全本章内容：1.Ajax工作原理2.jQuery的$.post(),$.get()3.vue的axios"                    >                      <img src="https://cdn.jsdelivr.net/gh/xaoxuu/assets@19.1.9/logo/128/qzone.png">                  </a>                        <a class="-mob-share-weibo" title="微博" rel="external nofollow noopener noreferrer"                    href="http://service.weibo.com/share/share.php?url=https://ahrilove.top/2020/06/11/Javascript%E7%AF%87%E7%AB%A0%E5%8D%81/&title=青春猪头少年不会遇到Ajax异步请求 | AhriLove&summary=Ajax全名为Asynchronous JavaScript And XML，Ajax 允许通过与场景后面的 Web 服务器交换数据来异步更新网页。这意味着可以更新网页的部分，而不需要重新加载整个页面.归纳一下发送HTTP请求的技术方法大全本章内容：1.Ajax工作原理2.jQuery的$.post(),$.get()3.vue的axios"                    >                      <img src="https://cdn.jsdelivr.net/gh/xaoxuu/assets@19.1.9/logo/128/weibo.png">                  </a>            </div></div>                  </div>  </section>                      <div class="prev-next">                                <section class="prev">                      <span class="art-item-left">                          <h6><i class="fas fa-chevron-left" aria-hidden="true"></i>&nbsp;上一页</h6>                          <h4>                              <a href="/2020/06/17/blog%E6%94%B9%E7%89%88%E8%AF%B4%E6%98%8Ev1/" rel="prev" title="为何不在blog v1.1活的悠闲点呢">                                                                    为何不在blog v1.1活的悠闲点呢                                                              </a>                          </h4>                                                                                      <h6 class="tags">                                  <a class="tag" href="/tags/blog%E6%94%B9%E7%89%88/"><i class="fas fa-tag fa-fw" aria-hidden="true"></i> blog改版</a>                              </h6>                                                </span>                  </section>                                              <section class="next">                      <span class="art-item-right" aria-hidden="true">                          <h6>下一页&nbsp;<i class="fas fa-chevron-right" aria-hidden="true"></i></h6>                          <h4>                              <a href="/2020/06/10/Java%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89/" rel="prev" title="Java（十三）：Java数据库">                                                                        Java（十三）：Java数据库                                                                </a>                          </h4>                                                                                      <h6 class="tags">                                  <a class="tag" href="/tags/Java/"><i class="fas fa-tag fa-fw" aria-hidden="true"></i> Java</a>                              </h6>                                                </span>                  </section>                        </div>          </section>  </article>  <!-- 显示推荐文章和评论 -->  <article class="post white-box comments">    <section class="article typo">      <h4><i class="fas fa-comments fa-fw" aria-hidden="true"></i>&nbsp;评论</h4>                    <section id="comments">          <div id="lv-container" data-id="city" data-uid="MTAyMC80NzQ0NS8yMzk0NQ==">            <noscript><div><i class='fas fa-exclamation-triangle'>&nbsp;无法加载Livere评论系统，请确保您的网络能够正常访问。</div></noscript>          </div>        </section>                      </section>  </article><!-- 根据页面mathjax变量决定是否加载MathJax数学公式js -->  <script>    window.subData = {      title: '青春猪头少年不会遇到Ajax异步请求',      tools: true    }  </script></div><aside class='l_side'>                                                                            <section class='widget author'>  <div class='content material'>          <div class='avatar'>        <img class='avatar' src='https://cdn.jsdelivr.net/gh/FioraLove/CDN@1.0/Avatar.png'/>      </div>              <div class='text'>                  <h2>AHRILOVE' BLOG</h2>                          <p>只有被明日的我们铭记 今天才有意义</p>                      </div>          </div></section>                          <section class='widget toc-wrapper'>    <header class='material'>  <div><i class="fas fa-list fa-fw" aria-hidden="true"></i>&nbsp;&nbsp;本文目录</div>      <!-- <div class='wrapper'><a class="s-toc rightBtn" rel="external nofollow noopener noreferrer" href="javascript:void(0)"><i class="fas fa-thumbtack fa-fw"></i></a></div> -->  </header>    <div class='content material'>      <ol class="toc"><li class="toc-item toc-level-3"><a class="toc-link" href="#1-原生Ajax"><span class="toc-text">1.原生Ajax</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="#1-XMLHttpRequest对象"><span class="toc-text">1.XMLHttpRequest对象</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#2-onreadystatechange-属性"><span class="toc-text">2.onreadystatechange 属性</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#3-setRequestHeader请求头设置"><span class="toc-text">3.setRequestHeader请求头设置</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#4-完整案例"><span class="toc-text">4.完整案例</span></a></li></ol></li><li class="toc-item toc-level-3"><a class="toc-link" href="#2-jQuery的-post-get"><span class="toc-text">2. jQuery的$.post(),$.get()</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#3-vue的axios"><span class="toc-text">3.vue的axios</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="#安装"><span class="toc-text">安装</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#执行get请求案例"><span class="toc-text">执行get请求案例</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#执行post请求的案例"><span class="toc-text">执行post请求的案例</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#执行多个并发请求"><span class="toc-text">执行多个并发请求</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#axios-config-配置参数大全"><span class="toc-text">axios(config)配置参数大全</span></a></li></ol></li></ol>    </div>  </section>                             <section class='widget grid'>  <header class='material'>  <div><i class="fas fa-address-card fa-fw" aria-hidden="true"></i>&nbsp;&nbsp;关于博主</div>  </header>  <div class='content material'>    <ul class="grid navgation">              <li><a class="flat-box" title="/game/" href="/game/"                      rel="nofollow"                              id="game">                      <i class="fas fa-gamepad fa-fw" aria-hidden="true"></i>                    轻松一刻        </a></li>              <li><a class="flat-box" title="/about/" href="/about/"                      rel="nofollow"                              id="about">                      <i class="fas fa-paper-plane fa-fw" aria-hidden="true"></i>                    相册        </a></li>              <li><a class="flat-box" title="/cv/" href="/cv/"                      rel="nofollow"                              id="cv">                      <i class="fas fa-globe-asia fa-fw" aria-hidden="true"></i>                    个人简历        </a></li>          </ul>  </div></section>                                                                            <section class='widget grid'>  <header class='material'>  <div><i class="fas fa-map-signs fa-fw" aria-hidden="true"></i>&nbsp;&nbsp;站内导航</div>  </header>  <div class='content material'>    <ul class="grid navgation">              <li><a class="flat-box" title="/" href="/"                              id="home">                      <i class="fas fa-clock fa-fw" aria-hidden="true"></i>                    近期文章        </a></li>              <li><a class="flat-box" title="/archives/" href="/archives/"                      rel="nofollow"                              id="archives">                      <i class="fas fa-archive fa-fw" aria-hidden="true"></i>                    文章归档        </a></li>              <li><a class="flat-box" title="https://github.com/FioraLove?tab=repositories" href="https://github.com/FioraLove?tab=repositories"                              id="https:github.comFioraLove?tab=repositories">                      <i class="fas fa-code-branch fa-fw" aria-hidden="true"></i>                    开源项目        </a></li>              <li><a class="flat-box" title="/friends/" href="/friends/"                      rel="nofollow"                              id="friends">                      <i class="fas fa-link fa-fw" aria-hidden="true"></i>                    我的友链        </a></li>              <li><a class="flat-box" title="https://xaoxuu.com/wiki/material-x/" href="https://xaoxuu.com/wiki/material-x/"                      rel="nofollow"                              id="https:xaoxuu.comwikimaterial-x">                      <i class="fas fa-book fa-fw" aria-hidden="true"></i>                    主题文档        </a></li>              <li><a class="flat-box" title="/plan/" href="/plan/"                      rel="nofollow"                              id="plan">                      <i class="fas fa-info-circle fa-fw" aria-hidden="true"></i>                    每日计划        </a></li>          </ul>  </div></section>                                   <section class='widget category'>    <header class='material'>  <div><i class="fas fa-folder-open fa-fw" aria-hidden="true"></i>&nbsp;&nbsp;文章分类</div>      <a class="rightBtn"          rel="nofollow"            href="/categories/"    title="categories/">    <i class="fas fa-expand-arrows-alt fa-fw"></i></a>  </header>    <div class='content material'>      <ul class="entry">                  <li><a class="flat-box" title="/categories/Data-analysis/" href="/categories/Data-analysis/"><div class='name'>Data analysis</div><div class='badge'>(4)</div></a></li>                  <li><a class="flat-box" title="/categories/Database/" href="/categories/Database/"><div class='name'>Database</div><div class='badge'>(10)</div></a></li>                  <li><a class="flat-box" title="/categories/Java/" href="/categories/Java/"><div class='name'>Java</div><div class='badge'>(13)</div></a></li>                  <li><a class="flat-box" title="/categories/Python/" href="/categories/Python/"><div class='name'>Python</div><div class='badge'>(22)</div></a></li>                  <li><a class="flat-box" title="/categories/ThinkPHP/" href="/categories/ThinkPHP/"><div class='name'>ThinkPHP</div><div class='badge'>(2)</div></a></li>                  <li><a class="flat-box" title="/categories/TypeScript/" href="/categories/TypeScript/"><div class='name'>TypeScript</div><div class='badge'>(1)</div></a></li>                  <li><a class="flat-box" title="/categories/docker/" href="/categories/docker/"><div class='name'>docker</div><div class='badge'>(3)</div></a></li>                  <li><a class="flat-box" title="/categories/javascript/" href="/categories/javascript/"><div class='name'>javascript</div><div class='badge'>(11)</div></a></li>                  <li><a class="flat-box" title="/categories/json/" href="/categories/json/"><div class='name'>json</div><div class='badge'>(2)</div></a></li>                  <li><a class="flat-box" title="/categories/%E5%89%8D%E7%AB%AF/" href="/categories/%E5%89%8D%E7%AB%AF/"><div class='name'>前端</div><div class='badge'>(11)</div></a></li>                  <li><a class="flat-box" title="/categories/%E5%8D%9A%E5%AE%A2Hexo/" href="/categories/%E5%8D%9A%E5%AE%A2Hexo/"><div class='name'>博客Hexo</div><div class='badge'>(2)</div></a></li>                  <li><a class="flat-box" title="/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84/" href="/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84/"><div class='name'>服务器架构</div><div class='badge'>(4)</div></a></li>                  <li><a class="flat-box" title="/categories/%E9%9A%8F%E7%AC%94/" href="/categories/%E9%9A%8F%E7%AC%94/"><div class='name'>随笔</div><div class='badge'>(5)</div></a></li>              </ul>    </div>  </section>                        <section class='widget tagcloud'>    <header class='material'>  <div><i class="fas fa-tags fa-fw" aria-hidden="true"></i>&nbsp;&nbsp;热门标签</div>      <a class="rightBtn"          rel="nofollow"            href="/tags/"    title="tags/">    <i class="fas fa-expand-arrows-alt fa-fw"></i></a>  </header>    <div class='content material'>      <a href="/tags/post/" style="font-size: 14px; color: #999">$.post()</a> <a href="/tags/API/" style="font-size: 15.67px; color: #8e8e8e">API</a> <a href="/tags/Ajax/" style="font-size: 15.67px; color: #8e8e8e">Ajax</a> <a href="/tags/CSS/" style="font-size: 15.67px; color: #8e8e8e">CSS</a> <a href="/tags/DBUtils/" style="font-size: 14px; color: #999">DBUtils</a> <a href="/tags/DDL/" style="font-size: 14px; color: #999">DDL</a> <a href="/tags/DML/" style="font-size: 14px; color: #999">DML</a> <a href="/tags/GNE/" style="font-size: 14px; color: #999">GNE</a> <a href="/tags/Github-Page/" style="font-size: 14px; color: #999">Github Page</a> <a href="/tags/Hexo/" style="font-size: 14px; color: #999">Hexo</a> <a href="/tags/Hyper-V/" style="font-size: 14px; color: #999">Hyper-V</a> <a href="/tags/InnoDB/" style="font-size: 14px; color: #999">InnoDB</a> <a href="/tags/Java/" style="font-size: 24px; color: #555">Java</a> <a href="/tags/Jquery/" style="font-size: 14px; color: #999">Jquery</a> <a href="/tags/Linux/" style="font-size: 14px; color: #999">Linux</a> <a href="/tags/Maven/" style="font-size: 14px; color: #999">Maven</a> <a href="/tags/Memcached/" style="font-size: 14px; color: #999">Memcached</a> <a href="/tags/MyISAM/" style="font-size: 14px; color: #999">MyISAM</a> <a href="/tags/MySQL/" style="font-size: 22.33px; color: #606060">MySQL</a> <a href="/tags/Oracle/" style="font-size: 15.67px; color: #8e8e8e">Oracle</a> <a href="/tags/PHP/" style="font-size: 14px; color: #999">PHP</a> <a href="/tags/POST%E8%AF%B7%E6%B1%82/" style="font-size: 14px; color: #999">POST请求</a> <a href="/tags/Requests/" style="font-size: 19px; color: #777">Requests</a> <a href="/tags/VMware/" style="font-size: 14px; color: #999">VMware</a> <a href="/tags/Vue/" style="font-size: 19px; color: #777">Vue</a> <a href="/tags/apache/" style="font-size: 14px; color: #999">apache</a> <a href="/tags/blog%E6%94%B9%E7%89%88/" style="font-size: 14px; color: #999">blog改版</a> <a href="/tags/clone/" style="font-size: 14px; color: #999">clone</a> <a href="/tags/component/" style="font-size: 14px; color: #999">component</a> <a href="/tags/container/" style="font-size: 14px; color: #999">container</a> <a href="/tags/css/" style="font-size: 19px; color: #777">css</a> <a href="/tags/database/" style="font-size: 14px; color: #999">database</a> <a href="/tags/datetime/" style="font-size: 14px; color: #999">datetime</a> <a href="/tags/docker/" style="font-size: 17.33px; color: #828282">docker</a> <a href="/tags/echarts/" style="font-size: 14px; color: #999">echarts</a> <a href="/tags/fetchall/" style="font-size: 14px; color: #999">fetchall()</a> <a href="/tags/fetchone/" style="font-size: 14px; color: #999">fetchone()</a> <a href="/tags/float/" style="font-size: 14px; color: #999">float</a> <a href="/tags/front-matter/" style="font-size: 14px; color: #999">front-matter</a> <a href="/tags/git/" style="font-size: 14px; color: #999">git</a> <a href="/tags/git-pull-push/" style="font-size: 14px; color: #999">git pull/push</a> <a href="/tags/html/" style="font-size: 17.33px; color: #828282">html</a> <a href="/tags/images/" style="font-size: 14px; color: #999">images</a> <a href="/tags/jQuery/" style="font-size: 15.67px; color: #8e8e8e">jQuery</a> <a href="/tags/js/" style="font-size: 20.67px; color: #6c6c6c">js</a> <a href="/tags/json/" style="font-size: 14px; color: #999">json</a> <a href="/tags/json-parse/" style="font-size: 14px; color: #999">json.parse()</a> <a href="/tags/json-stringify/" style="font-size: 14px; color: #999">json.stringify()</a> <a href="/tags/js%E7%B2%BE%E7%A1%AE%E5%BA%A6%E4%B8%A2%E5%A4%B1/" style="font-size: 14px; color: #999">js精确度丢失</a> <a href="/tags/js%E9%80%86%E5%90%91/" style="font-size: 14px; color: #999">js逆向</a> <a href="/tags/lambda/" style="font-size: 14px; color: #999">lambda</a> <a href="/tags/margin/" style="font-size: 14px; color: #999">margin</a> <a href="/tags/matplotlib/" style="font-size: 15.67px; color: #8e8e8e">matplotlib</a> <a href="/tags/mysql/" style="font-size: 15.67px; color: #8e8e8e">mysql</a> <a href="/tags/nginx/" style="font-size: 15.67px; color: #8e8e8e">nginx</a> <a href="/tags/nginx-conf/" style="font-size: 14px; color: #999">nginx.conf</a> <a href="/tags/numpy/" style="font-size: 15.67px; color: #8e8e8e">numpy</a> <a href="/tags/pandas/" style="font-size: 14px; color: #999">pandas</a> <a href="/tags/push/" style="font-size: 14px; color: #999">push</a> <a href="/tags/python/" style="font-size: 20.67px; color: #6c6c6c">python</a> <a href="/tags/python-Django-MySQL/" style="font-size: 14px; color: #999">python+Django+MySQL</a> <a href="/tags/re/" style="font-size: 17.33px; color: #828282">re</a> <a href="/tags/read-readline-readlines/" style="font-size: 14px; color: #999">read() - readline() - readlines()</a> <a href="/tags/redis/" style="font-size: 14px; color: #999">redis</a> <a href="/tags/requirement-txt/" style="font-size: 14px; color: #999">requirement.txt</a> <a href="/tags/salt/" style="font-size: 14px; color: #999">salt</a> <a href="/tags/thinkPHP/" style="font-size: 15.67px; color: #8e8e8e">thinkPHP</a> <a href="/tags/time/" style="font-size: 14px; color: #999">time</a> <a href="/tags/token/" style="font-size: 14px; color: #999">token</a> <a href="/tags/union/" style="font-size: 14px; color: #999">union</a> <a href="/tags/%E4%BA%A4%E4%BA%92%E5%BC%8F%E4%B8%8E%E5%AE%88%E6%8A%A4%E5%BC%8F%E5%88%9B%E5%BB%BA/" style="font-size: 14px; color: #999">交互式与守护式创建</a> <a href="/tags/%E5%85%83%E7%BB%84/" style="font-size: 14px; color: #999">元组</a> <a href="/tags/%E5%88%97%E8%A1%A8/" style="font-size: 14px; color: #999">列表</a> <a href="/tags/%E5%89%8D%E5%90%8E%E5%88%86%E7%A6%BB/" style="font-size: 14px; color: #999">前后分离</a> <a href="/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/" style="font-size: 14px; color: #999">多线程</a> <a href="/tags/%E5%A4%9A%E8%BF%9B%E7%A8%8B/" style="font-size: 14px; color: #999">多进程</a> <a href="/tags/%E5%AD%97%E5%85%B8/" style="font-size: 14px; color: #999">字典</a> <a href="/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/" style="font-size: 14px; color: #999">字符串</a> <a href="/tags/%E5%AE%9A%E4%BD%8D%E7%85%A7%E7%89%87%E6%8B%8D%E6%91%84%E4%BD%8D%E7%BD%AE/" style="font-size: 14px; color: #999">定位照片拍摄位置</a> <a href="/tags/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/" style="font-size: 14px; color: #999">定时任务</a> <a href="/tags/%E5%AF%B9%E8%B1%A1/" style="font-size: 14px; color: #999">对象</a> <a href="/tags/%E5%B1%9E%E6%80%A7%E4%B8%8E%E6%96%B9%E6%B3%95/" style="font-size: 14px; color: #999">属性与方法</a> <a href="/tags/%E6%95%B0%E5%80%BC/" style="font-size: 14px; color: #999">数值</a> <a href="/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%86%E6%89%B9%E6%AC%A1%E5%A4%84%E7%90%86/" style="font-size: 14px; color: #999">数据库分批次处理</a> <a href="/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%80%9A%E7%94%A8%E8%BF%9E%E6%8E%A5%E5%87%BD%E6%95%B0/" style="font-size: 14px; color: #999">数据库通用连接函数</a> <a href="/tags/%E6%9E%81%E9%AA%8C%E6%BB%91%E5%8A%A8/" style="font-size: 14px; color: #999">极验滑动</a> <a href="/tags/%E8%A3%85%E9%A5%B0%E5%99%A8/" style="font-size: 14px; color: #999">装饰器</a> <a href="/tags/%E8%A7%A3%E6%9E%90%E5%BA%93/" style="font-size: 14px; color: #999">解析库</a> <a href="/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/" style="font-size: 14px; color: #999">负载均衡</a> <a href="/tags/%E9%80%86%E5%90%91%E7%88%AC%E8%99%AB/" style="font-size: 14px; color: #999">逆向爬虫</a> <a href="/tags/%E9%80%89%E6%8B%A9%E5%99%A8/" style="font-size: 14px; color: #999">选择器</a>    </div>  </section>  </aside>      <script>setLoadingBarProgress(60);</script>    </div>    <a class="s-top fas fa-arrow-up fa-fw" href='javascript:void(0)'></a>  </div>  <script src="https://cdn.jsdelivr.net/npm/jquery@3.3.1/dist/jquery.min.js"></script>  <script>    var GOOGLE_CUSTOM_SEARCH_API_KEY = "";    var GOOGLE_CUSTOM_SEARCH_ENGINE_ID = "";    var ALGOLIA_API_KEY = "";    var ALGOLIA_APP_ID = "";    var ALGOLIA_INDEX_NAME = "";    var AZURE_SERVICE_NAME = "";    var AZURE_INDEX_NAME = "";    var AZURE_QUERY_KEY = "";    var BAIDU_API_ID = "";    var SEARCH_SERVICE = "hexo" || "hexo";    var ROOT = "/"||"/";    if(!ROOT.endsWith('/'))ROOT += '/';  </script><script src="//instant.page/1.2.2" type="module" integrity="sha384-2xV8M5griQmzyiY3CDqh1dn4z3llDVqZDqzjzcY+jCBCk/a5fXJmuZ/40JJAPeoU"></script>  <script async src="https://cdn.jsdelivr.net/npm/scrollreveal@4.0.5/dist/scrollreveal.min.js"></script>  <script type="text/javascript">    $(function() {      const $reveal = $('.reveal');      if ($reveal.length === 0) return;      const sr = ScrollReveal({ distance: 0 });      sr.reveal('.reveal');    });  </script>  <script src="https://cdn.jsdelivr.net/npm/node-waves@0.7.6/dist/waves.min.js"></script>  <script type="text/javascript">    $(function() {      Waves.attach('.flat-btn', ['waves-button']);      Waves.attach('.float-btn', ['waves-button', 'waves-float']);      Waves.attach('.float-btn-light', ['waves-button', 'waves-float', 'waves-light']);      Waves.attach('.flat-box', ['waves-block']);      Waves.attach('.float-box', ['waves-block', 'waves-float']);      Waves.attach('.waves-image');      Waves.init();    });  </script>  <script async src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-busuanzi@2.3/js/busuanzi.pure.mini.js"></script>          <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-backstretch/2.0.4/jquery.backstretch.min.js"></script>    <script type="text/javascript">      $(function(){        if ('.cover') {          $('.cover').backstretch(          ["https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@2.2.1/images/background/021.webp", "https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/cover/(1).jpg.webp", "https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/cover/(8).jpg.webp", "https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/cover/(6).jpg.webp", "https://cdn.jsdelivr.net/gh/FioraLove/Images/D:/data/imageskda.jpg.webp", "https://cdn.jsdelivr.net/gh/FioraLove/Images/531-bigskin-1.jpg"],          {            duration: "5000",            fade: "3000"          });        } else {          $.backstretch(          ["https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@2.2.1/images/background/021.webp", "https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/cover/(1).jpg.webp", "https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/cover/(8).jpg.webp", "https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/cover/(6).jpg.webp", "https://cdn.jsdelivr.net/gh/FioraLove/Images/D:/data/imageskda.jpg.webp", "https://cdn.jsdelivr.net/gh/FioraLove/Images/531-bigskin-1.jpg"],          {            duration: "5000",            fade: "3000"          });        }      });    </script>    <script type="text/javascript">    (function(d, s) {      var j, e = d.getElementsByTagName(s)[0];      if (typeof LivereTower === 'function') { return; }      j = d.createElement(s);      j.src = 'https://cdn-city.livere.com/js/embed.dist.js';      j.async = true;      e.parentNode.insertBefore(j, e);    })(document, 'script');  </script>  <script src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-material-x@19.9/js/app.js"></script>  <script src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-material-x@19.9/js/search.js"></script><!-- 复制 --><script src="https://cdn.jsdelivr.net/npm/clipboard@2/dist/clipboard.min.js"></script><script>  let COPY_SUCCESS = "复制成功";  let COPY_FAILURE = "复制失败";  /*页面载入完成后，创建复制按钮*/  !function (e, t, a) {    /* code */    var initCopyCode = function(){      var copyHtml = '';      copyHtml += '<button class="btn-copy" data-clipboard-snippet="">';      copyHtml += '  <i class="fa fa-copy"></i><span>复制</span>';      copyHtml += '</button>';      $(".highlight .code pre").before(copyHtml);      var clipboard = new ClipboardJS('.btn-copy', {        target: function(trigger) {          return trigger.nextElementSibling;        }      });      clipboard.on('success', function(e) {        //您可以加入成功提示        console.info('Action:', e.action);        console.info('Text:', e.text);        console.info('Trigger:', e.trigger);        success_prompt(COPY_SUCCESS);        e.clearSelection();      });      clipboard.on('error', function(e) {        //您可以加入失败提示        console.error('Action:', e.action);        console.error('Trigger:', e.trigger);        fail_prompt(COPY_FAILURE);      });    }    initCopyCode();  }(window, document);  /**   * 弹出式提示框，默认1.5秒自动消失   * @param message 提示信息   * @param style 提示样式，有alert-success、alert-danger、alert-warning、alert-info   * @param time 消失时间   */  var prompt = function (message, style, time)  {      style = (style === undefined) ? 'alert-success' : style;      time = (time === undefined) ? 1500 : time*1000;      $('<div>')          .appendTo('body')          .addClass('alert ' + style)          .html(message)          .show()          .delay(time)          .fadeOut();  };  // 成功提示  var success_prompt = function(message, time)  {      prompt(message, 'alert-success', time);  };  // 失败提示  var fail_prompt = function(message, time)  {      prompt(message, 'alert-danger', time);  };  // 提醒  var warning_prompt = function(message, time)  {      prompt(message, 'alert-warning', time);  };  // 信息提示  var info_prompt = function(message, time)  {      prompt(message, 'alert-info', time);  };</script><!-- fancybox --><script src="https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.js"></script><script>  let LAZY_LOAD_IMAGE = "";  $(".article-entry").find("fancybox").find("img").each(function () {      var element = document.createElement("a");      $(element).attr("data-fancybox", "gallery");      $(element).attr("href", $(this).attr("src"));      /* 图片采用懒加载处理时,       * 一般图片标签内会有个属性名来存放图片的真实地址，比如 data-original,       * 那么此处将原本的属性名src替换为对应属性名data-original,       * 修改如下       */       if (LAZY_LOAD_IMAGE) {         $(element).attr("href", $(this).attr("data-original"));       }      $(this).wrap(element);  });</script>    <script  src="https://cdn.jsdelivr.net/gh/FioraLove/CDN@v1.2.7/ribbon_v1.js"></script>  <script>setLoadingBarProgress(100);</script><div class="showarea-4" style="text-align: center;margin: 0 auto;">        <img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/footercopy.png">    </div>    <div style="text-align: center;background-color:rgb(12, 1, 3);">        <p style="font-size: 1.2em;margin: 0 auto;color:rgb(202, 197, 191);">联系我 | Contact with me</p>        <p style="font-size: 1em;margin: 0 auto;color:rgb(202, 197, 191);">Copyright © 2019-2020 谁知你知我，我知你知深。此恨经年深，比情度日久</p>        <p style="font-size: 1em;margin: 0 auto;color:rgb(202, 197, 191);">博客内容遵循 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" style="text-decoration: none;color:rgb(202, 197, 191)">署名-非商业性使用-相同方式共享 4.0 国际 (CC BY-NC-SA 4.0) 协议</a></p>        <br>        <a href="http://AhriLove.top/" target="_blank"><img                class="icon" src="https://cdn.jsdelivr.net/gh/FioraLove/Images/hexo.png"                title="个人博客" style="width: 3.5em;color:rgb(202, 197, 191);"></a>&nbsp;&nbsp;        <a href="https://github.com/FioraLove?tab=repositories" target="_blank"><img                class="icon" src="https://cdn.jsdelivr.net/gh/FioraLove/Images/git.png"                title="GitHub" style="width: 3.5em"></a>&nbsp;&nbsp;        <a href="https://www.cnblogs.com/AhriLove-chen/" target="_blank"><img                class="icon" src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@2.1.4/about/icon/cnblogs.png"                title="博客园" style="width: 3.5em"></a>&nbsp;&nbsp;        <a href="https://www.zhihu.com/people/hui-li-yi-xiao-jie/activities" target="_blank"><img                class="icon" src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@2.1.4/about/icon/zhihu.png"                title="知乎" style="width: 3.5em"></a>&nbsp;&nbsp;        <a href="https://music.163.com/#/user/home?id=1398315803" target="_blank"><img                class="icon" src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@2.1.4/about/icon/netease.png"                title="网易云音乐" style="width: 3.5em"></a>&nbsp;&nbsp;        <a href="https://space.bilibili.com/215893581" target="_blank"><img                class="icon" src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@2.1.4/about/icon/bilibili.png"                title="哔哩哔哩" style="width: 3.5em"></a>&nbsp;&nbsp;        <a href="http://wpa.qq.com/msgrd?v=3&uin=980710425&site=qq&menu=yes" target="_blank"><img                class="icon" src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@2.1.4/about/icon/qq.png"                title="QQ" style="width: 3.5em"></a>&nbsp;&nbsp;        <a href="mailto:980710425@qq.com" target="_blank"><img                class="icon" src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@2.1.4/about/icon/mail.png"                title="邮件" style="width: 3.5em"></a>&nbsp;&nbsp;        <a href="javascript:;"><img                class="icon" src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@2.1.4/about/icon/telegram.png"                title="Telegram" style="width: 3.5em"></a>&nbsp;&nbsp;        <a href="javascript:;"><img                class="icon" src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@2.1.4/about/icon/twitter.png"                title="Twitter" style="width: 3.5em"></a>&nbsp;&nbsp;        <!--<a href="https://www.facebook.com/profile.php?id=100039716302318" target="_blank"><img            src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@2.1.4/about/icon/facebook.png" class="icon" title="Facebook" style="width: 3.5em"></a>&nbsp;&nbsp;-->        <script  src="https://cdn.jsdelivr.net/gh/FioraLove/CDN@v1.2.7/ribbon_v1.js"></script>    </div></body></html>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>屠龙者的我学会了新的js第三方库</title>
      <link href="/2020/06/24/Javascript%E7%AF%87%E7%AB%A0%E5%8D%81%E4%B8%80/"/>
      <url>/2020/06/24/Javascript%E7%AF%87%E7%AB%A0%E5%8D%81%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<p>js的三方库的功能非常强大，总结一些屠龙宝经<br><strong>本章内容：</strong></p><blockquote><p>1.clipboard.js剪切复制<br>2.layui-UI库<br>3.DPlayer视频播放</p></blockquote><a id="more"></a><h3 id="1-js剪切，复制"><a href="#1-js剪切，复制" class="headerlink" title="1.js剪切，复制"></a>1.js剪切，复制</h3><h4 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h4><ul><li><a href="https://clipboardjs.com/" target="_blank" rel="noopener">clipboard.js:A modern approach to copy text to clipboard</a></li><li><a href="https://github.com/zenorocha/clipboard.js" target="_blank" rel="noopener">clipboard.js官方GitHub</a></li><li><a href="view-source:https://s.nmsl8.club/loveword?type=2" target="_blank" rel="noopener">clipboard.js一个实际运用</a></li></ul><h4 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h4><ul><li>引入js文件</li><li>创建复制剪切HTML</li><li>实例化ClipboardJS对象</li></ul><p>简单复制功能示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1. Define some markup --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span>Just because you can heal me<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span> <span class="attr">data-clipboard-text</span>=<span class="string">"Just because you can heal me"</span>&gt;</span></span><br><span class="line">    Copy to clipboard</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2. Include library --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/clipboard@2/dist/clipboard.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 3. Instantiate clipboard by passing a HTML element --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> clipboard = <span class="keyword">new</span> ClipboardJS(btn);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">clipboard.on(<span class="string">'success'</span>, <span class="function"><span class="keyword">function</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(e);</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">clipboard.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(e);</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br>data-clipboard-target复制功能：从另一个元素上进行复制<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1. Define some markup    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span>Just because you can doesn't mean you should — clipboard.js<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>  <span class="attr">data-clipboard-target</span>=<span class="string">"#demo"</span> &gt;</span></span><br><span class="line">    Copy to clipboard</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2. Include library --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/clipboard@2/dist/clipboard.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 3. Instantiate clipboard by passing a HTML element --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> clipboard = <span class="keyword">new</span> ClipboardJS(btn);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">clipboard.on(<span class="string">'success'</span>, <span class="function"><span class="keyword">function</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(e);</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">clipboard.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(e);</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>data-clipboard-action的参数值有copy(复制，默认)和cut（剪切，仅用于&lt;input&gt;或&lt;textarea&gt;）</li><li>仅能复制data-clipboard-text里的内容：<br>所以我们需要两个标签：一个标签用来展示data-clipboard-text里的内容，告诉用户复制的是什么内容；另一个（比如button标签），其属性为data-clipboard-text，当点击按钮后就复制了目标内容</li><li>data-clipboard-target会从目标节点的文本内容进行复制，有一个目标文本被选中的效果</li></ol><h3 id="2-弹窗layui"><a href="#2-弹窗layui" class="headerlink" title="2. 弹窗layui"></a>2. 弹窗layui</h3><p>layui官方UI文档:<a href="https://www.layui.com/doc/" target="_blank" rel="noopener">https://www.layui.com/doc/</a></p><h3 id="3-DPlayer视频播放"><a href="#3-DPlayer视频播放" class="headerlink" title="3.DPlayer视频播放"></a>3.DPlayer视频播放</h3><p>DPlayer官方文档：<a href="http://dplayer.js.org/" target="_blank" rel="noopener">http://dplayer.js.org/</a></p><p>举例说明</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> dp = <span class="keyword">new</span> DPlayer(&#123;</span><br><span class="line">    container: <span class="built_in">document</span>.getElementById(<span class="string">'dplayer'</span>),</span><br><span class="line">    autoplay: <span class="literal">false</span>,</span><br><span class="line">    theme: <span class="string">'#FADFA3'</span>,</span><br><span class="line">    loop: <span class="literal">true</span>,</span><br><span class="line">    lang: <span class="string">'zh-cn'</span>,</span><br><span class="line">    screenshot: <span class="literal">true</span>,</span><br><span class="line">    hotkey: <span class="literal">true</span>,</span><br><span class="line">    preload: <span class="string">'metadata'</span>,</span><br><span class="line">    <span class="comment">// 左上角展示的logo</span></span><br><span class="line">    logo: <span class="string">'https://cdn.jsdelivr.net/gh/FioraLove/Images/D:/data/imagesaaa.png'</span>,</span><br><span class="line">    volume: <span class="number">0.5</span>,</span><br><span class="line">    mutex: <span class="literal">true</span>,</span><br><span class="line">    video: &#123;</span><br><span class="line">         url:<span class="string">"https://api.dogecloud.com/player/get.mp4?vcode=5ac682e6f8231991&amp;userId=17&amp;ext=.mp4"</span>,</span><br><span class="line">        defaultQuality: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">        pic: <span class="string">'https://cdn.jsdelivr.net/gh/FioraLove/Images/531-bigskin-1.jpg'</span>,</span><br><span class="line">        thumbnails: <span class="string">'https://cdn.jsdelivr.net/gh/FioraLove/Images/531-bigskin-1.jpg'</span>,</span><br><span class="line">        type: <span class="string">'auto'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 字幕</span></span><br><span class="line">    subtitle: &#123;</span><br><span class="line">        url: <span class="string">'https://s-sh-17-dplayercdn.oss.dogecdn.com/hikarunara.vtt'</span>,</span><br><span class="line">        type: <span class="string">'webvtt'</span>,</span><br><span class="line">        fontSize: <span class="string">'20px'</span>,</span><br><span class="line">        bottom: <span class="string">'8%'</span>,</span><br><span class="line">        color: <span class="string">'#b7daff'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 弹幕</span></span><br><span class="line">    danmaku: &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 这是另一个博主搭建的弹幕池</span></span><br><span class="line"><span class="comment">        * api: 'https://dplayer.moerats.com</span></span><br><span class="line"><span class="comment">        * id: '9E2E3368B56CDBB45</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        id: <span class="string">'9E2E3368B56CDBB4'</span>,</span><br><span class="line">        api: <span class="string">'https://api.prprpr.me/dplayer/'</span>,</span><br><span class="line">        token: <span class="string">'tokendemo'</span>,</span><br><span class="line">        maximum: <span class="number">1000</span>,</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * addition:其实可以直接读取一个由弹幕组成的json</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        addition: [<span class="string">'https://s-sh-17-dplayercdn.oss.dogecdn.com/1678963.json'</span>],</span><br><span class="line">        user: <span class="string">'AhriLove'</span>,</span><br><span class="line">        bottom: <span class="string">'15%'</span>,</span><br><span class="line">        unlimited: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    contextmenu: [</span><br><span class="line">        &#123;</span><br><span class="line">            text: <span class="string">'二次作者'</span>,</span><br><span class="line">            link: <span class="string">'https://ahriLove.top'</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    highlight: [</span><br><span class="line">        &#123;</span><br><span class="line">            time: <span class="number">20</span>,</span><br><span class="line">            text: <span class="string">'这是第 20 秒'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            time: <span class="number">120</span>,</span><br><span class="line">            text: <span class="string">'这是 2 分钟'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    ]&#125;);</span><br><span class="line"><span class="comment">// 快进秒数</span></span><br><span class="line"><span class="comment">// dp.seek(100);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 提交一个新弹幕</span></span><br><span class="line">dp.danmaku.send(</span><br><span class="line">    &#123;</span><br><span class="line">        text: <span class="string">'dplayer is amazing'</span>,</span><br><span class="line">        color: <span class="string">'#b7daff'</span>,</span><br><span class="line">        type: <span class="string">'right'</span>, <span class="comment">// should be `top` `bottom` or `right`</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'success'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 实时绘制一个新弹幕</span></span><br><span class="line">dp.danmaku.draw(&#123;</span><br><span class="line">    text: <span class="string">'我是five，兄弟萌！！555555'</span>,</span><br><span class="line">    color: <span class="string">'#fff'</span>,</span><br><span class="line">    type: <span class="string">'bottom'</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 弹幕透明度</span></span><br><span class="line">dp.danmaku.opacity(<span class="number">0.5</span>);</span><br></pre></td></tr></table></figure><p>实际展示效果：<a href="https://ahrilove.top/about/">参考我的相册</a></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为何不在blog v1.1活的悠闲点呢</title>
      <link href="/2020/06/17/blog%E6%94%B9%E7%89%88%E8%AF%B4%E6%98%8Ev1/"/>
      <url>/2020/06/17/blog%E6%94%B9%E7%89%88%E8%AF%B4%E6%98%8Ev1/</url>
      
        <content type="html"><![CDATA[<p>记录博客 v1.1 改版变化，从博客开始运行的第一天起，UI就一直没有变动过，是时候开始一点点改变了🔱🔱🔱</p><a id="more"></a><h3 id="1-页脚改版"><a href="#1-页脚改版" class="headerlink" title="1.页脚改版"></a>1.页脚改版</h3><p>这次主要是修改了博客的页脚界面，之前的感觉间距把握的不是很好，错落无致，决定先从这里入手。</p><p>改版前：</p><p><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/20200617145607.png" alt=""></fancybox></p><br>改版后（感觉确实好看了起来😝😝😝，线条，色差分明了起来）：<p><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/20200617145641.png" alt=""></fancybox></p><h3 id="2-调整每页展示文章数"><a href="#2-调整每页展示文章数" class="headerlink" title="2.调整每页展示文章数"></a>2.调整每页展示文章数</h3><p>之前是每页展示12章blog，但是随着抖音，快手等短视频流行起来，剧烈冲击的传统视煤，这种商业模式是相当牛皮的，以最短的时间，展示最多的数据，故调整到10章。</p><h3 id="3-文章标题二刺螈"><a href="#3-文章标题二刺螈" class="headerlink" title="3.文章标题二刺螈"></a>3.文章标题二刺螈</h3><p>有一天阅读CSDN时，发现了一篇取名很搞笑的文章，<a href="https://blog.csdn.net/weixin_37615279/article/details/100516311" target="_blank" rel="noopener">我的 Input框 不可能这么可爱</a>，突然发现很有意思，一看就是老二刺螈，pxj勒，于是在轻小说<a href="http://book.sfacg.com/List/default.aspx" target="_blank" rel="noopener">SF互动传媒网的轻小说</a> ，抓取相关数据</p><p>部分结果展示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">死神的至高法则</span><br><span class="line">通关死亡游戏前被召唤了</span><br><span class="line">诺亚同学的秘密观察记录</span><br><span class="line">身体被夺舍之后我变成了狐娘</span><br><span class="line">穿越后有最强血脉的我还有预知挂</span><br><span class="line">为美好的光头献上润滑油</span><br><span class="line">异世界工匠大师重生为徒弟们打工</span><br><span class="line">血姬与骑士</span><br><span class="line">我真的只想养徒弟</span><br><span class="line">本狐仙才不要祸乱天下</span><br><span class="line">万界之我是假面骑士</span><br><span class="line">险些将宇宙撑爆的我只好低调做人</span><br><span class="line">和魔道帝尊成亲是什么体验</span><br><span class="line">守护之天启无限</span><br><span class="line">时之录3一隐藏最深的奥秘</span><br><span class="line">无聊药剂师被超高危能力打破日常</span><br><span class="line">反派复仇后我成了个好人</span><br><span class="line">穿上学姐的袜子后我就变成了学姐</span><br><span class="line">他们说妾身的相公是小白脸</span><br><span class="line"></span><br><span class="line">为何不在异世界活的悠闲点呢</span><br><span class="line">我真不是小白脸</span><br><span class="line">小小的背后灵</span><br><span class="line">反派boss重生记</span><br><span class="line">美女师尊放过我</span><br><span class="line">勇者的我怎么变成魔王了</span><br><span class="line">被称作灾恶的他们用异能闯荡世界</span><br><span class="line">虫族救世主的崛起日常</span><br><span class="line">我的无敌要由军团开始</span><br><span class="line">咸鱼公主想成为偶像</span><br><span class="line">这样的穿越非得累死</span><br><span class="line">怪谈少女的日常物语</span><br><span class="line">作为贵族不会魔法的我只能打铁了</span><br><span class="line">沐和的画</span><br><span class="line">寒头帮闹皇城</span><br><span class="line">亿界无双之诸天掠夺</span><br><span class="line">驭灵者</span><br><span class="line">文若九州记</span><br><span class="line">变身之后，我与她的狂想曲</span><br><span class="line"></span><br><span class="line">困难游戏开局之后该如何生存</span><br><span class="line">以最强之刀夺回世界</span><br><span class="line">被仙姬女帝两世倾心是什么体验</span><br><span class="line">魔教圣女想要平静生活有错吗</span><br><span class="line">猫娘少年今天也想征服世界</span><br><span class="line">骑士小姐做我男朋友吧</span><br><span class="line">我家娘子是妖不是仙</span><br><span class="line">变身仙子的我绝不做恶毒女配</span><br><span class="line">我和美少女们的恋爱故事</span><br><span class="line">变身美少女的我无敌可爱且无奈</span><br><span class="line">非正常侦探异闻录</span><br><span class="line">在约战变成精灵的我拒绝约会</span><br><span class="line">绝世丹妖的我才不要被吃掉</span><br><span class="line">蛇小姐的爱情故事</span><br><span class="line">神明的游戏世界</span><br><span class="line">普通人的我与魔导师的她</span><br><span class="line">误入魔道的我成了百花宗宗主</span><br><span class="line">虚实之路</span><br><span class="line">得到崩坏系统的我开始玩穿越</span><br><span class="line"></span><br><span class="line">盲信者的虔行命运眷顾的少年</span><br><span class="line">在女尊世界装废却被美少女包围</span><br><span class="line">拯救世界的一千零一种方法</span><br><span class="line">当用小号来到少女前线</span><br><span class="line">我万事屋老板决不会接她们的委托</span><br><span class="line">被美少女拒绝之后才能不断成长</span><br><span class="line">与职业死神同居画本子的日常</span><br><span class="line">在这个时代我发现了不得了的事情</span><br><span class="line">转生恶役的我怎样才能洗白</span><br><span class="line">明日方舟魔狼现世</span><br><span class="line">字母家族当代篇</span><br><span class="line">阿赖耶的英灵养成方法</span><br><span class="line">我是扫地就变强的骑士</span><br><span class="line">总是招惹病态少女的我该何去何从</span><br><span class="line">不要妨碍我学种植啦</span><br><span class="line">异世界归来的我才不要做女孩子呢</span><br><span class="line">关于如何养成女皇夫人的那件事</span><br><span class="line">我的真祖陛下</span><br><span class="line">我要成为大妖怪</span><br><span class="line"></span><br><span class="line">掌门我一刀一个师门叛徒啊</span><br><span class="line">白夜的荣耀枪神之路</span><br><span class="line">性别反转的校园恋情物语</span><br><span class="line">给主角们助攻的NPC生存之道</span><br><span class="line">身为反派女龙套我只能活七天</span><br><span class="line">在末世里努力生存的人们</span><br><span class="line">转生NPC的我想过上平静的生活</span><br><span class="line">成为魔神后开始穿越世界吧</span><br><span class="line">惊我变成了光明女神</span><br><span class="line">当血族女公爵看上我</span><br><span class="line">吾辈之人的理想乡</span><br><span class="line">泰拉世界的雇佣兵</span><br><span class="line">姐姐们饶了我好吗</span><br><span class="line">关于我在贵族女校的障碍回复</span><br><span class="line">让人哭笑不得的青春恋爱喜剧</span><br><span class="line">时崎狂三的星际旅行</span><br><span class="line">花520元变成女生是什么体验</span><br><span class="line">诊所里住进个美少女吸血鬼</span><br><span class="line">为啥只有无表情少女和妖怪喜欢我</span><br><span class="line"></span><br><span class="line">被少女疯狂逼婚的我天生面瘫</span><br><span class="line">我家魔王不靠谱</span><br><span class="line">邻居是位美少女</span><br><span class="line">盖尼亚史诗之复仇者</span><br><span class="line">白发美少女的养成记录</span><br><span class="line">在异界化身女仆与弟弟的幸福生活</span><br><span class="line">黑卡能力者</span><br><span class="line">丧尸的末日生存</span><br><span class="line">碎质危机</span><br><span class="line">这条红线真难牵</span><br><span class="line">美少女们想要攻略我这个冷淡作家</span><br><span class="line">今天的爱丽丝大小姐也是一脸嫌弃</span><br><span class="line">屠龙者的我娶了银龙女皇</span><br><span class="line">你们就放过我这正经摄影师吧</span><br><span class="line">我只是个路过的超级英雄</span><br><span class="line">身为血族的我只想初拥美少女</span><br><span class="line">当最强魔法师成为村夫之后</span><br><span class="line">别以为有系统就可以对付老师</span><br><span class="line">我既是末世女帝也是绝美贤妻</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog改版 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java（十三）：Java数据库</title>
      <link href="/2020/06/10/Java%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89/"/>
      <url>/2020/06/10/Java%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>反射：框架的灵魂</strong><br><strong>本章内容：</strong></p><blockquote><p>1.Junit测试<br>2.注解<br>3.反射</p></blockquote><a id="more"></a><h3 id="1-Junit测试"><a href="#1-Junit测试" class="headerlink" title="1.Junit测试"></a>1.Junit测试</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Junit白盒测试步骤：</p><ol><li>定义一个测试类<br>类名：被测试的类名Test ：CalculatorTest<br>包名：xxx.xxx.test cn.Tencent.test</li><li>定义测试方法：可以独立运行<br>方法名：test测试的方法名  testAdd()<br>返回值：void<br>参数列表：空参</li><li>给方法加@Test （<strong>注解，与之前的覆写@Override一样</strong>）</li><li>导入junit的依赖（使用时一定要导入junit的依赖，可以在maven中的pom.xml文件导入junit）</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li><p>判定：我们一般会使用断言操作来处理结果<br>Assert.assertEquals(期望的结果，程序运行的结果)</p></li><li><p>Junit的@Before与@After<br>@Before:初始化方法，用于资源的申请，所有的测试方法在执行前都会先自动执行该方法<br>@After:释放资源方法，用于资源的释放，所有的测试方法在执行后都会自动执行该方法</p></li></ol><p>举例说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"初始化资源。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"释放资源。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">int</span> c = a+b;</span><br><span class="line">        <span class="comment">// 断言操作</span></span><br><span class="line">        Assert.assertEquals(<span class="number">15</span>,c);</span><br><span class="line">        System.out.println(a+<span class="string">"+"</span>+b+<span class="string">"="</span>+c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br>初始化资源。。。<br>8+7=15<br>释放资源。。。</p><h3 id="2-反射"><a href="#2-反射" class="headerlink" title="2.反射"></a>2.反射</h3><ul><li>框架：半成品软件，可以在框架的基础上进行软件开发，简化编码</li><li>反射：将类的各个组成部分封装为其它对象，这就是反射机制（可以在程序运行过程在，操作这些对象；可以解耦，提高程序的可扩展性）</li></ul><p><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/20200513193833.png" alt=""></fancybox></p><ul><li><p>获取Class对象（字节码文件对象）的方式：</p><ul><li>Class.forName(“包名.类名”)：将字节码文件加载进内存，返回Class对象（<strong>多数用于配置文件，将类名定义在配置文件在，读取文件</strong>）</li><li>类名.class：通过类名的属性class获取（<strong>多用于参数的传递</strong>）</li><li>对象.getClass():getClass()方法在Object类中定义着（<strong>多用于对象的获取字节码的方式</strong>）</li></ul><p><strong>结论：同一个字节码文件(*.class)在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取的Class对象都是同一个。</strong></p></li></ul><p>举例说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.AhriLove;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 反射类：</span></span><br><span class="line"><span class="comment">    * 1.包名.类名</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 全类名</span></span><br><span class="line">        Class cls1 = Class.forName(<span class="string">"org.AhriLove.Person"</span>);</span><br><span class="line">        System.out.println(cls1);</span><br><span class="line">        <span class="comment">// 2. 类名.class</span></span><br><span class="line">        Class cls2 = Person.class;</span><br><span class="line">        System.out.println(cls2);</span><br><span class="line">        <span class="comment">// 3.对象.getClass()</span></span><br><span class="line">        Person p = <span class="keyword">new</span> Person(<span class="string">"chd"</span>,<span class="number">18</span>);</span><br><span class="line">        Class&lt;? extends Person&gt; cls3= p.getClass();</span><br><span class="line">        System.out.println(cls3);</span><br><span class="line">        <span class="comment">// 判断是否是相等时</span></span><br><span class="line">        System.out.println(cls1 == cls2);</span><br><span class="line">        System.out.println(cls1 == cls3);</span><br><span class="line">        System.out.println(p.getAge());</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 运行结果：</span></span><br><span class="line"><span class="comment">         class org.AhriLove.Person</span></span><br><span class="line"><span class="comment">         class org.AhriLove.Person</span></span><br><span class="line"><span class="comment">         class org.AhriLove.Person</span></span><br><span class="line"><span class="comment">         true</span></span><br><span class="line"><span class="comment">         true</span></span><br><span class="line"><span class="comment">         18 * */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String lover;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> name;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;<span class="keyword">this</span>.name = name;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> age;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;<span class="keyword">this</span>.age = age;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">"eat....."</span>);&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">(String food)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"eat....."</span> + food);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello world!!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><ul><li><p>Class对象的功能：<strong>Declared表示暴力反射，忽略访问修饰符，在反射面前是没有什么隐私的</strong></p><p>① 获取成员变量们</p><ul><li><p>Field[] getFields()：获取所有的public修饰的成员变量</p></li><li><p>Field getField(String name)：获取指定名称的public修饰的成员变量</p></li><li><p>Field[] getDeclaredFields()：获取所有的成员变量，不考虑修饰符</p></li><li><p>Field getDeclaredField(String name)：获取指定名称的成员变量，不考虑修饰符</p></li></ul><p>② 获取构造方法们</p><ul><li>Constructor&lt;?&gt;[] getConstructors()</li><li>Constructor<T>  getConstructors(类&lt;?&gt;…parameterTypes)</li><li>Constructor<T>  getDeclaredConstructors(类&lt;?&gt;…parameterTypes)</li><li>Constructor&lt;?&gt;[] getDeclaredConstructors()</li></ul><p>③ 获取成员方法们</p><ul><li>Method[] getMethods()</li><li>Method getMethods(String name,类&lt;?&gt;…parameterTypes)</li><li>Method[] getDeclaredMethods()</li><li>Method getDeclaredMethods(String name,类&lt;?&gt;…parameterTypes)</li></ul><p>④ 获取类名</p><ul><li>String name</li></ul></li></ul><ol><li>Field：成员变量</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">操作：</span><br><span class="line">1. 设置值 void set(Object obj,Object value)</span><br><span class="line">2. 获取值 get(Object obj)</span><br><span class="line">3.  忽略访问权限修饰符的安全检查 setAccessible(true)：暴力反射，在反射机制中不存在什么public，private等之类的权限概念</span><br></pre></td></tr></table></figure><ol start="2"><li>Constructor：构造方法</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">创建对象： T newInstance(Object... initargs)</span><br><span class="line">如果使用空参数构造方法创建对象，操作可以简化：Class对象的newInstance方法</span><br></pre></td></tr></table></figure><ol start="3"><li>Method：方法对象</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">执行方法：Object invoke(Object obj,Object... args)</span><br><span class="line">获取方法名称：</span><br></pre></td></tr></table></figure><p>举例说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.AhriLove;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflerctDemo2</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 0.获取字节码对象</span></span><br><span class="line">        Class personClass = Person.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.Field[] getFields()获取所有的public修饰的成员变量</span></span><br><span class="line">        Field[] fields = personClass.getFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field:fields) &#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"-----------------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.获取构造方法</span></span><br><span class="line">        Constructor constructor = personClass.getConstructor(String.class,<span class="keyword">int</span>.class);</span><br><span class="line">        System.out.println(constructor);</span><br><span class="line">        <span class="comment">// 全参创建对象</span></span><br><span class="line">        Object people = constructor.newInstance(<span class="string">"成都"</span>,<span class="number">150</span>);</span><br><span class="line">        System.out.println(people);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 空参创建对象</span></span><br><span class="line">        Constructor constructor2 = personClass.getConstructor();</span><br><span class="line">        Object people2 = constructor2.newInstance();</span><br><span class="line">        System.out.println(people2);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"-----------------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 获取指定名称的方法</span></span><br><span class="line">        Method eat_method = personClass.getMethod(<span class="string">"eat"</span>);</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="comment">// 执行方法</span></span><br><span class="line">        eat_method.invoke(person);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Method eat_method2 = personClass.getMethod(<span class="string">"eat"</span>,String.class);</span><br><span class="line">        <span class="comment">// 执行方法</span></span><br><span class="line">        eat_method2.invoke(person,<span class="string">"冰欺凌"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"------------------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取所有的public修饰的方法</span></span><br><span class="line">        Method[] methods = personClass.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method:methods) &#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">            <span class="comment">// 获取方法名称</span></span><br><span class="line">            System.out.println(method.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"--------------"</span>);</span><br><span class="line">        <span class="comment">// 4.获取类名</span></span><br><span class="line">        String className = personClass.getName();</span><br><span class="line">        System.out.println(className);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>反射实际应用:</strong> 写一个“框架”，可以帮我们创建任意类的对象，并且执行其中的任意方法，实现原理</p><ul><li>将需要创建的对象的全类名和执行的方法定义在配置文件中</li><li>在程序加载读取配置文件</li><li>使用反射技术来加载文件进内存</li><li>创建对象</li><li>执行方法</li></ul><ol><li>在src目录下创建一个配置pro.properties文件<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">className</span>=<span class="string">org.AhriLove.Person</span></span><br><span class="line"><span class="attr">methodName</span>=<span class="string">eat</span></span><br></pre></td></tr></table></figure></li></ol><p>2.开始完成框架类</p><h3 id="3-注解"><a href="#3-注解" class="headerlink" title="3.注解"></a>3.注解</h3><p>注解的本质其实就是一个接口interface</p><h4 id="使用注解"><a href="#使用注解" class="headerlink" title="使用注解"></a>使用注解</h4><p>注解：<strong>放在Java源码的类、方法、字段、参数前的一种特殊的“注释”</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义一个注解（新建一个Report.java的接口）</span></span><br><span class="line"><span class="keyword">package</span> com.gearsnet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="comment">// 注解名为Report</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Report &#123;</span><br><span class="line">    <span class="comment">// int类型的type()方法</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">type</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">level</span><span class="params">()</span> <span class="keyword">default</span> "info"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    String[] str1() <span class="keyword">default</span> <span class="string">""</span>;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释会被编译器直接忽略，注解则可以被编译器打包进入class文件，因此，注解是一种用作标注的“元数据”。</p><ol start="2"><li>注解的作用</li></ol><p>从JVM的角度开看，注解本身对代码逻辑没有任何影响，如何使用注解完全由工具决定</p><p>Java的注解可以分为三类：</p><ul><li>第一类是由编译器使用的注解，例如：</li></ul><p><code>@Override</code>：让编译器检查该方法是否正确地实现了覆写；<br><code>@SuppressWarnings</code>：告诉编译器忽略此处代码产生的警告。<br>这类注解不会被编译进入.class文件，它们在编译后就被编译器扔掉了。</p><ul><li>第二类是由工具处理.class文件使用的注解</li></ul><p>比如有些工具会在加载class的时候，对class做动态修改，实现一些特殊的功能。这类注解会被编译进入.class文件，但加载结束后并不会存在于内存中。这类注解只被一些底层库使用，一般我们不必自己处理。</p><ul><li>第三类是在程序运行期能够读取的注解</li></ul><p>它们在加载后一直存在于JVM中，这也是最常用的注解。例如，一个配置了@PostConstruct的方法会在调用构造方法后自动被调用（这是Java代码读取该注解实现的功能，JVM并不会识别该注解）。</p><p><strong>定义一个注解时，还可以定义配置参数</strong>，配置参数可以包括：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">所有的基本类型</span><br><span class="line">String</span><br><span class="line">枚举类型</span><br><span class="line">基本类型，String以及枚举的数组</span><br></pre></td></tr></table></figure><p>基本格式：<strong>数据类型 属性名() default 默认值;</strong><br>注意：虽然叫做属性，但是实际上是一个方法，因为注解本质上也是一个接口，接口是比抽象方法更抽象的抽象方法，它不存在属性名（字段）</p><br><p>因为<i>配置参数必须是常量</i>，所以，上述限制保证了注解在定义时就已经确定了每个参数的值。</p><p>注解的配置参数可以有默认值，缺少某个配置参数时将使用默认值。</p><p>此外，大部分注解会有一个名为value的配置参数，对此参数赋值，可以只写常量，相当于省略了value参数。如果只写注解，相当于全部使用默认值。</p><p>举例说明:<br>@Check就是一个注解。第一个@Check(min=0, max=100, value=55)明确定义了三个参数，第二个@Check(value=99)只定义了一个value参数，它实际上和@Check(99)是完全一样的。最后一个@Check表示所有参数都使用默认值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class Hello &#123;</span><br><span class="line">    @Check(min=0, max=100, value=55)</span><br><span class="line">    public int n;</span><br><span class="line"></span><br><span class="line">    @Check(value=99)</span><br><span class="line">    public int p;</span><br><span class="line"></span><br><span class="line">    @Check(99) // @Check(value=99)</span><br><span class="line">    public int x;</span><br><span class="line"></span><br><span class="line">    @Check</span><br><span class="line">    public int y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定义注解"><a href="#定义注解" class="headerlink" title="定义注解"></a>定义注解</h4><p>Java语言使用@interface语法来定义注解（Annotation），它的格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public @interface Report &#123;</span><br><span class="line">    int type() default 0;</span><br><span class="line">    String level() default &quot;info&quot;;</span><br><span class="line">    String value() default &quot;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注解的参数类似无参数方法，<strong>可以用default设定一个默认值（强烈推荐）</strong>。最常用的参数应当命名为value。</p><p><strong>元注解:实际上就是注解的注解</strong></p><p>有一些注解可以修饰其他注解，这些注解就称为元注解（meta annotation）。Java标准库已经定义了一些元注解，我们只需要使用元注解，通常不需要自己去编写元注解。</p><blockquote><p>@Target</p></blockquote><p>最常用的元注解是@Target，使用@Target可以描述Annotation能够作用的位置：</p><ul><li>作用于类或接口： ElementType.TYPE</li><li>作用于成员变量： ElementType.FIELD</li><li>作用于方法：ElementType.METHOD</li><li>作用于构造方法：ElementType.CONSTRUCTOR</li><li>作用于方法参数：ElementType.PARAMETER</li></ul><p>例如，定义注解@Report可用在方法上，我们必须添加一个@Target(ElementType.METHOD)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Report &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">type</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line">    <span class="function">String <span class="title">level</span><span class="params">()</span> <span class="keyword">default</span> "info"</span>;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义注解@Report可用在方法或字段上，可以把@Target注解参数变为数组{ ElementType.METHOD, ElementType.FIELD }：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Target(&#123;</span><br><span class="line">    ElementType.METHOD,</span><br><span class="line">    ElementType.FIELD</span><br><span class="line">&#125;)</span><br><span class="line">public @interface Report &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上@Target定义的value是ElementType[]数组，只有一个元素时，可以省略数组的写法。</p><blockquote><p>@Retention</p></blockquote><p>元注解@Retention定义了Annotation的生命周期：</p><ul><li>仅编译期：RetentionPolicy.SOURCE；</li><li>仅class文件：RetentionPolicy.CLASS；</li><li>运行期，当前描述的注解会保留到class字节码文件中，并被jvm读取到：RetentionPolicy.RUNTIME。</li></ul><p>如果@Retention不存在，则该Annotation默认为CLASS。因为<strong>通常我们自定义的Annotation都是RUNTIME</strong>，所以，务必要加上@Retention(RetentionPolicy.RUNTIME)这个元注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 作用于运行期阶段</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Report &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">type</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line">    <span class="function">String <span class="title">level</span><span class="params">()</span> <span class="keyword">default</span> "info"</span>;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>@Repeatable</p></blockquote><p>使用@Repeatable这个元注解可以定义Annotation是否可重复。这个注解应用不是特别广泛</p><blockquote><p>@Inherited</p></blockquote><p>使用@Inherited定义子类是否可继承父类定义的Annotation。@Inherited仅针对@Target(ElementType.TYPE)类型的annotation有效，并且仅针对class的继承，对interface的继承无效：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Inherited</span><br><span class="line">@Target(ElementType.TYPE)</span><br><span class="line">public @interface Report &#123;</span><br><span class="line">    int type() default 0;</span><br><span class="line">    String level() default &quot;info&quot;;</span><br><span class="line">    String value() default &quot;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用的时候，如果一个类用到了@Report：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Report(type=1)</span><br><span class="line">public class Person &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>则它的子类默认也定义了该注解：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public class Student extends Person &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注解总结"><a href="#注解总结" class="headerlink" title="注解总结"></a>注解总结</h4><p>如何定义Annotation，我们总结一下定义Annotation的步骤：</p><ul><li>第一步，用@interface定义注解：注解名为Report，新建一个名为Report的接口</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Report.java</span><br><span class="line">public @interface Report &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第二步，添加参数、默认值：</li></ul><p>格式为：<strong>数据类型 属性名() default 默认值;</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public @interface Report &#123;</span><br><span class="line">    // 数据类型 属性名() default 默认值</span><br><span class="line">    int type() default 0;</span><br><span class="line">    String level() default &quot;info&quot;;</span><br><span class="line">    String value() default &quot;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把最常用的参数定义为value()，推荐所有参数都尽量设置默认值。</p><ul><li>第三步，用元注解配置注解：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Target(ElementType.TYPE)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">public @interface Report &#123;</span><br><span class="line">    int type() default 0;</span><br><span class="line">    String level() default &quot;info&quot;;</span><br><span class="line">    String value() default &quot;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<strong>必须设置@Target和@Retention，@Retention一般设置为RUNTIME，因为我们自定义的注解通常要求在运行期读取</strong>。<br>一般情况下，不必写@Inherited和@Repeatable。</p><h4 id="处理注解"><a href="#处理注解" class="headerlink" title="处理注解"></a>处理注解</h4><p>我们接下来思考如何解析获取注解中的内容~通过优化反射上面的案例：创建任意类的对象，并且执行其中的任意方法</p><ol><li>创建一个自定义的注解： Report.java</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gearsnet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Report &#123;</span><br><span class="line">    <span class="comment">// String类型的className属性(实际上为抽象方法)</span></span><br><span class="line">    <span class="function">String <span class="title">className</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">    <span class="function">String <span class="title">methodName</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建一个Person对象：Person.java</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String lover;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> name;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;<span class="keyword">this</span>.name = name;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> age;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;<span class="keyword">this</span>.age = age;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello world!!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>创建一个AnnotationDemo.java</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gearsnet;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 注解赋值：与注解定义类的属性相同</span></span><br><span class="line"><span class="comment">* 数组的赋值：使用一个大括号来包裹数组集</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="meta">@Report</span>(type = <span class="number">1</span>,level = <span class="string">"best"</span>,str1 = &#123;<span class="string">"abc"</span>,<span class="string">"chd"</span>&#125;,className = <span class="string">"com.gearsnet.Person"</span>,methodName = <span class="string">"show"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 获取该类的字节码文件对象</span></span><br><span class="line">        Class&lt;AnnotationDemo&gt; annotation = AnnotationDemo.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 获取注解内容</span></span><br><span class="line">        Report report = annotation.getAnnotation(Report.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 调用注解对象中的抽象方法</span></span><br><span class="line">        System.out.println(report.className());</span><br><span class="line">        System.out.println(report.methodName());</span><br><span class="line">        <span class="comment">// 4.加载进内存</span></span><br><span class="line">        Class cls = Class.forName(report.className());</span><br><span class="line">        <span class="comment">// 5. 创建对象</span></span><br><span class="line">        Object obj = cls.newInstance();</span><br><span class="line">        <span class="comment">// 6.获取方法的对象</span></span><br><span class="line">        Method method = cls.getMethod(report.methodName());</span><br><span class="line">        <span class="comment">// 7.执行方法(执行Person对象中的show方法)</span></span><br><span class="line">        method.invoke(obj);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 打印内容：</span></span><br><span class="line"><span class="comment">            com.gearsnet.Person</span></span><br><span class="line"><span class="comment">            show</span></span><br><span class="line"><span class="comment">            hello world!!!</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终完成了写一个“框架”，可以帮我们创建任意类的对象，并且执行其中的任意方法</p><p>小结：</p><ol><li>大多数时候，我们会使用注解，而不是定义注解</li><li>注解给谁用？<ul><li>编译器使用</li><li>给解析程序使用</li></ul></li><li>注解不是程序的一部分，相当于一个标签</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的Oracle存储过程实在是太过稳健了</title>
      <link href="/2020/06/10/sql%E7%B3%BB%E5%88%97%E6%9B%B4%E6%96%B0%EF%BC%88%E5%85%AB%EF%BC%89/"/>
      <url>/2020/06/10/sql%E7%B3%BB%E5%88%97%E6%9B%B4%E6%96%B0%EF%BC%88%E5%85%AB%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;存储过程是由一个或多个T-SQL语句组成的语句组，它可以接受输入参数和输出参数且能向调用程序返回多个值；可以调用其他过程；可以向调用程序返回结果状态值以标记执行成功或失败；</p><a id="more"></a><h2 id="Oracle存储过程"><a href="#Oracle存储过程" class="headerlink" title="Oracle存储过程"></a>Oracle存储过程</h2><p>一个简单的存储过程案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">procedure</span> myDemo01</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  dbms_output.put_line(<span class="string">'hello word, my name is stored procedure'</span>);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><ul><li><p>create or replace procedure：关键字用来创建或覆盖一个原有的存储过程。</p></li><li><p>myDemo01：自定义的存储过程的名字。</p></li><li><p>as：关键字。注：</p><ul><li>在存储过程(PROCEDURE)和函数(FUNCTION)中没有区别；</li><li>在视图(VIEW)中只能用AS不能用IS；</li><li>在游标(CURSOR)中只能用IS不能用AS。</li></ul></li><li><p>begin：关键字。</p></li><li><p>dbms_output.put_line(‘hello word’); 换行输出内容。</p></li><li><p>end 关键字。</p></li></ul><p>ps：不区分大小写；以begin与end为核心体（类似于编程语言的{}）;每条语句以”;”结尾</p><h3 id="1-sql的三大部分"><a href="#1-sql的三大部分" class="headerlink" title="1.sql的三大部分"></a>1.sql的三大部分</h3><p>声明部分、可执行部分与异常处理部分</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> </span><br><span class="line">    <span class="comment">-- 声明部分</span></span><br><span class="line">    i <span class="built_in">integer</span> ;</span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line">    dbms_output.put_line(<span class="string">"hello world"</span>);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><ol><li>|| 表示拼接符号(sql server的拼接符号为+)</li><li>声明变量的方式为：变量名 变量类型(长度) eg: name varchar2(length);</li><li>变量赋值方式：<br> 3.1 直接赋值语句  :=(这是赋值符号，区别于其他语言)  eg：name := ‘chd’;<br> 3.2 语句赋值 使用 select 值 into 变量 from dual；</li></ol><h3 id="2-变量类型"><a href="#2-变量类型" class="headerlink" title="2.变量类型"></a>2.变量类型</h3><p>变量主要分为两大块：<strong>普通变量类型</strong>和 <strong>引用型变量</strong></p><blockquote><p>普通变量类型：前提你要了解数据库字段的类型和大小</p></blockquote><ul><li>声明变量的方式为：变量名 变量类型(长度) eg: name varchar2(length);</li><li>变量赋值方式：<ul><li>直接赋值语句  :=(这是赋值符号，区别于其他语言)  eg：name := ‘chd’;</li><li>语句赋值 使用 select 值 into 变量 from dual；<br>普通变量类型的SQL查询</li></ul></li></ul><blockquote><p>引用型变量：变量的类型和长度决定表中字段的类型和长度</p></blockquote><ul><li>声明变量的方式： 变量名 表名.列名%TYPE (即定义的变量的数据类型借用某个表下的某一列的数据类型)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">eg:name 表名.列名%TYPE (推荐使用，不必了解数据库架构) </span><br><span class="line">declare</span><br><span class="line">    v_name TW_DATAS.mny%TYPE;</span><br><span class="line">    age tw_datas.rate%TYPE;</span><br><span class="line"></span><br><span class="line">begin</span><br><span class="line"></span><br><span class="line">  select mny, rate into v_name, age from TW_DATAS where ly_rate = 12;</span><br><span class="line">  dbms_output.put_line( &apos; hello java&apos; || &apos;MNY： &apos; ||&apos; &apos;|| v_name || &apos;RATE： &apos; || age); --打印hello world</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><ul><li>变量赋值方式：<ul><li>直接赋值语句  :=(这是赋值符号，区别于其他语言)  eg：name := ‘chd’;</li><li>语句赋值 使用 select 值 into 变量 from dual；<br>普通变量类型的SQL查询</li></ul></li></ul><h3 id="3-流程控制"><a href="#3-流程控制" class="headerlink" title="3. 流程控制"></a>3. 流程控制</h3><ol><li>判断if…then…elsif…then…else…end if</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">BEGIN </span><br><span class="line">    IF 条件 THEN 执行一;</span><br><span class="line">    ELSIF  条件二 THEN 执行二;</span><br><span class="line">    ELSE 执行否则;</span><br><span class="line">    END IF ;</span><br><span class="line">END</span><br><span class="line">-- 举例说明</span><br><span class="line">declare</span><br><span class="line">  v_emp TW_DATAS%ROWTYPE;</span><br><span class="line">  v_count number;</span><br><span class="line">begin</span><br><span class="line">       select count(distinct item_name) into v_count from Tw_Datas;</span><br><span class="line">      dbms_output.put_line(v_count);</span><br><span class="line">      if v_count &gt;= 300 then</span><br><span class="line">        dbms_output.put_line(v_count + 1);</span><br><span class="line">      elsif 200 &lt; v_count then</span><br><span class="line">        dbms_output.put_line(v_count - 100);</span><br><span class="line">      else</span><br><span class="line">        dbms_output.put_line(v_count);</span><br><span class="line">      </span><br><span class="line">      end if;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><ol start="2"><li>循环Loop</li></ol><ul><li><p>for循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">create or replace procedure mydemo09</span><br><span class="line">as</span><br><span class="line">begin</span><br><span class="line"></span><br><span class="line"> for stu in (select * from students) loop</span><br><span class="line">     if (stu.id&lt;5) then</span><br><span class="line">        dbms_output.put_line(stu.id);</span><br><span class="line">      end if;</span><br><span class="line">  end loop;</span><br><span class="line">commit;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">-- 调用存储过程</span><br><span class="line">begin</span><br><span class="line">  mydemo09();</span><br><span class="line">end;</span><br></pre></td></tr></table></figure></li><li><p>while循环</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">create or replace procedure test_while_loop as</span><br><span class="line">  n_count number := 0;</span><br><span class="line">begin </span><br><span class="line">  while n_count &lt; 10 loop</span><br><span class="line">    dbms_output.put_line(n_count);</span><br><span class="line">    n_count := n_count + 1;</span><br><span class="line">  end loop;</span><br><span class="line">end;</span><br><span class="line"> </span><br><span class="line">begin</span><br><span class="line">  test_while_loop();</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><h3 id="4-游标cursor"><a href="#4-游标cursor" class="headerlink" title="4.游标cursor"></a>4.游标cursor</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>游标（Cursor）是处理数据的一种方法，为了查看或者处理结果集中的数据，游标提供了在结果集中一次一行或者多行前进或向后浏览数据的能力。</p><h4 id="游标的分类"><a href="#游标的分类" class="headerlink" title="游标的分类"></a>游标的分类</h4><p>游标有两种类型：显式游标和隐式游标。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般我们用到的SELECT…INTO…查询语句，一次只能从数据库中提取一行数据，对于这种形式的查询和DML操作，系统都会使用一个隐式游标。但是如果要提取多行数据，就需要由程序员定义一个显式游标，并通过与游标有关的语句进行处理。显式游标对应一个返回结果为多行多列的SELECT语句。 游标一旦打开，数据就从数据库中传送到游标变量中，然后应用程序再从游标变量中分解出需要的数据，并进行处理。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;简单的DML操纵语句和单行查询语句会使用隐式游标，这些语句分别是插入insert语句，更新update语句，删除delete语句，单行select查询语句。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当系统使用一个隐式游标时，可以通过隐式游标的属性来了解操作的状态和结果，进而控制程序的流程。隐式游标可以使用名字SQL来访问，但要注意，通过SQL游标名总是只能访问前一个DML操作或单行SELECT操作的游标属性。所以通常在刚刚执行完操作之后，立即使用SQL游标名来访问属性。</p><p>游标的属性有以下四种：</p><ol><li>SQL%ROWCOUNT    返回值为一个整型数字  代表DML语句成功执行的数据行数<br>　 2. SQL%FOUND   布尔型 值为TRUE代表插入、删除、更新或单行查询操作成功<br>　 3. SQL%NOTFOUND    布尔型 值为true表示插入、删除、更新或单行查询操作失败。<br>　 4. SQL%ISOPEN  布尔型 DML执行过程中为真，结束后为假 </li></ol><h4 id="游标的使用"><a href="#游标的使用" class="headerlink" title="游标的使用"></a>游标的使用</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 使用游标查询emp表中所有员工的姓名和工资</span></span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">    <span class="comment">-- 声明游标,c_emp为游标名</span></span><br><span class="line">    <span class="keyword">cursor</span> c_emp <span class="keyword">is</span> </span><br><span class="line">        <span class="comment">-- 业务代码块</span></span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">name</span>,salary <span class="keyword">from</span> emp;</span><br><span class="line">    <span class="comment">-- 声明变量用来接收游标中的元素</span></span><br><span class="line">    psnname emp.name%TYPE;</span><br><span class="line">    salary emp.salary%TYPE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="comment">--打开游标</span></span><br><span class="line">    <span class="keyword">open</span> c_emp;</span><br><span class="line">    <span class="comment">-- 遍历游标中的值</span></span><br><span class="line">    loop</span><br><span class="line">        <span class="comment">--通过fetch语句获取游标中的值并赋值给变量</span></span><br><span class="line">        fetch c_emp into psnname,salary;</span><br><span class="line">        <span class="comment">-- 通过%NOTFOUND判断是否有值，有值打印，没有则退出循环</span></span><br><span class="line">        exit when c_emp%NOTFOUND;</span><br><span class="line">        dbms_output.put_line( '姓名:' || psnname || ',薪水：' || salary);</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">loop</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">-- 关闭游标</span></span><br><span class="line">    close c_emp;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><h3 id="5-Oracle存储过程（一）"><a href="#5-Oracle存储过程（一）" class="headerlink" title="5.Oracle存储过程（一）"></a>5.Oracle存储过程（一）</h3><p>存储过程中没有declare，declare用于在语句块中，存储过程可以理解为java的方法，可以多次调用的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">create or replace procedure 过程名称[(参数列表)] is(as,两者互用，功能一样)</span><br><span class="line">begin</span><br><span class="line">    ...</span><br><span class="line">end 过程名称;</span><br><span class="line">创建的过程：</span><br><span class="line">    1.点击PL/SQL的文件--&gt;新建--&gt; 程序窗口--&gt; Procedure--&gt; ...--&gt; </span><br><span class="line">        编写完进行编译</span><br><span class="line">    2.调用Procedure文件：新的函数窗口下</span><br><span class="line">        begin</span><br><span class="line">            直接调用已编译好的Procedure文件</span><br><span class="line">        end</span><br></pre></td></tr></table></figure><ul><li><p>变量声明，赋值的存储过程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">create or replace procedure mydemo</span><br><span class="line">as</span><br><span class="line">name varchar(10); -- 声明变量，注意varchar需要指定长度</span><br><span class="line">age int;</span><br><span class="line">begin</span><br><span class="line">    name := &apos;Bob&apos;;</span><br><span class="line">    age:= 18;</span><br><span class="line">    --通过||符号达到连接字符串的功能</span><br><span class="line">    dbms_output.put_line(&apos;name=&apos;||name||&apos;, age=&apos;||age);</span><br><span class="line">end;</span><br></pre></td></tr></table></figure></li><li><p>带有参数的存储过程</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">create or replace procedure myDemo03(name in varchar,age in int)</span><br><span class="line">as</span><br><span class="line">begin</span><br><span class="line">  dbms_output.put_line(&apos;name=&apos;||name||&apos;, age=&apos;||age);</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">-- 调用存储过程 </span><br><span class="line">begin</span><br><span class="line">  myDemo03(&apos;xiaoming&apos;,18);</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><p><strong>注意参数 in</strong><br>在调用存储过程时，如果存储过程没有参数，调用时括号()可以不带。<br>存储过程带参数需要注意参数的传递参数时的一致性，按顺序依次传递。</p><ul><li>实参形参问题</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">create or replace procedure myDemo04(name in varchar,age in int)</span><br><span class="line">as</span><br><span class="line">begin</span><br><span class="line">  dbms_output.put_line(&apos;name=&apos;||name||&apos;, age=&apos;||age);</span><br><span class="line">end;</span><br><span class="line"> </span><br><span class="line">declare</span><br><span class="line"> name varchar(10);</span><br><span class="line"> age int;</span><br><span class="line">begin</span><br><span class="line">  name:=&apos;xiaoming&apos;;</span><br><span class="line">  age:=18;</span><br><span class="line">  myDemo04(name=&gt;name,age=&gt;18);--此时不能myDemo04(name=&gt;name,18)，不能完成调用。</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><p>注;在调用存储过程时，<strong>=&gt;前面的变量为存储过程的形参且必须于存储过程中定义的一致</strong>，而=&gt;后的参数为实际参数。当然也不可以不定义变量保存实参</p><ul><li>in,out问题</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">create or replace procedure myDemo05(name out varchar,age in int)</span><br><span class="line">as</span><br><span class="line">begin</span><br><span class="line">  dbms_output.put_line(&apos;age=&apos;||age);</span><br><span class="line">  select &apos;xiaoming&apos; into name from dual;</span><br><span class="line">end;</span><br><span class="line"> </span><br><span class="line">declare</span><br><span class="line"> name varchar(10);</span><br><span class="line"> age int;</span><br><span class="line">begin</span><br><span class="line">  myDemo05(name=&gt;name,age=&gt;10);</span><br><span class="line">  dbms_output.put_line(&apos;name=&apos;||name);</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><p>PS：in代表输入，out用于输出，参数默认类型是in类型</p><ul><li>带输出参数的存储结果</li></ul><p>带输出参数的存储过程一般是通过第三方程序来调用，这里举例Java调用存储过程：<br><a href="https://www.jianshu.com/p/8ad29c4c8114" target="_blank" rel="noopener">https://www.jianshu.com/p/8ad29c4c8114</a></p><ul><li>异常问题，执行结果如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">create or replace procedure mydemo0006</span><br><span class="line">as</span><br><span class="line">age int;</span><br><span class="line">begin</span><br><span class="line">  age:=10/0;</span><br><span class="line">  dbms_output.put_line(age);</span><br><span class="line">  exception when others   then</span><br><span class="line">    dbms_output.put_line(&apos;error&apos;);</span><br><span class="line">end;</span><br><span class="line"> </span><br><span class="line">begin</span><br><span class="line">  mydemo0006();</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><h3 id="6-Oracle存储过程（二）"><a href="#6-Oracle存储过程（二）" class="headerlink" title="6.Oracle存储过程（二）"></a>6.Oracle存储过程（二）</h3><p>两种循环+基本增删改查操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">create or replace procedure mydemo07(ids in int, username in varchar,userpass in varchar, userage in int)</span><br><span class="line">as</span><br><span class="line">begin</span><br><span class="line">    -- insert into students(id,username,userpass,userage)--增</span><br><span class="line">    -- values(ids,username,userpass,userage);</span><br><span class="line">    -- delete from students where id=ids;--删</span><br><span class="line">    --update students set userage=100 where id=ids;--改</span><br><span class="line">commit;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">begin</span><br><span class="line">mydemo07(10,&apos;a&apos;,&apos;b&apos;,&apos;17&apos;);</span><br><span class="line">end;</span><br><span class="line">---------------------------</span><br><span class="line">create or replace procedure mydemo08(ids in int, age out int)</span><br><span class="line">as</span><br><span class="line">begin</span><br><span class="line">    select userage into age from students where id=ids; --查</span><br><span class="line">    commit;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">declare</span><br><span class="line">    ids int;</span><br><span class="line">    age int;</span><br><span class="line">begin</span><br><span class="line">    ids:=1;</span><br><span class="line">    myDemo08(ids=&gt;ids,age=&gt;age);</span><br><span class="line">    dbms_output.put_line(&apos;age=&apos;||age);</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><p>for循环：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">create or replace procedure mydemo09</span><br><span class="line">as</span><br><span class="line">begin</span><br><span class="line"></span><br><span class="line">for stu in (select * from students) </span><br><span class="line">    loop</span><br><span class="line">         if (stu.id&lt;5) then</span><br><span class="line">            dbms_output.put_line(stu.id);</span><br><span class="line">         end if;</span><br><span class="line">    end loop;</span><br><span class="line">commit;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">begin</span><br><span class="line">  mydemo09();</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><h3 id="7-存储过程补充点"><a href="#7-存储过程补充点" class="headerlink" title="7.存储过程补充点"></a>7.存储过程补充点</h3><ol><li><p>存储过程中的Execute immediate</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">在存储过程的开头，begin之前，经常会看到这么一段语句</span><br><span class="line"></span><br><span class="line">procedure name</span><br><span class="line"></span><br><span class="line">is</span><br><span class="line"></span><br><span class="line">PRAGMA AUTONOMOUS_TRANSACTION;——————自治事物</span><br><span class="line"></span><br><span class="line">Begin</span><br><span class="line">       -- 清空原表数据</span><br><span class="line">       Execute immediate ’truncate table xxx’;</span><br><span class="line"></span><br><span class="line">End</span><br><span class="line"></span><br><span class="line">为什么要用Execute immediate ’truncate table xxx’;而不是直接在begin里写truncate 呢？</span><br><span class="line"></span><br><span class="line">原因：因为存储过程中是没有truncate这条语句的，直接在存储过程中写truncate是会报错的。</span><br><span class="line">存储过程中只能写delete之类的语句。Execute immediate后台执行该语句，令存储过程强行转了SQL。</span><br><span class="line">SQL命令下是允许执行truncate的。所以，如果没有存储过程的权限，而有SQL的权限，可以使用execute immediate来执行。</span><br><span class="line">详细使用案例：</span><br><span class="line"></span><br><span class="line">CREATE OR REPLACE PROCEDURE PRO_TEST() IS</span><br><span class="line">  V_SQL VARCHAR2(2000) := &apos;&apos;;</span><br><span class="line">  V_NUM NUMBER;</span><br><span class="line">BEGIN</span><br><span class="line">  --EXECUTE IMMEDIATE用法1:立刻执行</span><br><span class="line">  V_SQL := &apos;create or replace view mytest as select employee_id, first_name from employees&apos;;</span><br><span class="line">  EXECUTE IMMEDIATE V_SQL;</span><br><span class="line">  --EXECUTE IMMEDIATE用法2:立刻执行,并赋值给某变量</span><br><span class="line">  V_SQL := &apos;select count(1) from employees&apos;;</span><br><span class="line">  EXECUTE IMMEDIATE V_SQL;</span><br><span class="line">  INTO V_NUM;</span><br><span class="line">  --EXECUTE IMMEDIATE用法3:带参数的sql</span><br><span class="line">  V_SQL := &apos;select * from employees e where e.employee_id = :1 and first_name = :2&apos;;</span><br><span class="line">  EXECUTE IMMEDIATE V_SQL;</span><br><span class="line">  USING 200, &apos;Jennifer&apos;;</span><br><span class="line">END PRO_TEST;</span><br></pre></td></tr></table></figure></li><li><p>Oracle的转义字符</p></li></ol><ul><li>CHR(10)和 CHR(13)——在oracle都为换行</li><li>chr(32)——表示空格</li><li>&#39; &#39; 一对单引号表示的是字符串，两对单引号表示转义字符串的内容，比如</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- 在sql里</span><br><span class="line">&apos;name&apos; =&gt; 字符串</span><br><span class="line">&apos;&apos;name&apos;&apos; =&gt; &apos;name&apos;</span><br><span class="line">举例说明：</span><br><span class="line">&apos; syear_name || substr(replace(speriod_name,&apos;&apos;月&apos;&apos;,&apos;&apos;&apos;&apos;) + 100,2,2) as smonth,&apos; </span><br><span class="line">⬇</span><br><span class="line">syear_name || substr(replace(speriod_name,&apos;月&apos;,&apos;&apos;) + 100,2,2) as smonth,</span><br></pre></td></tr></table></figure><h3 id="8-实际案例"><a href="#8-实际案例" class="headerlink" title="8.实际案例"></a>8.实际案例</h3><ol><li>查询某个员工的（比如9527）的姓名与薪水，传入参数为id</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">procedure</span> P_QUERYNAMEANDSAL(psncode <span class="keyword">in</span> emp.empno%<span class="keyword">TYPE</span>) <span class="keyword">is</span> </span><br><span class="line">    <span class="comment">-- 声明变量并接收查询结果</span></span><br><span class="line">    username emp.ename%<span class="keyword">TYPE</span> ;</span><br><span class="line">    sal emp.salary%TYPE ;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="comment">-- 根据用户传递的员工1号查询姓名与薪水</span></span><br><span class="line">    <span class="keyword">select</span> ename,sal <span class="keyword">into</span> username,sal <span class="keyword">from</span> emp</span><br><span class="line">    <span class="keyword">where</span> empno = psncode;</span><br><span class="line">    <span class="comment">-- 打印结果</span></span><br><span class="line">    dbms_output.put_line(username || ':' || sal);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>存储过程类似于Java中的方法，那我们该如何调用：<br>在测试窗口调用存储过程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span></span><br><span class="line">    <span class="comment">--声明变量id</span></span><br><span class="line">    <span class="keyword">id</span> emp.id%<span class="keyword">TYPE</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="comment">-- 变量赋值</span></span><br><span class="line">    <span class="keyword">id</span> := <span class="number">7839</span>;</span><br><span class="line">    <span class="comment">-- 存储过程调用方式一</span></span><br><span class="line">    p_querynameandsal(id);</span><br><span class="line">    <span class="comment">-- 存储结果调用方式二：直接赋值调用</span></span><br><span class="line">    p_querynameandsal（7839）;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://blog.csdn.net/wanlong360599336/article/details/52415420" target="_blank" rel="noopener">sqlserver存储过程学习(通俗易懂)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库存储过程(一)：sql server</title>
      <link href="/2020/06/09/sql%E7%B3%BB%E5%88%97%E6%9B%B4%E6%96%B0%EF%BC%88%E4%B8%83%EF%BC%89/"/>
      <url>/2020/06/09/sql%E7%B3%BB%E5%88%97%E6%9B%B4%E6%96%B0%EF%BC%88%E4%B8%83%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;存储过程是由一个或多个T-SQL语句组成的语句组，它可以接受输入参数和输出参数且能向调用程序返回多个值；可以调用其他过程；可以向调用程序返回结果状态值以标记执行成功或失败；</p><a id="more"></a><h3 id="1-SQL-server存储过程"><a href="#1-SQL-server存储过程" class="headerlink" title="1.SQL server存储过程"></a>1.SQL server存储过程</h3><ol><li>变量的声明</li></ol><p><strong>声明变量时必须在变量前加<code>@</code>符号</strong>： declare @i int（声明变量数据类型为int类型的i）<br>declare @s varchar(10),@a int;(声明多个变量)<br>print @s 打印变量值<br>每条语句以”;”结尾</p><ol start="2"><li>变量的赋值<ul><li>变量赋值时变量前必须加<code>set</code>：set @i = 5;</li><li>使用select语句赋值：</li></ul></li><li>循环语句</li></ol><p><strong>begin…end 类似于编程语言的{}</strong></p><p><strong>if语句</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if ..</span><br><span class="line">begin</span><br><span class="line">  ...</span><br><span class="line">end</span><br><span class="line">else if ..</span><br><span class="line">begin</span><br><span class="line">  ...</span><br><span class="line">end</span><br><span class="line">else</span><br><span class="line">begin</span><br><span class="line">  ...</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>eg:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> @d <span class="built_in">INT</span></span><br><span class="line"><span class="keyword">set</span> @d = <span class="number">1</span></span><br><span class="line"><span class="keyword">IF</span> @d = <span class="number">1</span> <span class="keyword">BEGIN</span></span><br><span class="line">   PRINT <span class="string">'正确'</span></span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="keyword">BEGIN</span></span><br><span class="line">   PRINT <span class="string">'错误'</span></span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><p><strong>多条件查询语句：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 多条件选择语句</span></span><br><span class="line"><span class="keyword">declare</span> @today <span class="built_in">int</span></span><br><span class="line"><span class="keyword">declare</span> @<span class="keyword">week</span> <span class="keyword">nvarchar</span>(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">set</span> @today=<span class="number">3</span></span><br><span class="line"><span class="keyword">set</span> @<span class="keyword">week</span>= <span class="keyword">case</span></span><br><span class="line">     <span class="keyword">when</span> @today=<span class="number">1</span> <span class="keyword">then</span> <span class="string">'星期一'</span></span><br><span class="line">     <span class="keyword">when</span> @today=<span class="number">2</span> <span class="keyword">then</span> <span class="string">'星期二'</span></span><br><span class="line">     <span class="keyword">when</span> @today=<span class="number">3</span> <span class="keyword">then</span> <span class="string">'星期三'</span></span><br><span class="line">     <span class="keyword">when</span> @today=<span class="number">4</span> <span class="keyword">then</span> <span class="string">'星期四'</span></span><br><span class="line">     <span class="keyword">when</span> @today=<span class="number">5</span> <span class="keyword">then</span> <span class="string">'星期五'</span></span><br><span class="line">     <span class="keyword">when</span> @today=<span class="number">6</span> <span class="keyword">then</span> <span class="string">'星期六'</span></span><br><span class="line">     <span class="keyword">when</span> @today=<span class="number">7</span> <span class="keyword">then</span> <span class="string">'星期日'</span></span><br><span class="line">     <span class="keyword">else</span> <span class="string">'值错误'</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">print @<span class="keyword">week</span></span><br></pre></td></tr></table></figure><p><strong>while循环语句：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> @i <span class="built_in">int</span> </span><br><span class="line"><span class="keyword">set</span> @i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> @i&lt;<span class="number">1000</span> <span class="keyword">begin</span> </span><br><span class="line">    <span class="keyword">set</span> @i = @i+<span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ol start="4"><li>定义游标</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--创建一个游标</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--my_cursor为游标的名称，随便起</span></span><br><span class="line"><span class="keyword">declare</span> my_cursor <span class="keyword">cursor</span> <span class="keyword">for</span> </span><br><span class="line">    <span class="comment">--这是游标my_cursor的值，这里随便发挥看业务场景    </span></span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span> <span class="keyword">from</span> my_user </span><br><span class="line">     </span><br><span class="line"><span class="comment">--打开游标</span></span><br><span class="line"><span class="keyword">open</span> my_cursor </span><br><span class="line"><span class="comment">--声明变量</span></span><br><span class="line"><span class="keyword">declare</span>   @<span class="keyword">id</span> <span class="built_in">int</span>               <span class="comment">--声明变量  ‘declare’为声明变量 ‘@name’为变量名称 后面为变量类型</span></span><br><span class="line"><span class="keyword">declare</span>   @<span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">50</span>)     <span class="comment">--这里是两个变量用来接收游标的值</span></span><br><span class="line"><span class="comment">--循环游标</span></span><br><span class="line"><span class="keyword">fetch</span> <span class="keyword">next</span> <span class="keyword">from</span> my_cursor <span class="keyword">into</span> @<span class="keyword">id</span>,@<span class="keyword">name</span>  <span class="comment">--获取my_cursor的下一条数据，其中为两个字段分别赋值给@id,@name</span></span><br><span class="line"><span class="keyword">while</span> @@FETCH_STATUS=<span class="number">0</span> <span class="comment">--假如检索到了数据继续执行</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        print(@<span class="keyword">name</span>) <span class="comment">--print()打印变量 随便发挥</span></span><br><span class="line">        <span class="keyword">select</span> * <span class="keyword">from</span> my_user <span class="keyword">where</span> <span class="keyword">id</span>=@<span class="keyword">id</span> <span class="comment">--这里是具体业务了，随便发挥。而我这是又执行了一次查询 </span></span><br><span class="line">        <span class="keyword">fetch</span> <span class="keyword">next</span> <span class="keyword">from</span> my_cursor <span class="keyword">into</span> @<span class="keyword">id</span>,@<span class="keyword">name</span> <span class="comment">--获取下一条数据并赋值给变量</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="comment">--关闭并释放游标</span></span><br><span class="line"><span class="keyword">close</span> my_cursor</span><br><span class="line"><span class="keyword">deallocate</span> my_cursor</span><br></pre></td></tr></table></figure><ol start="5"><li><p>临时表（参考sql系列更新六）</p></li><li><p>SQL server的存储过程创建语法：</p></li></ol><p><strong>GO在存储过程或语句中起结束，终止上面语句的作用</strong></p><ul><li>创建语法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create proc | procedure pro_name</span><br><span class="line">    [&#123;@参数数据类型&#125; [=默认值] [output],</span><br><span class="line">     &#123;@参数数据类型&#125; [=默认值] [output],</span><br><span class="line">     ....</span><br><span class="line">    ]</span><br><span class="line">as</span><br><span class="line">    SQL_statements</span><br></pre></td></tr></table></figure><ul><li>创建不带参数的存储过程</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">--创建存储过程</span><br><span class="line">if (exists (select * from sys.objects where name = &apos;proc_get_student&apos;))</span><br><span class="line">    drop proc proc_get_student</span><br><span class="line">go</span><br><span class="line">create proc proc_get_student</span><br><span class="line">as</span><br><span class="line">    select * from student;</span><br><span class="line"></span><br><span class="line">--调用、执行存储过程</span><br><span class="line">exec proc_get_student;</span><br></pre></td></tr></table></figure><ul><li>带参数的存储过程</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--带参存储过程</span></span><br><span class="line">if (object_id('proc_find_stu', 'P') is not null)</span><br><span class="line">    <span class="keyword">drop</span> proc proc_find_stu</span><br><span class="line"><span class="keyword">go</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> proc_find_stu(@startId <span class="built_in">int</span>, @endId <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">between</span> @startId <span class="keyword">and</span> @endId</span><br><span class="line"><span class="keyword">go</span></span><br><span class="line"></span><br><span class="line">exec proc_find_stu <span class="number">2</span>, <span class="number">4</span>;</span><br></pre></td></tr></table></figure><ul><li>带通配符参数的存储过程</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--带通配符参数存储过程</span></span><br><span class="line">if (object_id('proc_findStudentByName', 'P') is not null)</span><br><span class="line">    <span class="keyword">drop</span> proc proc_findStudentByName</span><br><span class="line"><span class="keyword">go</span></span><br><span class="line"><span class="keyword">create</span> proc proc_findStudentByName(@<span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>) = <span class="string">'%j%'</span>, @nextName <span class="built_in">varchar</span>(<span class="number">20</span>) = <span class="string">'%'</span>)</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> @<span class="keyword">name</span> <span class="keyword">and</span> <span class="keyword">name</span> <span class="keyword">like</span> @nextName;</span><br><span class="line">go</span><br><span class="line"></span><br><span class="line">exec proc_findStudentByName;</span><br><span class="line">exec proc_findStudentByName '%o%', 't%';</span><br></pre></td></tr></table></figure><ul><li>带输出参数的存储过程★★</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">if (object_id('proc_getStudentRecord', 'P') is not null)</span><br><span class="line">    <span class="keyword">drop</span> proc proc_getStudentRecord</span><br><span class="line"><span class="keyword">go</span></span><br><span class="line"><span class="keyword">create</span> proc proc_getStudentRecord(</span><br><span class="line">    @<span class="keyword">id</span> <span class="built_in">int</span>, <span class="comment">--默认输入参数</span></span><br><span class="line">    @<span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">out</span>, <span class="comment">--输出参数</span></span><br><span class="line">    @age <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">output</span><span class="comment">--输入输出参数</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line">    <span class="keyword">select</span> @<span class="keyword">name</span> = <span class="keyword">name</span>, @age = age  <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">id</span> = @<span class="keyword">id</span> <span class="keyword">and</span> sex = @age;</span><br><span class="line">go</span><br><span class="line"></span><br><span class="line"><span class="comment">-- </span></span><br><span class="line"><span class="keyword">declare</span> @<span class="keyword">id</span> <span class="built_in">int</span>,</span><br><span class="line">        @<span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">        @temp <span class="built_in">varchar</span>(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">set</span> @<span class="keyword">id</span> = <span class="number">7</span>; </span><br><span class="line"><span class="keyword">set</span> @temp = <span class="number">1</span>;</span><br><span class="line"><span class="comment">-- exec代表执行的含义</span></span><br><span class="line">exec proc_getStudentRecord @id, @name out, @temp output;</span><br><span class="line"><span class="keyword">select</span> @<span class="keyword">name</span>, @temp;</span><br><span class="line">print @name + '<span class="comment">#' + @temp;</span></span><br></pre></td></tr></table></figure><ul><li>带游标参数存储过程★★</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">if (object_id('proc_cursor', 'P') is not null)</span><br><span class="line">    <span class="keyword">drop</span> proc proc_cursor</span><br><span class="line"><span class="keyword">go</span></span><br><span class="line"><span class="keyword">create</span> proc proc_cursor</span><br><span class="line">    @cur <span class="keyword">cursor</span> <span class="built_in">varying</span> <span class="keyword">output</span></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line">    <span class="keyword">set</span> @cur = <span class="keyword">cursor</span> forward_only <span class="keyword">static</span> <span class="keyword">for</span></span><br><span class="line">    <span class="comment">-- 这里是具体业务了，随便发挥</span></span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">id</span>, <span class="keyword">name</span>, age <span class="keyword">from</span> student;</span><br><span class="line">    open @cur;</span><br><span class="line">go</span><br><span class="line"><span class="comment">--调用</span></span><br><span class="line"><span class="keyword">declare</span> @exec_cur <span class="keyword">cursor</span>;</span><br><span class="line"><span class="keyword">declare</span> @<span class="keyword">id</span> <span class="built_in">int</span>,</span><br><span class="line">        @<span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">        @age <span class="built_in">int</span>;</span><br><span class="line">exec proc_cursor @cur = @exec_cur output;<span class="comment">--调用存储过程</span></span><br><span class="line">fetch next from @exec_cur into @id, @name, @age;</span><br><span class="line">while (@@fetch_status = 0)</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">fetch</span> <span class="keyword">next</span> <span class="keyword">from</span> @exec_cur <span class="keyword">into</span> @<span class="keyword">id</span>, @<span class="keyword">name</span>, @age;</span><br><span class="line">        print 'id: ' + convert(varchar, @id) + ', name: ' + @name + ', age: ' + convert(char, @age);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">close</span> @exec_cur;</span><br><span class="line"><span class="keyword">deallocate</span> @exec_cur;<span class="comment">--删除游标</span></span><br></pre></td></tr></table></figure><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://blog.csdn.net/wanlong360599336/article/details/52415420" target="_blank" rel="noopener">sqlserver存储过程学习(通俗易懂)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql临时表</title>
      <link href="/2020/06/08/sql%E7%B3%BB%E5%88%97%E6%9B%B4%E6%96%B0%EF%BC%88%E5%85%AD%EF%BC%89/"/>
      <url>/2020/06/08/sql%E7%B3%BB%E5%88%97%E6%9B%B4%E6%96%B0%EF%BC%88%E5%85%AD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;临时表顾名思义，<strong>是一个临时的表</strong>，数据库不会将其序列化到磁盘上(有些也会序列化到磁盘上)而是存在于数据库服务器的内存中(因此会增加数据库服务器内存的消耗)，在使用完之后就会销毁。<br>临时表分为两种：<strong>会话临时表和全局临时表</strong>，区别在于可用的作用域和销毁的时机不同。</p><a id="more"></a><h3 id="1-SQL-server临时表"><a href="#1-SQL-server临时表" class="headerlink" title="1.SQL server临时表"></a>1.SQL server临时表</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;临时表分为两种：<strong>会话临时表和全局临时表</strong>，区别在于可用的作用域和销毁的时机不同。</p><ul><li>会话临时表只在当前会话(连接)内可用，且在当前会话结束(断开数据库连接)后就会销毁；</li><li>全局临时表创建后在销毁之前所有用户都可以访问，销毁的时机是在创建该临时表的连接断开且没有其他会话访问时才销毁，<font color=#FF3030>实际上在创建全局临时表的会话断开后，其他用户就已经不能在访问该临时表了，但此时该临时表并不会立即销毁，而是等所有正在使用该全局临时表的会话(或者说连接)断开之后才会销毁</font>。当然有时考虑到内存占用的问题，我们也可以手动销毁(DROP)临时表。</li></ul><p><strong>sql server临时表的创建</strong></p><ul><li>会话临时表：以 “#”作为前缀，后面加上表名</li><li>全局临时表：以 “##”作为前缀，后面加上表名</li></ul><p>创建方式一：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#会话临时表</span><br><span class="line">CREATE TABLE #临时表名(</span><br><span class="line">字段1 约束条件1,</span><br><span class="line">字段2 约束条件2,</span><br><span class="line">...</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#全局临时表</span><br><span class="line">CREATE TABLE ##临时表名(</span><br><span class="line">字段1 约束条件,</span><br><span class="line">字段2 约束条件,</span><br><span class="line">...</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>创建方式二：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#会话临时表</span><br><span class="line">SELECT 字段列表 INTO #临时表名 </span><br><span class="line">FROM 业务表;</span><br><span class="line"></span><br><span class="line">#全局临时表</span><br><span class="line">SELECT 字段列表 INTO ##临时表名 </span><br><span class="line">FROM 业务表;</span><br></pre></td></tr></table></figure><p><strong>临时表的使用：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#查询临时表</span><br><span class="line">SELECT * FROM #临时表名;</span><br><span class="line">SELECT * FROM ##临时表名;</span><br></pre></td></tr></table></figure><p><strong>临时表的删除：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#删除临时表</span><br><span class="line">DROP TABLE #临时表名;</span><br><span class="line">DROP TABLE ##临时表名;</span><br></pre></td></tr></table></figure><h3 id="2-mysql临时表"><a href="#2-mysql临时表" class="headerlink" title="2.mysql临时表"></a>2.mysql临时表</h3><p><strong>MySQL临时表的创建：</strong> MySQL中没有全局临时表，创建时候没有“#”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE TEMPORARY TABLE [IF NOT EXISTS] 临时表名(</span><br><span class="line">字段1 约束条件,</span><br><span class="line">字段2 约束条件,</span><br><span class="line">...</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#根据现有表创建临时表</span><br><span class="line">CREATE TEMPORARY TABLE [IF NOT EXISTS] 临时表名</span><br><span class="line">[AS] SELECT 查询字段</span><br><span class="line">FROM 业务表</span><br><span class="line">[WHERE 条件];</span><br></pre></td></tr></table></figure><p><strong>MySQL临时表的使用：</strong> 创建的临时表可以和业务表同名，若临时表和业务表同名则在该会话中会使用临时表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from 临时表名</span><br></pre></td></tr></table></figure><p><strong>MySQL临时表的删除</strong>：为避免临时表名和业务表名相同时导致误删除，<em>可以加上TEMPORARY关键字</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP [TEMPORARY] TABLE 临时表名;</span><br></pre></td></tr></table></figure><h3 id="3-Oracle临时表"><a href="#3-Oracle临时表" class="headerlink" title="3.Oracle临时表"></a>3.Oracle临时表</h3><p>Oracle的临时表也只有会话级的，但同时又细化出了一个事务级别的临时表，事务级别的临时表只在当前事务中有效。</p><p><strong>Oracle临时表的创建：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#会话级别：当COMMIT的时候保留数据，当会话结束删除数据</span><br><span class="line">CREATE GLOBAL TEMPORARY TABLE 临时表名(</span><br><span class="line">字段1 约束条件,</span><br><span class="line">字段2 约束条件,</span><br><span class="line">...</span><br><span class="line">) ON COMMIT PRESERVE ROWS;</span><br><span class="line"></span><br><span class="line">#事务级别：当COMMIT的时候删除数据（默认情况）</span><br><span class="line">CREATE GLOBAL TEMPORARY TABLE 临时表名(</span><br><span class="line">字段1 约束条件,</span><br><span class="line">字段2 约束条件,</span><br><span class="line">...</span><br><span class="line">) ON COMMIT DELETE ROWS;</span><br></pre></td></tr></table></figure><p><strong>oracle临时表的删除</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE 临时表名;</span><br></pre></td></tr></table></figure><p>注意：一个SQL中不能同时出现两次临时表</p>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java（十二）：Junit测试与反射</title>
      <link href="/2020/05/13/Java%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89/"/>
      <url>/2020/05/13/Java%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>反射：框架的灵魂</strong><br><strong>本章内容：</strong></p><blockquote><p>1.Junit测试<br>2.注解<br>3.反射</p></blockquote><a id="more"></a><h3 id="1-Junit测试"><a href="#1-Junit测试" class="headerlink" title="1.Junit测试"></a>1.Junit测试</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Junit白盒测试步骤：</p><ol><li>定义一个测试类<br>类名：被测试的类名Test ：CalculatorTest<br>包名：xxx.xxx.test cn.Tencent.test</li><li>定义测试方法：可以独立运行<br>方法名：test测试的方法名  testAdd()<br>返回值：void<br>参数列表：空参</li><li>给方法加@Test （<strong>注解，与之前的覆写@Override一样</strong>）</li><li>导入junit的依赖（使用时一定要导入junit的依赖，可以在maven中的pom.xml文件导入junit）</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li><p>判定：我们一般会使用断言操作来处理结果<br>Assert.assertEquals(期望的结果，程序运行的结果)</p></li><li><p>Junit的@Before与@After<br>@Before:初始化方法，用于资源的申请，所有的测试方法在执行前都会先自动执行该方法<br>@After:释放资源方法，用于资源的释放，所有的测试方法在执行后都会自动执行该方法</p></li></ol><p>举例说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"初始化资源。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"释放资源。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">int</span> c = a+b;</span><br><span class="line">        <span class="comment">// 断言操作</span></span><br><span class="line">        Assert.assertEquals(<span class="number">15</span>,c);</span><br><span class="line">        System.out.println(a+<span class="string">"+"</span>+b+<span class="string">"="</span>+c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br>初始化资源。。。<br>8+7=15<br>释放资源。。。</p><h3 id="2-反射"><a href="#2-反射" class="headerlink" title="2.反射"></a>2.反射</h3><ul><li>框架：半成品软件，可以在框架的基础上进行软件开发，简化编码</li><li>反射：将类的各个组成部分封装为其它对象，这就是反射机制（可以在程序运行过程在，操作这些对象；可以解耦，提高程序的可扩展性）</li></ul><p><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/20200513193833.png" alt=""></fancybox></p><ul><li><p>获取Class对象（字节码文件对象）的方式：</p><ul><li>Class.forName(“包名.类名”)：将字节码文件加载进内存，返回Class对象（<strong>多数用于配置文件，将类名定义在配置文件在，读取文件</strong>）</li><li>类名.class：通过类名的属性class获取（<strong>多用于参数的传递</strong>）</li><li>对象.getClass():getClass()方法在Object类中定义着（<strong>多用于对象的获取字节码的方式</strong>）</li></ul><p><strong>结论：同一个字节码文件(*.class)在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取的Class对象都是同一个。</strong></p></li></ul><p>举例说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.AhriLove;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 反射类：</span></span><br><span class="line"><span class="comment">    * 1.包名.类名</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 全类名</span></span><br><span class="line">        Class cls1 = Class.forName(<span class="string">"org.AhriLove.Person"</span>);</span><br><span class="line">        System.out.println(cls1);</span><br><span class="line">        <span class="comment">// 2. 类名.class</span></span><br><span class="line">        Class cls2 = Person.class;</span><br><span class="line">        System.out.println(cls2);</span><br><span class="line">        <span class="comment">// 3.对象.getClass()</span></span><br><span class="line">        Person p = <span class="keyword">new</span> Person(<span class="string">"chd"</span>,<span class="number">18</span>);</span><br><span class="line">        Class&lt;? extends Person&gt; cls3= p.getClass();</span><br><span class="line">        System.out.println(cls3);</span><br><span class="line">        <span class="comment">// 判断是否是相等时</span></span><br><span class="line">        System.out.println(cls1 == cls2);</span><br><span class="line">        System.out.println(cls1 == cls3);</span><br><span class="line">        System.out.println(p.getAge());</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 运行结果：</span></span><br><span class="line"><span class="comment">         class org.AhriLove.Person</span></span><br><span class="line"><span class="comment">         class org.AhriLove.Person</span></span><br><span class="line"><span class="comment">         class org.AhriLove.Person</span></span><br><span class="line"><span class="comment">         true</span></span><br><span class="line"><span class="comment">         true</span></span><br><span class="line"><span class="comment">         18 * */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String lover;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> name;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;<span class="keyword">this</span>.name = name;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> age;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;<span class="keyword">this</span>.age = age;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">"eat....."</span>);&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">(String food)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"eat....."</span> + food);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello world!!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><ul><li><p>Class对象的功能：<strong>Declared表示暴力反射，忽略访问修饰符，在反射面前是没有什么隐私的</strong></p><p>① 获取成员变量们</p><ul><li><p>Field[] getFields()：获取所有的public修饰的成员变量</p></li><li><p>Field getField(String name)：获取指定名称的public修饰的成员变量</p></li><li><p>Field[] getDeclaredFields()：获取所有的成员变量，不考虑修饰符</p></li><li><p>Field getDeclaredField(String name)：获取指定名称的成员变量，不考虑修饰符</p></li></ul><p>② 获取构造方法们</p><ul><li>Constructor&lt;?&gt;[] getConstructors()</li><li>Constructor<T>  getConstructors(类&lt;?&gt;…parameterTypes)</li><li>Constructor<T>  getDeclaredConstructors(类&lt;?&gt;…parameterTypes)</li><li>Constructor&lt;?&gt;[] getDeclaredConstructors()</li></ul><p>③ 获取成员方法们</p><ul><li>Method[] getMethods()</li><li>Method getMethods(String name,类&lt;?&gt;…parameterTypes)</li><li>Method[] getDeclaredMethods()</li><li>Method getDeclaredMethods(String name,类&lt;?&gt;…parameterTypes)</li></ul><p>④ 获取类名</p><ul><li>String name</li></ul></li></ul><ol><li>Field：成员变量</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">操作：</span><br><span class="line">1. 设置值 void set(Object obj,Object value)</span><br><span class="line">2. 获取值 get(Object obj)</span><br><span class="line">3.  忽略访问权限修饰符的安全检查 setAccessible(true)：暴力反射，在反射机制中不存在什么public，private等之类的权限概念</span><br></pre></td></tr></table></figure><ol start="2"><li>Constructor：构造方法</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">创建对象： T newInstance(Object... initargs)</span><br><span class="line">如果使用空参数构造方法创建对象，操作可以简化：Class对象的newInstance方法</span><br></pre></td></tr></table></figure><ol start="3"><li>Method：方法对象</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">执行方法：Object invoke(Object obj,Object... args)</span><br><span class="line">获取方法名称：</span><br></pre></td></tr></table></figure><p>举例说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.AhriLove;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflerctDemo2</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 0.获取字节码对象</span></span><br><span class="line">        Class personClass = Person.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.Field[] getFields()获取所有的public修饰的成员变量</span></span><br><span class="line">        Field[] fields = personClass.getFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field:fields) &#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"-----------------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.获取构造方法</span></span><br><span class="line">        Constructor constructor = personClass.getConstructor(String.class,<span class="keyword">int</span>.class);</span><br><span class="line">        System.out.println(constructor);</span><br><span class="line">        <span class="comment">// 全参创建对象</span></span><br><span class="line">        Object people = constructor.newInstance(<span class="string">"成都"</span>,<span class="number">150</span>);</span><br><span class="line">        System.out.println(people);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 空参创建对象</span></span><br><span class="line">        Constructor constructor2 = personClass.getConstructor();</span><br><span class="line">        Object people2 = constructor2.newInstance();</span><br><span class="line">        System.out.println(people2);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"-----------------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 获取指定名称的方法</span></span><br><span class="line">        Method eat_method = personClass.getMethod(<span class="string">"eat"</span>);</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="comment">// 执行方法</span></span><br><span class="line">        eat_method.invoke(person);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Method eat_method2 = personClass.getMethod(<span class="string">"eat"</span>,String.class);</span><br><span class="line">        <span class="comment">// 执行方法</span></span><br><span class="line">        eat_method2.invoke(person,<span class="string">"冰欺凌"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"------------------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取所有的public修饰的方法</span></span><br><span class="line">        Method[] methods = personClass.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method:methods) &#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">            <span class="comment">// 获取方法名称</span></span><br><span class="line">            System.out.println(method.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"--------------"</span>);</span><br><span class="line">        <span class="comment">// 4.获取类名</span></span><br><span class="line">        String className = personClass.getName();</span><br><span class="line">        System.out.println(className);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>反射实际应用:</strong> 写一个“框架”，可以帮我们创建任意类的对象，并且执行其中的任意方法，实现原理</p><ul><li>将需要创建的对象的全类名和执行的方法定义在配置文件中</li><li>在程序加载读取配置文件</li><li>使用反射技术来加载文件进内存</li><li>创建对象</li><li>执行方法</li></ul><ol><li>在src目录下创建一个配置pro.properties文件<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">className</span>=<span class="string">org.AhriLove.Person</span></span><br><span class="line"><span class="attr">methodName</span>=<span class="string">eat</span></span><br></pre></td></tr></table></figure></li></ol><p>2.开始完成框架类</p><h3 id="3-注解"><a href="#3-注解" class="headerlink" title="3.注解"></a>3.注解</h3><p>注解的本质其实就是一个接口interface</p><h4 id="使用注解"><a href="#使用注解" class="headerlink" title="使用注解"></a>使用注解</h4><p>注解：<strong>放在Java源码的类、方法、字段、参数前的一种特殊的“注释”</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义一个注解（新建一个Report.java的接口）</span></span><br><span class="line"><span class="keyword">package</span> com.gearsnet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="comment">// 注解名为Report</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Report &#123;</span><br><span class="line">    <span class="comment">// int类型的type()方法</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">type</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">level</span><span class="params">()</span> <span class="keyword">default</span> "info"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    String[] str1() <span class="keyword">default</span> <span class="string">""</span>;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释会被编译器直接忽略，注解则可以被编译器打包进入class文件，因此，注解是一种用作标注的“元数据”。</p><ol start="2"><li>注解的作用</li></ol><p>从JVM的角度开看，注解本身对代码逻辑没有任何影响，如何使用注解完全由工具决定</p><p>Java的注解可以分为三类：</p><ul><li>第一类是由编译器使用的注解，例如：</li></ul><p><code>@Override</code>：让编译器检查该方法是否正确地实现了覆写；<br><code>@SuppressWarnings</code>：告诉编译器忽略此处代码产生的警告。<br>这类注解不会被编译进入.class文件，它们在编译后就被编译器扔掉了。</p><ul><li>第二类是由工具处理.class文件使用的注解</li></ul><p>比如有些工具会在加载class的时候，对class做动态修改，实现一些特殊的功能。这类注解会被编译进入.class文件，但加载结束后并不会存在于内存中。这类注解只被一些底层库使用，一般我们不必自己处理。</p><ul><li>第三类是在程序运行期能够读取的注解</li></ul><p>它们在加载后一直存在于JVM中，这也是最常用的注解。例如，一个配置了@PostConstruct的方法会在调用构造方法后自动被调用（这是Java代码读取该注解实现的功能，JVM并不会识别该注解）。</p><p><strong>定义一个注解时，还可以定义配置参数</strong>，配置参数可以包括：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">所有的基本类型</span><br><span class="line">String</span><br><span class="line">枚举类型</span><br><span class="line">基本类型，String以及枚举的数组</span><br></pre></td></tr></table></figure><p>基本格式：<strong>数据类型 属性名() default 默认值;</strong><br>注意：虽然叫做属性，但是实际上是一个方法，因为注解本质上也是一个接口，接口是比抽象方法更抽象的抽象方法，它不存在属性名（字段）</p><br><p>因为<i>配置参数必须是常量</i>，所以，上述限制保证了注解在定义时就已经确定了每个参数的值。</p><p>注解的配置参数可以有默认值，缺少某个配置参数时将使用默认值。</p><p>此外，大部分注解会有一个名为value的配置参数，对此参数赋值，可以只写常量，相当于省略了value参数。如果只写注解，相当于全部使用默认值。</p><p>举例说明:<br>@Check就是一个注解。第一个@Check(min=0, max=100, value=55)明确定义了三个参数，第二个@Check(value=99)只定义了一个value参数，它实际上和@Check(99)是完全一样的。最后一个@Check表示所有参数都使用默认值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class Hello &#123;</span><br><span class="line">    @Check(min=0, max=100, value=55)</span><br><span class="line">    public int n;</span><br><span class="line"></span><br><span class="line">    @Check(value=99)</span><br><span class="line">    public int p;</span><br><span class="line"></span><br><span class="line">    @Check(99) // @Check(value=99)</span><br><span class="line">    public int x;</span><br><span class="line"></span><br><span class="line">    @Check</span><br><span class="line">    public int y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定义注解"><a href="#定义注解" class="headerlink" title="定义注解"></a>定义注解</h4><p>Java语言使用@interface语法来定义注解（Annotation），它的格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public @interface Report &#123;</span><br><span class="line">    int type() default 0;</span><br><span class="line">    String level() default &quot;info&quot;;</span><br><span class="line">    String value() default &quot;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注解的参数类似无参数方法，<strong>可以用default设定一个默认值（强烈推荐）</strong>。最常用的参数应当命名为value。</p><p><strong>元注解:实际上就是注解的注解</strong></p><p>有一些注解可以修饰其他注解，这些注解就称为元注解（meta annotation）。Java标准库已经定义了一些元注解，我们只需要使用元注解，通常不需要自己去编写元注解。</p><blockquote><p>@Target</p></blockquote><p>最常用的元注解是@Target，使用@Target可以描述Annotation能够作用的位置：</p><ul><li>作用于类或接口： ElementType.TYPE</li><li>作用于成员变量： ElementType.FIELD</li><li>作用于方法：ElementType.METHOD</li><li>作用于构造方法：ElementType.CONSTRUCTOR</li><li>作用于方法参数：ElementType.PARAMETER</li></ul><p>例如，定义注解@Report可用在方法上，我们必须添加一个@Target(ElementType.METHOD)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Report &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">type</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line">    <span class="function">String <span class="title">level</span><span class="params">()</span> <span class="keyword">default</span> "info"</span>;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义注解@Report可用在方法或字段上，可以把@Target注解参数变为数组{ ElementType.METHOD, ElementType.FIELD }：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Target(&#123;</span><br><span class="line">    ElementType.METHOD,</span><br><span class="line">    ElementType.FIELD</span><br><span class="line">&#125;)</span><br><span class="line">public @interface Report &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上@Target定义的value是ElementType[]数组，只有一个元素时，可以省略数组的写法。</p><blockquote><p>@Retention</p></blockquote><p>元注解@Retention定义了Annotation的生命周期：</p><ul><li>仅编译期：RetentionPolicy.SOURCE；</li><li>仅class文件：RetentionPolicy.CLASS；</li><li>运行期，当前描述的注解会保留到class字节码文件中，并被jvm读取到：RetentionPolicy.RUNTIME。</li></ul><p>如果@Retention不存在，则该Annotation默认为CLASS。因为<strong>通常我们自定义的Annotation都是RUNTIME</strong>，所以，务必要加上@Retention(RetentionPolicy.RUNTIME)这个元注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 作用于运行期阶段</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Report &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">type</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line">    <span class="function">String <span class="title">level</span><span class="params">()</span> <span class="keyword">default</span> "info"</span>;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>@Repeatable</p></blockquote><p>使用@Repeatable这个元注解可以定义Annotation是否可重复。这个注解应用不是特别广泛</p><blockquote><p>@Inherited</p></blockquote><p>使用@Inherited定义子类是否可继承父类定义的Annotation。@Inherited仅针对@Target(ElementType.TYPE)类型的annotation有效，并且仅针对class的继承，对interface的继承无效：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Inherited</span><br><span class="line">@Target(ElementType.TYPE)</span><br><span class="line">public @interface Report &#123;</span><br><span class="line">    int type() default 0;</span><br><span class="line">    String level() default &quot;info&quot;;</span><br><span class="line">    String value() default &quot;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用的时候，如果一个类用到了@Report：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Report(type=1)</span><br><span class="line">public class Person &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>则它的子类默认也定义了该注解：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public class Student extends Person &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注解总结"><a href="#注解总结" class="headerlink" title="注解总结"></a>注解总结</h4><p>如何定义Annotation，我们总结一下定义Annotation的步骤：</p><ul><li>第一步，用@interface定义注解：注解名为Report，新建一个名为Report的接口</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Report.java</span><br><span class="line">public @interface Report &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第二步，添加参数、默认值：</li></ul><p>格式为：<strong>数据类型 属性名() default 默认值;</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public @interface Report &#123;</span><br><span class="line">    // 数据类型 属性名() default 默认值</span><br><span class="line">    int type() default 0;</span><br><span class="line">    String level() default &quot;info&quot;;</span><br><span class="line">    String value() default &quot;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把最常用的参数定义为value()，推荐所有参数都尽量设置默认值。</p><ul><li>第三步，用元注解配置注解：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Target(ElementType.TYPE)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">public @interface Report &#123;</span><br><span class="line">    int type() default 0;</span><br><span class="line">    String level() default &quot;info&quot;;</span><br><span class="line">    String value() default &quot;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<strong>必须设置@Target和@Retention，@Retention一般设置为RUNTIME，因为我们自定义的注解通常要求在运行期读取</strong>。<br>一般情况下，不必写@Inherited和@Repeatable。</p><h4 id="处理注解"><a href="#处理注解" class="headerlink" title="处理注解"></a>处理注解</h4><p>我们接下来思考如何解析获取注解中的内容~通过优化反射上面的案例：创建任意类的对象，并且执行其中的任意方法</p><ol><li>创建一个自定义的注解： Report.java</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gearsnet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Report &#123;</span><br><span class="line">    <span class="comment">// String类型的className属性(实际上为抽象方法)</span></span><br><span class="line">    <span class="function">String <span class="title">className</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">    <span class="function">String <span class="title">methodName</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建一个Person对象：Person.java</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String lover;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> name;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;<span class="keyword">this</span>.name = name;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> age;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;<span class="keyword">this</span>.age = age;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello world!!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>创建一个AnnotationDemo.java</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gearsnet;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 注解赋值：与注解定义类的属性相同</span></span><br><span class="line"><span class="comment">* 数组的赋值：使用一个大括号来包裹数组集</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="meta">@Report</span>(type = <span class="number">1</span>,level = <span class="string">"best"</span>,str1 = &#123;<span class="string">"abc"</span>,<span class="string">"chd"</span>&#125;,className = <span class="string">"com.gearsnet.Person"</span>,methodName = <span class="string">"show"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 获取该类的字节码文件对象</span></span><br><span class="line">        Class&lt;AnnotationDemo&gt; annotation = AnnotationDemo.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 获取注解内容</span></span><br><span class="line">        Report report = annotation.getAnnotation(Report.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 调用注解对象中的抽象方法</span></span><br><span class="line">        System.out.println(report.className());</span><br><span class="line">        System.out.println(report.methodName());</span><br><span class="line">        <span class="comment">// 4.加载进内存</span></span><br><span class="line">        Class cls = Class.forName(report.className());</span><br><span class="line">        <span class="comment">// 5. 创建对象</span></span><br><span class="line">        Object obj = cls.newInstance();</span><br><span class="line">        <span class="comment">// 6.获取方法的对象</span></span><br><span class="line">        Method method = cls.getMethod(report.methodName());</span><br><span class="line">        <span class="comment">// 7.执行方法(执行Person对象中的show方法)</span></span><br><span class="line">        method.invoke(obj);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 打印内容：</span></span><br><span class="line"><span class="comment">            com.gearsnet.Person</span></span><br><span class="line"><span class="comment">            show</span></span><br><span class="line"><span class="comment">            hello world!!!</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终完成了写一个“框架”，可以帮我们创建任意类的对象，并且执行其中的任意方法</p><p>小结：</p><ol><li>大多数时候，我们会使用注解，而不是定义注解</li><li>注解给谁用？<ul><li>编译器使用</li><li>给解析程序使用</li></ul></li><li>注解不是程序的一部分，相当于一个标签</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript篇章九：ES6特性了解</title>
      <link href="/2020/05/09/Javascript%E7%AF%87%E7%AB%A0%E4%B9%9D/"/>
      <url>/2020/05/09/Javascript%E7%AF%87%E7%AB%A0%E4%B9%9D/</url>
      
        <content type="html"><![CDATA[<p>ES6， 全称 ECMAScript 6.0 ，是 JavaScript 的下一个版本标准，2015.06 发版。</p><p>ES6 主要是为了解决 ES5 的先天不足，比如 JavaScript 里并没有类的概念，但是目前浏览器的 JavaScript 是 ES5 版本，大多数高版本的浏览器也支持 ES6，不过只实现了 ES6 的部分特性和功能。<br><strong>本章内容：</strong></p><blockquote><p>1.块级作用域<br>2.ES6的Module语法<br>3.ES6的扩展运算符 …</p></blockquote><a id="more"></a><h3 id="1-块级作用域"><a href="#1-块级作用域" class="headerlink" title="1.块级作用域"></a>1.块级作用域</h3><p>之前我们已经了解到了块级作用域的let，const语法，这里就不用在累赘描述了</p><h3 id="2-ES6的Module语法"><a href="#2-ES6的Module语法" class="headerlink" title="2.ES6的Module语法"></a>2.ES6的Module语法</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;历史上，JavaScript 一直没有模块（module）体系，无法将一个大程序拆分成互相依赖的小文件，再用简单的方法拼装起来。其他语言都有这项功能，比如 Ruby 的require、Python 的import，甚至就连 CSS 都有@import，但是 JavaScript 任何这方面的支持都没有，这对开发大型的、复杂的项目形成了巨大障碍。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在 ES6 之前，社区制定了一些模块加载方案，<strong>最主要的有 CommonJS 和 AMD 两种。前者用于服务器，后者用于浏览器</strong>。ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代 CommonJS 和 AMD 规范，<strong>成为浏览器和服务器通用的模块解决方案</strong>。</p><h4 id="CommonJS规范-（即Node-js规范）"><a href="#CommonJS规范-（即Node-js规范）" class="headerlink" title="CommonJS规范 （即Node.js规范）"></a>CommonJS规范 （即Node.js规范）</h4><p>ps：这里说明一下，下列所有的代码演示均为CommonJS规范，直接在浏览器上运行会报错</p><blockquote><p>1.模块暴露</p></blockquote><p>我们编写了一个hello.js文件，这个hello.js文件就是一个模块，模块的名字就是文件名（去掉.js后缀），所以hello.js文件就是名为hello的模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s = <span class="string">'Hello'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(s + <span class="string">', '</span> + name + <span class="string">'!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = greet;</span><br></pre></td></tr></table></figure><p>module.exports把函数greet作为模块的输出暴露出去，这样其他模块就可以使用greet函数了</p><blockquote><p>2.模块引入</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入hello模块:</span></span><br><span class="line"><span class="keyword">let</span> greet = <span class="built_in">require</span>(<span class="string">'./hello'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s = <span class="string">'Michael'</span>;</span><br><span class="line"></span><br><span class="line">greet(s); <span class="comment">// Hello, Michael!</span></span><br></pre></td></tr></table></figure><blockquote><p>3.多模块暴露</p></blockquote><p>我们不妨深入♂一下：将某个模块暴露出来，并访问该模块内的多个函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hello.static</span></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">let</span> s = <span class="string">"hello python"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">conn</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(s+<span class="string">','</span>+name+<span class="string">'!'</span>);</span><br><span class="line">    <span class="keyword">return</span>(s+<span class="string">","</span>+name+<span class="string">"!"</span>) </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printer</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ab = [];</span><br><span class="line">    <span class="keyword">if</span>(n&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            ab.push(i)&#125;</span><br><span class="line">        <span class="built_in">console</span>.log(ab)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"输入错误"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将模块暴露出来，以便于其它模块调用，采用对象的形式</span></span><br><span class="line"><span class="built_in">module</span>.exports =&#123;<span class="attr">conn</span>:conn,<span class="attr">printer</span>:printer&#125;;</span><br></pre></td></tr></table></figure><p>然后我们来访问hello模块，来玩♂一♀玩(注意模块里的函数调用方式)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主模块mian.static</span></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">let</span> greet = <span class="built_in">require</span>(<span class="string">'./hello'</span>);</span><br><span class="line"><span class="keyword">let</span> s = <span class="string">"chd"</span>;</span><br><span class="line">greet.conn(s);</span><br><span class="line">greet.printer(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h4 id="ES6规范"><a href="#ES6规范" class="headerlink" title="ES6规范"></a>ES6规范</h4><p>PS：在报错中了解到，是说无法在模块外部使用import语句，因为Module 的加载实现的是es6语法，所以在浏览器加载html文件时，<strong>需要在script 标签中加入type=”module”属性</strong>。</p><h3 id="3-ES6的扩展运算符-…"><a href="#3-ES6的扩展运算符-…" class="headerlink" title="3.ES6的扩展运算符 …"></a>3.ES6的扩展运算符 …</h3><p><code>...</code>扩展运算符号只能是针对一维度的对象或数组进行拷贝。不能对多维进行拷贝<br>理解对象的扩展运算符其实很简单，只要记住一句话就可以：<strong>对象中的扩展运算符(…)用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中(数组同理)</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> z = &#123; <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">4</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> n = &#123; ...z &#125;;</span><br><span class="line">n; <span class="comment">// &#123; a: 3, b: 4 &#125;</span></span><br><span class="line"><span class="comment">// 深拷贝</span></span><br><span class="line">z.a = <span class="number">7</span>;</span><br><span class="line"><span class="built_in">console</span>.log(z);  <span class="comment">// &#123;a: 7, b: 4&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(n);  <span class="comment">// &#123;a: 3, b: 4&#125;</span></span><br><span class="line"><span class="keyword">let</span> arr_plugin = [<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>];</span><br><span class="line"><span class="built_in">console</span>.log([...arr_plugin]);    <span class="comment">// [6,6,6]</span></span><br></pre></td></tr></table></figure><h3 id="4-js的深浅拷贝"><a href="#4-js的深浅拷贝" class="headerlink" title="4.js的深浅拷贝"></a>4.<a href="https://segmentfault.com/a/1190000018874254" target="_blank" rel="noopener">js的深浅拷贝</a></h3><p>深浅拷贝仅限于object和array这样的引用数据类型的。<br>浅拷贝只复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存；深拷贝会创造一个一模一样的对象，新对象跟原对象不共享内存地址，修改新对象不会影响原对象。</p><p>浅拷贝：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">    name:<span class="string">"chd"</span>,</span><br><span class="line">    age:<span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 浅拷贝</span></span><br><span class="line"><span class="keyword">let</span> obj2 = obj1;</span><br><span class="line">obj2.name = <span class="string">"lmm"</span>;</span><br><span class="line">obj2.age = <span class="number">16</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj1);</span><br><span class="line"><span class="built_in">console</span>.log(obj2);</span><br></pre></td></tr></table></figure><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><a href="https://blog.csdn.net/astonishqft/article/details/82899965" target="_blank" rel="noopener">es6之扩展运算符 三个点（…）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS属性补充(Ⅱ)</title>
      <link href="/2020/04/26/html%E4%B8%8Ecss(%E2%85%A3)/"/>
      <url>/2020/04/26/html%E4%B8%8Ecss(%E2%85%A3)/</url>
      
        <content type="html"><![CDATA[<p><strong>本章内容：</strong></p><blockquote><p>1.文本对齐方式与字体大小<br>2.&lt;img&gt;标签<br>3.position定位属性<br>4.CSS spirit css精灵<br>5.网页添加ico图标<br>6.表单form标签<br>7.transform属性</p></blockquote><a id="more"></a><h3 id="1-文本对齐方式与字体大小"><a href="#1-文本对齐方式与字体大小" class="headerlink" title="1.文本对齐方式与字体大小"></a>1.文本对齐方式与字体大小</h3><blockquote><p>文本对齐方式</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">text-align： left    把文本排列到左边。默认值：由浏览器决定。</span><br><span class="line">            right把文本排列到右边。</span><br><span class="line">            center把文本排列到中间。</span><br><span class="line">            justify实现两端对齐文本效果。</span><br><span class="line">            inherit规定应该从父元素继承 text-align 属性的值。</span><br></pre></td></tr></table></figure><blockquote><p>设置字体大小：</p></blockquote><p>方式一：1em的默认大小是16px<br>方式二：px（像素）<br>方式三：百分比<br>————————————————<br>px : 我们最基础的单位（像素）<br>em : 相对于当前父节点字体的大小 —- 1em = 父节点字体大小<br>rem: 相对于当前根节点字体的大小 —- 1rem = 根（html）节点字体大小<br>vw: 当前视窗宽度 —- 1vw = 1%视窗宽度<br>vh: 可以理解成当前一个屏幕高度（一页高度） —- 1vh = 1%视窗宽度<br>vmin: vw和vh中较小的那个<br>vmax: vw和vh中较大的那个</p><p>拓：<strong>HTML中设置字体样式</strong><br>在新的 @font-face 规则中，您必须首先定义字体的名称（比如 myFirstFont），然后指向该字体文件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span> </span><br><span class="line"><span class="css">@<span class="keyword">font-face</span></span></span><br><span class="line">&#123;   </span><br><span class="line"><span class="css">     <span class="comment">/*设置字体名称*/</span></span></span><br><span class="line">    font-family: myFirstFont;</span><br><span class="line"><span class="css">    <span class="comment">/*导入字体url*/</span></span></span><br><span class="line">    src: url("./sansation_light.woff");</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">div</span><br><span class="line">&#123;</span><br><span class="line"><span class="css">    <span class="selector-tag">font-family</span><span class="selector-pseudo">:myFirstFont</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><br><h3 id="2-lt-img-gt-标签"><a href="#2-lt-img-gt-标签" class="headerlink" title="2.&lt;img&gt;标签"></a>2.&lt;img&gt;标签</h3><p>-和h系列标签/p标签还有hr标签不一样，img标签不会独占一行，如果我们手动指定了img标签显示的图片的宽度和高度，有可能会导致图片变形，那么如果又想指定宽度和高度，<br>&lt;img src=”当前电脑图片的路径” width=”200px” height=”200px” /&gt;</p><p>又不想让图片发生变形，我们可以只指定宽度或者高度其中的一个值即可</p><p>-只要指定了宽度，系统会自动根据宽度计算出高度，只要指定了高度，系统会自动根据高度计算出宽度，并且都是等比拉伸的，也就是说不会变形：<br>&lt;img src=”当前电脑图片的路径” width=”200px” /&gt;<br>&lt;img src=”当前电脑图片的路径” height=”200px” /&gt;</p><p>利用border属性来创建缩略图：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">40%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*&lt;img src="paris.jpg" alt="Paris"&gt;*/</span></span><br></pre></td></tr></table></figure><br><h3 id="3-position定位属性"><a href="#3-position定位属性" class="headerlink" title="3.position定位属性"></a>3.position定位属性</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;postion:relative是相对定位:是相对于前面的容器定位的。这个时候不能用top left在定位,应该用margin。它可以随窗口大小变化。但大小仍然不会变。要是你设置成width:100%;height:100%;这样就会随着窗口变大变小<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;postion:absolute是绝对定位:是相对于浏览器的定位，释放自己的位置，<strong>以网页坐标原点做一个新的坐标，它不会随着窗口大小变化，只是固定在一个特定的坐标轴上</strong>。比如：position：absolute；left:20px;top:80px; 这个容器始终位于距离浏览器左20px,距离浏览器上80px的这个位置。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;position属性定义建立元素布局所用的定位机制。任何元素都可以定位，不过绝对或固定元素会生成一个块级框，而不论该元素本身是什么类型。相对定位元素会相对于它在正常流中的默认位置偏移。</p><p>position属性对应的值有：</p><ul><li>position: static;</li><li>position: inherit;</li><li>position: relative;</li><li>position: absolute;</li><li>position: fixed;</li><li>position: sticky;（新的属性值）</li></ul><ol><li>position：static</li></ol><p>默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）。元素框正常生成。块级元素生成一个矩形框，作为文档流的一部分，行内元素则会创建一个或多个行框，置于其父元素中。</p><ol start="2"><li>position: relative</li></ol><p><strong>相对定位，相对于自己的初始位置，不脱离文档流。也就是说元素框偏移某个距离，元素仍保持其未定位前的形状，它原本所占的空间仍保留</strong></p><p>举个例子说明：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.container</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">background-color</span>: <span class="selector-id">#868686</span>;</span></span><br><span class="line">                width: 100%;</span><br><span class="line">                height: 300px;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-class">.content_0</span>&#123;</span></span><br><span class="line">                background-color: yellow;</span><br><span class="line">                width: 100px;</span><br><span class="line">                height: 100px;               </span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-class">.content_1</span>&#123;</span></span><br><span class="line">                background-color: red;</span><br><span class="line">                width: 100px;</span><br><span class="line">                height: 100px;</span><br><span class="line"><span class="css">                <span class="selector-tag">position</span>: <span class="selector-tag">relative</span>;<span class="comment">/* 这里使用了relative */</span>            </span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-class">.content_2</span>&#123;</span></span><br><span class="line">                background-color: black;</span><br><span class="line">                width: 100px;</span><br><span class="line">                height: 100px;               </span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content_0"</span>&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content_1"</span>&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content_2"</span>&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这时没有设置left、top等属性时，正常出现在normal flow中的位置。<br>接着添加left，top属性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content_1</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;<span class="comment">/* 这里使用了relative */</span>  </span><br><span class="line">    <span class="attribute">left</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">40px</span>;          </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/position.png" alt=""></fancybox></p><p>可以看到，元素（content_1）的位置相对于原位置进行了移动，但原本所占的空间仍占有，<strong>position:relative相对定位可适用于微调，微微调动一点</strong></p><ol start="3"><li>position: absolute</li></ol><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;绝对定位的元素的位置相对于最近的已定位祖先元素，如果元素没有已定位的祖先元素，那么它的位置相对于最初的包含块(<strong>生成绝对定位的元素，其相对于 static 定位以外的第一个父元素进行定位,会脱离normal flow。注意：是除了static外</strong>)。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MDN描述位：绝对定位不为元素预留空间，通过指定元素相对于最近的非 static 定位祖先元素的偏移，来确定元素位置。<strong>绝对定位的元素可以设置外边距（margin），且不会与其他边距合并</strong>。</p><p><strong>绝对定位会脱离文档流</strong></p><p>举例说明：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span>&#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: darkgreen;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.container</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#868686</span>;</span></span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 300px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.content_0</span>&#123;</span></span><br><span class="line">            background-color: yellow;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;               </span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.content_1</span>&#123;</span></span><br><span class="line">            background-color: red;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            position: absolute;</span><br><span class="line">            /* 这里使用了绝对定位absolute：绝对定位的元素的位置相对于最近的已定位祖先元素，绝对定位可以使用margin属性，也会脱离文档流</span><br><span class="line">            这里不仅相对于box1设置left=40px的基础上，再设置了margin-left：100px，即相对于父类box1向左偏了140px</span><br><span class="line">            这里不仅相对于box1设置top=40px的基础上，即相对于父类box1向上偏了40px</span><br><span class="line">            */ </span><br><span class="line">            top: 40px;</span><br><span class="line">            margin-left: 100px;</span><br><span class="line">            left: 40px;          </span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.content_2</span>&#123;</span></span><br><span class="line">            background-color: black;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;               </span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content_0"</span>&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content_1"</span>&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content_2"</span>&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>position:fixed<br>fixed属性会固定元素定位，也会使得元素脱离文档流<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box1</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">2em</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">2em</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">15em</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">15em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>随着页面的滑动，元素仍然固定，始终保持在距离right，bottom为2em位置处，展示效果如下：</p><p><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/20200611164520.png" alt=""></fancybox></p><p>position定位属性小结：</p><ol><li><p>偏移量（top，bottom，left，right）当元素开启定位（即position属性设置不为static时）以后，通过使用偏移量来设置元素位置，如果开启定位时使用margin或者padding属性的话，则会出错，会带动其它div联动。<strong>偏移量top，bottom，left，right，仅在开启定位后才会生效</strong></p></li><li><p>relative相对定位不会脱离文档流，<strong>是相对于元素自身在文档中的原来位置进行偏移</strong></p></li><li><p>absolute绝对定位会脱离文档流，<strong>绝对定位的原点是父元素中最近的一个开启了相对定位的左上角</strong>，若父元素都没有开启相对定位，则以根元素（即html标签元素）为参照点</p></li><li><p>fixed固定定位是一种特殊的绝对定位，也会脱离文档流。唯一不同的是，<strong>固定定位永远参照于浏览器的视口进行定位，固定定位不会随着网页的滚动条而滚动</strong></p></li><li><p>一旦开始position定位元素后，必须使用偏移量（top，bottom，left，right）元素来调整div的位置，绝对不能使用margin，padding</p></li></ol><h3 id="4-CSS-spirit-css精灵"><a href="#4-CSS-spirit-css精灵" class="headerlink" title="4.CSS spirit css精灵"></a>4.CSS spirit css精灵</h3><p>CSS Image Sprites. ❮ Previous Next ❯:<br> An image sprite is a collection of images put into a single image.<br> A web page with many images can take a long time to load and generates multiple server requests.<br> Using image sprites will reduce the number of server requests and save bandwidth       </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*Code sample:*/</span></span><br><span class="line">    <span class="selector-class">.box</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">46px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">44px</span>;</span><br><span class="line">      <span class="attribute">background</span>: <span class="built_in">url</span>(img_navsprites.gif) -x <span class="built_in">-y</span>(这两个参数分别表示：向左，向上平移，均用负数表示); &#125;</span><br></pre></td></tr></table></figure><br><h3 id="5-网页添加ico图标"><a href="#5-网页添加ico图标" class="headerlink" title="5.网页添加ico图标"></a>5.网页添加ico图标</h3><p>在head标签中添加：href表示ico文件的相对路径<br>&lt;link rel=”Bookmark” type=”image/x-icon” href=”b/img/icon/favicon.ico” /&gt;<br>&lt;link rel=”icon” type=”image/x-icon” href=”b/img/icon/favicon.ico” /&gt;<br>&lt;link rel=”shortcut icon” type=”image/x-icon” href=”b/img/icon/favicon.ico” /&gt;(推荐)</p><p>shortcut icon，特指浏览器中地址栏左侧显示的图标，一般大小为16x16，后缀名为.icon；<br>icon，指的是图标，格式可为PNG\GIF\JPEG，尺寸一般为16x16、24x24、36x36等。把这个图标放到网站的根目录下就可以了，页面加载时浏览器会自动检索这个图标然后把它加到标题上（当然也可以放在一个页面可以请求到的目录下）。<br>Bookmark，当网站收藏到收藏夹中时，显示在前面的图标。<br>————————————————<br><br></p><blockquote><p>readme文件的伪徽章样式,<a href="https://github.com/FioraLove/HTML-CSS-JavaScript/blob/master/html/readme%E7%9A%84%E4%BC%AA%E5%BE%BD%E7%AB%A0%E6%A0%B7%E5%BC%8F.html" target="_blank" rel="noopener">参考代码</a></p></blockquote><p><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/D:/data/images20191207103058.png" alt="实际样式"></fancybox></p><h3 id="6-表单form标签"><a href="#6-表单form标签" class="headerlink" title="6.表单form标签"></a>6.表单form标签</h3><p>&lt;input&gt;标签 定义通用的表单元素,其type类型为：</p><ul><li>type=”text” 定义单行文本输入框</li><li>type=”password” 定义密码输入框</li><li>type=”radio” 定义单选框</li><li>type=”checkbox” 定义复选框</li><li>type=”file” 定义上传文件    form表单需要加上属性enctype=”multipart/form-data”</li><li>type=”submit” 定义提交按钮</li><li>type=”reset” 定义重置按钮</li><li>type=”button” 定义一个普通按钮</li></ul><p>相关属性介绍：</p><ul><li><strong>value属性： 定义表单元素的值,此值是数据提交时键的值</strong></li><li><strong>name属性： 定义表单元素的名称，此名称是提交数据时的键名</strong></li><li>checked:  radio 和 checkbox 默认被选中</li><li>readonly: 只读. text 和 password</li><li>disabled: 对所用input都好使.</li></ul><p>高级用法：<br><strong>placeholder：</strong><br>1.input类型的文本框提供一种提示（hint）<br>2.可以描述文本框期待用户输入何种内容<br>3.提示语默认显示，当文本框中输入内容时提示语消失<br>4.适合于input标签：text、search、url、email和password等类型</p><p><strong>required：</strong></p><p>1.规定文本框填写内容不能为空，否则不允许用户提交表单<br>2.适合于input标签：text、search、url、email、password、number、checkbox、radio、file等类型</p><p>举一个案例：比较标准的表单格式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--action 定义表单数据提交地址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://127.0.0.1:8000/post_info"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--单行文本框--&gt;</span> <span class="comment">&lt;!--设置了required就要求此表单为必填项--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">placeholder</span>=<span class="string">"请输入账号"</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!--密码框--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 邮箱Email--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">id</span>=<span class="string">"Email"</span> <span class="attr">placeholder</span>=<span class="string">"请输入邮箱"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--单选框--&gt;</span></span><br><span class="line">    性别：<span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--多选框--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    最喜欢的游戏：</span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fav"</span> <span class="attr">value</span>=<span class="string">"LOL"</span> <span class="attr">checked</span>&gt;</span>英雄联盟<span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="comment">&lt;!---默认选中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fav"</span> <span class="attr">value</span>=<span class="string">"shoot"</span> <span class="attr">disabled</span>&gt;</span>喷射战士<span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="comment">&lt;!---无法选择 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fav"</span> <span class="attr">value</span>=<span class="string">"zelda"</span>&gt;</span>塞尔达传说<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fav"</span> <span class="attr">value</span>=<span class="string">"mario"</span>&gt;</span>马里奥<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--上传图片--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"pic"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--多行文本框--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"text"</span> <span class="attr">cols</span>=<span class="string">"30"</span> <span class="attr">rows</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--下拉列表--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"city"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"gz"</span> <span class="attr">selected</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span>  <span class="comment">&lt;!-- 表示默认选中 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"sz"</span> <span class="attr">disabled</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span>  <span class="comment">&lt;!-- 表示无法选择 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"zh"</span>&gt;</span>中山<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"hz"</span>&gt;</span>杭州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"cd"</span>&gt;</span>成都<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--提交表单--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--重置表单--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">value</span>=<span class="string">"重置"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--- 点击提交到目标网址后：http://localhost:63343/FioraLove_Blog/demo.html?username=AhriLove&amp;password=chen654321&amp;sex=1&amp;fav=shoot&amp;pic=&amp;text=hello+world&amp;city=gz--&gt;</span></span><br></pre></td></tr></table></figure><p>tips：<br><strong>1.HTML下的表单标签中的&lt;input&gt;便签的value属性：定义表单元素的值,此值是数据提交时键的值</strong><br><strong>2.单选框radio与多选框checkbox的name，type属性必须要全部一样，value值可以不一样，因为value值定义表单元素的值,此值是数据提交时键的值</strong></p><br><h3 id="7-transform属性"><a href="#7-transform属性" class="headerlink" title="7.transform属性"></a>7.transform属性</h3><p>Transform属性应用于元素的2D或3D转换。这个属性允许你将元素旋转，缩放，移动，倾斜等。<br>语法：transform：none|transform-function (紧跟在 -webkit-, -ms- 或 -moz- 前的数字为支持该前缀属性的第一个浏览器版本号)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">transform</span>:<span class="built_in">rotate</span>(7deg);</span><br><span class="line">    <span class="attribute">-ms-transform</span>:<span class="built_in">rotate</span>(7deg); <span class="comment">/* 在IE 9 浏览器上生效 */</span></span><br><span class="line">    <span class="attribute">-webkit-transform</span>:<span class="built_in">rotate</span>(7deg); <span class="comment">/* 在Safari and Chrome上生效 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>-webkit、-ms-transform常见属性：</p><ul><li>none：定义不进行转换</li><li>rotate(30deg):旋转角度</li><li>translate(50px,200px);定义2D转换，进行平移</li><li>scale（）：进行缩放</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS补充(Ⅰ)</title>
      <link href="/2020/04/25/html%E4%B8%8Ecss(%E2%85%A2)/"/>
      <url>/2020/04/25/html%E4%B8%8Ecss(%E2%85%A2)/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CSS 规则由两个主要的部分构成：选择器，以及一条或多条声明:<br><strong>本章内容：</strong></p><blockquote><p>1.选择器<br>2.transition过渡属性<br>3.outline轮廓属性<br>4.overflow滚动条<br>5.background背景样式</p></blockquote><a id="more"></a><h3 id="1-选择器"><a href="#1-选择器" class="headerlink" title="1.选择器"></a>1.选择器</h3><p><fancybox><img src="https://www.runoob.com/wp-content/uploads/2013/07/632877C9-2462-41D6-BD0E-F7317E4C42AC.jpg" alt=""></fancybox></p><p>选择器通常是您需要改变样式的 HTML 元素。</p><p>每条声明由一个属性和一个值组成。</p><p>属性（property）是您希望设置的样式属性（style attribute）。每个属性有一个值。属性和值被冒号分开</p><p><strong>常见的选择器：</strong></p><ul><li><p>标签选择器：HTML元素以标签名来表示，以 <strong>标签名</strong> 来定义</p></li><li><p>id选择器：HTML元素以id属性用来设置id选择器，以 <strong>“#id名”</strong> 来定义</p></li><li><p>class选择器：在HTML中以class属性表示, 在 CSS 中，类选择器以一个点 <strong>“.class名”</strong> 号显示</p></li><li><p>一些特殊的选择器 <code>CSS伪类选择器</code>（用来添加一些选择器的特殊效果）</p></li></ul><p>链接样式：<br>a:link - 正常，未访问过的链接<br>a:visited - 用户已访问过的链接<br>a:hover - 当用户鼠标放在链接上时<br>a:active - 链接被点击的那一刻</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;<span class="attribute">color</span>:<span class="number">#000000</span>;&#125;      <span class="comment">/* 未访问链接*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;<span class="attribute">color</span>:<span class="number">#00FF00</span>;&#125;  <span class="comment">/* 已访问链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;<span class="attribute">color</span>:<span class="number">#FF00FF</span>;&#125;  <span class="comment">/* 鼠标移动到链接上 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;<span class="attribute">color</span>:<span class="number">#0000FF</span>;&#125;  <span class="comment">/* 鼠标点击时 */</span></span><br></pre></td></tr></table></figure><ul><li>表单选择器<br>input[type=text] - 选取文本输入框<br>input[type=password] - 选择密码的输入框<br>input[type=number] - 选择数字的输入框</li></ul><p>举例说明：搜索输入框带动画</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">input</span><span class="selector-attr">[type=text]</span>&#123;</span></span><br><span class="line">            width: 130px;</span><br><span class="line">            box-sizing: border-box;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">            border-radius: 4px;</span><br><span class="line">            font-size: 16px;</span><br><span class="line"><span class="css">            <span class="selector-tag">box-shadow</span>: 5<span class="selector-tag">px</span> 5<span class="selector-tag">px</span> 3<span class="selector-tag">px</span> <span class="selector-id">#888888</span>;</span></span><br><span class="line">            background-color: white;</span><br><span class="line">            background-image: url('https://static.runoob.com/images/mix/searchicon.png');</span><br><span class="line">            background-position: 10px 10px;</span><br><span class="line">            background-repeat: no-repeat;</span><br><span class="line">            padding: 12px 20px 12px 40px;</span><br><span class="line"><span class="css">            <span class="selector-tag">-webkit-transition</span>: <span class="selector-tag">width</span> 0<span class="selector-class">.4s</span> <span class="selector-tag">ease-in-out</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">transition</span>: <span class="selector-tag">width</span> 0<span class="selector-class">.4s</span> <span class="selector-tag">ease-in-out</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>搜索输入框带动画:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"search"</span> <span class="attr">placeholder</span>=<span class="string">"搜索.."</span> <span class="attr">id</span>=<span class="string">"search"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> a =<span class="built_in">document</span>.getElementById(<span class="string">"search"</span>);</span></span><br><span class="line"><span class="actionscript">            a.onfocus = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                a.style.width = <span class="string">"100%"</span></span></span><br><span class="line">            &#125;;</span><br><span class="line"><span class="actionscript">            a.onblur = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                a.style.width = <span class="string">"40%"</span></span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-transition过渡属性"><a href="#2-transition过渡属性" class="headerlink" title="2.transition过渡属性"></a>2.transition过渡属性</h3><p>语法： transition: property duration timing-function delay;</p><ul><li>property    给指定CSS属性的name添加动画过渡效果（eg：width，height）</li><li>duration    transition效果需要指定多少秒或毫秒才能完成</li><li>delay    定义transition效果开始的时候</li><li>timing-function    指定transition效果的转速曲线<ul><li>ease:由快到慢到更慢</li><li>linear:恒速</li><li>ease-in:越来越快</li><li>ease-out:越来越慢</li><li>ease-in-out:先加速后减速</li></ul></li></ul><p>过渡属性举例说明：将鼠标悬停在一个 div 元素上，逐步改变表格的宽度从 100px 到 300px </p><pre>div{    width:100px;    height:100px;    background:red;    transition:width 2s ease-in-out;    -webkit-transition:width 2s ease-in-out; /* Safari */}div:hover{    width:300px;}</pre> <h3 id="3-outline轮廓属性"><a href="#3-outline轮廓属性" class="headerlink" title="3.outline轮廓属性"></a>3.outline轮廓属性</h3><p>outline（轮廓）是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。</p><ul><li>outline-color    规定边框的颜色</li><li>outline-style    规定边框的样式</li><li>outline-width    规定边框的宽度</li></ul><p><a href="https://blog.csdn.net/milan_kunderla/article/details/79856279" target="_blank" rel="noopener">outline轮廓属性解决input设置圆角边框的相关问题</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span>&#123;</span></span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line">        input &#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">border-radius</span>: 14<span class="selector-tag">px</span>; <span class="comment">/* 圆角边框 */</span></span></span><br><span class="line">            width: 20em;</span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:3em</span>;</span></span><br><span class="line">            outline: none;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 10px 0;</span><br><span class="line">            border: 1px solid rgb(180, 180, 180);</span><br><span class="line">            font-size: 16px;</span><br><span class="line">            text-align: center;</span><br><span class="line"><span class="css">            <span class="selector-tag">box-shadow</span>: 10<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> 3<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(158,125,35,0<span class="selector-class">.3</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">input</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">            border: 1px solid rgb(255, 0, 0);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"search"</span> <span class="attr">id</span>=<span class="string">"search"</span> <span class="attr">placeholder</span>=<span class="string">"搜索"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-overflow滚动条"><a href="#4-overflow滚动条" class="headerlink" title="4.overflow滚动条"></a>4.overflow滚动条</h3><p>css样式的overflow-x：对边框中的溢出的内容进行隐藏</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">    overflow-x:hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>visible 默认值。超出部分呈现在元素框外面</li><li>hidden 裁剪超出部分</li><li>scroll 一直显示滚动条，超出部分滚动可见</li><li>auto 当超出元素框后，显示滚动条，超出部分滚动可见</li><li>inherit 从父元素继承overflow属性<br>做一个简单的小demo：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">content</span>=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body&#123;</span><br><span class="line">            background-image: url("../public/images/5927f2c7269aa.jpg");</span><br><span class="line">            background-attachment: fixed;</span><br><span class="line">            background-size: 100%;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.ex1</span> &#123;</span></span><br><span class="line">            background-color: lightblue;</span><br><span class="line">            width: 110px;</span><br><span class="line">            height: 110px;</span><br><span class="line">            overflow: scroll;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.ex2</span> &#123;</span></span><br><span class="line">            background-color: lightblue;</span><br><span class="line">            width: 110px;</span><br><span class="line">            height: 110px;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.ex3</span> &#123;</span></span><br><span class="line">            background-color: lightblue;</span><br><span class="line">            width: 110px;</span><br><span class="line">            height: 110px;</span><br><span class="line">            overflow: auto;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.ex4</span> &#123;</span></span><br><span class="line">            background-color: lightblue;</span><br><span class="line">            width: 110px;</span><br><span class="line">            height: 110px;</span><br><span class="line">            overflow: visible;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>overflow 属性<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>如果元素中的内容超出了给定的宽度和高度属性，overflow 属性可以确定是否显示滚动条等行为。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>overflow: scroll:<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ex1"</span>&gt;</span>永州之野产异蛇：黑质而白章，触草木尽死；以啮人，无御之者。然得而腊之以为饵，可以已大风、挛踠、瘘疠，去死肌，杀三虫。其始太医以王命聚之，岁赋其二。募有能捕之者，当其租入。永之人争奔走焉。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>overflow: hidden:<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ex2"</span>&gt;</span>永州之野产异蛇：黑质而白章，触草木尽死；以啮人，无御之者。然得而腊之以为饵，可以已大风、挛踠、瘘疠，去死肌，杀三虫。其始太医以王命聚之，岁赋其二。募有能捕之者，当其租入。永之人争奔走焉。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>overflow: auto:<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ex3"</span>&gt;</span>永州之野产异蛇：黑质而白章，触草木尽死；以啮人，无御之者。然得而腊之以为饵，可以已大风、挛踠、瘘疠，去死肌，杀三虫。其始太医以王命聚之，岁赋其二。募有能捕之者，当其租入。永之人争奔走焉。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>overflow: visible (默认):<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ex4"</span>&gt;</span>永州之野产异蛇：黑质而白章，触草木尽死；以啮人，无御之者。然得而腊之以为饵，可以已大风、挛踠、瘘疠，去死肌，杀三虫。其始太医以王命聚之，岁赋其二。募有能捕之者，当其租入。永之人争奔走焉。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Demo展示：这里实现了背景图片的应用，以及css的overflow属性<br><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/20200117160229.png" alt=""></fancybox></p><br><p>-webkit-text-size-adjust:none :禁用Webkit内核浏览器的文字大小调整功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">故-webkit-text-size-adjust的用法如下：</span><br><span class="line">1、当样式表里font-size&lt;12px时，中文版chrome浏览器里字体显示仍为12px，这时可以用 html&#123;-webkit-text-size-adjust:none;&#125;</span><br><span class="line">2、-webkit-text-size-adjust放在body上会导致页面缩放失效</span><br><span class="line">3、body会继承定义在html的样式</span><br><span class="line">4、用-webkit-text-size-adjust不要定义成可继承的或全局的</span><br><span class="line">————————————————</span><br></pre></td></tr></table></figure><p><strong>浏览器内核前缀：</strong><br>Chrome(谷歌浏览器) ：WebKit内核     -webkit-<br>Safari(苹果浏览器) ：WebKit内核        -webkit-<br>Firefox(火狐浏览器) ：Gecko内核         -moz-<br>IE(IE浏览器) ：          Trident内核        -ms-<br>Opera(欧朋浏览器) ：Presto内核          -o-<br><br></p><blockquote><p>CSS中, padding: 0px 0px 0px 0px; 四个0px分别代表什么?</p></blockquote><p>padding: 0px 0px 0px 0px; 按顺序分别表示上填充、右填充、下填充、左填充为0px。<br>对应着：<br>padding-top:0px;<br>padding-right:0px;<br>padding-bottom:0px;<br>padding-left:0px;</p><br><h3 id="5-css-background背景样式"><a href="#5-css-background背景样式" class="headerlink" title="5.css:background背景样式"></a>5.css:background背景样式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">background-color：背景颜色</span><br><span class="line">background-image：背景图片</span><br><span class="line">            -- body&#123;</span><br><span class="line">                    background-image:url(&apos;相对路径URL&apos;);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">background-repeat：背景样式是否重复</span><br><span class="line">            --background-repeat:repeat-x;水平方向重复</span><br><span class="line">            --background-repeat:repeat-y;垂直方向重复</span><br><span class="line"></span><br><span class="line">background-attachment：设置背景图像是否固定或者随着页面的其余部分滚动</span><br><span class="line">            --：scroll 默认值，背景随着滚动而滚动</span><br><span class="line">            --：fixed 固定图像，不随页面滚动而滚动</span><br><span class="line"></span><br><span class="line">background-position：right top left bottom (可多个组合)</span><br><span class="line">background-size: 规定背景图像的尺寸(100%表示全局展示图片)</span><br></pre></td></tr></table></figure><p>拓：背景图片自适应窗口大小案例        </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--背景图片自适应窗口大小--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    body&#123;</span><br><span class="line">        background-image: url(./public/images/5bbd6378a1fdc.jpg);</span><br><span class="line">        background-repeat: no-repeat;</span><br><span class="line">        background-attachment: fixed;</span><br><span class="line">        background-size: 100%;</span><br><span class="line">position: relative; // 可以选择不写</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><a href="https://www.cnblogs.com/afighter/p/5731293.html" target="_blank" rel="noopener">CSS3中的transition属性详解</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python全栈系列章节更新（十八）：知识点补充（Ⅰ）</title>
      <link href="/2020/04/21/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E5%8D%81%E5%85%AB%EF%BC%89/"/>
      <url>/2020/04/21/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E5%8D%81%E5%85%AB%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;之前我们已经系统的了解过了requests库了，但是愈发觉得这个三方库真是太完美了，利用python可以http请求发送soap报文（xml数据格式）进行webservice接口调用。<br><strong>本章内容：</strong></p><blockquote><p>1.python的占位符%s,%d,%r,%f<br>2.进制转换<br>3.bytes与str之间的转换<br>4.<a href="https://www.runoob.com/python/python-operators.html" target="_blank" rel="noopener">python的运算符</a><br>5.python通过http请求发送soap报文进行webservice接口调用<br>6.python的编码与解码</p></blockquote><a id="more"></a><h3 id="1-python的占位符"><a href="#1-python的占位符" class="headerlink" title="1.python的占位符"></a>1.python的占位符</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><ul><li>%s代表字符串占位符</li><li>%d代表数字占位符，但只能是十进制整数</li><li>%f默认保留6为小数位，而第7位根据四舍五入取值</li></ul><h3 id="2-进制转换"><a href="#2-进制转换" class="headerlink" title="2.进制转换"></a>2.进制转换</h3><ul><li>bin(number) 将十进制转换为二进制</li><li>oct(number) 将十进制转换为八进制</li><li>hex(number) 将十进制转换为十六进制</li><li>bytes(string) 将字符串字节化</li></ul><h3 id="3-bytes与str之间的转换"><a href="#3-bytes与str之间的转换" class="headerlink" title="3.bytes与str之间的转换"></a>3.bytes与str之间的转换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># bytes object</span><br><span class="line">b = b&quot;example&quot;</span><br><span class="line"></span><br><span class="line"># str object</span><br><span class="line">s = &quot;example&quot;</span><br><span class="line"></span><br><span class="line"># str to bytes</span><br><span class="line">bytes(s, encoding = &quot;utf8&quot;)</span><br><span class="line"></span><br><span class="line"># bytes to str</span><br><span class="line">str(b, encoding = &quot;utf-8&quot;)</span><br><span class="line"></span><br><span class="line"># an alternative method</span><br><span class="line"># str to bytes</span><br><span class="line">str.encode(s)</span><br><span class="line"></span><br><span class="line"># bytes to str</span><br><span class="line">bytes.decode(b)</span><br></pre></td></tr></table></figure><h3 id="4-python的运算符"><a href="#4-python的运算符" class="headerlink" title="4.python的运算符"></a>4.<a href="https://www.runoob.com/python/python-operators.html" target="_blank" rel="noopener">python的运算符</a></h3><p><strong>位运算符：</strong></p><table><thead><tr><th align="center">运算符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">&amp;</td><td align="center">按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</td></tr><tr><td align="center">竖线</td><td align="center">按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1</td></tr><tr><td align="center">^</td><td align="center">按位异或运算符：当两对应的二进位相异时，结果为1</td></tr><tr><td align="center">~</td><td align="center">按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1</td></tr><tr><td align="center">&lt;&lt;</td><td align="center">左移动运算符：运算数的各二进位全部左移若干位，由 &lt;&lt; 右边的数字指定了移动的位数，高位丢弃，低位补0</td></tr><tr><td align="center">&gt;&gt;</td><td align="center">右移动运算符：把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，&gt;&gt; 右边的数字指定了移动的位数</td></tr></tbody></table><p>举例说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">a = 60            # 60 = 0011 1100 </span><br><span class="line">b = 13            # 13 = 0000 1101 </span><br><span class="line">c = 0</span><br><span class="line"> </span><br><span class="line">c = a &amp; b;        # 12 = 0000 1100</span><br><span class="line">print &quot;1 - c 的值为：&quot;, c</span><br><span class="line"> </span><br><span class="line">c = a | b;        # 61 = 0011 1101 </span><br><span class="line">print &quot;2 - c 的值为：&quot;, c</span><br><span class="line"> </span><br><span class="line">c = a ^ b;        # 49 = 0011 0001</span><br><span class="line">print &quot;3 - c 的值为：&quot;, c</span><br><span class="line"> </span><br><span class="line">c = ~a;           # -61 = 1100 0011</span><br><span class="line">print &quot;4 - c 的值为：&quot;, c</span><br><span class="line"> </span><br><span class="line">c = a &lt;&lt; 2;       # 240 = 1111 0000</span><br><span class="line">print &quot;5 - c 的值为：&quot;, c</span><br><span class="line"> </span><br><span class="line">c = a &gt;&gt; 2;       # 15 = 0000 1111</span><br><span class="line">print &quot;6 - c 的值为：&quot;, c</span><br></pre></td></tr></table></figure><h3 id="5-python通过http请求发送soap报文进行webservice接口调用"><a href="#5-python通过http请求发送soap报文进行webservice接口调用" class="headerlink" title="5.python通过http请求发送soap报文进行webservice接口调用"></a>5.python通过http请求发送soap报文进行webservice接口调用</h3><blockquote><p>什么是xml？</p></blockquote><p><i>摘自百度百科</i>：扩展标记语言 (Extensible Markup Language, XML) ，用于标记电子文件使其具有结构性的标记语言，可以用来标记数据、定义数据类型，是一种允许用户对自己的标记语言进行定义的源语言。 XML使用DTD(document type definition)文档类型定义来组织数据;格式统一，跨平台和语言，早已成为业界公认的标准。<br>XML是非常适合 Web 传输。XML 提供统一的方法来描述和交换独立于应用程序或供应商的结构化数据。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">country</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>中国<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">province</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>广东<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">citys</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">city</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">city</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">city</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">city</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">city</span>&gt;</span>珠海<span class="tag">&lt;/<span class="name">city</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">citys</span>&gt;</span> 　　</span><br><span class="line">  <span class="tag">&lt;/<span class="name">province</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">province</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>台湾<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">citys</span>&gt;</span></span><br><span class="line">      　<span class="tag">&lt;<span class="name">city</span>&gt;</span>台北<span class="tag">&lt;/<span class="name">city</span>&gt;</span></span><br><span class="line">      　<span class="tag">&lt;<span class="name">city</span>&gt;</span>高雄<span class="tag">&lt;/<span class="name">city</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">citys</span>&gt;</span>　</span><br><span class="line">  <span class="tag">&lt;/<span class="name">province</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">country</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>什么是SoapUI？</p></blockquote><p>soapui提供一个工具通过soap/http协议来检查，调用，实现web service和web service的功能/负载/符合性测试。该工具既可作为一个桌面应用软件使用，也可利用插件集成到Eclipse，maven2.X，netbeans 和intellij中使用。<br><em>即SoapUI是一款测试工具，你可以等同于Postman</em></p><blockquote><p>什么是soap，http协议?</p></blockquote><p>http是标准超文本传输协议。使用对参数进行编码并将参数作为键值对传递，还使用关联的请求语义。<br>SOAP（Simple Object AccessProtocol）简单对象访问协议。它是轻型协议，用于分散的、分布式计算环境中交换信息。SOAP有助于以独立于平台的方式访问对象、服务和服务器。它借助于XML，提供了HTTP所需的扩展。</p><p>SOAP与HTTP的区别:</p><ul><li>都是底层的通信协议，请求包的格式不同，soap包是XML格式,http纯文本格式</li><li>soap可以传递结构化的数据，http只能传输纯文本数据；</li><li>soap：简单对象访问协议；http是标准超文本传输协议</li><li>soap相对http（post/get）由于要进行xml解析，速度可能会有所降低。</li></ul><p><font color="#45b97c">总结：HTTPService基于http协议，而WebService基于soap协议。soap 就是xml 的格式传输，Http是传输协议，soap不是传输协议，只是按照约定的方式封装消息</font></p><p>————————————————</p><blockquote><p>python通过http请求发送soap报文进行webservice接口调用</p></blockquote><p>webservice的接口长什么样？ 很多api接口的后缀需要加 <code>?wsdl</code><br>api: <a href="http://www.webxml.com.cn/WebServices/ValidateCodeWebService.asmx?wsdl" target="_blank" rel="noopener">http://www.webxml.com.cn/WebServices/ValidateCodeWebService.asmx?wsdl</a></p><p>我们要明确知道，发送的soap报文也是xml，<a href="https://www.jianshu.com/p/5bb727b434e6" target="_blank" rel="noopener">webservice</a>也是xml数据格式</p><p>★★★★ 要调用webservice接口的<strong>前提必须是请求头</strong>有如下三个值：</p><ul><li>Content-type：指定数据类型</li><li>Content-length：传入数据长度</li><li>SOAPAction：soap协议的动作或叫做方法（把webservice的api接口在浏览器输入并访问，文本内容中就有SoapAction）</li></ul><p><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/20200628202949.png" alt=""></fancybox></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送给webservice的请求体数据</span></span><br><span class="line">send_webservice_data = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://service.inf.oa.ztesoft.com"&gt;</span></span><br><span class="line"><span class="string">   &lt;soapenv:Header/&gt;</span></span><br><span class="line"><span class="string">   &lt;soapenv:Body&gt;</span></span><br><span class="line"><span class="string">      &lt;ser:Login&gt;</span></span><br><span class="line"><span class="string">         &lt;ser:UserName&gt;username&lt;/ser:UserName&gt;</span></span><br><span class="line"><span class="string">         &lt;ser:Password&gt;password&lt;/ser:Password&gt;</span></span><br><span class="line"><span class="string">      &lt;/ser:Login&gt;</span></span><br><span class="line"><span class="string">   &lt;/soapenv:Body&gt;</span></span><br><span class="line"><span class="string">&lt;/soapenv:Envelope&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://127.0.0.1:8088/mockOaOrderServicePortSoapBinding"</span></span><br><span class="line"><span class="comment"># 构造响应头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Python Post"</span>,</span><br><span class="line">    <span class="string">"Content-type"</span>: <span class="string">"text/xml; charset=UTF-8"</span>,</span><br><span class="line">    <span class="string">"Content-length"</span>: <span class="string">"%d"</span> % len(send_webservice_data),</span><br><span class="line">    <span class="string">"SOAPAction"</span>: <span class="string">"UFIDA.U9.Cust.DoubleRing.ProjectSV/ICreateProject/Do"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""发送webservice请求，获取响应信息"""</span></span><br><span class="line">response = requests.post(url, headers=headers, data=send_webservice_data, verify=<span class="literal">False</span>)</span><br><span class="line">xml_data = response.text</span><br><span class="line">print(xml_data)</span><br></pre></td></tr></table></figure><h3 id="6-python的编码与解码"><a href="#6-python的编码与解码" class="headerlink" title="6.python的编码与解码"></a>6.python的编码与解码</h3><p>python3默认编码为unicode（utf-8是其的一种扩展，两者本质相同，只是收集字数不同），由str类型进行表示。二进制数据使用byte类型表示，所以不会将str和byte混在一起。在实际应用中我们经常需要将两者进行互转.</p><p>encode和decode分别指编码和解码。在python中，Unicode类型是作为编码的基础类型，即：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">        decode                 encode</span><br><span class="line">bytes ---------&gt; str(Unicode) ---------&gt; bytes</span><br><span class="line"></span><br><span class="line">u = &apos;中文&apos; #指定字符串类型对象u</span><br><span class="line">str = u.encode(&apos;gb2312&apos;)    #以gb2312编码对u进行编码，获得bytes类型对象str</span><br><span class="line">u1 = str.decode(&apos;gb2312&apos;)   #以gb2312编码对字符串str进行解码，获得字符串类型对象u1</span><br><span class="line">u2 = str.decode(&apos;utf-8&apos;)    #如果以utf-8的编码对str进行解码得到的结果，将无法还原原来的字符串内容</span><br><span class="line"></span><br><span class="line">with open(&apos;text.text&apos;,&apos;r+&apos;,encoding=&apos;utf-8&apos;) as f: #必须事先知道文件的编码格式，这里文件编码是使用的utf-8</span><br><span class="line">    content = f.read()#如果open时使用的encoding和文件本身的encoding不一致的话，那么这里将将会产生错误</span><br><span class="line">    f.write(&apos;你想要写入的信息&apos;)</span><br></pre></td></tr></table></figure><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://blog.csdn.net/meteor_93/article/details/103380179" target="_blank" rel="noopener">Session 和 Cookies</a></li><li><a href="https://www.cnblogs.com/Shanghai-vame/p/9832989.html" target="_blank" rel="noopener">数据格式XML、JSON详解</a></li><li><a href="https://blog.csdn.net/ttxs99989/article/details/81294958" target="_blank" rel="noopener">http协议与soap协议之间的区别</a></li><li><a href="https://www.jianshu.com/p/653affcaccb5" target="_blank" rel="noopener">python模拟webservice客户端</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析章节（四）：jieba分词与wordcloud词云</title>
      <link href="/2020/04/15/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%AB%A0%E8%8A%82%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2020/04/15/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%AB%A0%E8%8A%82%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wordcloud是优秀的词云展示第三方库，以词语为基本单位，通过图形可视化的方式，更加直观和艺术的展示文本。而jieba库是十分优秀的分词三方库，将文本内容进行分词<br><strong>本文内容：</strong></p><blockquote><p>1.jieba库<br>2.wordcloud库<br>3.Windows中文字体文件名称</p></blockquote><a id="more"></a><h3 id="1-jieba库"><a href="#1-jieba库" class="headerlink" title="1.jieba库"></a>1.jieba库</h3><p>pip安装wordcloud，jieba的过程中可能会提示pip工具版本低,需先更新pip包管理工具<code>python -m pip install --upgrade pip</code></p><p>jieba库常用函数：</p><ul><li>jieba.cut(strings,[cut_all])：strings需要分词的字符串；cut_all 参数用来控制是否采用全模式（cut_all=True表示全模式，为False表示精准模式）</li><li>jieba.cut_for_search(strings)</li><li>jieba.lcut()或者jieba.lcut_for_search()直接返回 list</li></ul><p>ps:<br>jieba.cut 以及 jieba.cut_for_search 返回的结构都是一个可迭代的 generator，可以使用 for 循环来获得分词后得到的每一个词语(unicode)<br>jieba.lcut 以及 jieba.lcut_for_search 直接返回 list</p><p><strong>jieba库进行分词后，我们都需要将返回的数组或其它生成器generator，以空格重新拼接成一个新的字符串，将拼接后的新字符串传入wordcloud库制作词云</strong></p><p>举例说明：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cut_word</span><span class="params">()</span>:</span></span><br><span class="line">    comment_txt = <span class="string">"壬戌之秋，七月既望，苏子与客泛舟游于赤壁之下。清风徐来，水波不兴。举酒属客，诵明月之诗，歌窈窕之章。"</span></span><br><span class="line">    split_txt = jieba.cut(comment_txt, cut_all=<span class="literal">False</span>)</span><br><span class="line">    print(split_txt)  <span class="comment"># &lt;generator object Tokenizer.cut at 0x0000028D12A477C8&gt;</span></span><br><span class="line">    wl = <span class="string">" "</span>.join(split_txt)  <span class="comment"># 拼接成一个字符串</span></span><br><span class="line">    <span class="keyword">return</span> wl</span><br></pre></td></tr></table></figure><h3 id="2-wordcloud库"><a href="#2-wordcloud库" class="headerlink" title="2.wordcloud库"></a>2.wordcloud库</h3><p>词云库的基本设置：</p><table><thead><tr><th align="center">设置参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">width</td><td align="center">指定词云对象生成图片的宽度，默认400像素； WordCloud(width=600)</td></tr><tr><td align="center">height</td><td align="center">指定词云对象生成图片的高度，默认200像素； WordCloud(height=600)</td></tr><tr><td align="center">min_font_size</td><td align="center">指定词云中的最小字号，默认4号； WordCloud(min_font_size=10)</td></tr><tr><td align="center">max_font_size</td><td align="center">指定词云中的最大字号，根据高度自动调节； WordCloud(max_font_size=20)</td></tr><tr><td align="center">font_step</td><td align="center">指定词云中的字体字号的步进间隔，默认为1； WordCloud(font_step=2)</td></tr><tr><td align="center">font_path</td><td align="center">指定文件的路径，默认None； WordCloud(font_path=“msyh.ttc”)</td></tr><tr><td align="center">max_words</td><td align="center">指定词云现实的最大单词数量，默认200； WordCloud(max_words=20)</td></tr><tr><td align="center">stop_words</td><td align="center">指定词云的排除词列表，即不显示的单词列表； WordCloud(stop_words={“Python”})</td></tr><tr><td align="center">mask</td><td align="center">遮罩，指定词云形状，默认为长方形；WordCloud(mask=mk)</td></tr><tr><td align="center">background_color</td><td align="center">指定词云图片的背景颜色，默认为黑色； WordCloud(background_color=“white”)</td></tr></tbody></table><p>词云库的基本方法：</p><ul><li>w.generate(string)    向WordCloud对象w中加载字符串，<strong>词云能够处理的数据格式为字符串形式</strong>；w.generate(“Python and WordCloud”)</li><li>w.to_file(filename())    将词云输出为图像文件，.png或.jpg格式；w.tp_file(“outfile,png”)</li></ul><p>举例说明：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_word_cloud</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    生成词云</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 设置词云形状</span></span><br><span class="line">    shape = np.array(Image.open(<span class="string">r"C:\Users\CHD\Desktop\2018.png"</span>))</span><br><span class="line">    <span class="comment"># 设置词云的基本配置</span></span><br><span class="line">    wc = WordCloud(background_color=<span class="string">"white"</span>, max_words=<span class="number">1000</span>, width=<span class="number">600</span>,</span><br><span class="line">                   height=<span class="number">600</span>, mask= shape,</span><br><span class="line">                   scale=<span class="number">4</span>, max_font_size=<span class="number">40</span>, random_state=<span class="number">42</span>, </span><br><span class="line">                    font_path=<span class="string">r"C:\Windows\Fonts\simfang.ttf"</span>)</span><br><span class="line">    <span class="comment"># 生成词云</span></span><br><span class="line">    wc.generate(cut_word())</span><br><span class="line">    <span class="comment"># 生成图像窗口</span></span><br><span class="line">    plt.figure()</span><br><span class="line">    <span class="comment"># 显示图像的格式</span></span><br><span class="line">    plt.imshow(wc, interpolation=<span class="string">'bilinear'</span>)</span><br><span class="line">    plt.axis(<span class="string">"off"</span>)</span><br><span class="line">    <span class="comment"># 展示图像</span></span><br><span class="line">    plt.show()</span><br><span class="line">    <span class="comment"># 保存词云图片</span></span><br><span class="line">    wc.to_file(<span class="string">"old_word_cloud.png"</span>)</span><br></pre></td></tr></table></figure><p><strong>小结：</strong></p><ol><li>文本中含有中文时，必须要字体文件路径font_path，不然无法显示，会出现方框，不出现汉字</li><li>设置词云形状时，有些图片会不成功，需要使用色差对比清晰的图片</li><li>mask为遮罩，限定词云的形状，选择图片作为遮罩，图片中白色的部分不显示词，非白色部分显示词</li><li>图片字迹不清楚的，可以在WordCloud里设置参数scale=4，数字越大图片越清楚，要求电脑配置也就越高</li><li>中文需要先分词并组成空格分隔字符串（eg: wl = “ “.join(split_txt)  # 拼接成一个字符串）</li><li>导入指定词云图片时读取图片的二进制（np.array(Image.open(r”C:\Users\CHD\Desktop\2018.png”))）</li></ol><p><fancybox><img src="https://img-blog.csdnimg.cn/20181111174011512.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzI3NjY2,size_16,color_FFFFFF,t_70" alt=""></fancybox></p><h3 id="3-Windows中文字体文件名称"><a href="#3-Windows中文字体文件名称" class="headerlink" title="3.Windows中文字体文件名称"></a>3.Windows中文字体文件名称</h3><p><a href="https://blog.csdn.net/qq_29856789/article/details/80883301" target="_blank" rel="noopener">【Windows 中文字体类型对应的文件名称】</a></p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://blog.csdn.net/weixin_43886356/article/details/86711292" target="_blank" rel="noopener">python第三方库wordcloud绘制任意形状词云教程</a></li><li><a href="https://blog.csdn.net/qq_41727666/article/details/83960317?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-10&utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-10" target="_blank" rel="noopener">【Python】Windows下用Jieba分词和WordCloud库生成中文词云</a></li><li><a href="https://blog.csdn.net/AlanSmith233/article/details/100544475" target="_blank" rel="noopener">wordcloud库与可视化词云以及一些遇到的坑</a></li><li><a href="https://blog.csdn.net/jinsefm/article/details/80645588" target="_blank" rel="noopener">Python之wordcloud库使用</a></li><li><a href="https://blog.csdn.net/beyond9305/article/details/84396731?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3&utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3" target="_blank" rel="noopener">使用jieba+wordcloud生成微信好友个性签名词云图</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Data analysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java（十一）：Java的缓冲流，转换流，序列化流</title>
      <link href="/2020/04/14/Java%E7%BC%93%E5%86%B2%E6%B5%81%E5%BA%8F%E5%88%97%E6%B5%81%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89/"/>
      <url>/2020/04/14/Java%E7%BC%93%E5%86%B2%E6%B5%81%E5%BA%8F%E5%88%97%E6%B5%81%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;之前已经学习了基本的一些流，作为IO流的入门，今天我们要见识一些更强大的流。比如能够高效读写的缓冲流，能够转换编码的转换流，能够持久化存储对象的序列化流等等。这些功能更为强大的流，都是在基本的流对象基础之上创建而来的，就像穿上铠甲的武士一样，相当于是对基本流对象的一种增强。<br><strong>本章内容：</strong></p><blockquote><p>1.IO概述<br>2.字节流<br>3.字符流<br>4.IO异常的处理</p></blockquote><a id="more"></a><h3 id="1-缓冲流"><a href="#1-缓冲流" class="headerlink" title="1.缓冲流"></a>1.缓冲流</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;缓冲流,也叫高效流，是对4个基本的<code>FileXxx</code> 流的增强，所以也是4个流，按照数据类型分类：</p><ul><li>字节缓冲流：BufferedInputStream，BufferedOutputStream</li><li>字符缓冲流：BufferedReader，BufferedWrite</li></ul><p><font color="orange">缓冲流的基本原理，是在创建流对象时，会创建一个内置的默认大小的缓冲区数组，通过缓冲区读写，减少系统IO次数，从而提高读写的效率。</font></p><p><strong>构造方法：</strong></p><ul><li><code>public BufferedInputStream(InputStream in)</code> ：创建一个 新的缓冲输入流。 </li><li><code>public BufferedOutputStream(OutputStream out)</code>： 创建一个新的缓冲输出流。</li></ul><p>构造举例，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建字节缓冲输入流</span></span><br><span class="line">BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"bis.txt"</span>));</span><br><span class="line"><span class="comment">// 创建字节缓冲输出流</span></span><br><span class="line">BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"bos.txt"</span>));</span><br></pre></td></tr></table></figure><h4 id="BufferedOutputStream：字节缓冲输出流"><a href="#BufferedOutputStream：字节缓冲输出流" class="headerlink" title="BufferedOutputStream：字节缓冲输出流"></a>BufferedOutputStream：字节缓冲输出流</h4><ol><li>继承自父类的共性成员方法:</li></ol><ul><li>public void close() ：关闭此输出流并释放与此流相关联的任何系统资源。</li><li>public void flush() ：刷新此输出流并强制任何缓冲的输出字节被写出。</li><li>public void write(byte[] b)：将 b.length字节从指定的字节数组写入此输出流。</li><li>public void write(byte[] b, int off, int len) ：从指定的字节数组写入 len字节，从偏移量 off开始输出到此输出流。</li><li>public abstract void write(int b) ：将指定的字节输出流。</li></ul><ol start="2"><li><p>构造方法:</p><pre>&nbsp;&nbsp;&nbsp;&nbsp;BufferedOutputStream(OutputStream out)  创建一个新的缓冲输出流，以将数据写入指定的底层输出流。&nbsp;&nbsp;&nbsp;&nbsp;BufferedOutputStream(OutputStream out, int size)  创建一个新的缓冲输出流，以将具有指定缓冲区大小的数据写入指定的底层输出流。 参数:OutputStream out:字节输出流     我们可以传递FileOutputStream,缓冲流会给FileOutputStream增加一个缓冲区,提高FileOutputStream的写入效率int size:指定缓冲流内部缓冲区的大小,不指定默认</pre></li><li><p><strong>使用步骤(重点)</strong></p></li></ol><p>1.创建FileOutputStream对象,构造方法中绑定要输出的目的地<br>2.创建BufferedOutputStream对象,构造方法中传递FileOutputStream对象对象,提高FileOutputStream对象效率<br>3.使用BufferedOutputStream对象中的方法write,把数据写入到内部缓冲区中<br>4.使用BufferedOutputStream对象中的方法flush,把内部缓冲区中的数据,刷新到文件中<br>5.释放资源(会先调用flush方法刷新数据,第4部可以省略)</p><h4 id="BufferedInputStream-字节缓冲输入流"><a href="#BufferedInputStream-字节缓冲输入流" class="headerlink" title="BufferedInputStream:字节缓冲输入流"></a>BufferedInputStream:字节缓冲输入流</h4><ol><li><p>继承自父类的成员方法:<br> int read()从输入流中读取数据的下一个字节。<br> int read(byte[] b) 从输入流中读取一定数量的字节，并将其存储在缓冲区数组 b 中。<br> void close() 关闭此输入流并释放与该流关联的所有系统资源。</p></li><li><p>构造方法:</p> <pre> BufferedInputStream(InputStream in) 创建一个 BufferedInputStream 并保存其参数，即输入流 in，以便将来使用。 BufferedInputStream(InputStream in, int size) 创建具有指定缓冲区大小的 BufferedInputStream 并保存其参数，即输入流 in，以便将来使用。 参数:     InputStream in:字节输入流         我们可以传递FileInputStream,缓冲流会给FileInputStream增加一个缓冲区,提高FileInputStream的读取效率     int size:指定缓冲流内部缓冲区的大小,不指定默认 </pre></li><li><p><strong>使用步骤(重点):</strong><br> 1.创建FileInputStream对象,构造方法中绑定要读取的数据源<br> 2.创建BufferedInputStream对象,构造方法中传递FileInputStream对象,提高FileInputStream对象的读取效率<br> 3.使用BufferedInputStream对象中的方法read,读取文件<br> 4.释放资源</p></li></ol><blockquote><p>普通流与缓存流效率测试：</p></blockquote><p>查询API，缓冲流读写方法与基本的流是一致的，我们通过复制大文件（400MB），测试它的效率</p><ol><li>基本的io流，考虑到文件最好选择二进制的字节流来读写</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// 记录开始时间</span></span><br><span class="line">      <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"><span class="comment">// 创建流对象</span></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"jdk9.exe"</span>);</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"copy.exe"</span>)</span><br><span class="line">        )&#123;</span><br><span class="line">        <span class="comment">// 读写数据</span></span><br><span class="line">            <span class="keyword">int</span> b;</span><br><span class="line">            <span class="keyword">while</span> ((b = fis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                fos.write(b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 记录结束时间</span></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"普通流复制时间:"</span>+(end - start)+<span class="string">" 毫秒"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">十几分钟过去了...</span><br></pre></td></tr></table></figure><ol start="2"><li>缓冲流，代码如下：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// 记录开始时间</span></span><br><span class="line">      <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"><span class="comment">// 创建流对象</span></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"jdk9.exe"</span>));</span><br><span class="line">     BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"copy.exe"</span>));</span><br><span class="line">        )&#123;</span><br><span class="line">        <span class="comment">// 读写数据</span></span><br><span class="line">            <span class="keyword">int</span> b;</span><br><span class="line">            <span class="keyword">while</span> ((b = bis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                bos.write(b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 记录结束时间</span></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"缓冲流复制时间:"</span>+(end - start)+<span class="string">" 毫秒"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">缓冲流复制时间:<span class="number">8016</span> 毫秒</span><br></pre></td></tr></table></figure><ol start="3"><li>如何更快呢？使用数组的方式</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">      <span class="comment">// 记录开始时间</span></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"><span class="comment">// 创建流对象</span></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"jdk9.exe"</span>));</span><br><span class="line"> BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"copy.exe"</span>));</span><br><span class="line">        )&#123;</span><br><span class="line">          <span class="comment">// 读写数据</span></span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8</span>*<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">while</span> ((len = bis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                bos.write(bytes, <span class="number">0</span> , len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 记录结束时间</span></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"缓冲流使用数组复制时间:"</span>+(end - start)+<span class="string">" 毫秒"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">缓冲流使用数组复制时间:<span class="number">666</span> 毫秒</span><br></pre></td></tr></table></figure><h4 id="BufferedWriter-字符缓冲输出流"><a href="#BufferedWriter-字符缓冲输出流" class="headerlink" title="BufferedWriter:字符缓冲输出流"></a>BufferedWriter:字符缓冲输出流</h4><ol><li><p>继承自父类的共性成员方法:</p><ul><li>void write(int c) 写入单个字符。</li><li>void write(char[] cbuf)写入字符数组。</li><li>abstract void write(char[] cbuf, int off, int len)写入字符数组的某一部分,off数组的开始索引,len写的字符个数。</li><li>void write(String str)写入字符串。</li><li>void write(String str, int off, int len) 写入字符串的某一部分,off字符串的开始索引,len写的字符个数。</li><li>void flush()刷新该流的缓冲。</li><li>void close() 关闭此流，但要先刷新它。</li></ul></li><li><p>构造方法:</p><pre> BufferedWriter(Writer out) 创建一个使用默认大小输出缓冲区的缓冲字符输出流。 BufferedWriter(Writer out, int sz) 创建一个使用给定大小输出缓冲区的新缓冲字符输出流。 参数:     Writer out:字符输出流         我们可以传递FileWriter,缓冲流会给FileWriter增加一个缓冲区,提高FileWriter的写入效率     int sz:指定缓冲区的大小,不写默认大小</pre></li></ol><ol start="3"><li><p>特有的成员方法:<br> void newLine() 写入一个行分隔符。会根据不同的操作系统,获取不同的行分隔符<br> 换行:换行符号<br> windows:\r\n<br> linux:/n<br> mac:/r</p></li><li><p>使用步骤:<br> 1.创建字符缓冲输出流对象,构造方法中传递字符输出流<br> 2.调用字符缓冲输出流中的方法write,把数据写入到内存缓冲区中<br> 3.调用字符缓冲输出流中的方法flush,把内存缓冲区中的数据,刷新到文件中<br> 4.释放资源</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03BufferedWriter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println();</span></span><br><span class="line">        <span class="comment">//1.创建字符缓冲输出流对象,构造方法中传递字符输出流</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"10_IO\\c.txt"</span>));</span><br><span class="line">        <span class="comment">//2.调用字符缓冲输出流中的方法write,把数据写入到内存缓冲区中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">10</span> ; i++) &#123;</span><br><span class="line">            bw.write(<span class="string">"传智播客"</span>);</span><br><span class="line">            <span class="comment">//bw.write("\r\n");</span></span><br><span class="line">            bw.newLine();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.调用字符缓冲输出流中的方法flush,把内存缓冲区中的数据,刷新到文件中</span></span><br><span class="line">        bw.flush();</span><br><span class="line">        <span class="comment">//4.释放资源</span></span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="BufferedReader-字符缓冲输入流"><a href="#BufferedReader-字符缓冲输入流" class="headerlink" title="BufferedReader:字符缓冲输入流"></a>BufferedReader:字符缓冲输入流</h4><ol><li><p>继承自父类的共性成员方法:<br> int read() 读取单个字符并返回。<br> int read(char[] cbuf)一次读取多个字符,将字符读入数组。<br> void close() 关闭该流并释放与之关联的所有资源。</p></li><li><p>构造方法:</p><pre> BufferedReader(Reader in)  创建一个使用默认大小输入缓冲区的缓冲字符输入流。 BufferedReader(Reader in, int sz)     创建一个使用指定大小输入缓冲区的缓冲字符输入流。 参数:     Reader in:字符输入流         我们可以传递FileReader,缓冲流会给FileReader增加一个缓冲区,提高FileReader的读取效率</pre></li><li><p>特有的成员方法:<br> String readLine() 读取一个文本行。读取一行数据</p><pre><code>行的终止符号:通过下列字符之一即可认为某行已终止：换行 (&apos;\n&apos;)、回车 (&apos;\r&apos;) 或回车后直接跟着换行(\r\n)。</code></pre><p> 返回值:</p><pre><code>**包含该行内容的字符串，不包含任何行终止符，如果已到达流末尾，则返回 null**</code></pre></li><li><p>使用步骤:<br> 1.创建字符缓冲输入流对象,构造方法中传递字符输入流<br> 2.使用字符缓冲输入流对象中的方法read/readLine读取文本<br> 3.释放资源</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04BufferedReader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建字符缓冲输入流对象,构造方法中传递字符输入流</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"10_IO\\c.txt"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.使用字符缓冲输入流对象中的方法read/readLine读取文本</span></span><br><span class="line">        <span class="comment">/*String line = br.readLine();</span></span><br><span class="line"><span class="comment">        System.out.println(line);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        line = br.readLine();</span></span><br><span class="line"><span class="comment">        System.out.println(line);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        line = br.readLine();</span></span><br><span class="line"><span class="comment">        System.out.println(line);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        line = br.readLine();</span></span><br><span class="line"><span class="comment">        System.out.println(line);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            发现以上读取是一个重复的过程,所以可以使用循环优化</span></span><br><span class="line"><span class="comment">            不知道文件中有多少行数据,所以使用while循环</span></span><br><span class="line"><span class="comment">            while的结束条件,读取到null结束</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span>((line = br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.释放资源</span></span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-转换流"><a href="#2-转换流" class="headerlink" title="2.转换流"></a>2.转换流</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;计算机中储存的信息都是用二进制数表示的，而我们在屏幕上看到的数字、英文、标点符号、汉字等字符是二进制数转换之后的结果。按照某种规则，将字符存储到计算机中，称为<strong>编码</strong> 。反之，将存储在计算机中的二进制数按照某种规则解析显示出来，称为<strong>解码</strong> 。比如说，按照A规则存储，同样按照A规则解析，那么就能显示正确的文本符号。反之，按照A规则存储，再按照B规则解析，就会导致乱码现象。</p><p>编码:字符(能看懂的)–字节(看不懂的)</p><p>解码:字节(看不懂的)–&gt;字符(能看懂的)</p><p>字符集，也叫编码表。是一个系统支持的所有字符的集合，包括各国家文字、标点符号、图形符号、数字等。</p><p>计算机要准确的存储和识别各种字符集符号，需要进行字符编码，一套字符集必然至少有一套字符编码。常见字符集有ASCII字符集、GBK字符集、Unicode字符集等</p><ul><li>ASCII码：基本的ASCII字符集，使用7位（bits）表示一个字符，共128字符。主要包括控制字符（回车键、退格、换行键等）和可显示字符（英文大小写字符、阿拉伯数字和西文符号）</li><li>GBK字符集：GB就是国标的意思，是为了显示中文而设计的一套字符集。</li><li>Unicode：Unicode编码系统为表达任意语言的任意字符而设计，是业界的一种标准，也称为统一码、标准万国码。它最多使用4个字节的数字来表达每个字母、符号，或者文字。有三种编码方案，<strong>UTF-8、UTF-16和UTF-32</strong>。最为常用的UTF-8编码。</li></ul><h4 id="编码引出的问题"><a href="#编码引出的问题" class="headerlink" title="编码引出的问题"></a>编码引出的问题</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在IDEA中，使用 FileReader 读取项目中的文本文件。由于IDEA的设置，都是默认的 UTF-8 编码，所以没有任何问题。但是，当读取Windows系统中创建的文本文件时，由于Windows系统的默认是GBK编码，就会出现乱码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReaderDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 文件file_gbk.txt是GBK编码，而idea默认是utf-8编码，所以会出现乱码</span></span><br><span class="line">        FileReader fileReader = <span class="keyword">new</span> FileReader(<span class="string">"E:\\File_GBK.txt"</span>);</span><br><span class="line">        <span class="keyword">int</span> read;</span><br><span class="line">        <span class="keyword">while</span> ((read = fileReader.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>)read);</span><br><span class="line">        &#125;</span><br><span class="line">        fileReader.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">���</span><br></pre></td></tr></table></figure><h4 id="InputStreamReader类"><a href="#InputStreamReader类" class="headerlink" title="InputStreamReader类"></a>InputStreamReader类</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;转换流 java.io.InputStreamReader，是Reader的子类，是<strong>从字节流到字符流的桥梁</strong>。它读取字节，并使用指定的字符集将其解码为字符。它的字符集可以由名称指定，也可以接受平台的默认字符集。 </p><blockquote><p>构造方法</p></blockquote><ul><li><code>InputStreamReader(InputStream in)</code>: 创建一个使用默认字符集的字符流。 </li><li><code>InputStreamReader(InputStream in, String charsetName)</code>: 创建一个指定字符集的字符流。</li></ul><p>举例说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputStreamReaderDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定义文件路径（你好）</span></span><br><span class="line">        String fileName = <span class="string">"html.txt"</span>;</span><br><span class="line">        <span class="comment">// 创建转换流对象，默认为UTF-8编码</span></span><br><span class="line">        InputStreamReader isr = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// isr = new InputStreamReader(new FileInputStream(fileName));</span></span><br><span class="line">            <span class="comment">// 创建转换流对象，设置为GBK编码</span></span><br><span class="line">            isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(fileName),<span class="string">"GBk"</span>);</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="comment">// 使用默认编码字符流读取,乱码</span></span><br><span class="line">            <span class="keyword">while</span>((len = isr.read())!= -<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.print((<span class="keyword">char</span>)len);    <span class="comment">// GBK:浣犲ソ  UTF-8:你好</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (isr != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    isr.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="OutputStreamWriter类"><a href="#OutputStreamWriter类" class="headerlink" title="OutputStreamWriter类"></a>OutputStreamWriter类</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;转换流<code>java.io.OutputStreamWriter</code> ，是Writer的子类，是从字符流到字节流的桥梁。使用指定的字符集将字符编码为字节。它的字符集可以由名称指定，也可以接受平台的默认字符集。 </p><blockquote><p>构造方法</p></blockquote><ul><li><code>OutputStreamWriter(OutputStream in)</code>: 创建一个使用默认字符集的字符流。 </li><li><code>OutputStreamWriter(OutputStream in, String charsetName)</code>: 创建一个指定字符集的字符流。</li></ul><p>构造样例，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">OutputStreamWriter isr = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"out.txt"</span>));</span><br><span class="line">OutputStreamWriter isr2 = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"out.txt"</span>) , <span class="string">"GBK"</span>);</span><br></pre></td></tr></table></figure><p>指定编码方式，举例说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OutputDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      <span class="comment">// 定义文件路径</span></span><br><span class="line">        String FileName = <span class="string">"E:\\out.txt"</span>;</span><br><span class="line">      <span class="comment">// 创建流对象,默认UTF8编码</span></span><br><span class="line">        OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(FileName));</span><br><span class="line">        <span class="comment">// 写出数据</span></span><br><span class="line">      osw.write(<span class="string">"你好"</span>); <span class="comment">// 保存为6个字节</span></span><br><span class="line">        osw.close();</span><br><span class="line">      </span><br><span class="line"><span class="comment">// 定义文件路径</span></span><br><span class="line">String FileName2 = <span class="string">"E:\\out2.txt"</span>;</span><br><span class="line">     <span class="comment">// 创建流对象,指定GBK编码</span></span><br><span class="line">        OutputStreamWriter osw2 = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(FileName2),<span class="string">"GBK"</span>);</span><br><span class="line">        <span class="comment">// 写出数据</span></span><br><span class="line">      osw2.write(<span class="string">"你好"</span>);<span class="comment">// 保存为4个字节</span></span><br><span class="line">        osw2.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java（十）：Java字符流，字节流，IO</title>
      <link href="/2020/04/14/Java%E5%AD%97%E7%AC%A6%E5%AD%97%E8%8A%82%E6%B5%81%EF%BC%88%E5%8D%81%EF%BC%89/"/>
      <url>/2020/04/14/Java%E5%AD%97%E7%AC%A6%E5%AD%97%E8%8A%82%E6%B5%81%EF%BC%88%E5%8D%81%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><strong>本章内容：</strong></p><blockquote><p>1.IO概述<br>2.字节流<br>3.字符流<br>4.IO异常的处理</p></blockquote><a id="more"></a><h3 id="1-IO概述"><a href="#1-IO概述" class="headerlink" title="1.IO概述"></a>1.IO概述</h3><ol><li>什么是IO</li></ol><p>生活中，你肯定经历过这样的场景。当你编辑一个文本文件，忘记了<code>ctrl+s</code> ，可能文件就白白编辑了。当你电脑上插入一个U盘，可以把一个视频，拷贝到你的电脑硬盘里。那么数据都是在哪些设备上的呢？键盘、内存、硬盘、外接设备等等。</p><p>我们把这种数据的传输，可以看做是一种数据的流动，按照流动的方向，以内存为基准，分为<code>输入input</code> 和<code>输出output</code> ，即流向内存是输入流，流出内存的输出流。</p><p>Java中I/O操作主要是指使用<code>java.io</code>包下的内容，进行输入、输出操作。<strong>输入</strong>也叫做<strong>读取</strong>数据，<strong>输出</strong>也叫做作<strong>写出</strong>数据。</p><ol start="2"><li>IO的分类</li></ol><p>根据数据的流向分为：<strong>输入流</strong>和<strong>输出流</strong>。</p><ul><li><strong>输入流</strong> ：把数据从<code>其他设备</code>上读取到<code>内存</code>中的流。 </li><li><strong>输出流</strong> ：把数据从<code>内存</code> 中写出到<code>其他设备</code>上的流。</li></ul><p>根据数据的类型分为：<strong>字节流</strong>和<strong>字符流</strong>。</p><ul><li><strong>字节流</strong> ：以字节为单位，读写数据的流。</li><li><strong>字符流</strong> ：以字符为单位，读写数据的流。</li></ul><ol start="3"><li>顶级父类们</li></ol><table><thead><tr><th align="center"></th><th align="center"><strong>输入流</strong></th><th align="center">输出流</th></tr></thead><tbody><tr><td align="center"><strong>字节流</strong></td><td align="center">字节输入流<br /><strong>InputStream</strong></td><td align="center">字节输出流<br/><strong>OutputStream</strong></td></tr><tr><td align="center"><strong>字符流</strong></td><td align="center">字符输入流<br /><strong>Reader</strong></td><td align="center">字符输出流<br/><strong>Writer</strong></td></tr></tbody></table><h3 id="2-字节流"><a href="#2-字节流" class="headerlink" title="2.字节流"></a>2.字节流</h3><p><strong>一切皆为字节</strong><br>（一切皆字节，让我联想到了在python和js中，一切皆对象；在资本博弈中，一切皆营销）<br>一切文件数据(文本、图片、视频等)在存储时，都是以二进制数字的形式保存，都一个一个的字节，那么传输时一样如此。所以，字节流可以传输任意文件数据。在操作流的时候，我们要时刻明确，无论使用什么样的流对象，底层传输的始终为二进制数据。</p><h4 id="字节输出流OutputStream"><a href="#字节输出流OutputStream" class="headerlink" title="字节输出流OutputStream"></a>字节输出流OutputStream</h4><p><font color="orange">java.io.OutputStream </font>抽象类是表示字节输出流的所有类的超类，将指定的字节信息写出到目的地。它定义了字节输出流的基本共性功能方法。</p><ul><li><code>public void close()</code> ：关闭此输出流并释放与此流相关联的任何系统资源。  </li><li><code>public void flush()</code> ：刷新此输出流并强制任何缓冲的输出字节被写出。  </li><li><code>public void write(byte[] b)</code>：将 b.length字节从指定的字节数组写入此输出流。  </li><li><code>public void write(byte[] b, int offset, int len)</code> ：从指定的字节数组写入 len字节，从偏移量 offset开始输出到此输出流。  </li><li><code>public abstract void write(int b)</code> ：将指定的字节输出流。</li></ul><p>PS：close方法，当完成流的操作时，必须调用此方法，释放系统资源。</p><h4 id="FileOutputStream类"><a href="#FileOutputStream类" class="headerlink" title="FileOutputStream类"></a>FileOutputStream类</h4><p>OutputStream超类有很多的子类，FileOutputStream类也是超类中的的一个简单子类，表示文件输出流，用于将数据写出到文件</p><p><strong>获取输出流对象：</strong></p><ul><li><p><code>public FileOutputStream(File file)</code>：创建文件输出流以写入由指定的 File对象表示的文件。 </p></li><li><p><code>public FileOutputStream(String name)</code>： 创建文件输出流以指定的名称写入文件（推荐使用相对路径）。</p><p>当你创建一个流对象时，必须传入一个文件路径。该路径下，如果没有这个文件，会创建该文件。如果有这个文件，会清空这个文件的数据。  </p></li></ul><p>案例展示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutputStreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取文件的构造方法一：String name以指定的相对路径</span></span><br><span class="line">        FileOutputStream fileOutputStreamDemo = <span class="keyword">new</span> FileOutputStream(<span class="string">"src\\b.txt"</span>);</span><br><span class="line">                    </span><br><span class="line">        <span class="comment">// 获取文件的构造方法二：File file指定的 File对象表示的文件</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"src\\b.txt"</span>);</span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 写出数据</span></span><br><span class="line">        fileOutputStream.write(<span class="number">97</span>); <span class="comment">// 写出第1个字节</span></span><br><span class="line">        fileOutputStream.write(<span class="number">98</span>); <span class="comment">// 写出第2个字节</span></span><br><span class="line">        fileOutputStream.write(<span class="number">99</span>); <span class="comment">// 写出第3个字节</span></span><br><span class="line">        fileOutputStream.write(<span class="number">100</span>); <span class="comment">// 写出第4个字节</span></span><br><span class="line">        fileOutputStream.write(<span class="number">101</span>); <span class="comment">// 写出第5个字节</span></span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>文件写入：</strong></p><ul><li>write(int b)：b表示为一个ASCII码值的字节，每次写入一个字节数据</li><li>write(byte[] b):b表示为一个字节型数组，每次写入数组中的数据</li><li>write(byte[] b, int offset, int len):写入指定长度的字节数组，起始索引为offset（默认为0），长度为len字节</li><li>调用string.getBytes()方法将字符串转换为字节数组 byte[] b = “hello world”.getBytes();</li></ul><p>案例展示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutputStreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">"c.txt"</span>);</span><br><span class="line">        <span class="comment">// 文件写入方式一：</span></span><br><span class="line">        fileOutputStream.write(<span class="number">65</span>);</span><br><span class="line">        <span class="comment">// 文件写入方式二：</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = &#123;<span class="number">65</span>,<span class="number">69</span>,<span class="number">68</span>,<span class="number">97</span>&#125;;</span><br><span class="line">        fileOutputStream.write(bytes);</span><br><span class="line">        <span class="comment">// 文件写入方式三：</span></span><br><span class="line">        <span class="keyword">byte</span>[] by = &#123;<span class="number">98</span>,<span class="number">99</span>,<span class="number">105</span>,<span class="number">107</span>&#125;;</span><br><span class="line">        fileOutputStream.write(by,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 文件写入方式四：字符串</span></span><br><span class="line">        fileOutputStream.write(<span class="string">" hello world;hello china!!!"</span>.getBytes());</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果：AAEDaik hello world;hello china!!!</span></span><br></pre></td></tr></table></figure><p><strong>数据追加续写：</strong></p><p>经过以上的演示，每次程序运行，创建输出流对象，都会清空目标文件中的数据。如何保留目标文件中数据，还能继续添加新数据呢？</p><ul><li><code>public FileOutputStream(File file, boolean append)</code>： 创建文件输出流以写入由指定的 File对象表示的文件。  </li><li><code>public FileOutputStream(String name, boolean append)</code>： 创建文件输出流以指定的名称写入文件。  </li></ul><p>这两个构造方法，参数中都需要传入一个boolean类型的值，<code>true</code> 表示追加数据，<code>false</code> 表示清空原有数据。这样创建的输出流对象，就可以指定是否追加续写了，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FOSWrite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"demo.txt"</span>，<span class="keyword">true</span>);</span><br><span class="line">      <span class="comment">// 字符串转换为字节数组</span></span><br><span class="line">      <span class="keyword">byte</span>[] b = <span class="string">"abcde"</span>.getBytes();</span><br><span class="line"><span class="comment">// 写出从索引2开始，2个字节。索引2是c，两个字节，也就是cd。</span></span><br><span class="line">        fos.write(b);</span><br><span class="line">      <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">文件操作前：cd</span><br><span class="line">文件操作后：cdabcde</span><br></pre></td></tr></table></figure><p><strong>写出换行：</strong></p><ul><li>回车符<code>\r</code>和换行符<code>\n</code> ：<ul><li>回车符：回到一行的开头（return）。</li><li>换行符：下一行（newline）。</li></ul></li><li>系统中的换行：<ul><li>Windows系统里，每行结尾是 <code>回车+换行</code> ，即<code>\r\n</code>；</li><li>Unix系统里，每行结尾只有 <code>换行</code> ，即<code>\n</code>；</li><li>Mac系统里，每行结尾是 <code>回车</code> ，即<code>\r</code>。从 Mac OS X开始与Linux统一。</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fos.write(97);</span><br><span class="line">fos.write(&quot;\r\n&quot;.getBytes());</span><br></pre></td></tr></table></figure><h4 id="FileInputStream类"><a href="#FileInputStream类" class="headerlink" title="FileInputStream类"></a>FileInputStream类</h4><p>java.io.FileInputStream 类是文件输入流，从文件中读取字节到内存中。</p><p><strong>构造方法：</strong></p><ul><li>FileInputStream(File file)： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的 File对象 file命名。 </li><li>FileInputStream(String name)： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的路径名 name命名。  </li></ul><p>当你创建一个流对象时，必须传入一个文件路径。该路径下，如果没有该文件，会抛出 FileNotFoundException 。</p><p>构造举例，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInputStreamConstructor</span> <span class="title">throws</span> <span class="title">IOException</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用File对象创建流对象</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"a.txt"</span>);</span><br><span class="line">        FileInputStream fos = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileInputStream fos = <span class="keyword">new</span> FileInputStream(<span class="string">"b.txt"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>读取字节数据：</strong></p><ul><li>读取字节：<code>read</code>方法，每次可以读取一个字节的数据，提升为int类型，读取到文件末尾，返回<code>-1</code>，代码使用演示：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FISRead</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">      <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">       FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"read.txt"</span>);</span><br><span class="line">      <span class="comment">// 定义变量，保存数据</span></span><br><span class="line">        <span class="keyword">int</span> b ；</span><br><span class="line">        <span class="comment">// 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> ((b = fis.read())!=-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println((<span class="keyword">char</span>)b);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">d</span><br><span class="line">e</span><br></pre></td></tr></table></figure><ul><li>read(byte[] b)使用字节数组读取，每次读取b的长度个字节到数组中，返回读取到的有效字节个数，读取到末尾时，返回<code>-1</code> ，代码使用演示：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FISRead</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">      <span class="comment">// 使用文件名称创建流对象.</span></span><br><span class="line">       FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"read.txt"</span>); <span class="comment">// 文件中为abcde</span></span><br><span class="line">      <span class="comment">// 定义变量，作为有效个数</span></span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="comment">// 定义字节数组，作为装字节数据的容器   </span></span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="comment">// 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> (( len= fis.read(b))!=-<span class="number">1</span>) &#123;</span><br><span class="line">           <span class="comment">// 每次读取后,把数组变成字符串打印</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(b));</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">ab</span><br><span class="line">cd</span><br><span class="line">ed</span><br></pre></td></tr></table></figure><p>这里就开始出现一个错误数据d，byte[2]每次读取两个字节，最后一次读取时，只读取一个字节<code>e</code>，数组中，上次读取的数据没有被完全替换，所以要通过<code>len</code> ，获取有效的字节，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FISRead</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">      <span class="comment">// 使用文件名称创建流对象.</span></span><br><span class="line">       FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"read.txt"</span>); <span class="comment">// 文件中为abcde</span></span><br><span class="line">      <span class="comment">// 定义变量，作为有效个数</span></span><br><span class="line">        <span class="keyword">int</span> len ；</span><br><span class="line">        <span class="comment">// 定义字节数组，作为装字节数据的容器   </span></span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="comment">// 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> (( len= fis.read(b))!=-<span class="number">1</span>) &#123;</span><br><span class="line">           <span class="comment">// 每次读取后,把数组的有效字节部分，变成字符串打印</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(b，<span class="number">0</span>，len));<span class="comment">//  len 每次读取的有效字节个数</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">ab</span><br><span class="line">cd</span><br><span class="line">e</span><br></pre></td></tr></table></figure><p>PS:使用数组读取，每次读取多个字节，减少了系统间的IO操作次数，从而提高了读写的效率，建议开发中使用。</p><h3 id="3-字符流"><a href="#3-字符流" class="headerlink" title="3.字符流"></a>3.字符流</h3><p>当使用字节流读取文本文件时，可能会有一个小问题。就是遇到中文字符时，可能不会显示完整的字符，那是因为一个中文字符可能占用多个字节存储。所以Java提供一些字符流类，以字符为单位读写数据，专门用于处理文本文件。</p><h4 id="字符输入流Reader"><a href="#字符输入流Reader" class="headerlink" title="字符输入流Reader"></a>字符输入流Reader</h4><p><code>java.io.Reader</code>抽象类是表示用于读取字符流的所有类的超类，可以读取字符信息到内存中。它定义了字符输入流的基本共性功能方法。</p><ul><li>public void close() ：关闭此流并释放与此流相关联的任何系统资源。    </li><li>public int read()： 从输入流读取一个字符。 </li><li>public int read(char[] cbuf)： 从输入流中读取一些字符，并将它们存储到字符数组 cbuf中 。</li></ul><h4 id="FileReader类"><a href="#FileReader类" class="headerlink" title="FileReader类"></a>FileReader类</h4><p><code>java.io.FileReader</code>类是读取字符文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。</p><p>tips： </p><ol><li>字符编码：字节与字符的对应规则。Windows系统的中文编码默认是GBK编码表。idea中UTF-8</li><li>字节缓冲区：一个字节数组，用来临时存储字节数据。</li></ol><p><strong>构造方法：</strong></p><ul><li><code>FileReader(File file)</code>： 创建一个新的 FileReader ，给定要读取的File对象。   </li><li><code>FileReader(String fileName)</code>： 创建一个新的 FileReader ，给定要读取的文件的名称。  </li></ul><p>当你创建一个流对象时，必须传入一个文件路径，类似于FileInputStream。构造举例，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileReaderConstructor</span> <span class="title">throws</span> <span class="title">IOException</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用File对象创建流对象</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"a.txt"</span>);</span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(file);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"b.txt"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>读取字符数据：</strong></p><ol><li>read()方法读取字符：每次可以读取一个字符的数据，提升为int类型，读取到文件末尾，返回<code>-1</code>，循环读取，代码使用演示：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileReaderDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileReader fileReader = <span class="keyword">new</span> FileReader(<span class="string">"c.txt"</span>);</span><br><span class="line">        <span class="keyword">int</span> b;</span><br><span class="line">        <span class="keyword">while</span>((b = fileReader.read())!= -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>)b+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        fileReader.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 结果为：欢 迎 来 到 英 雄 联 盟 ， 敌 军 还 有 三 十 秒 到 达 战 场 !</span></span><br></pre></td></tr></table></figure><ol start="2"><li>read(char[] cbuf)使用字符数组读取文件，每次读取b的长度个字符到数组中，返回读取到的有效字符个数，读取到末尾时，返回<code>-1</code> ，代码使用演示</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FISRead</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">       FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"read.txt"</span>);</span><br><span class="line">      <span class="comment">// 定义变量，保存有效字符个数</span></span><br><span class="line">        <span class="keyword">int</span> len ；</span><br><span class="line">        <span class="comment">// 定义字符数组，作为装字符数据的容器</span></span><br><span class="line">        <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="comment">// 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> ((len = fr.read(cbuf))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(cbuf,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// 关闭资源</span></span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">黑马</span><br><span class="line">程序</span><br><span class="line">员</span><br></pre></td></tr></table></figure><h4 id="字符输出流Writer"><a href="#字符输出流Writer" class="headerlink" title="字符输出流Writer"></a>字符输出流Writer</h4><p>java.io.Writer抽象类是表示用于写出字符流的所有类的超类，将指定的字符信息写出到目的地。它定义了字节输出流的基本共性功能方法。</p><ul><li><code>void write(int c)</code> 写入单个字符。</li><li><code>void write(char[] cbuf)</code>写入字符数组。 </li><li><code>abstract  void write(char[] cbuf, int off, int len)</code>写入字符数组的某一部分,off数组的开始索引,len写的字符个数。 </li><li><code>void write(String str)</code>写入字符串。 </li><li><code>void write(String str, int off, int len)</code> 写入字符串的某一部分,off字符串的开始索引,len写的字符个数。</li><li><code>void flush()</code>刷新该流的缓冲。  </li><li><code>void close()</code> 关闭此流，但要先刷新它。 </li></ul><h4 id="FileWrite类"><a href="#FileWrite类" class="headerlink" title="FileWrite类"></a>FileWrite类</h4><p>Java.io.FileWriter类是写出字符到文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。</p><p><strong>构造方法：</strong></p><ul><li><code>FileWriter(File file)</code>： 创建一个新的 FileWriter，给定要读取的File对象。   </li><li><code>FileWriter(String fileName)</code>： 创建一个新的 FileWriter，给定要读取的文件的名称。  </li></ul><p>当你创建一个流对象时，必须传入一个文件路径，类似于FileOutputStream。构造举例，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileWriterConstructor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 使用File对象创建流对象</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"a.txt"</span>);</span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(file);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"b.txt"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>数据写入：</strong></p><ul><li>write(int b):每次可以写出一个字符数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FWWrite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"fw.txt"</span>);     </span><br><span class="line">      <span class="comment">// 写出数据</span></span><br><span class="line">      fw.write(<span class="number">97</span>); <span class="comment">// 写出第1个字符</span></span><br><span class="line">      fw.write(<span class="string">'b'</span>); <span class="comment">// 写出第2个字符</span></span><br><span class="line">      fw.write(<span class="string">'C'</span>); <span class="comment">// 写出第3个字符</span></span><br><span class="line">      fw.write(<span class="number">30000</span>); <span class="comment">// 写出第4个字符，中文编码表中30000对应一个汉字。</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">        【注意】关闭资源时,与FileOutputStream不同。</span></span><br><span class="line"><span class="comment">       如果不关闭,数据只是保存到缓冲区，并未保存到文件。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">// fw.close();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">abC田</span><br></pre></td></tr></table></figure><p>ps:1. 虽然参数为int类型四个字节，但是只会保留一个字符的信息写出。 2. 未调用close方法，数据只是保存到了缓冲区，并未写出到文件中。</p><ul><li>写入字符数组 <code>write(char[] cbuf)</code> 和 <code>write(char[] cbuf, int off, int len)</code> ，每次可以写出字符数组中的数据，用法类似FileOutputStream</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FWWrite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"fw.txt"</span>);     </span><br><span class="line">      <span class="comment">// 字符串转换为字节数组</span></span><br><span class="line">      <span class="keyword">char</span>[] chars = <span class="string">"黑马程序员"</span>.toCharArray();</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 写出字符数组</span></span><br><span class="line">      fw.write(chars); <span class="comment">// 黑马程序员</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">// 写出从索引2开始，2个字节。索引2是'程'，两个字节，也就是'程序'。</span></span><br><span class="line">        fw.write(b,<span class="number">2</span>,<span class="number">2</span>); <span class="comment">// 程序</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>写入字符串 <code>write(String str)</code> 和 <code>write(String str, int off, int len)</code> ，每次可以写出字符串中的数据，更为方便</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FWWrite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"fw.txt"</span>);     </span><br><span class="line">      <span class="comment">// 字符串</span></span><br><span class="line">      String msg = <span class="string">"黑马程序员"</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 写出字符数组</span></span><br><span class="line">      fw.write(msg); <span class="comment">//黑马程序员</span></span><br><span class="line">      </span><br><span class="line"><span class="comment">// 写出从索引2开始，2个字节。索引2是'程'，两个字节，也就是'程序'。</span></span><br><span class="line">        fw.write(msg,<span class="number">2</span>,<span class="number">2</span>);<span class="comment">// 程序</span></span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>续写和换行：</strong> 操作类似于FileOutputStream</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FWWrite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象，可以续写数据</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"fw.txt"</span>，<span class="keyword">true</span>);     </span><br><span class="line">      <span class="comment">// 写出字符串</span></span><br><span class="line">        fw.write(<span class="string">"黑马"</span>);</span><br><span class="line">      <span class="comment">// 写出换行</span></span><br><span class="line">      fw.write(<span class="string">"\r\n"</span>);</span><br><span class="line">      <span class="comment">// 写出字符串</span></span><br><span class="line">  fw.write(<span class="string">"程序员"</span>);</span><br><span class="line">      <span class="comment">// 关闭资源</span></span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果:</span><br><span class="line">黑马</span><br><span class="line">程序员</span><br></pre></td></tr></table></figure><p>小结：</p><ol><li>字符流，只能操作文本文件，不能操作图片，视频等非文本文件。</li><li>当我们单纯读或者写文本文件时使用字符流，其他情况使用字节流</li><li>java的字节字符流调用close方法会清空缓存区的内容，也就是flush一下，不过为了保险起见，应该先调用flush()再close()<ul><li>flush():刷新缓冲区，流对象可以继续使用,还可以继续读写</li><li>close():先刷新缓存区，告知系统关闭资源，流对象不再使用</li></ul></li></ol><h3 id="4-IO异常的处理"><a href="#4-IO异常的处理" class="headerlink" title="4.IO异常的处理"></a>4.IO异常的处理</h3><font color="orange">之前的入门练习，我们一直把异常抛出，而实际开发中并不能这样处理，建议使用`try...catch...finally` 代码块，处理异常部分，代码使用演示：java的io异常一定要用try...catch...finally，因为直接throws抛出异常是交给jvm，jvm直接中断程序运行，这会导致流对象无法关闭，会占用资源，这是要避免的</font><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandleException1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 声明变量</span></span><br><span class="line">        FileWriter fw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建流对象</span></span><br><span class="line">            fw = <span class="keyword">new</span> FileWriter(<span class="string">"fw.txt"</span>);</span><br><span class="line">            <span class="comment">// 写出数据</span></span><br><span class="line">            fw.write(<span class="string">"黑马程序员"</span>); <span class="comment">//黑马程序员</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fw != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    fw.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql数据库引发的生产事故案例</title>
      <link href="/2020/04/09/sql%E7%B3%BB%E5%88%97%E6%9B%B4%E6%96%B0%EF%BC%88%E4%BA%94%EF%BC%89/"/>
      <url>/2020/04/09/sql%E7%B3%BB%E5%88%97%E6%9B%B4%E6%96%B0%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>数据库是每一个IT工程师必备的技能树，通常一些很小错误操作，尤其对生产环境带来很大的经济损失。收集网上大佬分享的数据库重大事故，警示自己，与君共勉。</p><blockquote><p><font color=#FF3030>本文要点：</font><br>1.Insert into select语句引发的生产事故</p></blockquote><a id="more"></a><h3 id="1-Insert-into-select语句引发的生产事故"><a href="#1-Insert-into-select语句引发的生产事故" class="headerlink" title="1.Insert into select语句引发的生产事故"></a>1.Insert into select语句引发的生产事故</h3><p>复制表结构和表数据先参考文献：<a href="https://blog.csdn.net/insis_mo/article/details/84936753" target="_blank" rel="noopener">select into from 和 insert into select 的用法和区别</a></p><p><strong>前言：</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Insert into select请慎用。这天xxx接到一个需求，需要将表A的数据迁移到表B中去做一个备份。本想通过程序先查询查出来然后批量插入。但xxx觉得这样有点慢，需要耗费大量的网络I/O，决定采取别的方法进行实现。通过在Baidu的海洋里遨游，他发现了可以使用insert into select实现，这样就可以避免使用网络I/O，直接使用SQL依靠数据库I/O完成，这样简直不要太棒了。然后他就被开除了。</p><p><strong>事件经过：</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于数据数据库中order_today数据量过大，当时好像有700W了并且每天在以30W的速度增加。所以上司命令xxx将order_today内的部分数据迁移到order_record中，并将order_today中的数据删除。这样来降低order_today表中的数据量。<br>  由于考虑到会占用数据库I/O，为了不影响业务，计划是9:00以后开始迁移，但是xxx在8:00的时候，尝试迁移了少部分数据(1000条)，觉得没啥问题，就开始考虑大批量迁移。</p><ul><li>在迁移的过程中，应急群是先反应有小部分用户出现支付失败，随后反应大批用户出现支付失败的情况，以及初始化订单失败的情况，同时腾讯也开始报警。</li><li>然后xxx就慌了，立即停止了迁移。本以为停止迁移就就可以恢复了，但是并没有。后面发生的你们可以脑补一下。</li></ul><p><strong>解决方案：</strong><br>网友 大鸡腿童鞋：走普通做法就可以了，查询完再插入。越是花里花哨越多问题。通过外部工具或代码来做归档最好。</p><p>作者：不一样的科技宅<br>链接：<a href="https://juejin.im/post/5e670f0151882549274a65ef" target="_blank" rel="noopener">https://juejin.im/post/5e670f0151882549274a65ef</a><br>来源：掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java（九）：Java数据结构基础</title>
      <link href="/2020/04/03/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B9%9D%EF%BC%89/"/>
      <url>/2020/04/03/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B9%9D%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><strong>本章内容：</strong></p><blockquote><p>1.数据结构简述<br>2.常见的数据结构</p></blockquote><a id="more"></a><h3 id="1-数据结构有什么作用"><a href="#1-数据结构有什么作用" class="headerlink" title="1.数据结构有什么作用"></a>1.数据结构有什么作用</h3><p>当你用着java里面的容器类很爽的时候，你有没有想过，怎么ArrayList就像一个无限扩充的数组，也好像链表之类的。好用吗？好用，这就是数据结构的用处，只不过你在不知不觉中使用了。</p><p>现实世界的存储，我们使用的工具和建模。每种数据结构有自己的优点和缺点，想想如果Google的数据用的是数组的存储，我们还能方便地查询到所需要的数据吗？而算法，在这么多的数据中如何做到最快的插入，查找，删除，也是在追求更快。</p><p>我们java是面向对象的语言，就好似自动档轿车，C语言好似手动档吉普。数据结构呢？是变速箱的工作原理。你完全可以不知道变速箱怎样工作，就把自动档的车子从 A点 开到 B点，而且未必就比懂得的人慢。写程序这件事，和开车一样，经验可以起到很大作用，但如果你不知道底层是怎么工作的，就永远只能开车，既不会修车，也不能造车。当然了，数据结构内容比较多，细细的学起来也是相对费功夫的，不可能达到一蹴而就。我们将常见的数据结构：堆栈、队列、数组、链表和红黑树 这几种给大家介绍一下，作为数据结构的入门，了解一下它们的特点即可。</p><h3 id="2-常见的数据结构"><a href="#2-常见的数据结构" class="headerlink" title="2.常见的数据结构"></a>2.常见的数据结构</h3><p>数据存储的常用结构有：<strong>栈，队列，数组，链表和红黑树</strong></p><h4 id="栈-Stack"><a href="#栈-Stack" class="headerlink" title="栈 Stack"></a>栈 Stack</h4><p><strong>stack</strong>,又称堆栈，它是运算受限的线性表，其限制是仅允许在标的一端进行插入和删除操作，不允许在其他任何位置进行添加、查找、删除等操作。</p><p>简单的说：采用该结构的集合，对元素的存取有如下的特点</p><ul><li><p>先进后出（即，存进去的元素，要在后它后面的元素依次取出后，才能取出该元素）。例如，子弹压进弹夹，先压进去的子弹在下面，后压进去的子弹在上面，当开枪时，先弹出上面的子弹，然后才能弹出下面的子弹。</p></li><li><p>栈的入口、出口的都是栈的顶端位置。</p></li></ul><p><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/%E5%A0%86%E6%A0%88.png" alt=""></fancybox><br>这里两个名词需要注意：</p><ul><li><strong>压栈</strong>：就是存元素。即，把元素存储到栈的顶端位置，栈中已有元素依次向栈底方向移动一个位置。</li><li><strong>弹栈</strong>：就是取元素。即，把栈的顶端位置元素取出，栈中已有元素依次向栈顶方向移动一个位置。</li></ul><h4 id="队列-queue"><a href="#队列-queue" class="headerlink" title="队列 queue"></a>队列 queue</h4><p><strong>queue</strong>,简称队，它同堆栈一样，也是一种运算受限的线性表，其限制是仅允许在表的一端进行插入，而在表的另一端进行删除。</p><p>简单的说，采用该结构的集合，对元素的存取有如下的特点：</p><ul><li>先进先出（即，存进去的元素，要在后它前面的元素依次取出后，才能取出该元素）。例如，小火车过山洞，车头先进去，车尾后进去；车头先出来，车尾后出来。</li><li>队列的入口、出口各占一侧。例如，下图中的左侧为入口，右侧为出口。<br><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/20200403094208.png" alt=""></fancybox></li></ul><h4 id="数组-Array"><a href="#数组-Array" class="headerlink" title="数组 Array"></a>数组 Array</h4><p><strong>Array</strong>,是有序的元素序列，数组是在内存中开辟一段连续的空间，并在此空间存放元素。就像是一排出租屋，有100个房间，从001到100每个房间都有固定编号，通过编号就可以快速找到租房子的人。</p><p>简单的说,采用该结构的集合，对元素的存取有如下的特点：</p><ul><li><p>查找元素快：通过索引，可以快速访问指定位置的元素<br><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/%E6%95%B0%E7%BB%84%E6%9F%A5%E8%AF%A2%E5%BF%AB.png" alt=""></fancybox></p></li><li><p>增删元素慢（每一次增删都会创建一个新数组）</p><ul><li><strong>指定索引位置增加元素</strong>：需要创建一个新数组，将指定新元素存储在指定索引位置，再把原数组元素根据索引，复制到新数组对应索引的位置。如下图<img src="img/%E6%95%B0%E7%BB%84%E6%B7%BB%E5%8A%A0.png" alt=""><br><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/%E6%95%B0%E7%BB%84%E6%B7%BB%E5%8A%A0.png" alt=""></fancybox></li><li><strong>指定索引位置删除元素：</strong>需要创建一个新数组，把原数组元素根据索引，复制到新数组对应索引的位置，原数组中指定索引位置元素不复制到新数组中。如下图<img src="img/%E6%95%B0%E7%BB%84%E5%88%A0%E9%99%A4.png" alt=""><br><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/%E6%95%B0%E7%BB%84%E5%88%A0%E9%99%A4.png" alt=""><fancybox></li></ul></li></ul><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><p><strong>链表</strong>:<strong>linked list</strong>,由一系列结点node（链表中每一个元素称为结点）组成，结点可以在运行时i动态生成。每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域。我们常说的链表结构有单向链表与双向链表，那么这里给大家介绍的是<strong>单向链表</strong>。<br><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/20200403094325.png" alt=""></fancybox></p><p>简单的说，采用该结构的集合，对元素的存取有如下的特点：</p><ul><li><p>多个结点之间，通过地址进行连接。例如，多个人手拉手，每个人使用自己的右手拉住下个人的左手，依次类推，这样多个人就连在一起了。</p><p><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/20200403094647.png" alt=""></fancybox></p></li><li><p>查找元素慢：想查找某个元素，需要通过连接的节点，依次向后查找指定元素</p></li><li><p>增删元素快：</p><ul><li><p>增加元素：只需要修改连接下个元素的地址即可。</p><p><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/20200403094810.png" alt=""></fancybox></p></li><li><p>删除元素：只需要修改连接下个元素的地址即可。</p><p><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/20200403094840.png" alt=""></fancybox></p></li></ul></li></ul><h4 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h4><p><strong>二叉树</strong>：<strong>binary tree</strong> ,是每个结点不超过2的有序<strong>树（tree）</strong> 。</p><p>简单的理解，就是一种类似于我们生活中树的结构，只不过每个结点上都最多只能有两个子结点。</p><p>二叉树是每个节点最多有两个子树的树结构。顶上的叫根结点，两边被称作“左子树”和“右子树”。<br><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/20200403095130.png" alt=""></fancybox></p><p>我们要说的是二叉树的一种比较有意思的叫做<strong>红黑树</strong>，红黑树本身就是一颗二叉查找树，将节点插入后，该树仍然是一颗二叉查找树。也就意味着，树的键值仍然是有序的。</p><p>红黑树的约束:</p><ol><li>节点可以是红色的或者黑色的</li><li>根节点是黑色的</li><li>叶子节点(特指空节点)是黑色的</li><li>每个红色节点的子节点都是黑色的</li><li>任何一个节点到其每一个叶子节点的所有路径上黑色节点数相同</li></ol><p>红黑树的特点:</p><p>​    速度特别快,趋近平衡树,查找叶子元素最少和最多次数不多于二倍</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://www.jianshu.com/p/8e54797ec3e0" target="_blank" rel="noopener">Java具体实现数据结构代码</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html页面布局</title>
      <link href="/2020/04/01/html%E4%B8%8Ecss(%E2%85%A1)/"/>
      <url>/2020/04/01/html%E4%B8%8Ecss(%E2%85%A1)/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们做网页布局时，一般都是用div标签来做页面划分，这时就要考虑到块级元素，内联元素（span）。块级元素在浏览器显示时，通常会以新行来开始（和结束）<br><strong>本章内容：</strong></p><blockquote><p>1.div的margin和padding<br>2.float属性<br>3.默认自带margin或padding的标签<br>4.a标签的链接样式<br>5.table标签的补充<br>6.HTML文本格式化标签<br>7.transform旋转属性</p></blockquote><a id="more"></a><h3 id="1-div的margin和padding"><a href="#1-div的margin和padding" class="headerlink" title="1.div的margin和padding"></a>1.div的margin和padding</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>margin属性是对div兄弟节点使用的</strong>。若div中还有子div节点，使用margin属性后，两个都会同时变化，起不到调整div间距的作用。针对父子div节点，应该使用padding来调整父子div节点的间距（亲测会改变父div尺寸，不建议使用）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在页面重构中，利用margin进行定位非常常见，然而margin-top这个属性经常会给我们带来一定的困扰，有时候不起作用，还把父层“拉”了下来，如图所示<br><fancybox><img src="https://img-blog.csdn.net/20161014182112413" alt=""></fancybox></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>test2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.header</span> &#123; <span class="attribute">width</span>:<span class="number">300px</span>; <span class="attribute">height</span>:<span class="number">100px</span>; <span class="attribute">background</span>: green; &#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.outer</span> &#123; <span class="attribute">width</span>:<span class="number">300px</span>; <span class="attribute">height</span>:<span class="number">300px</span>; <span class="attribute">background</span>: yellow; &#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.inner</span> &#123; <span class="attribute">margin-top</span>:<span class="number">100px</span>;  <span class="attribute">width</span>:<span class="number">100px</span>; <span class="attribute">height</span>:<span class="number">100px</span>; <span class="attribute">background</span>: red;&#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>解决方案：</p><ol><li>都用float来定位（有条件要求，适用范围较广）</li><li>为父元素添加overflow不为visible 的属性 （适用范围极广，推荐使用）</li><li>为元素添加border（一般不用）</li><li>使用绝对定位（适用范围较窄）</li><li>父元素增加padding属性（<strong>亲测会改变父div尺寸，不建议使用</strong>）</li></ol><p>float解决方案：<strong>要浮动都要浮动；然后就都可以各自使用margin，padding属性；父节点相对于整个文档微调，子节点相对于父节点微调</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line">            width: 120px;</span><br><span class="line">            height: 120px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#48b685</span>;</span></span><br><span class="line">            float: left;</span><br><span class="line"><span class="css">            <span class="selector-tag">margin-top</span>: 10<span class="selector-tag">px</span>;  <span class="comment">/*父节点的外边距10px*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">margin-top</span>: 20<span class="selector-tag">px</span>; <span class="comment">/*子节点相对于父节点的外边距20px*/</span></span></span><br><span class="line">            width: 60px;</span><br><span class="line">            height: 60px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#00b0e8</span>;</span></span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/20200401092809.png" alt=""></fancybox></p><p>overflow解决方案:为父元素添加overflow不为visible 的属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line">            width: 120px;</span><br><span class="line">            height: 120px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#48b685</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;   <span class="comment">/*父元素添加overflow*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line">            margin-top: 20px;</span><br><span class="line">            width: 60px;</span><br><span class="line">            height: 60px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#00b0e8</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>小结：</p><ol><li>使用 margin:0 auto;的盒子，必须要有width，有明确的width；</li><li>只有标准流中的盒子，才能使用 margin:0 auto; 居中，即当一个盒子浮动了，绝对定位了，固定定位了，都不能使用 margin:0 auto;</li><li>margin:0 auto;是在居中盒子，不是居中文本，文本的居中，用 text-align:center;</li><li>margin的属性本质上描述的是兄弟标签之间的距离，最好不要用这个属性描述父子之间的距离，描述父子之间距离时要善于使用父亲的padding；</li><li>IE6兼容性问题解决方案：使浮动方向与margin方向相反；</li></ol><h3 id="2-float属性"><a href="#2-float属性" class="headerlink" title="2.float属性"></a>2.float属性</h3><p>关于浮动的使用一定要注意三个事情：<br>①. 要浮动，所有的兄弟都要浮动<br>两个盒子并排，则两个盒子必须都要设置浮动。不能老大浮动，老二不浮动；老二不浮动，老大也不浮动</p><p>②. 一定要把浮动的元素放在一个div中<br>你看，因为box1与box2要并排，所以它们必须要放到一个div中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"up"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"down"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>③. 父盒子要有足够的空间，否则会掉下来</p><h3 id="3-默认自带margin或padding的标签"><a href="#3-默认自带margin或padding的标签" class="headerlink" title="3.默认自带margin或padding的标签"></a>3.默认自带margin或padding的标签</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 内外边距通常让各个浏览器样式的表现位置不同（推荐这种写法） */</span></span><br><span class="line"><span class="selector-tag">body</span>,<span class="selector-tag">div</span>,<span class="selector-tag">dl</span>,<span class="selector-tag">dt</span>,<span class="selector-tag">dd</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">ol</span>,<span class="selector-tag">li</span>,<span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>,<span class="selector-tag">pre</span>,<span class="selector-tag">code</span>,<span class="selector-tag">form</span>,<span class="selector-tag">fieldset</span>,<span class="selector-tag">legend</span>,<span class="selector-tag">input</span>,<span class="selector-tag">textarea</span>,<span class="selector-tag">p</span>,<span class="selector-tag">blockquote</span>,<span class="selector-tag">th</span>,<span class="selector-tag">td</span>,<span class="selector-tag">hr</span>,<span class="selector-tag">button</span>,<span class="selector-tag">article</span>,<span class="selector-tag">aside</span>,<span class="selector-tag">details</span>,<span class="selector-tag">figcaption</span>,<span class="selector-tag">figure</span>,<span class="selector-tag">footer</span>,<span class="selector-tag">header</span>,<span class="selector-tag">hgroup</span>,<span class="selector-tag">menu</span>,<span class="selector-tag">nav</span>,<span class="selector-tag">section</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>css如果写作*{margin:0;padding:0}作用也是一样的，但是这种写法会使查询速度变慢，现在一般的大公司都使用第一种方法</p><h3 id="4-a标签的链接样式"><a href="#4-a标签的链接样式" class="headerlink" title="4.a标签的链接样式"></a>4.a标签的链接样式</h3><p>链接的样式，可以用任何CSS属性（如颜色，字体，背景等）。特别的链接，可以有不同的样式，这取决于他们是什么状态</p><ul><li>a:link - 正常，未访问过的链接</li><li>a:visited - 用户已访问过的链接</li><li>a:hover - 当用户鼠标放在链接上时</li><li>a:active - 链接被点击的那一刻</li></ul><p>拓：<strong>ul标签，ol标签去掉前面的编码：list-style-type: none;</strong></p><p>a标签的最重要功能是实现超链接和锚点。而且，大多数人认为a标签最重要的作用是实现超链接，今天我刚好碰到a标签的一种写法&lt;a href=”javascript:;”&gt;</a>，所以就来整理下a标签中href的几种用法:</p><ol><li><p>&lt;a href=”javascript:void(0);” οnclick=”js_method()”&gt;</p><p>这种方法是很多网站最常用的方法，也是最周全的方法，onclick方法负责执行js函数，而void是一个操作符，void(0)返回undefined，地址不发生跳转。而且这种方法不会像第一种方法一样直接将js方法暴露在浏览器的状态栏。</p></li><li><p>&lt;a href=”javascript:;” οnclick=”js_method()”&gt;</p><p>这种方法跟方法一类似，区别只是执行了一条空的js代码。</p></li><li><p>&lt;a href=”#” οnclick=”js_method()”&gt;</p><p>这种方法也是网上很常见的代码，#是标签内置的一个方法，代表top的作用。所以用这种方法点击后网页后返回到页面的最顶端。</p></li></ol><p>a标签的target属性：_black，_self，_top，_parent</p><h3 id="5-table标签补充"><a href="#5-table标签补充" class="headerlink" title="5.table标签补充"></a>5.table标签补充</h3><p><strong>HTML表格由table标签以及一个或多个tr、th或td标签组成</strong>：</p><p>table标签用来定义表格，整个表格包含在&lt;table&gt;和&lt;/table&gt;标签中；</p><p>tr标签用来定义表格中一个行，它是单元格的容器，每行可以包含有多个单元格，由&lt;tr&gt;和&lt;/tr&gt;标签表示；</p><p>td标签和th标签用来定义单元格，所有单元格都在tr标签内，每个单元格由一对&lt;td&gt;和&lt;/td&gt;标签或一对&lt;th&gt;和&lt;/th&gt;标签表示，具体的表格内容放置在这一对td标签或th标签之中，其中th标签中的内容默认以粗体、居中的方式显示，以为它代表表格标题。</p><ul><li>rowspan属性来实现单元格的跨行操作，所有的浏览器均可支持</li><li>colspan属性规定单元格可横跨的列数，所有的浏览器均可支持</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">"3"</span>&gt;</span>物资详情说明<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>数量(支)<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span>重量(吨)<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>实发数<span class="tag">&lt;/<span class="name">td</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>实收数<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>12<span class="tag">&lt;/<span class="name">td</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>10<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>100.00<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>经过渲染后的colspan，rowspan属性展示如下:</p><table border="1">  <tr>    <th colspan="3">物资详情说明</th>  </tr>  <tr>    <td colspan="2" align="center">数量(支)</td>    <td rowspan="2">重量(吨)</td>  </tr>  <tr>    <td>实发数</td>        <td>实收数</td>  </tr>  <tr>    <td>12</td>        <td>10</td>    <td>100.00</td>  </tr></table><h3 id="6-HTML文本格式化标签"><a href="#6-HTML文本格式化标签" class="headerlink" title="6.HTML文本格式化标签"></a>6.HTML文本格式化标签</h3><ul><li>&lt;b&gt;：加粗</li><li>&lt;br&gt;：换行</li><li>&lt;ins&gt;：插入字</li><li>&lt;i&gt;：斜体</li><li>&lt;del&gt;：删除字</li><li>&lt;em&gt;：着重字</li><li>&lt;small&gt;：小写字</li><li>&lt;code&gt;：计算机代码</li><li>&lt;kbd&gt;：键盘码</li><li>&lt;kbd&gt;：预格式文本，显示内容与预设的文本格式一致</li></ul><h3 id="7-transform旋转属性"><a href="#7-transform旋转属性" class="headerlink" title="7.transform旋转属性"></a>7.<a href="https://www.w3school.com.cn/cssref/pr_transform.asp" target="_blank" rel="noopener">transform旋转属性</a></h3><p>默认为顺时针旋转</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>:<span class="built_in">rotate</span>(90deg);</span><br><span class="line">    <span class="attribute">-ms-transform</span>:<span class="built_in">rotate</span>(90deg); <span class="comment">/* IE 9 */</span></span><br><span class="line">    <span class="attribute">-moz-transform</span>:<span class="built_in">rotate</span>(90deg); <span class="comment">/* Firefox */</span></span><br><span class="line">    <span class="attribute">-webkit-transform</span>:<span class="built_in">rotate</span>(90deg); <span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line">    <span class="attribute">-o-transform</span>:<span class="built_in">rotate</span>(90deg); <span class="comment">/* Opera */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><a href="https://blog.csdn.net/qq_40831381/article/details/90293574?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2&utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2" target="_blank" rel="noopener">HTML的表格table属性</a></li><li><a href="https://blog.csdn.net/u012724595/article/details/79401401" target="_blank" rel="noopener">HTML表格跨行、跨列操作(rowspan、colspan)</a></li><li><a href="https://blog.csdn.net/u014042372/article/details/86688515" target="_blank" rel="noopener">margin属性总结</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> margin </tag>
            
            <tag> float </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python全栈系列章节更新（十七）：验证码集</title>
      <link href="/2020/03/30/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89/"/>
      <url>/2020/03/30/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在浏览网站的时候，有些网站需要登录，并且登录流程中有验证码验证。在爬虫中带验证的登录通常可以分为4各步骤：<br><strong>本章内容：</strong></p><blockquote><p>1.获取登录页面：在登陆页面找到登录请求的url以及登录需要提交的参数</p></blockquote><blockquote><p>2.通过登录页找到验证码的url</p></blockquote><blockquote><p>3.处理验证码：包括下载验证码，识别验证码</p></blockquote><blockquote><p>4.发送登录请求：构造登录所需的所有参数进行登录请求</p></blockquote><a id="more"></a><h3 id="1-获取登录页面"><a href="#1-获取登录页面" class="headerlink" title="1.获取登录页面"></a>1.获取登录页面</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>以上的四个步骤需要在一个session（会话）中进行，否则服务器不能识别验证码</strong>。验证码处理的方法一般包括手动处理、图像识别工具处理、云打码等，这次是用到的云打码。就是调用云打码这个网站的一个API将验证码图片传过去，然后获取的返回结果是识别后的验证码字符串。刚好云打码的登录页面需要验证码验证，就拿它做个练习。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以在首页看到登录的框，然后输入用户名密码，输入错误的验证码点击登录，在下面的控制台找到登录的请求，可以从请求中占到url，OMG，这里登录请求居然是get发送，而且用户名和密码都没有加密处理，神奇。</p><p><fancybox><img src="https://upload-images.jianshu.io/upload_images/18734336-4ad8fc34cd8f9036.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/format/webp" alt=""></fancybox></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;到验证码的url:跟上面类似的操作，刷新一下验证码可以在下面找到对应的获取验证码的请求，插葱header中拿到对应的验证码图片的url</p><p><fancybox><img src="https://upload-images.jianshu.io/upload_images/18734336-f66d1bbec3536160.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/format/webp" alt=""></fancybox></p><h3 id="2-验证码处理"><a href="#2-验证码处理" class="headerlink" title="2.验证码处理"></a>2.验证码处理</h3><p>参考这篇文章：<a href="https://www.cnblogs.com/WiseAdministrator/articles/11302987.html" target="_blank" rel="noopener">介绍常见的验证码处理方式</a></p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://blog.csdn.net/meteor_93/article/details/103380179" target="_blank" rel="noopener">Session 和 Cookies</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Requests </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python全栈系列章节更新（十五）：爬虫加密分析</title>
      <link href="/2020/03/23/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89/"/>
      <url>/2020/03/23/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Python爬虫的用途十分广泛，“可见及可爬”，但是反扒措施也是千奇百怪，总结一下拿到一个url时，如何分析加密方式<br><strong>本章内容：</strong></p><blockquote><p>1.加密方式分析<br>2.请求参数传递<br>3.实例：充气WaWa什么感觉？</p></blockquote><a id="more"></a><h3 id="1-加密方式分析"><a href="#1-加密方式分析" class="headerlink" title="1.加密方式分析"></a>1.加密方式分析</h3><blockquote><ol><li>Chrome浏览器直接F12或右键选择审查，查看网页源代码</li></ol></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般而言，我们抓取到的都是 HTML 的网页源代码，这个是我们看得到的、常规的、直观的网页信息。（将要爬取的目标数据在网页源代码中搜索，若存在，则说明网页没有经过“加密”，是可以直接获取的）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是有些信息，并不是直接和 HTML 一起返回至网页的，会存在各种各样的 API 接口，这种接口返回的数据现在大多数是 JSON 的格式，也有一些会返回 XML 的数据格式，还会有一些个别的奇葩的接口直接返回程序猿自定义的字符串。这种 API 数据接口就需要具体问题具体分析了。</p><p>拓：<font color=#009ad6>Requests请求库请求后的返回的数据是原始的网页HTML文档，不是经过浏览器渲染后的代码</font></p><br><blockquote><ol start="2"><li>分析json数据接口</li></ol></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;经过第一步检查网页源代码后，发现不存在我们的目标数据，这时我们有可能猜测与html一起返回网页的，有各种各样的API接口。当我们<strong>下拉滚动时，会刷新数据；点击加载更多时，会刷新数据；点击翻页时，url地址栏没有变化…</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这时，我们就可以思考一下有没有数据是通过Ajax统一加载后再呈现出来的，这样在web开发上可以做到前后分离，降低服务器直接渲染页面的压力：切换到“Network”选项卡，重新刷新页面，就会出现很多的条目。其实Ajax有特殊的请求类型，叫做<strong>“XHR”</strong>，用鼠标点击xhr请求，可以查看请求的详细信息。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;点击Preview，即可看到请求的相应内容（若不是标准的json格式，需要我们处理成标准的json格式）</p><br><blockquote><ol start="3"><li>模拟登录后方可查看数据</li></ol></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;现在很多网站都无法直接查看网页内容，需要你登录之后才会显示具体的数据，所以这就要我们学会模拟登录（推荐使用requests库的session会话）</p><p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;按照常规步骤进行抓包：输入错误的账号密码，找到post/get请求地址—&gt;看请求表单数据是否加密—&gt;全局搜索加密关键字—&gt;找到与之相关联的js加密函数，扣出js代码</p><br><blockquote><ol start="4"><li>常用Chrome的全局搜索功能</li></ol></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在一些网站上，比如说虎牙不仅把json数据放置在&lt;script&gt;脚本里的g_page_config变量中，也同时在HTML页面中也渲染了数据。</p><p>全局搜索功能很重要，多常用。有可能在第一页的是找不到目标数字，需要在下一页才有可能出现（比如下图的斗鱼案例就是这样）</p><br><blockquote><ol start="5"><li>遇事不决，selenium来学</li></ol></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selenium你感觉看起来比较傻瓜式，但是往往效果好的出奇，不管你页面如何js加密，滑块的识别率如何多高。记住selenium是模仿人的操作轨迹的。</p><p>拓展：关于某宝登录的一些说明：某宝的js加密是十分复杂的，可能会包含加密密匙，通常自己构造请求参数是十分困难的。看过一个爬虫网课，老师的推荐是使用selenium，若想追求简单请手机扫码登录，这种方式往往也是最不容易被封的；若想追求难度，可以选择账号密码登录，推荐选择账号密码登录方法中的微博账号密码登录，使用某宝账号密码登录时98%的可能会被封掉。</p><h3 id="2-jsonpath的运用"><a href="#2-jsonpath的运用" class="headerlink" title="2.jsonpath的运用"></a>2.jsonpath的运用</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们举两个实例来说明分析思路，并讲解jsonpath在提取json数据的便利</p><p><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/20200323153504.png" alt=""></fancybox></p><p>这时某牙直播，右键查看网页源代码，搜索目标关键字，能够找到，我们再康康有没有说明便利的接口，直接使用，全局搜索，果然在某个url请求中有返回的目标json格式数据。</p><p><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/20200323153908.png" alt=""></fancybox><br>我们在康康某鱼的结构：右键查看网页源代码，搜索目标关键字，发现也存在script脚本中，再找找有没有什么json接口。</p><p><strong>在这里我们就遇到了这样的情况：在第一页的是找不到目标数字，需要在下一页才有可能出现</strong><br><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/20200323154638.png" alt=""></fancybox></p><p>通过url发现：json数据接口的网址为： <a href="https://www.douyu.com/gapi/rkc/directory/2_1/{index}" target="_blank" rel="noopener">https://www.douyu.com/gapi/rkc/directory/2_1/{index}</a> ，index表示页码 </p><p><strong>接下来我们就某🐟的案例来说明jsonpath的用法</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jsonpath,requests</span><br><span class="line"><span class="comment"># 创建一个实例对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DouYuSpider</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, url, headers)</span>:</span></span><br><span class="line">        self.url = url</span><br><span class="line">        self.headers = headers</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_html</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            html = requests.get(self.url, self.headers)</span><br><span class="line">            <span class="keyword">if</span> html.status_code == <span class="number">200</span>:</span><br><span class="line">                <span class="keyword">return</span> html.json()</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_data</span><span class="params">(self, html)</span>:</span></span><br><span class="line">        <span class="string">""""</span></span><br><span class="line"><span class="string">        jsonpath使用说明：jsonpath(标准json数据格式，提取规则)是另一种提取json数据的方法</span></span><br><span class="line"><span class="string">        "$..on":含义是从根节点出发，遍历全局，找到键名为“on”的所有数据，将所有的值存储到一个列表中</span></span><br><span class="line"><span class="string">        $表示当前页面,也可以理解为全局页面，根节点</span></span><br><span class="line"><span class="string">        ..:表示子孙节点</span></span><br><span class="line"><span class="string">        on：表示json的键名为“on”</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        names = jsonpath.jsonpath(html, <span class="string">"$..nn"</span>)</span><br><span class="line">        values = jsonpath.jsonpath(html, <span class="string">"$..ol"</span>)</span><br><span class="line">        <span class="comment"># 构建一个数组</span></span><br><span class="line">        items = []</span><br><span class="line">        <span class="keyword">for</span> name, value <span class="keyword">in</span> zip(names, values):</span><br><span class="line">            item = &#123;</span><br><span class="line">                <span class="string">"name"</span>: name,</span><br><span class="line">                <span class="string">"value"</span>: value</span><br><span class="line">            &#125;</span><br><span class="line">            items.append(item)</span><br><span class="line">        print(items)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">go</span><span class="params">(self)</span>:</span></span><br><span class="line">        html = self.get_html()</span><br><span class="line">        self.get_data(html)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    url = <span class="string">"https://www.douyu.com/gapi/rkc/directory/2_1/1"</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 "</span>+</span><br><span class="line">                    <span class="string">"(KHTML, like Gecko) Chrome/79.0.3945.88 Safari/537.36"</span></span><br><span class="line">    &#125;</span><br><span class="line">    douYuSpider = DouYuSpider(url, headers)</span><br><span class="line">    douYuSpider.go()</span><br></pre></td></tr></table></figure><p>jsonpath:<br>jsonpath使用说明：jsonpath(标准json数据格式，提取规则)是另一种提取json数据的方法</p><ul><li>&quot;$..on&quot;：含义是从根节点出发，遍历全局，找到键名为“on”的所有数据，将所有的值存储到一个列表中</li><li>$表示当前页面,也可以理解为全局页面，根节点</li><li>.. ：表示子孙节点</li><li>on ：表示json的键名为“on”</li></ul><h3 id="3-充气WaWa什么感觉？"><a href="#3-充气WaWa什么感觉？" class="headerlink" title="3.充气WaWa什么感觉？"></a>3.充气WaWa什么感觉？</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;基于很多人没有体验过充气wawa是什么感觉，但是又很好奇，所以希望通过爬虫+数据分析的方式直观而真实的告诉大家。</p><p>为了实现上面的需求以及功能，我们来讨论下具体的技术实现方案：</p><ul><li>分析某东评论数据请求的url（API）</li><li>使用requests库抓取某东的充气WaWa评论</li><li>使用词云做数据展示</li></ul><ol><li><strong>分析并获取评论接口的URL</strong></li></ol><p><em>第一步：打开某东的商品页，搜索你想研究的商品。<br>第二步：我们在页面中鼠标右键选择检查（或F12）调出浏览器的调试窗口。<br>第三步：调出浏览器后点击评论按钮使其加载数据，然后我们点击network查看数据。<br>第四步：查找加载评论数据的请求url，我们可以使用某条评论中的一段话，然后在调试窗口中搜索。</em></p><p>分析成果图：<br><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/20200323163048.png" alt=""></fancybox></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;经过上面4步分析，我们就拿到了京东评论数据的接口： <a href="https://sclub.jd.com/comment/productPageComments.action?callback=fetchJSON_comment98vv4654&amp;productId=1263013576&amp;score=0&amp;sortType=5&amp;page=0&amp;pageSize=10&amp;isShadowSku=0&amp;fold=1" target="_blank" rel="noopener">https://sclub.jd.com/comment/productPageComments.action?callback=fetchJSON_comment98vv4654&amp;productId=1263013576&amp;score=0&amp;sortType=5&amp;page=0&amp;pageSize=10&amp;isShadowSku=0&amp;fold=1</a></p><p>productPageComments：看这个名字就知道是产品页评论</p><ol start="2"><li><strong>爬取评论数据</strong></li></ol><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;拿到评论数据接口url之后，我们就可以开始写代码抓取数据了。一般我们会先尝试抓取一条数据，成功之后，我们再去分析如何实现大量抓取。</p><ol start="3"><li><strong>数据提取</strong></li></ol><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们对爬取的数据分析发现，此数据为jsonp跨域请求返回的json结果，所以我们只要把前面的fetchJSON_comment98vv4646(和最后的)去掉就拿到json数据了。</p><ol start="4"><li><strong>数据保存</strong></li></ol><p>数据提取后我们需要将他们保存起来，一般保存数据的格式主要有：文件、数据库、内存这三大类。今天我们就将数据保存为txt文件格式，因为操作文件相对简单同时也能满足我们的后续数据分析的需求。</p><ol start="5"><li><strong>批量爬取</strong></li></ol><p>再完成一页数据爬取、提取、保存之后，我们来研究一下如何批量抓取？</p><p>做过web的同学可能知道，有一项功能是我们必须要做的，那便是分页。何为分页？为何要做分页？</p><p>我们在浏览很多网页的时候常常看到“下一页”这样的字眼，其实这就是使用了分页技术，因为向用户展示数据时不可能把所有的数据一次性展示，所以采用分页技术，一页一页的展示出来。</p><p>让我们再回到最开始的加载评论数据的url：</p><p><a href="https://sclub.jd.com/comment/productPageComments.action?callback=fetchJSON_comment98vv4654&amp;productId=1263013576&amp;score=0&amp;sortType=5&amp;page=0&amp;pageSize=10&amp;isShadowSku=0&amp;fold=1" target="_blank" rel="noopener">https://sclub.jd.com/comment/productPageComments.action?callback=fetchJSON_comment98vv4654&amp;productId=1263013576&amp;score=0&amp;sortType=5&amp;page=0&amp;pageSize=10&amp;isShadowSku=0&amp;fold=1</a></p><p>我们可以看到链接里面有两个参数<code>page=0&amp;pageSize=10</code>，page表示当前的页数，pageSize表示每页多少条，那这两个数据直接去数据库limit数据。</p><ol start="6"><li><strong>数据清洗</strong></li></ol><p>数据成功保存之后我们需要对数据进行分词清洗，对于分词我们使用著名的分词库jieba。</p><ol start="7"><li><strong>生成词云</strong></li></ol><p>生成词云我们需要用到numpy、matplotlib、wordcloud、Pillow这几个库，大家先自行下载。matplotlib库用于图像处理，wordcloud库用于生成词云。</p><p>ps:font_path是选择字体的路径，如果不设置默认字体可能不支持中文，猪哥选择的是Mac系统自带的宋体字！</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://blog.csdn.net/meteor_93/article/details/103380179" target="_blank" rel="noopener">Session 和 Cookies</a></li><li><a href="https://mp.weixin.qq.com/s/Ij1ktC9yuDsL0Uqx4qLWDg" target="_blank" rel="noopener">充气wawa什么感觉？</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Requests </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python全栈系列章节更新（十五）：Requests库</title>
      <link href="/2020/03/21/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89/"/>
      <url>/2020/03/21/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Requests 库中有很多方法，但所有的方法在底层都是通过调用 request() 方法来实现的。因此，严格来说，Requests 库只有一个 request() 方法。但一般都不会直接使用这个方法。<br><strong>本章内容：</strong></p><blockquote><p>1.requests的请求方式<br>2.请求参数传递<br>3.响应response<br>4.Cookie和Session<br>5.Cookie基础详细</p></blockquote><a id="more"></a><h3 id="1-requests请求方式"><a href="#1-requests请求方式" class="headerlink" title="1.requests请求方式"></a>1.requests请求方式</h3><p>requests库下主要有两个请求方式：POST，GET请求</p><blockquote><p>GET请求</p></blockquote><p>举例说明：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line">print(type(response))  <span class="comment"># &lt;class ‘requests.models.Response’&gt;</span></span><br><span class="line">print(response.status_code)     <span class="comment"># 200</span></span><br></pre></td></tr></table></figure><p>将参数写成字典的形式，利用get()方法的参数进行请求，可以动态更改请求参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 普通请求</span></span><br><span class="line">r = requests.get(<span class="string">'https://anoyi.com/'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 带 Query 参数，等价于 https://anoyi.com/?key1=value1&amp;key2=value2</span></span><br><span class="line">payload = &#123;<span class="string">'key1'</span>: <span class="string">'value1'</span>, <span class="string">'key2'</span>: <span class="string">'value2'</span>&#125;</span><br><span class="line">r = requests.get(<span class="string">'https://anoyi.com/'</span>, params=payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 带 Headers</span></span><br><span class="line">headers = &#123;<span class="string">'user-agent'</span>: <span class="string">'anoyi-app/0.0.1'</span>&#125;</span><br><span class="line">r = requests.get(<span class="string">'https://anoyi.com/'</span>, headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 带 Basic Authentication</span></span><br><span class="line">r = requests.get(<span class="string">'https://anoyi.com/'</span>, auth=(<span class="string">'user'</span>, <span class="string">'pass'</span>))</span><br></pre></td></tr></table></figure><blockquote><p>POST请求</p></blockquote><p>POST请求可以携带多种形式的参数：</p><ul><li>form-data</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># 基本 post 请求</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'name'</span>:<span class="string">'M.Lu'</span>, </span><br><span class="line">    <span class="string">'age'</span>:<span class="string">'22'</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.post(<span class="string">"http://httpbin.org/post"</span>, data=data)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><ul><li>request payload</li></ul><p>先将request payload格式的数据写成标准的json数据格式，最后再转换成字符串(json.dumps将数据字符串化，json.loads是将字符串还原成原本的数据格式)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># request payload数据格式</span></span><br><span class="line">payloadData = &#123;</span><br><span class="line">    <span class="string">'afnPriceStr'</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="string">'currency'</span>:<span class="string">'USD'</span>,</span><br><span class="line">    <span class="string">'productInfoMapping'</span>: &#123;</span><br><span class="line">        <span class="string">'asin'</span>: <span class="string">'B072JW3Z6L'</span>,</span><br><span class="line">        <span class="string">'dimensionUnit'</span>: <span class="string">'inches'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">r = requests.post(url, data=json.dumps(payloadData))</span><br></pre></td></tr></table></figure><ul><li>x-www-form-urlencoded</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">'content-type'</span>: <span class="string">'application/x-www-form-urlencoded; charset=UTF-8'</span>&#125;</span><br><span class="line">r = requests.post(<span class="string">'https://anoyi.com/'</span>, headers=headers, data=<span class="string">'key=value'</span>)</span><br></pre></td></tr></table></figure><ul><li>application/json (与form-data同理)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">payload = &#123;<span class="string">'some'</span>: <span class="string">'data'</span>&#125;</span><br><span class="line">r = requests.post(<span class="string">'https://anoyi.com/'</span>, json=payload)</span><br></pre></td></tr></table></figure><blockquote><p>其它请求</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># PUT</span></span><br><span class="line">r = requests.put(<span class="string">'https://anoyi.com/'</span>, data=&#123;<span class="string">'key'</span>:<span class="string">'value'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># DELETE</span></span><br><span class="line">r = requests.delete(<span class="string">'https://anoyi.com/'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># HEAD</span></span><br><span class="line">r = requests.head(<span class="string">'https://anoyi.com/'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># OPTIONS</span></span><br><span class="line">r = requests.options(<span class="string">'https://anoyi.com/'</span>)</span><br></pre></td></tr></table></figure><h3 id="2-传递参数"><a href="#2-传递参数" class="headerlink" title="2.传递参数"></a>2.传递参数</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;无论是post还是get请求，对url进行请求时，都可以传递参数</p><ol><li>headers：反爬虫措施的基本操作，将爬虫伪装成正常的浏览器，躲过服务器的验证</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line">    &quot;User-Agent&quot;: &quot;&quot;,   浏览器对象</span><br><span class="line">    &quot;Cookie&quot;:&quot;&quot;,    cookie能够存储浏览器上次访问的信息</span><br><span class="line">    &quot;host&quot;:&quot;&quot;,      计算机ip</span><br><span class="line">    &quot;referer&quot;:&quot;&quot;    引用</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>timeout超时设置</li></ol><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;超时是请求能够容忍的最大时间，如果在这个时间内，还没有响应返回过来，那么这次请求就算失败了，不再继续等待请求的结果。浏览器发送请求后，服务器接受数据处理后，再返回目标数据，这过程中可能因为各种原因导致响应很慢，设置timeout，超时后停止访问<br>response = requests.post(“<a href="http://httpbin.org/post&quot;" target="_blank" rel="noopener">http://httpbin.org/post&quot;</a>, data=data，<strong>timeout = 10</strong>)</p><ol start="3"><li>证书验证<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;证书验证也是我们经常会遇到的问题，通常情况下，访问一些网站的时候，都会验证访问者的证书是否合法，如果不合法，就不允许访问。<font color=#65c294>大部分情况，我们之间设置证书验证为 False 即可</font><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 有验证</span><br><span class="line">response = requests.get(&quot;https://cms.hit.edu.cn/&quot;) # 程序会中断</span><br><span class="line">print(response.status_code)</span><br><span class="line"># 没有验证</span><br><span class="line">response = requests.get(&quot;https://cms.hit.edu.cn/&quot;, verify=False)</span><br><span class="line">print(response.status_code)</span><br><span class="line">去除 warning 方法</span><br><span class="line">from requests.packages import urllib3</span><br><span class="line">urllib3.disable_warnings()</span><br><span class="line">response = requests.get(&quot;https://cms.hit.edu.cn/&quot;, verify=False)</span><br><span class="line">print(response.status_code)</span><br><span class="line">cert 手动指定证书</span><br><span class="line">response = requests.get(&quot;https://cms.hit.edu.cn/&quot;,cert=&#123;&apos;path/server.crt&apos;, &apos;/path/key&apos;&#125;)</span><br><span class="line">print(response.status_code)</span><br></pre></td></tr></table></figure></li></ol><p>当我们设置SSL验证为False时，会弹出很多警告，这时我们就需要新增两行代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> urllib3.exceptions <span class="keyword">import</span> InsecureRequestWarning</span><br><span class="line"><span class="comment"># 禁用安全请求警告</span></span><br><span class="line">requests.packages.urllib3.disable_warnings(InsecureRequestWarning)</span><br></pre></td></tr></table></figure><ol start="4"><li>代理设置</li></ol><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;代理也是一个很常用的方法。通常，在我们需要多个主机进行访问或需要绕过防火墙时，可以利用代理进行访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 无密码</span><br><span class="line">proxies = &#123;</span><br><span class="line">    &quot;http&quot;:&quot;http://178.128.63.64:8388&quot;</span><br><span class="line">&#125;</span><br><span class="line"># 有密码</span><br><span class="line">proxies = &#123;</span><br><span class="line">    &quot;http&quot;:&quot;http://user:password@178.128.63.64:8388&quot;</span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(&quot;https://www.taobao.com&quot;, proxies=proxies)</span><br><span class="line">print(response.status_code)</span><br><span class="line"># 利用 socks 进行代理设置</span><br><span class="line">proxies = &#123;</span><br><span class="line">    &quot;http&quot;:&quot;socks5://178.128.63.64:8388&quot;,</span><br><span class="line">    &quot;https&quot;:&quot;socks5://178.128.63.64:8388&quot;</span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(&quot;https://www.taobao.com&quot;, proxies=proxies)</span><br><span class="line">print(response.status_code)</span><br></pre></td></tr></table></figure><p>补充：2020-4-13 代理池的设计</p><p>今天花了一段时间设计了一个代理池，参考我的GitHub<a href="https://github.com/FioraLove/Python/tree/master/Python%E4%BB%A3%E7%90%86%E6%B1%A0" target="_blank" rel="noopener">【python代理池设计】</a></p><ol start="5"><li>cookies<br>cookies除了放置在headers请求头里之外，也可以使用requests关键字里的cookies={…}</li></ol><p><strong>cookie放在请求头里发请求和使用requests关键字cookies={…}没有任何区别</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response = requests.post(url=url, headers=headers, data=data, cookies=cookies)</span><br></pre></td></tr></table></figure><ol start="6"><li>stream=True下载流式文件</li></ol><p>Bit、 Byte、KB、MB、GB之间的换算:</p><p>1 Byte = 8 Bits（即 1B=8b，字节是内存的基本单位）<br>1 KB = 1024 Bytes<br>1 MB = 1024 KB<br>1 GB = 1024 MB</p><p>Bit意为“位”或“比特”，是计算机运算的基础，属于二进制的范畴；<br>Byte意为“字节”，是计算机文件大小的基本计算单位；</p><p>这两者应用的场合不同。通常用bit来作数据传输的单位，因为物理层，数据链路层的传输对于用户是透明的，而这种通信传输是基于二进制的传输。在应用层通常是用byte来作单位，表示文件的大小，在用户看来就是可见的数据大小。比如一个字符就是1byte,如果是汉字，则是2byte</p><p>比如常见的音视频，放置某些文件过大，内存溢出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">response = requests.post(url=url, </span><br><span class="line">                        headers=headers, </span><br><span class="line">                        data=data, </span><br><span class="line">                        cookies=cookies,</span><br><span class="line">                        stream=True)</span><br></pre></td></tr></table></figure><ol start="7"><li>allow_redirects重定向操作</li></ol><ul><li>Redirect重定向就是通过各种方法将各种网络请求重新定个方向转到其它位置,从地址A跳转到地址 B 了：</li><li>重定向状态码:<ul><li>301 redirect: 301 代表永久性转移(Permanently Moved)</li><li>302 redirect: 302 代表暂时性转移(Temporarily Moved )</li></ul></li><li>实际场景：<br> 举个简单的场景案例，先登录博客园打开我的博客首页，进我的随笔编辑界面，记住这地址：<a href="https://i.cnblogs.com/EditPosts.aspx?opt=1" target="_blank" rel="noopener">https://i.cnblogs.com/EditPosts.aspx?opt=1</a> ，退出博客园登录，把刚才我的随笔这个地址输入浏览器回车，抓包会看到这个请求状态码是 302，浏览器地址栏瞬间刷新跳到登录首页去了</li></ul><p>自动处理重定向地址后，我们就获取不到重定向后的 url 了，就无法走下一步，这里我们可以设置一个参数禁止重定向：allow_redirects=False（allow_redirects=True 是启动重定向），然后就可以看到 status_code 是 302 了,<strong>重定向的跳转地址是在返回的请求头中</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#禁用安全请求警告</span></span><br><span class="line"><span class="keyword">from</span> requests.packages.urllib3.exceptions <span class="keyword">import</span> InsecureRequestWarning</span><br><span class="line">requests.packages.urllib3.disable_warnings(InsecureRequestWarning)</span><br><span class="line"></span><br><span class="line">url = <span class="string">"https://i.cnblogs.com/EditPosts.aspx?opt=1"</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36"</span></span><br><span class="line">&#125;</span><br><span class="line">s = requests.Session()</span><br><span class="line"><span class="comment">#打开我的随笔</span></span><br><span class="line">r = s.get(url,headers=headers,verify=<span class="literal">False</span>,allow_redirects=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># print(r.content.decode("utf-8"))</span></span><br><span class="line"><span class="comment">#打印状态码，自动处理重定向请求</span></span><br><span class="line">print(r.status_code)</span><br><span class="line"><span class="comment">#获取重定向后的地址</span></span><br><span class="line">print(r.headers[<span class="string">"Location"</span>])</span><br></pre></td></tr></table></figure><h3 id="3-响应response"><a href="#3-响应response" class="headerlink" title="3.响应response"></a>3.响应response</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;响应是浏览器返回过来的信息，它有不同的属性</p><ul><li>response.status_code: 状态码，不同的状态码代表了不同的请求状态</li><li>response.headers: 获取请求头</li><li>response.cookies: 获取cookies</li><li>response.url: 获取统一资源定位符url</li><li><font color=#65c294>response.text: 获取请求成功后的响应内容，数据类型为字符串型</font></li><li><font color=#65c294>response.content: 获取请求成功后的响应内容，数据类型为byte型。如果想取图片，文件，则可以通过response.content.</font></li><li><font color=#65c294>response.json(): 返回的是json格式的数据，也就是字典。现在的前后端的数据交互绝大部分都是通过json交互了</font></li></ul><h3 id="4-Cookie和Session"><a href="#4-Cookie和Session" class="headerlink" title="4.Cookie和Session"></a>4.Cookie和Session</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># 两次 get 请求， 没有任何关联，不可以</span></span><br><span class="line">requests.get(<span class="string">"http://httpbin.org/cookies/set/number/123456789"</span>) <span class="comment"># 第一次请求</span></span><br><span class="line">response = requests.get(<span class="string">"http://httpbin.org/cookies"</span>)   <span class="comment"># 第二次请求</span></span><br><span class="line">print(response.text)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">“cookies”: &#123;&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>我们可以看到利用cookie模拟登陆时，两次访问，没有存储登录的状态。但我们利用 Session 对象，可以模拟登录：<br>第一利用session登录，存储浏览器信息，再发送请求，访问目标网站</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># Session 对象， 相当于在一个浏览器中先后访问（例如：登录验证）</span></span><br><span class="line">session = requests.Session()</span><br><span class="line">result = session.get(<span class="string">"http://httpbin.org/cookies/set/number/123456789"</span>)</span><br><span class="line">response = session.get(<span class="string">"http://httpbin.org/cookies"</span>)</span><br><span class="line">print(response.text)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    “cookies”: &#123;“number”: “123456789”&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h3 id="5-Cookie基础详细"><a href="#5-Cookie基础详细" class="headerlink" title="5.Cookie基础详细"></a>5.Cookie基础详细</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由前面我们已经知道了使用requests库的响应中可以获取cookie值，但却存在多种cookie写法</p><ol><li>response.cookie获取的是如下这种形式的cookieJar（<strong>此种形式的cookie必须放置在response = requests.post(url=url, headers=headers, data=data, cookies=cookies)里面，而不是像以前一样放置在headers里面</strong>）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;RequestsCookieJar[</span><br><span class="line">    &lt;Cookie X_HTTP_TOKEN=42daf4b72327b2813774136851bf5e71415983ed09 for .lagou.com/&gt;, </span><br><span class="line">    &lt;Cookie user_trace_token=20200408105933-6470e1a5-1be3-4b1a-85c4-2cf2ced07646 for .lagou.com/&gt;, </span><br><span class="line">    &lt;Cookie JSESSIONID=ABAAAECABBJAAGIEB8B11EEB347561D234F0B9E026FE063 for www.lagou.com/&gt;, </span><br><span class="line">    &lt;Cookie SEARCH_ID=aff2447a4a0543a8bed59c906e97ba8a for www.lagou.com/&gt;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure><br><ol start="2"><li>response.cookie.get_dict():就是将cookieJar形式的cookie变为字典格式(字典格式，读取保存为json文件，以此来读写json，然后放置到headers请求头里)</li></ol><pre>{    'X_HTTP_TOKEN': '42daf4b72327b2813774136851bf5e71415983ed09',     'user_trace_token': '20200408105933-6470e1a5-1be3-4b1a2ced07646',     'JSESSIONID': 'ABAAAECABBJAAGIEB8B11EEB347561D234F0B9E026FE063',     'SEARCH_ID': 'aff2447a4a0543a8bed59c906e97ba8a'}</pre><br><ol start="3"><li>requests.utils.dict_from_cookiejar(response.cookies)：同理也是将cookieJar形式的cookie变为字典格式(字典格式，读取保存为json文件，以此来读写json，然后放置到headers请求头里)</li></ol><p>案例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">三种Cookie请求方式:</span></span><br><span class="line"><span class="string">第一种：cookie放在headers中</span></span><br><span class="line"><span class="string">第二种：cookie字典传给cookies参数</span></span><br><span class="line"><span class="string">第三种：先发送post请求，获取cookie，带上cookie请求登陆之后的页面</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cookie的读取(先判断cookie文件是否存在，若存在直接读取填入headers中，若不存在，则需要模拟登录后保存cookie)</span></span><br><span class="line">COOKIE_PATH = <span class="string">'xxx.json'</span></span><br><span class="line"><span class="comment"># to check whether it exist</span></span><br><span class="line"><span class="keyword">if</span> os.path.exists(COOKIE_PATH):</span><br><span class="line">    <span class="comment"># to load the file of cookie</span></span><br><span class="line">    <span class="keyword">with</span> open(COOKIE_PATH, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        cookie_ct = json.loads(f.read())</span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'xxxxxx'</span>,</span><br><span class="line">        <span class="string">'Host'</span>: <span class="string">'www.baidu.com'</span>,</span><br><span class="line">        <span class="string">'Cookie'</span>: cookie_ct,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># try to load some website</span></span><br><span class="line">        session = requests.session()</span><br><span class="line">        response = session.get(url=<span class="string">'www.baidu.com'</span>, headers=headers, timeout=<span class="number">0.1</span>)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            print(response.content)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">assume the cookie is not existing:</span></span><br><span class="line"><span class="string">so,we need to send request_POST ,and get the cookies,</span></span><br><span class="line"><span class="string">finally,we should load the website with the cookies </span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">'dddddddd'</span>,</span><br><span class="line">&#125;</span><br><span class="line">session = requests.session()</span><br><span class="line"><span class="comment"># the post_url can be found in the form or capture the url</span></span><br><span class="line">post_url = <span class="string">'http://www.renren.com/PLogin.do'</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'chd'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="string">'password'</span>: <span class="string">'chen111'</span>,</span><br><span class="line">&#125;</span><br><span class="line">res = session.post(url=post_url, headers=headers, data=data, timeout=<span class="number">0.1</span>)</span><br><span class="line"><span class="comment"># 请求失败抛出</span></span><br><span class="line"><span class="keyword">if</span> (res.status_code != <span class="number">200</span>):</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">"登录失败！"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取cookie</span></span><br><span class="line">cookies_ct = requests.utils.dict_from_cookiejar(session.cookies)</span><br><span class="line"><span class="comment"># 将cookie保存至本地文件</span></span><br><span class="line"><span class="keyword">with</span> open(COOKIE_PATH, <span class="string">"w"</span>,encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(json.dumps(cookies_ct))</span><br></pre></td></tr></table></figure><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://blog.csdn.net/meteor_93/article/details/103380179" target="_blank" rel="noopener">Session 和 Cookies</a></li><li><a href="https://blog.csdn.net/williamgavin/article/details/81390014?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3&utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3" target="_blank" rel="noopener">小白学爬虫（三）– requests库之Cookie</a></li><li><a href="https://blog.csdn.net/supercooly/article/details/51046561" target="_blank" rel="noopener">Python3使用requests模块显示二进制文件下载进度</a></li><li><a href="https://www.cnblogs.com/Teachertao/p/11146631.html" target="_blank" rel="noopener">Requests方法 – 重定向操作</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Requests </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java（八）：Java异常处理机制的补充</title>
      <link href="/2020/03/17/Java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6%E8%A1%A5%E5%85%85%EF%BC%88%E5%85%AB%EF%BC%89/"/>
      <url>/2020/03/17/Java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6%E8%A1%A5%E5%85%85%EF%BC%88%E5%85%AB%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><strong>本章内容：</strong></p><blockquote><p>1.异常的产生过程解析<br>2.异常的处理<br>3.异常的注意事项<br>4.自定义异常</p></blockquote><a id="more"></a><h3 id="1-异常的产生过程解析"><a href="#1-异常的产生过程解析" class="headerlink" title="1.异常的产生过程解析"></a>1.异常的产生过程解析</h3><p>异常产生的原理（示意图）：<br>Ⅰ. jvm的getElement方法把异常对象抛给main方法<br>Ⅱ. main方法没有异常的处理逻辑会继续把对象抛给JVM<br><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/%E5%BC%82%E5%B8%B8.JPG" alt=""></fancybox></p><h3 id="2-异常的处理"><a href="#2-异常的处理" class="headerlink" title="2.异常的处理"></a>2.异常的处理</h3><p>异常的处理常涉及到五个关键字：</p><h4 id="throw关键字"><a href="#throw关键字" class="headerlink" title="throw关键字"></a>throw关键字</h4><p>作用：可以使用throw关键字在指定方法中抛出指定的异常<br>使用格式：throw new xxxException(“异常的产生原因”)<br>注意：</p><ul><li>throw关键字必须写在方法的内部</li><li>throw关键字后边new的对象必须是Exception或者其子类对象（参考<a href="https://ahrilove.top/2020/02/14/Java%E6%A0%B8%E5%BF%83%E7%B1%BB(%E5%9B%9B)/#5-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6">Exception类的常见情况</a>）</li><li><strong>throw关键字后边创建的是RuntimeException或者其子类对象时，我们可以交给jvm处理（jvm会中断程序）。throw关键字后边若是编译异常，要么throws，要么try catch。</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Alibaba;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getElement</span><span class="params">(<span class="keyword">int</span>[] array,<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index&lt;<span class="number">0</span> || index&gt;array.length-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">"索引值超过数组范围"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (array == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"数组不能为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array[index];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] aa = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span>[] cc = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="comment">//        int bb = getElement(aa,1);</span></span><br><span class="line"><span class="comment">//        System.out.println(bb);</span></span><br><span class="line">        System.out.println(getElement(cc,<span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="throws关键字"><a href="#throws关键字" class="headerlink" title="throws关键字"></a>throws关键字</h4><p>throws关键字:异常处理的第一种方式,交给别人处理</p><p>作用:<br>    当方法内部抛出异常对象的时候,那么我们就必须处理这个异常对象<br>    可以使用throws关键字处理异常对象,会把异常对象声明抛出给方法的调用者处理(自己不处理,给别人处理),最终交给JVM处理–&gt;中断处理</p><p>使用格式:<strong>在方法声明时使用</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数列表) throws AAAExcepiton,BBBExcepiton...&#123; // 有几个异常就写几个</span><br><span class="line">    throw new AAAExcepiton(&quot;产生原因&quot;);</span><br><span class="line">    throw new BBBExcepiton(&quot;产生原因&quot;);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意:<br>1.throws关键字必须写在方法声明处<br>2.throws关键字后边声明的异常必须是Exception或者是Exception的子类<br>3.方法内部如果抛出了多个异常对象,那么throws后边必须也声明多个异常：如果抛出的多个异常对象有子父类关系,那么直接声明父类异常即可<br>4.<strong>调用了一个声明抛出异常的方法,我们就必须的处理声明的异常：要么继续使用throws声明抛出,交给方法的调用者处理,最终交给JVM;要么try…catch自己处理异常</strong>，（参考下列实例代码11-13行）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bytedance.demo01.Exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05Throws</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        FileNotFoundException extends IOException extends Excepiton</span></span><br><span class="line"><span class="comment">        如果抛出的多个异常对象有子父类关系,那么直接声明父类异常即可</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//public static void main(String[] args) throws FileNotFoundException,IOException &#123;</span></span><br><span class="line">    <span class="comment">//public static void main(String[] args) throws IOException &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        readFile(<span class="string">"c:\\a.tx"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"后续代码"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        定义一个方法,对传递的文件路径进行合法性判断</span></span><br><span class="line"><span class="comment">        如果路径不是"c:\\a.txt",那么我们就抛出文件找不到异常对象,告知方法的调用者</span></span><br><span class="line"><span class="comment">        注意:</span></span><br><span class="line"><span class="comment">            FileNotFoundException是编译异常,抛出了编译异常,就必须处理这个异常</span></span><br><span class="line"><span class="comment">            可以使用throws继续声明抛出FileNotFoundException这个异常对象,让方法的调用者处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readFile</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> FileNotFoundException,IOException</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!fileName.equals(<span class="string">"c:\\a.txt"</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(<span class="string">"传递的文件路径不是c:\\a.txt"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            如果传递的路径,不是.txt结尾</span></span><br><span class="line"><span class="comment">            那么我们就抛出IO异常对象,告知方法的调用者,文件的后缀名不对</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span>(!fileName.endsWith(<span class="string">".txt"</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"文件的后缀名不对"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"路径没有问题,读取文件"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="try…catch-关键字"><a href="#try…catch-关键字" class="headerlink" title="try…catch 关键字"></a>try…catch 关键字</h4><p>try…catch:异常处理的第二种方式,自己处理异常<br>格式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">try&#123;</span><br><span class="line">    可能产生异常的代码</span><br><span class="line">&#125;catch(定义一个异常的变量,用来接收try中抛出的异常对象)&#123;</span><br><span class="line">    异常的处理逻辑,异常异常对象之后,怎么处理异常对象</span><br><span class="line">    一般在工作中,会把异常的信息记录到一个日志中</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">catch(异常类名 变量名)&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意:<br>1.try中可能会抛出多个异常对象,那么就可以使用多个catch来处理这些异常对象<br>2.如果try中产生了异常,那么就会执行catch中的异常处理逻辑,执行完毕catch中的处理逻辑,继续执行try…catch之后的代码。如果try中没有产生异常,那么就不会执行catch中异常的处理逻辑,执行完try中的代码,继续执行try…catch之后的代码</p><p>举例说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01TryCatch</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//可能产生异常的代码</span></span><br><span class="line">            readFile(<span class="string">"d:\\a.tx"</span>);</span><br><span class="line">            System.out.println(<span class="string">"资源释放"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;<span class="comment">//try中抛出什么异常对象,catch就定义什么异常变量,用来接收这个异常对象</span></span><br><span class="line">            <span class="comment">//异常的处理逻辑,异常异常对象之后,怎么处理异常对象</span></span><br><span class="line">            System.out.println(<span class="string">"catch - 传递的文件后缀不是.txt"</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// throwable类出来try catch中的异常</span></span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">            System.out.println(e.toString());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"程序后续代码"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       如果传递的路径,不是.txt结尾</span></span><br><span class="line"><span class="comment">       那么我们就抛出IO异常对象,告知方法的调用者,文件的后缀名不对</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readFile</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!fileName.endsWith(<span class="string">".txt"</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"文件的后缀名不对"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"路径没有问题,读取文件"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Throwable类"><a href="#Throwable类" class="headerlink" title="Throwable类"></a>Throwable类</h4><p>Throwable 类是 Java 语言中所有错误或异常的超类（终极父类）。</p><p>try…catch代码块处理异常时可以使用的Throwable类中定义了3个异常处理的方法：</p><ul><li>String getMessage() 返回此 throwable 的简短描述。</li><li>String toString() 返回此 throwable 的详细消息字符串。</li><li>void printStackTrace()  JVM打印异常对象,默认此方法,打印的异常信息是最全面的</li></ul><h4 id="finally关键字"><a href="#finally关键字" class="headerlink" title="finally关键字"></a>finally关键字</h4><p>finally代码块<br>格式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">try&#123;</span><br><span class="line">    可能产生异常的代码</span><br><span class="line">&#125;catch(定义一个异常的变量,用来接收try中抛出的异常对象)&#123;</span><br><span class="line">    异常的处理逻辑,异常异常对象之后,怎么处理异常对象</span><br><span class="line">    一般在工作中,会把异常的信息记录到一个日志中</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">catch(异常类名 变量名)&#123;</span><br><span class="line"></span><br><span class="line">&#125;finally&#123;</span><br><span class="line">    无论是否出现异常都会执行</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意:<br>1.finally不能单独使用,必须和try一起使用<br>2.finally一般用于资源释放(资源回收),无论程序是否出现异常,最后都要资源释放(IO)</p><p>举例说明：        </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02TryCatchFinally</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//可能会产生异常的代码</span></span><br><span class="line">            readFile(<span class="string">"c:\\a.tx"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">//异常的处理逻辑</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//无论是否出现异常,都会执行</span></span><br><span class="line">            System.out.println(<span class="string">"资源释放"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       如果传递的路径,不是.txt结尾</span></span><br><span class="line"><span class="comment">       那么我们就抛出IO异常对象,告知方法的调用者,文件的后缀名不对</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readFile</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!fileName.endsWith(<span class="string">".txt"</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"文件的后缀名不对"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"路径没有问题,读取文件"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-异常的注意事项"><a href="#3-异常的注意事项" class="headerlink" title="3.异常的注意事项"></a>3.异常的注意事项</h3><ul><li>多个异常使用捕获又该如何处理呢？</li></ul><ol><li>多个异常分别处理。</li><li>多个异常一次捕获，多次处理。</li><li>多个异常一次捕获一次处理。</li></ol><p>一般我们是使用一次捕获多次处理方式，格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">   编写可能会出现异常的代码</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型A  e)&#123;  当<span class="keyword">try</span>中出现A类型异常,就用该<span class="keyword">catch</span>来捕获.</span><br><span class="line">   处理异常的代码</span><br><span class="line">   <span class="comment">//记录日志/打印异常信息/继续抛出异常</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型B  e)&#123;  当<span class="keyword">try</span>中出现B类型异常,就用该<span class="keyword">catch</span>来捕获.</span><br><span class="line">   处理异常的代码</span><br><span class="line">   <span class="comment">//记录日志/打印异常信息/继续抛出异常</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>注意:这种异常处理方式，要求多个catch中的异常不能相同，并且若catch中的多个异常之间有子父类异常的关系，那么子类异常要求在上面的catch处理，父类异常在下面的catch处理。(Exception类是IO异常，Runtime异常，error错误的父类)</p></blockquote></blockquote><ul><li><p>运行时异常被抛出可以不处理。即不捕获也不声明抛出。</p></li><li><p>如果finally有return语句,永远返回finally中的结果,避免该情况. </p></li><li><p>如果父类抛出了多个异常,子类重写父类方法时,抛出和父类相同的异常或者是父类异常的子类或者不抛出异常。</p></li><li><p>父类方法没有抛出异常，子类重写父类该方法时也不可抛出异常。此时子类产生该异常，只能捕获处理，不能声明抛出</p></li></ul><h3 id="4-自定义异常"><a href="#4-自定义异常" class="headerlink" title="4.自定义异常"></a>4.自定义异常</h3><ol><li>为什么需要自定义异常类:</li></ol><p>我们说了Java中不同的异常类,分别表示着某一种具体的异常情况,那么在开发中总是有些异常情况是SUN没有定义好的,此时我们根据自己业务的异常情况来定义异常类。例如年龄负数问题,考试成绩负数问题等等。</p><p>在上述代码中，发现这些异常都是JDK内部定义好的，但是实际开发中也会出现很多异常,这些异常很可能在JDK中没有定义过,例如年龄负数问题,考试成绩负数问题.那么能不能自己定义异常呢？</p><ol start="2"><li>什么是自定义异常类:</li></ol><p>在开发中根据自己业务的异常情况来定义异常类。比如自定义一个业务逻辑异常: <em>RegisterException</em>：一个注册异常类。</p><ol start="3"><li>异常类如何定义:</li></ol><ul><li>自定义一个编译期异常: 自定义类 并继承于<code>java.lang.Exception</code>。（<strong>编译异常一定要throws或者try catch处理</strong>）</li><li>自定义一个运行时期的异常类:自定义类 并继承于<code>java.lang.RuntimeException</code>。（运行期的异常RuntimeException可以不用处理，直接交给JVM处理-中断程序）<br>格式：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public class XXXExcepiton extends Exception（编译异常） | RuntimeException&#123;</span><br><span class="line">    添加一个空参数的构造方法</span><br><span class="line">    添加一个带异常信息的构造方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>举例说明：定义一个登陆异常类RegisterException：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterException</span> <span class="keyword">extends</span> /*<span class="title">Exception</span>*/ <span class="title">RuntimeException</span></span>&#123;</span><br><span class="line">    <span class="comment">//添加一个空参数的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RegisterException</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        添加一个带异常信息的构造方法</span></span><br><span class="line"><span class="comment">        查看源码发现,所有的异常类都会有一个带异常信息的构造方法,方法内部会调用父类带异常信息的构造方法,让父类来处理这个异常信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RegisterException</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>注意事项:</p></li><li><p>自定义异常类一般都是以Exception结尾,说明该类是一个异常类</p></li><li><p>自定义异常类,必须的继承Exception或者RuntimeException<br>  继承Exception:那么自定义的异常类就是一个编译期异常,如果方法内部抛出了编译期异常,就必须处理这个异常,要么throws,要么try…catch<br>  继承RuntimeException:那么自定义的异常类就是一个运行期异常,无需处理,交给虚拟机处理(中断处理)</p></li><li><p>自定义异常的练习</p></li></ol><p>需求：我们模拟注册操作，如果用户名已存在，则抛出异常并提示：亲，该用户名已经被注册。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    分析:</span></span><br><span class="line"><span class="comment">        1.使用数组保存已经注册过的用户名(数据库)</span></span><br><span class="line"><span class="comment">        2.使用Scanner获取用户输入的注册的用户名(前端,页面)</span></span><br><span class="line"><span class="comment">        3.定义一个方法,对用户输入的中注册的用户名进行判断</span></span><br><span class="line"><span class="comment">            遍历存储已经注册过用户名的数组,获取每一个用户名</span></span><br><span class="line"><span class="comment">            使用获取到的用户名和用户输入的用户名比较</span></span><br><span class="line"><span class="comment">                true:</span></span><br><span class="line"><span class="comment">                    用户名已经存在,抛出RegisterException异常,告知用户"亲，该用户名已经被注册";</span></span><br><span class="line"><span class="comment">                false:</span></span><br><span class="line"><span class="comment">                    继续遍历比较</span></span><br><span class="line"><span class="comment">            如果循环结束了,还没有找到重复的用户名,提示用户"恭喜您,注册成功!";</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02RegisterException</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.使用数组保存已经注册过的用户名(数据库)</span></span><br><span class="line">    <span class="keyword">static</span> String[] usernames = &#123;<span class="string">"张三"</span>,<span class="string">"李四"</span>,<span class="string">"王五"</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//2.使用Scanner获取用户输入的注册的用户名(前端,页面)</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入您要注册的用户名:"</span>);</span><br><span class="line">        String username = sc.next();</span><br><span class="line">        checkUsername(username);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.定义一个方法,对用户输入的中注册的用户名进行判断</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkUsername</span><span class="params">(String username)</span>  </span>&#123;</span><br><span class="line">        <span class="comment">//遍历存储已经注册过用户名的数组,获取每一个用户名</span></span><br><span class="line">        <span class="keyword">for</span> (String name : usernames) &#123;</span><br><span class="line">            <span class="comment">//使用获取到的用户名和用户输入的用户名比较</span></span><br><span class="line">            <span class="keyword">if</span>(name.equals(username))&#123;</span><br><span class="line">                <span class="comment">//true:用户名已经存在,抛出RegisterException异常,告知用户"亲，该用户名已经被注册";</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RegisterException(<span class="string">"亲，该用户名已经被注册"</span>);<span class="comment">//抛出运行期异常,无需处理,交给JVM处理,中断处理</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果循环结束了,还没有找到重复的用户名,提示用户"恭喜您,注册成功!";</span></span><br><span class="line">        System.out.println(<span class="string">"恭喜您,注册成功!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://www.cnblogs.com/xiohao/p/3547443.html" target="_blank" rel="noopener">Java的throw与throws关键字区别</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript篇章八：js的事件响应机制</title>
      <link href="/2020/03/11/Javascript%E7%AF%87%E7%AB%A0%E5%85%AB/"/>
      <url>/2020/03/11/Javascript%E7%AF%87%E7%AB%A0%E5%85%AB/</url>
      
        <content type="html"><![CDATA[<p>HTML 事件是发生在 HTML 元素上的事情。当在 HTML 页面中使用 JavaScript 时， JavaScript 可以触发这些事件。<br><strong>本章内容：</strong></p><blockquote><p>1.HTML事件响应机制<br>2.js获取表单元素和标签节点内容<br>3.获取 HTML 的DOM元素节点<br>4.改变HTML元素的内容(innerHTML)<br>5.html DOM-改变CSS<br>6.一些特殊的js代码</p></blockquote><a id="more"></a><h3 id="1-常见的HTML事件"><a href="#1-常见的HTML事件" class="headerlink" title="1.常见的HTML事件"></a>1.常见的HTML事件</h3><table><thead><tr><th>事件</th><th align="center">描述</th></tr></thead><tbody><tr><td>onchange</td><td align="center">HTML 元素改变</td></tr><tr><td>onclick</td><td align="center">用户点击 HTML 元素</td></tr><tr><td>onmouseover</td><td align="center">用户在一个HTML元素上移动鼠标</td></tr><tr><td>onmouseout</td><td align="center">用户从一个HTML元素上移开鼠标</td></tr><tr><td>onkeydown</td><td align="center">用户按下键盘按键</td></tr><tr><td>onload</td><td align="center">浏览器已完成页面的加载</td></tr><tr><td>onblur</td><td align="center"><strong>onblur事件会在对象失去焦点时发生</strong>，一般用于表单输入框</td></tr><tr><td>onfocus</td><td align="center">onfocus事件会在对象获得焦点时发生，一般用于表单输入框</td></tr><tr><td>oncontextmenu</td><td align="center">oncontextmenu事件鼠标右击时触发，弹出右键菜单</td></tr><tr><td>…</td><td align="center">…</td></tr></tbody></table><p>拓展说明：</p><ol><li>对onkeydown键盘按键事件的说明</li></ol><p><strong>键盘常用的键码属性为keyCode或者which（which适用于低版本IE），且均不区分键码大小写</strong>，所以对以前的键码进行改动</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局监听键盘按下的键码</span></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> e = el || <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="keyword">let</span> code = e.keyCode || e.which;</span><br><span class="line">    <span class="built_in">console</span>.log(code);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>oncontextmenu返回值设置为false，即无法右击弹出菜单<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.oncontextmenu = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/></li></ol><p><strong>事件绑定方法：</strong></p><ol><li>内联模式</li><li>外联模式/脚本模式（前后分离，最多使用）</li></ol><p><strong>绑定事件格式：</strong></p><pre>元素节点.on + 事件类型 = 匿名函数元素节点.on + 事件类型 = function(){js_code}</pre><p>内联模式举例说明：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>点击这个按钮，来调用带参数的函数。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"myFunction('Harry Potter','Wizard')"</span>&gt;</span>点击这里<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span><span class="params">(name,job)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">    alert(<span class="string">"Welcome "</span> + name + <span class="string">", the "</span> + job);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>外联模式举例说明（这样就可以将js，HTML分隔开来了）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn2"</span>&gt;</span>按钮模式<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn2"</span>);</span></span><br><span class="line"><span class="actionscript">        btn.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            alert(<span class="string">"外联模式"</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>小结：HTML DOM事件主要分为几个大类</p><ul><li>鼠标事件</li><li>键盘事件</li><li>框架/对象（Frame/Object）事件</li><li>表单事件</li><li>剪贴板事件</li><li>打印事件</li><li>拖动事件</li><li>多媒体事件</li><li>动画事件</li><li>其它事件</li></ul><br><h3 id="2-js获取表单元素和标签节点内容"><a href="#2-js获取表单元素和标签节点内容" class="headerlink" title="2.js获取表单元素和标签节点内容"></a>2.<strong>js获取表单元素和标签节点内容</strong></h3><ul><li><p>通过document.getElementById(“节点id”)获取节点的DOM：<br>对于表单元素，获取其中的内容，通过<code>.value</code>的属性<br>对于标签节点，<code>.innerHTML</code>获取标签间的内容</p></li><li><p>通过form表单的name属性<br>对于表单元素通过 <code>document.forms[&quot;form标签的name属性&quot;][&quot;input标签下的type属性的各个name值&quot;].value</code></p></li></ul><p><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/20200311214808.png" alt=""></fancybox></p><p>举例说明：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">"form"</span>&gt;</span></span><br><span class="line">    username:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">onblur</span>=<span class="string">"func();"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"show"</span>&gt;</span>目标字符为数字字母或下划线<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    password:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> content = <span class="built_in">document</span>.getElementById(<span class="string">"username"</span>).value;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// content.value = content.value.toUpperCase();</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> text = <span class="built_in">document</span>.getElementById(<span class="string">"show"</span>);</span></span><br><span class="line">        text.innerText = isABC(content)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">isABC</span><span class="params">(x)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 判断某个字符是否是数字字母下划线</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span>((x&gt;=<span class="string">'a'</span> &amp;&amp; x&lt;= <span class="string">'z'</span>) || (x&gt;=<span class="string">'A'</span> &amp;&amp; x&lt;= <span class="string">'D'</span>) || (x&gt;=<span class="string">'0'</span> &amp;&amp; x&lt;= <span class="string">'9'</span>) || x === <span class="string">'_'</span>  )&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span>(<span class="string">"＜（＾－＾）＞ 目标字符是数字字母或下划线"</span>);</span></span><br><span class="line"><span class="actionscript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span>(<span class="string">"U•ェ•*U 目标字符不是数字字母或下划线"</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-获取-HTML-的DOM元素节点"><a href="#3-获取-HTML-的DOM元素节点" class="headerlink" title="3.获取 HTML 的DOM元素节点"></a>3.获取 HTML 的DOM元素节点</h3><p>通过 JavaScript，您需要操作 HTML 元素。为了做到这件事情，您必须首先找到该元素。有三种方法来做这件事：</p><ol><li><p>通过id查找HTML元素 document.getElementById(“元素节点的唯一id”)</p></li><li><p>通过标签名来查找HTML元素 document.getElementsByTagName(“元素节点的标签名”)</p></li><li><p>通过class类名来查找元素 document.getElementsByClassName(“元素节点的class名”)</p></li><li><p>css选择符模式 document.querySelector() :返回与该模式匹配的第一个元素，结果为一个元素；如果没找到匹配的元素，则返回null</p></li><li><p>css选择符模式 document.querySelectorAll() : 返回与该模式匹配的所有元素，结果为一个类数组</p></li></ol><p>参考：<a href="https://www.cnblogs.com/SallyShan/p/11595090.html" target="_blank" rel="noopener">JS获取子节点、父节点和兄弟节点的方法实例总结</a> 与 <a href="https://blog.csdn.net/weixin_41615439/article/details/87652551" target="_blank" rel="noopener">js获取DOM节点的几种方式</a></p><p>拓：获取HTML的DOM元素节点集合：<strong>其实就是将getElement变为getElements</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myCollection = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"p"</span>);</span><br><span class="line"><span class="keyword">let</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; myCollection.length; i++) &#123;</span><br><span class="line">    myCollection[i].style.backgroundColor = <span class="string">"red"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HTMLCollection 对象的 length 属性定义了集合中元素的数量<br><strong>HTMLCollection 不是一个数组！HTMLCollection 看起来可能是一个数组，但其实不是。<br>你可以像数组一样，使用索引来获取元素，但无法使用数组的方法： valueOf(),pop(),push(),或 join()。</strong></p><h3 id="4-改变-HTML-元素的内容-innerHTML"><a href="#4-改变-HTML-元素的内容-innerHTML" class="headerlink" title="4.改变 HTML 元素的内容 (innerHTML)"></a>4.改变 HTML 元素的内容 (innerHTML)</h3><ul><li>改变HTML输出流<br>js能够创建动态的HTML内容，而document.write() 可用于直接向 HTML 输出流写内容</li><li>改变HTML内容（推荐）<br>document.getElementById(id).innerHTML=新的 HTML（推荐）</li><li>改变HTML元素属性<br><code>document\.getElementById(id)\.attribute=新属性值</code><br>eg: document.getElementById(“image”).src=”landscape.jpg”;</li></ul><h3 id="5-html-DOM-改变CSS"><a href="#5-html-DOM-改变CSS" class="headerlink" title="5.html DOM-改变CSS"></a>5.html DOM-改变CSS</h3><p>如需改变 HTML 元素的样式，请使用这个语法：</p><p><code>document.getElementById(id).style.property=新样式</code></p><p><strong>2020-4-20 补充：</strong><br>之前我们已经了解到了改变HTML元素的样式 document.getElementById(“id_name”).属性attribute=新的属性，但是这种方法无法获取我们自定义的style属性，且官方给出了三种方法：</p><ul><li>设置节点属性：节点变量.setAttribute(“class”，“box”)</li><li>获取节点属性：节点变量.getAttribute(“class”)</li><li>移除节点属性：节点变量.removeAttribute(“class”)</li></ul><h3 id="6-一些特殊的js代码"><a href="#6-一些特殊的js代码" class="headerlink" title="6.一些特殊的js代码"></a>6.一些特殊的js代码</h3><ol><li>document.documentElement.scrollTop：获取当前页面的滚动条的纵向位置<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置页面滚动条的纵向位置</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.scrollTop = <span class="built_in">document</span>.documentElement.scrollHeight*(<span class="number">0</span>~<span class="number">1</span>之间的数);</span><br></pre></td></tr></table></figure></li></ol><h3 id="7-经典案例"><a href="#7-经典案例" class="headerlink" title="7.经典案例"></a>7.经典案例</h3><h4 id="鼠标事件（图片随鼠标移动而动）"><a href="#鼠标事件（图片随鼠标移动而动）" class="headerlink" title="鼠标事件（图片随鼠标移动而动）"></a>鼠标事件（图片随鼠标移动而动）</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        *&#123;</span><br><span class="line">            margin: 0;</span><br><span class="line"><span class="css">            <span class="selector-tag">padding</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/*div宽高与gif图尺寸相差无几，是为了完全包裹gif图片*/</span></span></span><br><span class="line">            width: 146px;</span><br><span class="line">            height: 141px;</span><br><span class="line">            background-image: url("http://image.17173.com/bbs/v1/2010/12/04/1291402861408.gif");</span><br><span class="line">            background-size: auto;</span><br><span class="line">            background-repeat: no-repeat;</span><br><span class="line"><span class="css">            <span class="comment">/*定位属性：绝对定位，脱离文档流*/</span></span></span><br><span class="line">            position: absolute;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">body</span>&#123;<span class="attribute">background-color</span>: white&#125;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</span></span><br><span class="line"><span class="actionscript">            box.onmousemove = <span class="function"><span class="keyword">function</span> <span class="params">(el)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> e = el ||  <span class="built_in">window</span>.event;</span></span><br><span class="line"><span class="vbscript">                box.style.<span class="built_in">left</span> = e.clientX <span class="number">-65</span>+<span class="string">"px"</span>;</span></span><br><span class="line"><span class="actionscript">                box.style.top = e.clientY <span class="number">-65</span> +<span class="string">"px"</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ol><li><a href="https://www.runoob.com/jsref/dom-obj-event.html" target="_blank" rel="noopener">HTML DOM事件大全</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Json（二）：关于json的前后分离</title>
      <link href="/2020/03/10/json(%E4%BA%8C)/"/>
      <url>/2020/03/10/json(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;某天，张先生有一个需求怎么把Java项目打包成一个.exe文件，这样对于其它没有安装JRE的电脑来说也能直接使用。其实我当时想把代码重构为python，张先生在前端HTML页面输入相关数据，然后传入后端flask，处理好了才返回给前端，这就达到了前后分离。搭建一个CI/CD自动化部署，持续集成(CI)、持续部署(CD),可以简化工作流程,提高工作效率。<br><strong>本章内容：</strong></p><blockquote><p>1.json文件的读写<br>2.json作为前后端数据交互<br>3.flask与requests，前端form表单交互</p></blockquote><a id="more"></a><h3 id="1-json文件的读写"><a href="#1-json文件的读写" class="headerlink" title="1.json文件的读写"></a>1.json文件的读写</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;由前文可知，当我们读写json文件时，一定要用loads、dumps，不然会报错<br>json.dumps    ：将 Python 对象编码成 JSON 字符串<br>json.loads    ：将已编码的 JSON 字符串解码为 Python 对象</p><p><strong>文件的储存的数据格式只能是字符串，不能为json字符串(python里实际为dict字典)，文件无法存储字典对象</strong></p><p>读取json文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"./demo_json.json"</span>,<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    a = json.loads(f.read())</span><br><span class="line"><span class="comment"># 打印python对象</span></span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><p>写入json文件：<br><strong>无论写入txt、json文件无非就是open()文件时，需要添加utf-8，dumps()时。带有中文数据时，需要添加ensure_ascii=False，防止ascii中文编码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"demo_json.json"</span>, <span class="string">'w'</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(json.dumps(response, ensure_ascii=<span class="literal">False</span>))</span><br></pre></td></tr></table></figure><h3 id="2-json作为前后端数据交互"><a href="#2-json作为前后端数据交互" class="headerlink" title="2.json作为前后端数据交互"></a>2.json作为前后端数据交互</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;需求：我们用flask作为服务器后端，做一个API，携带目标参数，flask接受POST或GET请求的参数，处理后返回到前端展示<br>&nbsp;&nbsp;&nbsp;&nbsp;请求参数：json数据格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">request_body = &#123;</span><br><span class="line">    &quot;username&quot;: &quot;1900201&quot;,</span><br><span class="line">    &quot;data&quot;: &#123;</span><br><span class="line">        &quot;age&quot;: 18,</span><br><span class="line">        &quot;location&quot;: &quot;Hangzhou&quot;,</span><br><span class="line">        &quot;birthday&quot;: &quot;1997-01-25&quot;,</span><br><span class="line">        &quot;ip&quot;: [&quot;10.10.11.1&quot;, &quot;10.10.11.2&quot;, &quot;10.10.11.3&quot;],</span><br><span class="line">        &quot;request-type&quot;: 2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>数据发送端：</strong><br>利用requests库，构建一个API，向由flask创建的服务器后端，发送POST数据请求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数 测试一个服务接口</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_info</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 构造服务接口地址</span></span><br><span class="line">    url = <span class="string">'http://localhost:9527/'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造请求体 请求体将被转换为 JSON 格式</span></span><br><span class="line">    request_body = &#123;</span><br><span class="line">        <span class="string">"username"</span>: <span class="string">"1900201"</span>,</span><br><span class="line">        <span class="string">"data"</span>: &#123;</span><br><span class="line">            <span class="string">"age"</span>: <span class="number">18</span>,</span><br><span class="line">            <span class="string">"location"</span>: <span class="string">"Hangzhou"</span>,</span><br><span class="line">            <span class="string">"birthday"</span>: <span class="string">"1997-01-25"</span>,</span><br><span class="line">            <span class="string">"ip"</span>: [<span class="string">"10.10.11.1"</span>, <span class="string">"10.10.11.2"</span>, <span class="string">"10.10.11.3"</span>],</span><br><span class="line">            <span class="string">"request-type"</span>: <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 向指定服务接口发送 POST 请求</span></span><br><span class="line">        response = requests.post(url=url, json=request_body)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="comment"># 解析 JSON 格式的响应体 并打印</span></span><br><span class="line">            print(<span class="string">'Response info:'</span>, response.json())</span><br><span class="line">            <span class="comment"># 将返回的数据写入文件</span></span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">"demo_json.json"</span>, <span class="string">'w'</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(json.dumps(response.json(), ensure_ascii=<span class="literal">False</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    get_info()</span><br></pre></td></tr></table></figure><p><strong>数据处理端：</strong></p><p>拓展（牢记）：<br><strong>flask服务端获取数据方式：</strong></p><ul><li>data = request.data   ：获取的是字符串，得到的是原始提交的数据</li><li>data = request.get_data()  ：获取的是字符串，得到的是原始提交的数据</li><li>data = request.get_json() ：获取 JSON 格式的请求体 </li><li>username = request.form.get(&quot;username&quot;)  获取前端form表单名为name=”username”的表单数据</li><li>password = request.form.get(“password”)  获取前端form表单名为name=”password”的表单数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个服务</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment"># 声明一个端口</span></span><br><span class="line">APP_PORT = <span class="number">9527</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个接口 指定路由和请求方法 定义处理请求的函数</span></span><br><span class="line"><span class="meta">@app.route(rule='/', methods=['POST', "GET"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">        <span class="comment"># 获取 JSON 格式的请求体 并解析</span></span><br><span class="line">        data = request.get_json()</span><br><span class="line">        print(<span class="string">'Request info: '</span>, data)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 解析POST/GET请求传递过来的数据</span></span><br><span class="line">        item = data[<span class="string">"data"</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 生成响应信息</span></span><br><span class="line">        response_info = &#123;</span><br><span class="line">            <span class="string">'msg'</span>: <span class="string">'收到'</span>,</span><br><span class="line">            <span class="string">"数据"</span>: item</span><br><span class="line">        &#125;</span><br><span class="line">        print(<span class="string">'Response info:'</span>, response_info)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将响应信息转换为 JSON 格式</span></span><br><span class="line">        response_body = jsonify(response_info)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 最终对请求进行相应</span></span><br><span class="line">        <span class="keyword">return</span> response_body</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;h1&gt;请使用post请求&lt;/h1&gt;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这种路由模式：&lt;name&gt;尖括号代表传入参数</span></span><br><span class="line"><span class="meta">@app.route('/user/&lt;name&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"&lt;h2&gt; hello python+html, %s&lt;/h2&gt;"</span> % name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 启动服务 指定主机和端口</span></span><br><span class="line">    app.run(host=<span class="string">'127.0.0.1'</span>, port=APP_PORT, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>路由模式Ⅱ：尖括号&lt;name&gt;尖括号代表传入参数</p><p><strong>运行结果：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Response info: &#123;</span><br><span class="line">    &apos;msg&apos;:&apos;收到&apos;,</span><br><span class="line">    &quot;data&quot;: &#123;</span><br><span class="line">        &quot;age&quot;: 18,</span><br><span class="line">        &quot;location&quot;: &quot;Hangzhou&quot;,</span><br><span class="line">        &quot;birthday&quot;: &quot;1997-01-25&quot;,</span><br><span class="line">        &quot;ip&quot;: [&quot;10.10.11.1&quot;, &quot;10.10.11.2&quot;, &quot;10.10.11.3&quot;],</span><br><span class="line">        &quot;request-type&quot;: 2</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://blog.csdn.net/mywang88/article/details/90114192?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">Python 使用 flask 库传递 JSON 数据</a></li><li><a href="https://blog.csdn.net/u010197393/article/details/83503202?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">Flask框架前端后端交互之传递Json数据</a></li><li><a href="https://blog.csdn.net/qq_29287973/article/details/52495042?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">【python学习笔记】flask实现简单的接收json返回json的接口</a></li><li><a href="https://www.jianshu.com/p/0f528c47c5bf" target="_blank" rel="noopener">Flask框架基础教程</a></li><li><a href="https://blog.csdn.net/james_laughing/article/details/89194742" target="_blank" rel="noopener">flask接受前台的form表单数据</a></li><li><a href="https://blog.csdn.net/qq_29113041/article/details/80392597" target="_blank" rel="noopener">flask接受前台Ajax的post请求传递过来的json数据</a></li><li><a href="https://blog.csdn.net/M983373615/article/details/99966682" target="_blank" rel="noopener">一个页面上多个form表单的用json数据格式提交到后台</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> json </category>
          
      </categories>
      
      
        <tags>
            
            <tag> json </tag>
            
            <tag> 前后分离 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java（七）：Java的static关键字</title>
      <link href="/2020/03/05/Java%E7%9A%84static%E5%85%B3%E9%94%AE%E5%AD%97(%E4%B8%83)/"/>
      <url>/2020/03/05/Java%E7%9A%84static%E5%85%B3%E9%94%AE%E5%AD%97(%E4%B8%83)/</url>
      
        <content type="html"><![CDATA[<p><strong>本章内容：</strong></p><blockquote><p>1.static静态关键字概述<br>2.静态变量<br>3.静态方法<br><strong>4.总结</strong></p></blockquote><a id="more"></a><h3 id="1-static静态关键字概述"><a href="#1-static静态关键字概述" class="headerlink" title="1.static静态关键字概述"></a>1.static静态关键字概述</h3><p>关于 static 关键字的使用，它可以用来修饰的成员变量和成员方法，被修饰的成员是属于类的，而不是单单是属 于某个对象的。也就是说，既然属于类，就可以不靠创建对象来调用了。 </p><p>在一个类中，有变量和方法，而变量有成员变量，静态变量；而方法有成员方法和静态方法之分(只要带static关键字就代表静态变量或方法)</p><p><strong>如何区分我们什么时候使用static关键字呢？</strong></p><p><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/02-%E9%9D%99%E6%80%81static%E5%85%B3%E9%94%AE%E5%AD%97%E6%A6%82%E8%BF%B0.png" alt=""></fancybox><br>从上述图中我们可以看出在学生类中，我们new三个学生对象，每一个对象除了姓名，年龄，学号不同之外，每一个学生对象的所在教室完全一样。<br>对于姓名，年龄，学号来说，<strong>每一个对象都有自己独立的数据</strong>。但对于所在的教室来说，这应该是<strong>多个对象共享同一份数据</strong>才对。<br>一旦使用了static关键字，那么这样的内容不在属于对象自己，而是属于类的，所以凡是本类的对象，都<strong>共享同一份</strong>。</p><p>我们来实现这个图片展示的功能（以标准的类的创建方式）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bytedance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">staticDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 静态static常量赋初值(类名称.变量名)</span></span><br><span class="line">        Student1.room = <span class="string">"101教室"</span>;</span><br><span class="line"></span><br><span class="line">        Student1 one = <span class="keyword">new</span> Student1(<span class="string">"郭靖"</span>, <span class="number">20</span>);</span><br><span class="line">        System.out.println(<span class="string">"one的姓名："</span> + one.getName());</span><br><span class="line">        System.out.println(<span class="string">"one的年龄："</span> + one.getAge());</span><br><span class="line">        System.out.println(<span class="string">"one的教室："</span> + Student1.room);</span><br><span class="line">        System.out.println(<span class="string">"============"</span>);</span><br><span class="line"></span><br><span class="line">        Student1 two = <span class="keyword">new</span> Student1(<span class="string">"黄蓉"</span>, <span class="number">18</span>);</span><br><span class="line">        System.out.println(<span class="string">"two的姓名："</span> + two.getName());</span><br><span class="line">        System.out.println(<span class="string">"two的年龄："</span> + two.getAge());</span><br><span class="line">        System.out.println(<span class="string">"two的教室："</span> + Student1.room);</span><br><span class="line"></span><br><span class="line">        myMethod() <span class="comment">// 本类中的静态方法直接调用</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 本类中的静态方法，调用时可以省略类名称，直接调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">myMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"自己的方法！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id; <span class="comment">// 学号</span></span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age; <span class="comment">// 年龄</span></span><br><span class="line">    <span class="keyword">static</span> String room; <span class="comment">// 所在教室</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> idCounter = <span class="number">0</span>; <span class="comment">// 学号计数器，每当new了一个新对象的时候，计数器++</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = ++idCounter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student1</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.id = ++idCounter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-静态变量"><a href="#2-静态变量" class="headerlink" title="2.静态变量"></a>2.静态变量</h3><p>静态变量 ： static 数据类型 变量名 （static int numberID）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比如说，基础班新班开班，学员报到。现在想为每一位新来报到的同学编学号（sid），从第一名同学开始，sid为 1，以此类推。学号必须是唯一的，连续的，并且与班级的人数相符，这样以便知道，要分配给下一名新同学的学 号是多少。这样我们就需要一个变量，与单独的每一个学生对象无关，而是与整个班级同学数量有关</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bytedance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">staticDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student1 s1 = <span class="keyword">new</span> Student1(<span class="string">"迪丽热巴"</span>,<span class="number">18</span>);</span><br><span class="line">        Student1 s2 = <span class="keyword">new</span> Student1(<span class="string">"古力娜扎"</span>,<span class="number">20</span>);</span><br><span class="line">        Student1 s3 = <span class="keyword">new</span> Student1(<span class="string">"马尔扎哈"</span>,<span class="number">33</span>);</span><br><span class="line">        s1.show(); <span class="comment">// Student : name=迪丽热巴, age=18, 学生编号=1</span></span><br><span class="line">        s2.show(); <span class="comment">// Student : name=古力娜扎, age=20, 学生编号=2</span></span><br><span class="line">        s3.show(); <span class="comment">// Student : name=马尔扎哈, age=33, 学生编号=3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student1</span></span>&#123;</span><br><span class="line">    <span class="comment">// 成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">// 学生的id</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="comment">// 静态变量，记录学生数量，分配学号</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> numberNo = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student1</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="comment">// 表示每创建一个Student1对象，id就会自动加一</span></span><br><span class="line">        <span class="keyword">this</span>.id =  ++ numberNo;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 打印属性值   </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Student : name="</span>+<span class="keyword">this</span>.name+<span class="string">", age="</span>+<span class="keyword">this</span>.age+<span class="string">", 学生编号="</span>+<span class="keyword">this</span>.id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-静态方法"><a href="#3-静态方法" class="headerlink" title="3.静态方法"></a>3.静态方法</h3><p>使用格式： 修饰符 static 返回值类型 方法名 (参数列表){  // 执行语句代码块      }</p><p>被static修饰的成员可以并且建议通过类名直接访问。虽然也可以通过对象名访问静态成员，原因即多个对象均属 于一个类，共享使用同一个静态成员，但是不建议，会出现警告信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bytedance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">staticDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyClass obj = <span class="keyword">new</span> MyClass(); <span class="comment">// 首先创建对象</span></span><br><span class="line">        obj.num = <span class="number">18</span>;</span><br><span class="line">        MyClass.numStatic = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建对象之后，然后才能使用没有static关键字的内容</span></span><br><span class="line">        obj.method();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对于静态方法来说，可以通过对象名进行调用，也可以直接通过类名称来调用。</span></span><br><span class="line">        obj.methodStatic(); <span class="comment">// 正确，不推荐，这种写法在编译之后也会被javac翻译成为“类名称.静态方法名”</span></span><br><span class="line"></span><br><span class="line">        MyClass.methodStatic(); <span class="comment">// 正确，推荐</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对于本类当中的静态方法，可以省略类名称</span></span><br><span class="line">        myMethod();</span><br><span class="line">        staticDemo.myMethod(); <span class="comment">// 对于本类中的静态方法，myMethod()与staticDemo.myMethod()完全等效，可以省略类名称</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">myMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"自己的方法！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num; <span class="comment">// 成员变量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> numStatic; <span class="comment">// 静态变量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成员方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是一个成员方法。"</span>);</span><br><span class="line">        <span class="comment">// 成员方法可以访问成员变量</span></span><br><span class="line">        System.out.println(num);</span><br><span class="line">        <span class="comment">// 成员方法可以访问静态变量</span></span><br><span class="line">        System.out.println(numStatic);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodStatic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是一个静态方法。"</span>);</span><br><span class="line">        <span class="comment">// 静态方法可以访问静态变量</span></span><br><span class="line">        System.out.println(numStatic);</span><br><span class="line">        <span class="comment">// 静态不能直接访问非静态【重点】</span></span><br><span class="line">        <span class="comment">// System.out.println(num); // 错误写法！</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 静态方法中不能使用this关键字。</span></span><br><span class="line">        <span class="comment">//  System.out.println(this); // 错误写法！</span></span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h3><p>一旦使用static修饰成员方法，那么这就成为了静态方法。静态方法不属于对象，而是属于类的。</p><p>如果没有static关键字，那么必须首先创建对象，然后通过对象才能使用它。<br>如果有了static关键字，那么不需要创建对象，直接就能通过类名称来使用它。</p><p><strong>无论是成员变量，还是成员方法。如果有了static，都推荐使用类名称进行调用</strong>。<br>静态变量\：类名称.静态变量<br>静态方法\：类名称.静态方法()</p><p>静态常量赋初始值的方法：类名称.静态变量名 = 初始值</p><p>注意事项：</p><ol><li><p>静态方法只能访问静态成员，实例方法可以访问静态和实例成员。反之，成员方法可以直接访问类变量或静态方法<br>原因：因为在内存当中是【先】有的静态内容，【后】有的非静态内容。<br>“先人不知道后人，但是后人知道先人。”</p></li><li><p>静态方法当中不能用this。<br>原因：this代表当前对象，通过谁调用的方法，谁就是当前对象。</p></li><li><p>对于本类当中的静态方法，调用时可以省略类名称</p></li></ol><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><a href="https://blog.csdn.net/qq_28727015/article/details/79893158?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">静态方法类名访问，只允许访问静态成员</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python函数基础补充</title>
      <link href="/2020/03/03/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89/"/>
      <url>/2020/03/03/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>本章内容：</strong></p><blockquote><p>1.匿名函数<br>2.enumerate内置函数<br>3.列表生成式<br>4.python中的 end=””<br>5.生成器generator<br>6.可迭代对象和迭代器<br>7.Python文件目录路径的选择</p></blockquote><a id="more"></a><h3 id="1-匿名函数"><a href="#1-匿名函数" class="headerlink" title="1.匿名函数"></a>1.匿名函数</h3><p><strong>匿名函数：不需要显示的指定函数名，匿名函数支持的最复杂的运算就是三元运算</strong><br>lambda也是一个简短的匿名函数，格式：<font color=#7fb80e>lambda 参数 : 表达式</font></p><p>举例说明：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="keyword">lambda</span> a, b, c : a + b + c</span><br><span class="line">print(x(<span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>))  <span class="comment"># 13</span></span><br><span class="line">func = <span class="keyword">lambda</span> x,y:x*y    <span class="comment"># 声明一个匿名函数并赋值给func</span></span><br><span class="line">print(func(<span class="number">3</span>,<span class="number">8</span>))       <span class="comment"># 输出结果为24</span></span><br></pre></td></tr></table></figure><h3 id="2-enumerate内置函数"><a href="#2-enumerate内置函数" class="headerlink" title="2.enumerate内置函数"></a>2.enumerate内置函数</h3><p>对于一个可迭代的（iterable）/可遍历的对象（如列表、字符串），enumerate将其组成一个索引序列，利用它可以同时获得索引和值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">"这"</span>, <span class="string">"是"</span>, <span class="string">"一个"</span>, <span class="string">"测试"</span>]</span><br><span class="line"><span class="keyword">for</span> index, item <span class="keyword">in</span> enumerate(list1):</span><br><span class="line">    print(index, item)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">0 这</span></span><br><span class="line"><span class="string">1 是</span></span><br><span class="line"><span class="string">2 一个</span></span><br><span class="line"><span class="string">3 测试</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h3 id="3-列表生成式"><a href="#3-列表生成式" class="headerlink" title="3.列表生成式"></a>3.列表生成式</h3><p>列表生成式格式：<code>\[执行语句 列表生成]</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># 写列表生成式时，把要生成的元素x * x放到前面，后面跟for循环，就可以把list创建出来</span><br><span class="line">&gt;&gt;&gt; [x * x for x in range(1, 11)]</span><br><span class="line">[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span><br><span class="line"></span><br><span class="line"># for循环后面还可以加上if判断，这样我们就可以筛选出仅偶数的平方</span><br><span class="line">&gt;&gt;&gt; [x * x for x in range(1, 11) if x % 2 == 0]</span><br><span class="line">[4, 16, 36, 64, 100]</span><br><span class="line"></span><br><span class="line"># 用三元运算生成列表</span><br><span class="line">&gt;&gt;&gt; a = range(1,11)</span><br><span class="line">&gt;&gt;&gt; a = [i if i &lt; 5 else i*i for i in a]</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, 3, 4, 25, 36, 49, 64, 81, 100]</span><br><span class="line"></span><br><span class="line"># 使用两层循环，可以生成全排列</span><br><span class="line">&gt;&gt;&gt; [m + n for m in &apos;ABC&apos; for n in &apos;XYZ&apos;]</span><br><span class="line">[&apos;AX&apos;, &apos;AY&apos;, &apos;AZ&apos;, &apos;BX&apos;, &apos;BY&apos;, &apos;BZ&apos;, &apos;CX&apos;, &apos;CY&apos;, &apos;CZ&apos;]</span><br><span class="line"></span><br><span class="line"># 列表生成式也可以使用两个变量来生成list</span><br><span class="line">&gt;&gt;&gt; d = &#123;&apos;x&apos;: &apos;A&apos;, &apos;y&apos;: &apos;B&apos;, &apos;z&apos;: &apos;C&apos; &#125;</span><br><span class="line">&gt;&gt;&gt; [k + &apos;=&apos; + v for k, v in d.items()]</span><br><span class="line">[&apos;x=A&apos;, &apos;y=B&apos;, &apos;z=C&apos;]</span><br><span class="line"></span><br><span class="line"># 字符串操作，都变为小写</span><br><span class="line">&gt;&gt;&gt; L = [&apos;Hello&apos;, &apos;World&apos;, &apos;IBM&apos;, &apos;Apple&apos;]</span><br><span class="line">&gt;&gt;&gt; [s.lower() for s in L]</span><br><span class="line">[&apos;hello&apos;, &apos;world&apos;, &apos;ibm&apos;, &apos;apple&apos;]</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过列表生成式可以直接创建一个列表。列表创建在内存中，因此列表容量受到内存限制。特别是对一个元素量很大的列表，仅需访问前几个元素时，尤其浪费空间</p><h3 id="4-python中的-end-””"><a href="#4-python中的-end-””" class="headerlink" title="4.python中的 end=””"></a>4.python中的 end=””</h3><p>为末尾end传递一个空字符串，这样print函数不会在字符串末尾添加一个换行符，而是添加一个空字符串</p><p>print默认是打印一行，结尾加换行。end=’ ‘意思是末尾不换行，加空格。</p><h3 id="5-生成器generator"><a href="#5-生成器generator" class="headerlink" title="5.生成器generator"></a>5.生成器generator</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;列表元素可以按照某种算法推算出来（有规律的数组），则可以在循环的过程中不断推算出后续的元素。这种方式就不必创建完整的list，可以节省大量的空间。python中，这种一边循环一边计算的机制，称为生成器：generator。</p><p><strong>生成器创建方法一：将列表生成式的‘[]’改为‘()’</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># 生成器保存的是公式，取一次创建一次，只能往前不能后退</span><br><span class="line">&gt;&gt;&gt; a2 = (i for i in range(1000))</span><br><span class="line">&gt;&gt;&gt; a2</span><br><span class="line">&lt;generator object &lt;genexpr&gt; at 0x103761a98&gt;</span><br><span class="line">&gt;&gt;&gt; next(a2)</span><br><span class="line">0</span><br><span class="line">&gt;&gt;&gt; next(a2)</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">#生成器走完时，会报错：StopIteration</span><br><span class="line">&gt;&gt;&gt; a3 = (i for i in range(5))   # 限制5个</span><br><span class="line">&gt;&gt;&gt; a3</span><br><span class="line">&lt;generator object &lt;genexpr&gt; at 0x103761e08&gt;</span><br><span class="line">&gt;&gt;&gt; next(a3)</span><br><span class="line">0</span><br><span class="line">&gt;&gt;&gt; next(a3)</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; next(a3)</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; next(a3)</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; next(a3)</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt; next(a3)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;input&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure><p>生成器保存的是算法，每次调用next(g)就计算出g的下一个元素的值，直到计算出最后一个元素，没有更多的元素时，抛出StopIteration的错误。</p><p>创建生成器后，很少会调用next()，一般是通过for循环来迭代。使用for循环(<strong>有且仅有for循环满足</strong>)来迭代生成器，不会出现StopIteration报错，直接结束</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个生成器a</span></span><br><span class="line">a = (i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line"><span class="comment">#  a=&lt;generator object demo2.&lt;locals&gt;.&lt;genexpr&gt; at 0x0000026556A46B10&gt;</span></span><br><span class="line">print(a)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    print(i, end=<span class="string">" "</span>)  <span class="comment"># end="strings",end表示每行连接格式</span></span><br><span class="line"><span class="comment"># 结果为：0 1 2 3 4 5 6 7 8 9</span></span><br></pre></td></tr></table></figure><p><strong>生成器创建方法二：一个函数定义中包含yield关键字，函数为生成器(generator)</strong><br>这种生成器和函数相似，但与函数的执行流程不同：</p><p>　　函数是顺序执行，遇到return语句或最后一行函数语句就返回。</p><p>　　函数转化为生成器后，在每次调用next()的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; def fib_g(max):</span><br><span class="line">...     n, a, b = 0, 0, 1</span><br><span class="line">...     while n &lt; max:</span><br><span class="line">...         print(&apos;before yield&apos;)</span><br><span class="line">...         yield b   # yield 把函数的执行过程冻结在这一步，并且把b的值返回给外面的next()</span><br><span class="line">...         print(b)</span><br><span class="line">...         a, b = b, a+b</span><br><span class="line">...         n = n + 1</span><br><span class="line">...     return &apos;done&apos;</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; f = fib_g(15)  # 将函数转换为生成器，有了yeild后，函数名(参数)根本不执行</span><br><span class="line">&gt;&gt;&gt; next(f)</span><br><span class="line">before yield</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; next(f)</span><br><span class="line">1</span><br><span class="line">before yield</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; next(f)</span><br><span class="line">1</span><br><span class="line">before yield</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; next(f)</span><br><span class="line">2</span><br><span class="line">before yield</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; next(f)</span><br><span class="line">3</span><br><span class="line">before yield</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>send(“Strings”)方法：①唤醒并继续执行,直到遇到下一个yield ②发送一个信息到生成器内部</li><li>next():唤醒冻结的函数执行过程，继续执行，直到遇到下一个yield</li></ol><h3 id="6-可迭代对象和迭代器"><a href="#6-可迭代对象和迭代器" class="headerlink" title="6.可迭代对象和迭代器"></a>6.可迭代对象和迭代器</h3><p>可直接作用于for循环的数据类型有一下几种：</p><p>一、集合数据类型，如：list、tuple、dict、set、str等；</p><p>二、generator，包括生成器表达式(geneator expression)和生成器函数(generator function)两组构建方式。</p><p>上述这些可以直接作用于for循环的对象统称为可迭代对象(Iterable)。</p><h3 id="7-Python文件目录路径的选择"><a href="#7-Python文件目录路径的选择" class="headerlink" title="7.Python文件目录路径的选择"></a>7.Python文件目录路径的选择</h3><p>显示的文件目录用“/”，使用../ 表示的是表示上一级目录（也可以理解为 上一级文件夹，上行一个文件夹；就是文件夹HeadFirstPython/ chapter3往上一级，就到达目录文件夹/Users/barryp）</p><p><strong>./ 表示的是当前目录，“../../”表示上上级的目录（上行两个文件夹）</strong></p><p>绝对路径：即从最大的根目录开始表示，一直到该文件名。</p><p>相对路径：即该文件自己相对于目标（另一个文件）位置。不论将这些文件放到哪里，只要他们的相对关系没有变，就不会出错。</p><p>参考文献： <a href="https://zhuanlan.zhihu.com/p/90642765" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/90642765</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java（六）：Java正则表达式与多线程基础</title>
      <link href="/2020/02/29/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80(%E5%85%AD)/"/>
      <url>/2020/02/29/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80(%E5%85%AD)/</url>
      
        <content type="html"><![CDATA[<p><strong>本章内容：</strong></p><blockquote><p>1.正则表达式简介<br>2.多线程<br>3.maven编程</p></blockquote><a id="more"></a><h3 id="1-正则表达式简介"><a href="#1-正则表达式简介" class="headerlink" title="1.正则表达式简介"></a>1.正则表达式简介</h3><h4 id="匹配规则"><a href="#匹配规则" class="headerlink" title="匹配规则"></a>匹配规则</h4><p>正则表达式是一套标准，它可以用于任何语言。Java标准库的java.util.regex包内置了正则表达式引擎，在Java程序中使用正则表达式非常简单<br><strong>注意Java字符串用\\表示\</strong>，比如正常的<code>202\d\d</code> ,在Java中的<code>202\\d\\d</code><br><strong>正则表达式也有特殊字符，比如转义字符<code>\</code></strong>，对于正则表达式<code>a\&amp;c</code>来说，对应的Java字符串是<code>a\\&amp;c</code>，因为<code>\</code>也是Java字符串的转义字符，两个<code>\\</code>实际上表示的是一个<code>\</code>：<br><font color=#ef4136>透过现象看本质，Java与<a href="https://ahrilove.top/2019/12/10/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E4%B8%83%EF%BC%89/">python正则表达式</a>关于正则表达式的使用方法是相同的，可以参考使用,注意Java字符串用\\表示\</font></p><table><thead><tr><th>正则表达式</th><th align="center">规则</th><th align="right">可以匹配</th></tr></thead><tbody><tr><td>A</td><td align="center">指定字符</td><td align="right">A</td></tr><tr><td>\u548c</td><td align="center">指定Unicode字符</td><td align="right">和</td></tr><tr><td>.</td><td align="center">任意字符</td><td align="right">a，b，&amp;，0</td></tr><tr><td>\d</td><td align="center">数字0~9</td><td align="right">0~9</td></tr><tr><td>\w</td><td align="center">大小写字母，数字和下划线</td><td align="right">a~z，A~Z，0~9，_</td></tr><tr><td>\s</td><td align="center">空格、Tab键</td><td align="right">空格，Tab</td></tr><tr><td>\D</td><td align="center">非数字</td><td align="right">a，A，&amp;，_，……</td></tr><tr><td>\W</td><td align="center">非\w</td><td align="right">&amp;，@，中，……</td></tr><tr><td>\S</td><td align="center">非\s</td><td align="right">a，A，&amp;，_，……</td></tr><tr><td>A*</td><td align="center">任意个数字符</td><td align="right">空，A，AA，AAA，……</td></tr><tr><td>A+</td><td align="center">至少1个字符</td><td align="right">A，AA，AAA，……</td></tr><tr><td>A?</td><td align="center">0个或1个字符</td><td align="right">空，A</td></tr><tr><td>A{3}</td><td align="center">指定个数字符</td><td align="right">AAA</td></tr><tr><td>A{2,3}</td><td align="center">指定范围个数字符</td><td align="right">AA，AAA</td></tr><tr><td>A{2,}</td><td align="center">至少n个字符</td><td align="right">AA，AAA，AAAA，……</td></tr><tr><td>A{0,3}</td><td align="center">最多n个字符</td><td align="right">空，A，AA，AAA</td></tr><tr><td>^</td><td align="center">开头</td><td align="right">字符串开头</td></tr><tr><td>$</td><td align="center">结尾</td><td align="right">字符串结束</td></tr><tr><td>[ABC]</td><td align="center">[…]内任意字符</td><td align="right">A，B，C</td></tr><tr><td>[A-F0-9xy]</td><td align="center">指定范围的字符</td><td align="right">A，……，F，0，……，9，x，y</td></tr><tr><td>[^A-F]</td><td align="center">指定范围外的任意字符</td><td align="right">非A~F</td></tr></tbody></table><p>String.matches(regex)方法：只能匹配目标字符串是否满足给定的正则表达式规则，返回值是Boolean类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String re1 = <span class="string">"java\\d"</span>; <span class="comment">// 对应的正则是java\d</span></span><br><span class="line">        System.out.println(<span class="string">"java9"</span>.matches(re1));</span><br><span class="line">        System.out.println(<span class="string">"java10"</span>.matches(re1));</span><br><span class="line">        System.out.println(<span class="string">"javac"</span>.matches(re1));</span><br><span class="line"></span><br><span class="line">        String re2 = <span class="string">"java\\D"</span>;</span><br><span class="line">        System.out.println(<span class="string">"javax"</span>.matches(re2));</span><br><span class="line">        System.out.println(<span class="string">"java#"</span>.matches(re2));</span><br><span class="line">        System.out.println(<span class="string">"java5"</span>.matches(re2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分组匹配"><a href="#分组匹配" class="headerlink" title="分组匹配"></a>分组匹配</h4><p>我们前面讲到的(…)可以用来把一个子规则括起来，这样写learn\s(java|php|go)就可以更方便地匹配长字符串了。</p><p><strong>实际上(…)还有一个重要作用，就是分组匹配。</strong></p><p>前面已经了解到String.matches(regex)来判断是否满足目标正则表达式。但是如何提取匹配的子串？这就必须引入java.util.regex包，用Pattern对象匹配，匹配后获得一个Matcher对象，如果匹配成功，就可以直接从Matcher.group(index)返回子串：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 编译解析规则</span></span><br><span class="line">        Pattern p = Pattern.compile(<span class="string">"(\\d&#123;3,4&#125;)\\-(\\d&#123;7,8&#125;)"</span>);</span><br><span class="line">        <span class="comment">// 待匹配的字符</span></span><br><span class="line">        Matcher m = p.matcher(<span class="string">"010-12345678"</span>);</span><br><span class="line">        <span class="keyword">if</span> (m.matches()) &#123;</span><br><span class="line">            String g1 = m.group(<span class="number">1</span>);</span><br><span class="line">            String g2 = m.group(<span class="number">2</span>);</span><br><span class="line">            System.out.println(g1);</span><br><span class="line">            System.out.println(g2);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"匹配失败!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上述代码，会得到两个匹配上的子串010和12345678。</p><p>要特别注意，Matcher.group(index)方法的参数用1表示第一个子串，2表示第二个子串。如果我们传入0会得到什么呢？答案是010-12345678，即整个正则匹配到的字符串。</p><h4 id="搜索和替换"><a href="#搜索和替换" class="headerlink" title="搜索和替换"></a>搜索和替换</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">regexFind</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//  目标字符串</span></span><br><span class="line">        String s = <span class="string">"the quick brown fox jumps over the lazy dog."</span>;</span><br><span class="line">        <span class="comment">// 正则表达式编译模板</span></span><br><span class="line">        Pattern p = Pattern.compile(<span class="string">"\\wo\\w"</span>);</span><br><span class="line">        <span class="comment">// 编译获取Matcher对象</span></span><br><span class="line">        Matcher m = p.matcher(s);</span><br><span class="line">        <span class="comment">// 创建ArrayList集合，用于存储</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 反复调用find()方法</span></span><br><span class="line">        <span class="keyword">while</span> (m.find()) &#123;</span><br><span class="line">            <span class="comment">// 在整个串中搜索能匹配上\\wo\\w规则的子串</span></span><br><span class="line">            String sub = s.substring(m.start(), m.end());</span><br><span class="line">            <span class="comment">// 将所有的字串添加到集合中</span></span><br><span class="line">            list.add(sub);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用regexFind()方法</span></span><br><span class="line">        List&lt;String&gt; demo =  regexFind();</span><br><span class="line">        System.out.println(demo);</span><br><span class="line">        System.out.println(demo.get(<span class="number">0</span>));</span><br><span class="line">        System.out.println(demo.get(<span class="number">1</span>));</span><br><span class="line">        System.out.println(demo.size());</span><br><span class="line">        <span class="comment">/* 运行结果：</span></span><br><span class="line"><span class="comment">        [row, fox, dog]</span></span><br><span class="line"><span class="comment">        row</span></span><br><span class="line"><span class="comment">        fox</span></span><br><span class="line"><span class="comment">        3</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们获取到Matcher对象后，不需要调用matches()方法（因为匹配整个串肯定返回false），而是反复调用find()方法</p><h4 id="替换字符串"><a href="#替换字符串" class="headerlink" title="替换字符串"></a>替换字符串</h4><p>使用正则表达式替换字符串可以直接调用<code>String.replaceAll()</code>，它的第一个参数是正则表达式，第二个参数是待替换的字符串。举例说明：<br>语言格式：strings.replaceAll(“正则表达式规则”,a) 用a替换strings里面的正则表达式规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String s = <span class="string">"the quick brown fox jumps over the lazy dog."</span>;</span><br><span class="line">        <span class="keyword">return</span> s.replaceAll(<span class="string">"\\s+"</span>,<span class="string">"--"</span>);</span><br><span class="line">        <span class="comment">// 运行结果： the--quick--brown--fox--jumps--over--the--lazy--dog.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-多线程"><a href="#2-多线程" class="headerlink" title="2.多线程"></a>2.多线程</h3><p>进程 vs 线程<br>进程和线程是包含关系，但是多任务既可以由多进程实现，也可以由单进程内的多线程实现，还可以混合多进程＋多线程。</p><p>和多线程相比，多进程的缺点在于：</p><ul><li>创建进程比创建线程开销大，尤其是在Windows系统上；</li><li>进程间通信比线程间通信要慢，因为线程间通信就是读写同一个变量，速度很快。<br>而多进程的优点在于：</li></ul><p>多进程稳定性比多线程高，因为在多进程的情况下，一个进程崩溃不会影响其他进程，而在多线程的情况下，任何一个线程崩溃会直接导致整个进程崩溃。</p><p>多线程<br>Java语言内置了多线程支持：一个Java程序实际上是一个JVM进程，JVM进程用一个主线程来执行main()方法，在main()方法内部，我们又可以启动多个线程。此外，JVM还有负责垃圾回收的其他工作线程等。</p><p>因此，对于大多数Java程序来说，我们说多任务，实际上是说如何使用多线程实现多任务。</p><p>和单线程相比，多线程编程的特点在于：多线程经常需要读写共享数据，并且需要同步。例如，播放电影时，就必须由一个线程播放视频，另一个线程播放音频，两个线程需要协调运行，否则画面和声音就不同步。因此，多线程编程的复杂度高，调试更困难。</p><p>Java多线程编程的特点又在于：</p><ul><li>多线程模型是Java程序最基本的并发模型；</li><li>后续读写网络、数据库、Web开发等都依赖Java多线程模型。</li></ul><h4 id="创建新线程"><a href="#创建新线程" class="headerlink" title="创建新线程"></a>创建新线程</h4><p>Java语言内置了多线程支持。当Java程序启动的时候，实际上是启动了一个JVM进程，然后，JVM启动主线程来执行main()方法。在main()方法中，我们又可以启动其他线程。</p><p>要创建一个新线程非常容易，我们需要实例化一个Thread实例，然后调用它的start()方法<br><strong>方法一：从Thread派生一个自定义类，然后覆写</strong></p><p>创建多线程程序的第一种方式:创建Thread类的子类<br>java.lang.Thread类:是描述线程的类,我们想要实现多线程程序,就必须继承Thread类</p><p>实现步骤:<br>1.创建一个Thread类的子类<br>2.在Thread类的子类中重写Thread类中的run方法,设置线程任务(开启线程要执行什么任务?)<br>3.创建Thread类的子类对象<br>4.调用Thread类中的方法start方法,开启新的线程,执行run方法</p><p>拓展：关于start()的说明：<br>void start() 使该线程开始执行；Java 虚拟机调用该线程的 run 方法。<br>结果是两个线程并发地运行；当前线程（main线程）和另一个线程（创建的新线程,执行其 run 方法）。<br>多次启动一个线程是非法的。特别是当线程已经结束执行后，不能再重新启动。<br>java程序属于抢占式调度,那个线程的优先级高,那个线程优先执行;同一个优先级,随机选择一个执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> MyThread();</span><br><span class="line">        <span class="comment">// 说明：为什么这里使用start()方法，其实start方法是Thread类的方法</span></span><br><span class="line">        <span class="comment">// 但由于MyThread继承了Thread类，便可以使用了</span></span><br><span class="line">        t.start(); <span class="comment">// 启动新线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"start new thread!"</span>);</span><br><span class="line">        System.out.println(<span class="string">"我是一个线程中要执行的任务!"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p><strong>方法二：创建Thread实例时，传入一个Runnable实例</strong></p><p>创建多线程程序的第二种方式:实现Runnable接口<br>java.lang.Runnable：Runnable 接口应该由那些打算通过某一线程执行其实例的类来实现。类必须定义一个称为 run 的无参数方法。<br>java.lang.Thread类的构造方法：<br>    Thread(Runnable target) 分配新的 Thread 对象。<br>    Thread(Runnable target, String name) 分配新的 Thread 对象。</p><p>实现步骤:<br>    1.创建一个Runnable接口的实现类<br>    2.在实现类中重写Runnable接口的run方法,设置线程任务<br>    3.创建一个Runnable接口的实现类对象<br>    4.创建Thread类对象,构造方法中传递Runnable接口的实现类对象<br>    5.调用Thread类中的start方法,开启新的线程执行run方法</p><p>实现Runnable接口创建多线程程序的好处:<br>    1.避免了单继承的局限性<br>        一个类只能继承一个类(一个人只能有一个亲爹),类继承了Thread类就不能继承其他的类<br>        实现了Runnable接口,还可以继承其他的类,实现其他的接口<br>    2.增强了程序的扩展性,降低了程序的耦合性(解耦)<br>        实现Runnable接口的方式,把设置线程任务和开启新线程进行了分离(解耦)<br>        实现类中,重写了run方法:用来设置线程任务<br>        创建Thread类对象,调用start方法:用来开启新线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyRunnable());</span><br><span class="line">        t.start(); <span class="comment">// 启动新线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接口的实现类写法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"start new thread!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p><strong>方法三：用匿名内部类语法进一步简写</strong>：</p><p>匿名内部类方式实现线程的创建</p><p>匿名:没有名字<br>内部类:写在其他类内部的类</p><p>格式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">new 父类/接口()&#123;</span><br><span class="line">    重写父类/接口中的方法</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>匿名内部类作用:简化代码<br>    把子类继承父类,重写父类的方法,创建子类对象合一步完成<br>    把实现类实现类接口,重写接口中的方法,创建实现类对象合成一步完成<br>匿名内部类的最终产物:子类/实现类对象,而这个类没有名字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01InnerClassThread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//线程的父类是Thread</span></span><br><span class="line">        <span class="comment">// new MyThread().start();</span></span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="comment">//重写run方法,设置线程任务</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">20</span> ; i++) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">"--&gt;"</span>+<span class="string">"黑马"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程的三种创建方式综合演练：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Alibaba;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现三种线程的创建方式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            MyThread t1 = <span class="keyword">new</span> MyThread();</span><br><span class="line">            t1.start();</span><br><span class="line">            t1.join(); <span class="comment">// join方法会抛出编译期异常，必须要try catch或throws来处理异常</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"====="</span>);</span><br><span class="line">        <span class="comment">// 线程二的创建</span></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyRunnable());</span><br><span class="line"></span><br><span class="line">        t2.start();</span><br><span class="line">        t2.join();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 线程方式三：匿名创建方式</span></span><br><span class="line">        System.out.println(<span class="string">"====="</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="comment">//重写run方法,设置线程任务</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">"--&gt;"</span> + <span class="string">"黑马"</span> + i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建方式一：创建Thread类的子类，并重写父类的run方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">60</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"--&gt; 当前数字为："</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建方式二：接口的实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">1</span>; index &lt;= <span class="number">20</span>; index++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"当前数字为："</span> + index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小结：</p><ul><li><p>Java用Thread对象表示一个线程，通过调用start()启动一个新线程；</p></li><li><p>一个线程对象只能调用一次start()方法；</p></li><li><p>线程的执行代码写在run()方法中；</p></li><li><p>线程调度由操作系统决定，程序本身无法决定调度顺序；</p></li><li><p>Thread.sleep()可以把当前线程暂停一段时间，单位是毫秒（<em>Thread.sleep在编译时会出现中断异常InterruptedException，需要使用try catch捕获处理异常</em>）</p></li></ul><h4 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h4><p>当有多个线程抢夺共享数据时就会出现争抢资源的情况（与python的多进程同理），这时就会出现线程安全问题（比如卖票问题就会出现卖出了不存在的票和重复的票的线程安全问题）</p><ol><li>解决线程安全问题的一种方案:<strong>使用同步代码块</strong></li></ol><p>格式:<br>    synchronized(锁对象){<br>        可能会出现线程安全问题的代码(访问了共享数据的代码)<br>    }</p><p>注意:<br>    1.通过代码块中的锁对象,可以使用任意的对象<br>    2.但是必须保证多个线程使用的锁对象是同一个<br>    3.锁对象作用:把同步代码块锁住,只让一个线程在同步代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Runnable接口的实现类对象</span></span><br><span class="line">        MyRunnable run = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">        <span class="comment">//创建Thread类对象,构造方法中传递Runnable接口的实现类对象</span></span><br><span class="line">        Thread t0 = <span class="keyword">new</span> Thread(run);</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(run);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(run);</span><br><span class="line">        <span class="comment">//调用start方法开启多线程</span></span><br><span class="line">        t0.start();</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">// 创建一个锁对象</span></span><br><span class="line">    <span class="keyword">final</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(ticket&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"正在卖第："</span>+ticket+<span class="string">"票"</span>);</span><br><span class="line">                ticket --;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>解决线程安全问题的一种方案:<strong>使用Lock锁</strong></li></ol><p>包路径：java.util.concurrent.locks.Lock（Lock 实现提供了比使用 synchronized 方法和语句可获得的更广泛的锁定操作。）</p><p>Lock接口中的方法:<br>    void lock()获取锁。<br>    void unlock()  释放锁。</p><p>使用步骤:</p><ul><li>在成员位置创建一个ReentrantLock对象（可以采用多态方法：左父右子Lock lock = new ReentrantLock();这是因为java.util.concurrent.locks.ReentrantLock implements Lock接口，实现类继承父类）</li><li>在可能会出现安全问题的代码前调用Lock接口中的方法lock获取锁</li><li>在可能会出现安全问题的代码后调用Lock接口中的方法unlock释放锁</li></ul><p>举例说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Runnable接口的实现类对象</span></span><br><span class="line">        MyRunnable run = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">        <span class="comment">//创建Thread类对象,构造方法中传递Runnable接口的实现类对象</span></span><br><span class="line">        Thread t0 = <span class="keyword">new</span> Thread(run);</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(run);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(run);</span><br><span class="line">        <span class="comment">//调用start方法开启多线程</span></span><br><span class="line">        t0.start();</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建方式二：接口的实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">// 1.在成员位置创建一个ReentrantLock对象</span></span><br><span class="line">    Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//2.在可能会出现安全问题的代码前调用Lock接口中的方法lock获取锁</span></span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">" 正在卖 第"</span> + ticket + <span class="string">"票！"</span>);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">//3.在可能会出现安全问题的代码后调用Lock接口中的方法unlock释放锁.使用finally，无论程序是否异常,都会把锁释放</span></span><br><span class="line">                    lock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h4><ul><li>New：新创建的线程，尚未执行；</li><li>Runnable：运行中的线程，正在执行run()方法的Java代码；</li><li>Blocked：运行中的线程，因为某些操作被阻塞而挂起；</li><li>Waiting：运行中的线程，因为某些操作在等待中；</li><li>Timed Waiting：运行中的线程，因为执行sleep()方法正在计时等待；</li><li>Terminated：线程已终止，因为run()方法执行完毕。</li></ul><p>join()方法：优先运行子线程，主线程卡在原地，子线程结束后，运行主线程后面的代码，即join就是指等待该线程结束，然后才继续往下执行自身线程。(<em>join方法会抛出编译期异常，必须要try catch或throws来处理异常</em>)<br>Thread.sleep()方法：线程暂停，时间为毫秒级</p><h4 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h4><p>Java程序入口就是由JVM启动main线程，main线程又可以启动其他线程。当所有线程都运行结束时，JVM退出，进程结束。</p><p>如果有一个线程没有退出，JVM进程就不会退出。所以，必须保证所有线程都能及时结束</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 创建方式：只是在调用start()方法前，调用setDaemon(true)把该线程标记为守护线程</span><br><span class="line">Thread t = new MyThread();</span><br><span class="line">t.setDaemon(true);</span><br><span class="line">t.start();</span><br></pre></td></tr></table></figure><h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><p><strong>线程池：</strong>其实就是一个容纳多个线程的容器，其中的线程可以反复使用，省去了频繁创建线程对象的操作，无需反复创建线程而消耗过多资源。<br>由于线程池中有很多操作都是与优化资源相关的，我们在这里就不多赘述。</p><p>合理利用线程池能够带来三个好处：</p><ol><li>降低资源消耗。减少了创建和销毁线程的次数，每个工作线程都可以被重复利用，可执行多个任务。</li><li>提高响应速度。当任务到达时，任务可以不需要的等到线程创建就能立即执行。</li><li>提高线程的可管理性。可以根据系统的承受能力，调整线程池中工作线线程的数目，防止因为消耗过多的内存，而把服务器累趴下(每个线程需要大约1MB内存，线程开的越多，消耗的内存也就越大，最后死机)。</li></ol><p>线程池的使用步骤：</p><p>Java里面线程池的顶级接口是<code>java.util.concurrent.Executor</code> （JDK1.5之后提供的），但是严格意义上讲<code>Executor</code>并不是一个线程池，而只是一个执行线程的工具。真正的线程池接口是<code>java.util.concurrent.ExecutorService</code>。</p><p>要配置一个线程池是比较复杂的，尤其是对于线程池的原理不是很清楚的情况下，很有可能配置的线程池不是较优的，因此在<code>java.util.concurrent.Executors</code>线程工厂类里面提供了一些静态工厂，生成一些常用的线程池。官方建议使用Executors工程类来创建线程池对象。</p><p><font color=#50b7c1>java.util.concurrent.Executors:线程池的工厂类,用来生成线程池，声明线程数量：</font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Executors类中的静态方法:</span><br><span class="line">public static ExecutorService newFixedThreadPool(int nThreads) 创建一个可重用固定线程数的线程池</span><br><span class="line">    参数:</span><br><span class="line">        int nThreads:创建线程池中包含的线程数量</span><br><span class="line">    返回值:</span><br><span class="line">        ExecutorService接口,返回的是ExecutorService接口的实现类对象,我们可以使用ExecutorService接口接收(面向接口编程)</span><br></pre></td></tr></table></figure><p><font color=#50b7c1>java.util.concurrent.ExecutorService:线程池接口</font></p><ul><li>用来从线程池中获取线程,调用start方法,执行线程任务<pre><code>submit(Runnable task) 提交一个 Runnable 任务用于执行</code></pre></li><li>关闭/销毁线程池的方法:通常不推荐这么做，一旦销毁了进程池，后续就不能再次获取进程了<pre><code>void shutdown()</code></pre></li></ul><p>线程池的使用步骤:</p><ol><li>使用线程池的工厂类Executors里边提供的静态方法newFixedThreadPool生产一个指定线程数量的线程池</li><li>创建一个类,实现Runnable接口,重写run方法,设置线程任务</li><li>调用ExecutorService中的方法submit,传递线程任务(实现类),开启线程,执行run方法</li><li>调用ExecutorService中的方法shutdown销毁线程池(不建议执行)</li></ol><p>举例说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.使用线程池的工厂类Executors里边提供的静态方法newFixedThreadPool生产一个指定线程数量的线程池</span></span><br><span class="line">        ExecutorService es = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//3.调用ExecutorService中的方法submit,传递线程任务(实现类),开启线程,执行run方法</span></span><br><span class="line">        es.submit(<span class="keyword">new</span> RunnableImpl());<span class="comment">//pool-1-thread-1创建了一个新的线程执行</span></span><br><span class="line">        <span class="comment">//线程池会一直开启,使用完了线程,会自动把线程归还给线程池,线程可以继续使用</span></span><br><span class="line">        es.submit(<span class="keyword">new</span> RunnableImpl());<span class="comment">//pool-1-thread-1创建了一个新的线程执行</span></span><br><span class="line">        es.submit(<span class="keyword">new</span> RunnableImpl());<span class="comment">//pool-1-thread-2创建了一个新的线程执行</span></span><br><span class="line">        es.submit(<span class="keyword">new</span> RunnableImpl());<span class="comment">//pool-1-thread-2创建了一个新的线程执行</span></span><br><span class="line">        es.submit(<span class="keyword">new</span> RunnableImpl());<span class="comment">//pool-1-thread-2创建了一个新的线程执行</span></span><br><span class="line">        System.out.println(<span class="string">"这是主线程"</span>); <span class="comment">// 优先运行主线程</span></span><br><span class="line">        <span class="comment">//4.调用ExecutorService中的方法shutdown销毁线程池(不建议执行)</span></span><br><span class="line">        es.shutdown();</span><br><span class="line"></span><br><span class="line">        es.submit(<span class="keyword">new</span> RunnableImpl());<span class="comment">//抛异常,线程池都没有了,就不能获取线程了</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2.创建一个类,实现Runnable接口,重写run方法,设置线程任务</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RunnableImpl</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"：创建了一个新的线程执行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PS:java的线程，进程与python的线程，进程类似。</p><ol><li>对于Python：进程对象的join方法使得主进程在等待子进程运行完毕之后，再运行下一行代码( 而不是主进程先运行代码，等待子进程运行结束 )；而python的线程之间没有先后之分，主线程需要等待子线程全部运行结束后,才能释放掉子线程所占用的资源。主线程代表了一个进程的生命周期,而一个进程一定要等到内部包含的所有线程都运行结束后,才能释放资源</li><li>python的 join 会卡住主线程，并让当前已经 start 的子线程继续运行，直到调用.join的这个线程运行完毕</li><li>对于Java：线程的join方法优先运行子线程，主线程卡在原地，子线程结束后，运行主线程后面的代码，即join就是指等待该线程结束，然后才继续往下执行自身线程</li><li>Java的线程池是不会自动关闭的，若没有shutdown()方法，则进程池文件会一直运行下去</li></ol><h3 id="3-Maven基础"><a href="#3-Maven基础" class="headerlink" title="3.Maven基础"></a>3.Maven基础</h3><p>Maven就是是专门为Java项目打造的管理和构建工具，它的主要功能有：</p><ul><li>提供了一套标准化的项目结构；</li><li>提供了一套标准化的构建流程（编译，测试，打包，发布……）；</li><li>提供了一套依赖管理机制。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">a-maven-project</span><br><span class="line">├── pom.xml</span><br><span class="line">├── src</span><br><span class="line">│   ├── main</span><br><span class="line">│   │   ├── java</span><br><span class="line">│   │   └── resources</span><br><span class="line">│   └── test</span><br><span class="line">│       ├── java</span><br><span class="line">│       └── resources</span><br><span class="line">└── target</span><br><span class="line"></span><br><span class="line">Ps:</span><br><span class="line">1.main目录用来存放Java源代码，而test目录用来存放Java测试代码</span><br><span class="line">2.resources用来存放配置文件，资源文件（图片，js，css等等）</span><br><span class="line">3.pom.xml项目描述文件：groupId类似于Java的包名，artifact类似于Java的类名，version代表版本号</span><br><span class="line">4.target 存放所有编译、打包生成的文件</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-lambda表达式"><a href="#4-lambda表达式" class="headerlink" title="4.lambda表达式"></a>4.lambda表达式</h3><p>Lambda表达式的标准格式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">由三部分组成:</span><br><span class="line">    a.一些参数</span><br><span class="line">    b.一个箭头</span><br><span class="line">    c.一段代码</span><br><span class="line">格式:</span><br><span class="line">    (参数列表) -&gt; &#123;一些重写方法的代码&#125;;</span><br><span class="line">解释说明格式:</span><br><span class="line">    ():接口中抽象方法的参数列表,没有参数,就空着;有参数就写出参数,多个参数使用逗号分隔</span><br><span class="line">    -&gt;:传递的意思,把参数传递给方法体&#123;&#125;</span><br><span class="line">    &#123;&#125;:重写接口的抽象方法的方法体</span><br></pre></td></tr></table></figure><p>案例Ⅰ：lambda表达式，实现多线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用匿名内部类的方式,实现多线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">" 新线程创建了"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用Lambda表达式,实现多线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">" 新线程创建了"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//优化省略Lambda</span></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;System.out.println(Thread.currentThread().getName()+<span class="string">" 新线程创建了"</span>)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>案例Ⅱ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用invokeCook方法,参数是Cook接口,传递Cook接口的匿名内部类对象</span></span><br><span class="line">        invokeCook(<span class="keyword">new</span> Cook() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeFood</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"吃饭了"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用Lambda表达式,简化匿名内部类的书写</span></span><br><span class="line">        invokeCook(()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">"吃饭了"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//优化省略Lambda</span></span><br><span class="line">        invokeCook(()-&gt; System.out.println(<span class="string">"吃饭了"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法,参数传递Cook接口,方法内部调用Cook接口中的方法makeFood</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">invokeCook</span><span class="params">(Cook cook)</span></span>&#123;</span><br><span class="line">        cook.makeFood();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定一个厨子Cook接口，内含唯一的抽象方法makeFood</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Cook</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义无参数无返回值的方法makeFood</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">makeFood</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><a href="https://www.cnblogs.com/shijiaoyun/p/5882285.html" target="_blank" rel="noopener">Maven 与 IntelliJ IDEA 的完美结合</a></li><li><a href="https://blog.csdn.net/weixin_38310965/article/details/80392767?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">java 使用idea将工程打成jar并创建成exe文件类型执行</a></li><li><a href="https://blog.csdn.net/sinat_29214327/article/details/80686992?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">Python 进程与子进程，线程与子线程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery，Vue，js对当前DOM对象（this,event.target）的探讨</title>
      <link href="/2020/02/20/%E5%85%B3%E4%BA%8E$event%E7%9A%84%E6%8E%A2%E8%AE%A8/"/>
      <url>/2020/02/20/%E5%85%B3%E4%BA%8E$event%E7%9A%84%E6%8E%A2%E8%AE%A8/</url>
      
        <content type="html"><![CDATA[<p><strong>本章内容：</strong><br>关于jQuery与Vue对当前操作的DOM元素选择的探讨，如jQuery的$(event.target)与Vue的$event</p><a id="more"></a><h3 id="1-jQuery（基于js）的当前DOM对象的选择"><a href="#1-jQuery（基于js）的当前DOM对象的选择" class="headerlink" title="1.jQuery（基于js）的当前DOM对象的选择"></a>1.jQuery（基于js）的当前DOM对象的选择</h3><p>this与<a href="https://www.runoob.com/jquery/jq-event-target.html" target="_blank" rel="noopener">event.target</a>的区别：均表示当前事件对象</p><ol><li>js中事件是会冒泡的，所以this是可以变化的，但event.target不会变化，它永远指向触发事件的DOM元素本身(表示是什么元素来触发事件)；</li><li>this和event.target都是dom对象，使用jQuery中的方法可以将他们转换为jquery对象：$(this)和$(event.target).</li><li>js中事件是会冒泡的，所以this是可以变化的，但event.target不会变化，它永远是直接接受事件的目标DOM元素</li></ol><br><hr>我们来看一个HTML实例来说明什么是js事件的冒泡<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>js事件冒泡<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">body * &#123;</span><br><span class="line">border: 1px solid deeppink;</span><br><span class="line">margin-top: 10px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onclick</span>=<span class="string">"alert('form')"</span>&gt;</span>FORM</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"alert('div')"</span>&gt;</span>DIV</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">onclick</span>=<span class="string">"alert('p')"</span>&gt;</span>P<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>我们开始点击最内层的P标签：首先&lt;p&gt;标签上面的“响应函数”被执行了，浏览器弹出“警告框p”，接下来&lt;div&gt;元素上面的“响应函数”也被执行了，又弹出了一次“警告框”，接着&lt;form&gt;元素上面的“响应函数”也被执行了…… </li><li>我们再点击中间层的div标签：&lt;div&gt;元素上面的“响应函数”被执行了，弹出了一次“警告框”，接着&lt;form&gt;元素上面的“响应函数”也被执行了……</li><li>最后再点击最上层的form标签：&lt;form&gt;元素上面的“响应函数”被执行了，弹出来一次“警告框”<br><fancybox><img src="https://img-blog.csdnimg.cn/20190420212833574.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE5NzgyMDE5,size_16,color_FFFFFF,t_70" alt=""></fancybox></li></ol><p>接下来我们在深入思考一下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>js的event.target<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body * &#123;</span><br><span class="line">            margin: 10px;</span><br><span class="line">            border: 1px solid blue;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">A click shows both <span class="tag">&lt;<span class="name">code</span>&gt;</span>event.target<span class="tag">&lt;/<span class="name">code</span>&gt;</span> and <span class="tag">&lt;<span class="name">code</span>&gt;</span>this<span class="tag">&lt;/<span class="name">code</span>&gt;</span> to compare:</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"form"</span> <span class="attr">onclick</span>=<span class="string">"maoPao()"</span>&gt;</span>FORM</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"maoPao();"</span>&gt;</span>DIV</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">onclick</span>=<span class="string">"maoPao()"</span>&gt;</span>P<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">placeholder</span>=<span class="string">"用户名"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"show"</span>&gt;</span>此处展示event.target事件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"showThis"</span>&gt;</span>此处展示this事件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"showName"</span>&gt;</span>此处展示form表单输入的数据<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">maoPao</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">"show"</span>).innerHTML = <span class="string">"event.target 当前触发的是："</span>+event.target.tagName+<span class="string">"标签"</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">"showThis"</span>).innerHTML = <span class="string">"this 当前触发的是："</span>+<span class="keyword">this</span>+<span class="string">"标签"</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// .value 获取表单数据</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">"showName"</span>).innerHTML = <span class="built_in">document</span>.getElementById(<span class="string">"username"</span>).value;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-Vue对于当前DOM对象的选择"><a href="#2-Vue对于当前DOM对象的选择" class="headerlink" title="2.Vue对于当前DOM对象的选择"></a>2.Vue对于当前DOM对象的选择</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click = “clickfun($event)”&gt;点击&lt;/button&gt;</span><br><span class="line">methods: &#123;</span><br><span class="line">    clickfun(e) &#123;</span><br><span class="line">    // e.target 是你当前点击的元素</span><br><span class="line">    // e.currentTarget 是你绑定事件的元素</span><br><span class="line">        #获得点击元素的前一个元素</span><br><span class="line">        e.currentTarget.previousElementSibling.innerHTML</span><br><span class="line">        #获得点击元素的第一个子元素</span><br><span class="line">        e.currentTarget.firstElementChild</span><br><span class="line">        # 获得点击元素的下一个元素</span><br><span class="line">        e.currentTarget.nextElementSibling</span><br><span class="line">        # 获得点击元素中id为string的元素</span><br><span class="line">        e.currentTarget.getElementById(&quot;string&quot;)</span><br><span class="line">        # 获得点击元素的string属性</span><br><span class="line">        e.currentTarget.getAttributeNode(&apos;string&apos;)</span><br><span class="line">        # 获得点击元素的父级元素</span><br><span class="line">        e.currentTarget.parentElement</span><br><span class="line">        # 获得点击元素的前一个元素的第一个子元素的HTML值</span><br><span class="line">        e.currentTarget.previousElementSibling.firstElementChild.innerHTML</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-阻止冒泡事件"><a href="#3-阻止冒泡事件" class="headerlink" title="3.阻止冒泡事件"></a>3.阻止冒泡事件</h3><p>js冒泡和捕获是事件的两种行为，所以可以使用event.stopPropagation()起到阻止捕获和冒泡阶段中当前事件的进一步传播。使用event.preventDefault()可以取消默认事件。</p><p><strong>w3c的方法是e.stopPropagation()，IE则是使用e.cancelBubble = true</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.event? <span class="built_in">window</span>.event.cancelBubble = <span class="literal">true</span> : e.stopPropagation();</span><br></pre></td></tr></table></figure><p>所以阻止捕获冒泡事件可以使用：</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://blog.csdn.net/weixin_42931825/article/details/100015613" target="_blank" rel="noopener">【vue学习笔记：事件中的$event对象作用】</a></li><li><a href="https://blog.csdn.net/qq_19782019/article/details/89409794" target="_blank" rel="noopener">JavaScript之”冒泡“和“捕捉”详解（全网精品博文）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java（五）：Java面向对象的补充</title>
      <link href="/2020/02/19/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%A1%A5%E5%85%85%EF%BC%88%E4%BA%94%EF%BC%89/"/>
      <url>/2020/02/19/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%A1%A5%E5%85%85%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><strong>本章内容：</strong></p><blockquote><p>1.如何创建一个标准的类<br>2.API的概述与使用<br>3.对象型数组<br>4.面向对象的三大特性<br>5.抽象类和抽象方法补充<br>6.接口<br>7.多态性的补充<br>8.final关键字</p></blockquote><a id="more"></a><h3 id="1-如何创建一个标准的类"><a href="#1-如何创建一个标准的类" class="headerlink" title="1.如何创建一个标准的类"></a>1.如何创建一个标准的类</h3><p>一个标准的类通常要拥有下面四个部分：</p><ol><li>所有的成员变量都要使用private关键字修饰</li><li>为每一个成员变量编写一堆Getter/Setter方法</li><li>编写一个无参数的构造方法</li><li>编写一个全参数的构造方法</li></ol><p>举一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bytedance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pokers</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 实例对象创建方式一：</span></span><br><span class="line">        Woman w1 = <span class="keyword">new</span> Woman();</span><br><span class="line">        w1.setName(<span class="string">"迪丽热巴"</span>);</span><br><span class="line">        w1.setAge(<span class="number">18</span>);</span><br><span class="line">        System.out.println(<span class="string">"姓名："</span>+w1.getName()+<span class="string">",年龄："</span>+w1.getAge());</span><br><span class="line">        System.out.println(<span class="string">"========"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实例对象的创建方式二：（推荐，很推荐）</span></span><br><span class="line">        Woman w2 = <span class="keyword">new</span> Woman(<span class="string">"古力娜扎"</span>,<span class="number">19</span>);</span><br><span class="line">        System.out.println(<span class="string">"姓名："</span>+w2.getName()+<span class="string">",年龄："</span>+w2.getAge());</span><br><span class="line">        System.out.println(<span class="string">"========"</span>);</span><br><span class="line">        <span class="comment">// 此时Setter方法也很有用，比如我们想改写一下年纪</span></span><br><span class="line">        w2.setAge(<span class="number">20</span>);</span><br><span class="line">        System.out.println(<span class="string">"修改年龄后~"</span>+<span class="string">"姓名："</span>+w2.getName()+<span class="string">",年龄："</span>+w2.getAge());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Woman</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参数的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Woman</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 全参数的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Woman</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br>姓名：迪丽热巴,年龄：18<br>========<br>姓名：古力娜扎,年龄：19<br>========<br>修改年龄后~姓名：古力娜扎,年龄：20</p><h3 id="2-API的概述与使用"><a href="#2-API的概述与使用" class="headerlink" title="2. API的概述与使用"></a>2. API的概述与使用</h3><p>导包：import 包路径.类名称<br><font color=#f05b72>只有Java.lang包内的内容不需要导入，其余的API都要手动导入</font></p><h3 id="3-对象型数组"><a href="#3-对象型数组" class="headerlink" title="3.对象型数组"></a>3.对象型数组</h3><p>对象型数组这一小节不仅能够温习如何创建一个最标准的类，也复习了有关于数组（数组长度不可改变）的一些操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bytedance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">objectArray</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个对象数组，即包含对象的数组</span></span><br><span class="line">        People[] people = <span class="keyword">new</span> People[<span class="number">3</span>];</span><br><span class="line">        <span class="comment">// 创建三个People对象实例</span></span><br><span class="line">        People p1 = <span class="keyword">new</span> People(<span class="string">"迪丽热巴"</span>, <span class="number">18</span>);</span><br><span class="line">        People p2 = <span class="keyword">new</span> People(<span class="string">"古力娜扎"</span>, <span class="number">28</span>);</span><br><span class="line">        People p3 = <span class="keyword">new</span> People(<span class="string">"马尔扎哈"</span>, <span class="number">688</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将三个people对象赋予到数组中</span></span><br><span class="line">        people[<span class="number">0</span>] = p1;</span><br><span class="line">        people[<span class="number">1</span>] = p2;</span><br><span class="line">        people[<span class="number">2</span>] = p3;</span><br><span class="line"></span><br><span class="line">        System.out.println(people[<span class="number">0</span>]);  <span class="comment">//  打印地址值：com.bytedance.People@2d98a335</span></span><br><span class="line">        System.out.println(people[<span class="number">1</span>]);  <span class="comment">// 打印地址值：com.bytedance.People@16b98e56</span></span><br><span class="line">        <span class="comment">// 调用对象的方法</span></span><br><span class="line">        people[<span class="number">0</span>].sayHello(<span class="string">"陈浩东"</span>);</span><br><span class="line">        <span class="comment">// 大家好，我叫迪丽热巴,今年18岁了，喜欢陈浩东</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最标准的类的创建方式如下所示：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">People</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 全参构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">People</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String lover)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"大家好，我叫"</span> + <span class="keyword">this</span>.name + <span class="string">",今年"</span> + <span class="keyword">this</span>.age + <span class="string">"岁了，喜欢"</span> + lover);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-面向对象的三大特性"><a href="#4-面向对象的三大特性" class="headerlink" title="4.面向对象的三大特性"></a>4.面向对象的三大特性</h3><p><strong>面向对象的三大特性：继承，封装，多态</strong><br>封装性在Java当中的体现：</p><ol><li>方法（理解成python中的函数）就是一种封装</li><li>关键字private也是一种封装</li></ol><p>一旦使用了private进行修饰，只能在本类中随意访问，但是，超出了本类范围就不能直接访问（间接访问private成员变量，就是定义一对getter，setter方法）</p><ul><li>对于Getter来说，不能有参数，返回值类型与成员变量对应</li><li>对于Setter来说，不能有返回值，参数类型和成员变量对应</li><li>对于基本类型当中的Boolean值，Getter方法一定要携程isXXXX的形式，而SetXXX规则不变</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person ming = <span class="keyword">new</span> Person();</span><br><span class="line">        ming.setName(<span class="string">"Xiao Ming"</span>); <span class="comment">// 设置name</span></span><br><span class="line">        ming.setAge(<span class="number">12</span>); <span class="comment">// 设置age</span></span><br><span class="line">        System.out.println(ming.getName() + <span class="string">", "</span> + ming.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 对参数name进行校验</span></span><br><span class="line">        <span class="keyword">if</span> (name == <span class="keyword">null</span> || name.isBlank()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"invalid name"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">this</span>.name = name.strip(); <span class="comment">// 去掉首尾空格</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 对参数age进行校验</span></span><br><span class="line">        <span class="keyword">if</span> (age &lt; <span class="number">0</span> || age &gt; <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"invalid age value"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-抽象类和抽象方法补充"><a href="#5-抽象类和抽象方法补充" class="headerlink" title="5.抽象类和抽象方法补充"></a>5.抽象类和抽象方法补充</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;如果父类当中的方法不确定能实现什么具体的方法，那么这应该就是一种抽象方法（通俗的理解，比如求图形的面积计算方法，动物吃东西的方法。这里我们具体确定是什么图形，是三角形？还是正方形？，是比较抽象的一类概念）</p><p><strong>抽象方法：就是加上abstract关键字，然后去掉大括号，直接分号结束<br>抽象类：抽象方法所在的类，必须是抽象类才行。在class之前写上abstract即可</strong></p><p>如何使用抽象类和抽象方法：</p><ol><li>不能直接创建new抽象对象</li><li>必须用一个子类来继承抽象父类</li><li>子类必须覆盖重写抽象父类当中的所有抽象方法（即子类去掉抽象方法的abstract关键字，然后补上方法体和大括号），否追编译无法通过</li><li>创建子类对象进行使用</li><li>抽象类中，可以有构造方法，是供子类创建对象时，初始化父类成员使用的</li></ol><h3 id="6-接口"><a href="#6-接口" class="headerlink" title="6.接口"></a>6.接口</h3><p>接口就是一种公共的规范标准。只要符合标准规范，就可以大家通用（比如插座，U盘）。<br>接口是一种引用数据类型，最重要的内容就是其中的抽象方法。</p><h4 id="如何定义一个接口的格式："><a href="#如何定义一个接口的格式：" class="headerlink" title="如何定义一个接口的格式："></a>如何定义一个接口的格式：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface 接口名&#123;</span><br><span class="line">    // 接口内容</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接口内容"><a href="#接口内容" class="headerlink" title="接口内容"></a>接口内容</h4><p><strong>在任何版本中，接口都能定义抽象方法</strong></p><blockquote><p><strong>2.1 常量</strong></p></blockquote><p>接口当中也可以定义“成员变量”，但必须使用<code>public static final</code>三个关键字进行修饰。从效果上看，<strong>这就是接口的常量</strong><br>格式：<br>public static final 数据类型 常量名称 = 数据值 </p><p>PS：</p><ul><li>一旦使用final关键字，就说明不可变</li><li>接口当中的常量必须赋值</li><li>接口当中的常量的命名规范：使用完全大写的字母，用下划线进行分隔</li><li>调用接口名的常量方法：接口名.常量名</li></ul><br><blockquote><p>2.2 抽象方法</p></blockquote><p>接口中最重要的时<strong>抽象方法</strong><br>格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[public] [abstract] 返回值类型 方法名（参数）&#123;方法体&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：实现类必须覆盖重写接口的所有的抽象方法，除非实现类是抽象的</strong></p><br><blockquote><p><strong>2.3 默认方法（接口中的默认方法，可以解决接口升级的问题）</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">public default 返回值类型 方法名（参数列表）&#123;</span><br><span class="line">    方法体 // 默认方法里面可以有方法体</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">使用：</span><br><span class="line">1.接口的默认方法，可以通过接口实现类对象，直接调用</span><br><span class="line">2.接口的默认方法，也可以被接口实现类进行覆盖重写</span><br></pre></td></tr></table></figure><br><blockquote><p><strong>2.4 静态方法</strong></p></blockquote><p>创建格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">public static 返回值类型 方法名称(参数列表)&#123;</span><br><span class="line">    方法体</span><br><span class="line">&#125;</span><br><span class="line">tips：就是将abstract 或者default换成static即可，带上方法体。</span><br></pre></td></tr></table></figure><p>注意：<br>1.<strong>不能通过实现类的的对象来调用接口当中的静态方法</strong><br>2.正确调用方式：接口名.静态方法名（参数）。与之前学习的static静态方法的调用方式（类名称.静态方法）一样</p><br><blockquote><p><strong>2.5 私有方法</strong></p></blockquote><p>问题描述：我们需要一个共有方法，用来解决两个默认方法之间重复代码的问题。但是这个共有方法不应该让实现类使用，应该是私有化的</p><p>解决方案：从java9开始，接口当中允许定义私有方法<br>Ⅰ. 普通私有方法，解决多个默认方法之间重复代码问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private 返回值类型 方法名（参数列表）&#123;</span><br><span class="line">    方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Ⅱ. 静态私有方法，解决多个静态方法之间的重复代码问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private static 返回值类型 方法名（参数列表）&#123;</span><br><span class="line">    方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接口使用步骤"><a href="#接口使用步骤" class="headerlink" title="接口使用步骤"></a>接口使用步骤</h4><ul><li>接口不能直接使用，必须有一个“实现类”来“实现”该接口</li></ul><p><font color=#d93a49 >格式：public class <strong>实现类名</strong> implements 接口名称{…}</font></p><ul><li><p>接口的实现类必须重写接口中所有的抽象方法（即去掉abstract关键字，加上方法体和大括号）</p></li><li><p>创建实现类的对象，进行使用（即直接 new 实现类的对象，才能使用）。</p></li><li><p>接口是没有静态代码块或者构造方法的</p></li><li><p>Java的类只能单继承，但接口可以implement多个接口<br>接口的小结：<br><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/interfaceasd.jpg" alt=""></fancybox></p></li></ul><h3 id="7-多态性的补充"><a href="#7-多态性的补充" class="headerlink" title="7.多态性的补充"></a>7.多态性的补充</h3><p>代码当中体现多态性，其实就是一句话：父类引用指向子类对象（extends，implement是体现多态性的前提）</p><p>格式：父类引用指向子类对象（<strong>即以左父右子</strong>）<br>父类名称. 对象名 = new 子类名称();<br>或者：<br>接口名称. 对象名 = new 实现类名称()</p><p>在多态的代码，父类引用指向子类对象是，即 <code>Fu obj = new Zi()</code> 中：</p><ol><li><p>成员方法的访问规则： 看new的是谁（即看右边），就优先用谁，没有就向上一级找</p></li><li><p>成员变量的访问规则：<br>Ⅰ. 直接通过对象名称访问成员变量，看等号左边是谁，优先用谁<br>Ⅱ. 间接通过成员方法访问成员变量：看该方法属于谁（假如子类覆盖重写了父类，则通过访问子类调用成员方法来访问成员变量），就优先用谁</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Alibaba;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mult</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Fu1 fu1 = <span class="keyword">new</span> Zi1();</span><br><span class="line">        System.out.println(fu1.num); <span class="comment">// 10:通过对象名称访问成员变量</span></span><br><span class="line">        fu1.showNum();  <span class="comment">// 20</span></span><br><span class="line">        System.out.println(<span class="string">"===="</span>);</span><br><span class="line">        <span class="comment">// 开始覆盖重写父类</span></span><br><span class="line">        fu1.showNum(); <span class="comment">// 20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu1</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi1</span> <span class="keyword">extends</span> <span class="title">Fu1</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">20</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="对象的向上转型"><a href="#对象的向上转型" class="headerlink" title="对象的向上转型"></a>对象的向上转型</h4><ol><li>对象的向上转型，其实就是多态的写法；</li></ol><p>格式：父类名称 对象名 = new 子类名称()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Animal animal = new Cat();</span><br><span class="line">创建了一只猫，当作中午来看，是没问题的。</span><br></pre></td></tr></table></figure><p>含义：右侧创建一个子类对象，把它当作父类来看待<br>注意事项；向上转型一定是安全的，从小范围转向了大范围。从小范围的猫，向上转换成为了范围更大的动物</p><h4 id="对象的向下转型"><a href="#对象的向下转型" class="headerlink" title="对象的向下转型"></a>对象的向下转型</h4><ol start="2"><li>对象的向下转型，其实是一个【还原】的动作</li></ol><p><strong>若想要实现向下转型的前提是有一个向上转型成功的对象名</strong></p><p>格式：子类名称 对象名 = （子类名称） <strong>父类对象名</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Animal animal = new Cat(); //向上转型成功，将本来是猫，向上转型成为动物</span><br><span class="line">Cat cat = (Cat) animal; // 本来是猫，已经被当做动物了，还原回来成为了原本的猫</span><br></pre></td></tr></table></figure><p>注意事项；<br>Ⅰ. 必须保证对象本来创建的时候，就是猫，才能向下转型成为猫<br>Ⅱ. 如果对象创建的时候本来不是猫。现在非要向下转型成为猫，就会报错(ClassCastException)</p><ol start="3"><li>用instanceof关键字判断一个父类的引用对象，本来是什么子类？</li></ol><p>格式：对象名 instanceof 类名称</p><p>完整的源代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceofDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 多态写法；新建一只猫</span></span><br><span class="line">        Animal animal = <span class="keyword">new</span> Cat();</span><br><span class="line">        animal.eat();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果希望调用子类的特有方法，需要向下转型</span></span><br><span class="line">        <span class="keyword">if</span>(animal <span class="keyword">instanceof</span> Dog)&#123; <span class="comment">// 判断父类引用animal是不是Dog</span></span><br><span class="line">            Dog dog = (Dog) animal;</span><br><span class="line">            dog.watchHOuse();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(animal <span class="keyword">instanceof</span> Cat)&#123;</span><br><span class="line">            Cat cat = (Cat) animal;</span><br><span class="line">            cat.catchMOnth();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 调用getMeAPet函数:传参为Dog()子类</span></span><br><span class="line">    getMeAPet(<span class="keyword">new</span> Dog());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getMeAPet</span><span class="params">(Animal animal)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(animal <span class="keyword">instanceof</span> Dog)&#123; <span class="comment">// 判断父类引用animal是不是Dog</span></span><br><span class="line">            Dog dog = (Dog) animal;</span><br><span class="line">            dog.watchHOuse();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(animal <span class="keyword">instanceof</span> Cat)&#123;</span><br><span class="line">            Cat cat = (Cat) animal;</span><br><span class="line">            cat.catchMouse();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建抽象父类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建Cat子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Systeam.out.println(<span class="string">"猫吃鱼"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">catchMouse</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Systeam.out.println(<span class="string">"猫抓老鼠吃"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建Dog子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dog</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Systeam.out.println(<span class="string">"狗吃骨头"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">watchHouse</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Systeam.out.println(<span class="string">"狗正在看家"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><fancybox><img src="https://d47jbcq60tnr6.cloudfront.net/2020315/13732-1r8jiqw.reuc.JPG" alt=""></fancybox></p><h3 id="8-final关键字"><a href="#8-final关键字" class="headerlink" title="8.final关键字"></a>8.final关键字</h3><p>final关键字代表最终，不可改变，常见的四种方法：</p><ul><li>可以用来修饰一个类</li></ul><p><strong>当final关键字用来修饰一个类时（表示当前这个类不能有任何子类，即无法继承）</strong>，格式：<br>public final class 类名称{属性和方法}</p><ul><li>可以用来修饰一个方法</li></ul><p><strong>当final关键字修饰一个方法时，这个方法就是最终方法，也无法被覆盖重写</strong>，格式：<br>修饰符 final 返回值类型 方法名（参数列表）{方法体}</p><ul><li>还可以修饰一个局部变量</li></ul><p>一般局部变量：int age = 18; int age = 20(对于普通变量来说可以任意重新赋值)<br>final最终变量：一旦使用final用来修饰局部变量，那么这个变量就无法更改：final int age = 18</p><ul><li>还可以修饰一个成员变量</li></ul><p>对于成员变量来说，如果使用final关键字修饰，那么这个变量也照样不可变<br>由于成员变量具有默认值，所以采用final之后必须要手动赋值，不会再给默认值<br>对于final的成员变量，要么使用直接赋值，要么通过构造方法赋值，二者选其一<br>必须保证类当中的所有重载的构造方法，都最终会对final的成员变量进行赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">当使用构造方法时，无参构造也要赋值，且因为final特性，构造函数就不存在Setter方法了</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String name; <span class="comment">/* = 鹿晗*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">name = <span class="string">"关晓彤"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">gerName</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PS：<br>对于类和方法来说，abstract与final关键字不能同时使用，因为自相矛盾</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java（四）：Java核心类</title>
      <link href="/2020/02/14/Java%E6%A0%B8%E5%BF%83%E7%B1%BB(%E5%9B%9B)/"/>
      <url>/2020/02/14/Java%E6%A0%B8%E5%BF%83%E7%B1%BB(%E5%9B%9B)/</url>
      
        <content type="html"><![CDATA[<p><strong>本章内容：</strong></p><blockquote><p>1.字符串与编码<br>2.定义常量<br>3.enum枚举类型<br>4.常用工具类<br>5.异常处理机制<br>6.Java集合<br>7.IO(File类的操作大全)<br>8.InputStream&amp;OutputStream<br>9.日期与时间</p></blockquote><a id="more"></a><h3 id="1-字符串与编码"><a href="#1-字符串与编码" class="headerlink" title="1.字符串与编码"></a>1.字符串与编码</h3><p><strong>String</strong>，<a href="https://ahrilove.top/2019/11/20/Javascript%E7%AF%87%E7%AB%A0%E4%B8%80/">【与js，python的字符串操作对比】</a></p><p>在Java中，String是一个引用类型，它本身也是一个class。但是，Java编译器对String有特殊处理，即可以直接用”…”来表示一个字符串。</p><ol><li><p>字符串比较：比较字符串的内容是否相同。必须使用<code>equals()</code>方法而不能用<code>==</code><br>str1.equals(str2):判断两个字符串的是否相同</p></li><li><p>字符索引查找<br>字符串.indexOf(“目标字符”)</p></li><li><p>判断以什么开头<br>字符串.startsWith(“目标字符串”):判断是否以目标字符串开头<br>字符串.endWith(“目标字符串”):判断是否以目标目标字符串结尾</p></li><li><p>字符串的截取<br>字符串.substring(起始索引，结束索引)：截取目标字符串，索引从0开始</p></li><li><p>去掉首尾空白字符<br>字符串.trim()<br>字符串.strip():也可以移除字符串首尾空白字符。它和trim()不同的是，类似中文的空格字符<code>\u3000</code>也会被移除</p></li><li><p>替换字符串<br>字符串.replace(a,b):用字符b替换字符a</p></li><li><p>拼接字符串<br>拼接字符串使用静态方法<code>String.join</code>,它用指定的字符串连接字符串数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String arr = &#123;&quot;A&quot;, &quot;B&quot;, &quot;C&quot;&#125;;</span><br><span class="line">String s = String.join(&quot;***&quot;, arr); // &quot;A***B***C&quot;</span><br></pre></td></tr></table></figure></li><li><p>基本类型与字符串类型之间的相互转换</p></li></ol><p><strong>要把任意基本类型或引用类型转换为字符串，可以使用静态方法String.valueOf()</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String.valueOf(123); // &quot;123&quot;</span><br><span class="line">String.valueOf(45.67); // &quot;45.67&quot;</span><br><span class="line">String.valueOf(true); // &quot;true&quot;</span><br><span class="line">String.valueOf(new Object()); // 类似java.lang.Object@636be97c</span><br></pre></td></tr></table></figure><p><strong>要把字符串转换为其他类型，就需要根据情况。例如，把字符串转换为int类型</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int n1 = Integer.parseInt(&quot;123&quot;); // 123</span><br><span class="line">int n2 = Integer.parseInt(&quot;ff&quot;, 16); // 按十六进制转换，255</span><br></pre></td></tr></table></figure><p><strong>把字符串转换为boolean类型：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">boolean b1 = Boolean.parseBoolean(&quot;true&quot;); // true</span><br><span class="line">boolean b2 = Boolean.parseBoolean(&quot;FALSE&quot;); // false</span><br></pre></td></tr></table></figure><p><strong>把字符串转换为其它基本数据类型</strong><br>借用包装类的功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int n1 = Integer.parseInt(&quot;123&quot;); // 123</span><br><span class="line">boolean b1 = Boolean.parseBoolean(&quot;true&quot;); // true</span><br><span class="line">double d1 = Double.parseDouble(&quot;3.1415927&quot;);  // 3.1415927</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ol start="9"><li><p>是否包含子字符串<br>字符串.contains(“目标字符串”)：返回结果true 或者 false</p></li><li><p>分割字符串<br>字符串.split(“指定字符串”)=》数组格式</p></li></ol><p><strong>按指定字符（串）或正则去分割某个字符串，结果以字符串数组形式返回</strong>，记住：返回结果是数组，数组无法直接打印</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">"hello world java!!!"</span>;</span><br><span class="line">String[] aa = s.split(<span class="string">" "</span>);</span><br><span class="line">System.out.println(aa[<span class="number">2</span>]);</span><br></pre></td></tr></table></figure><h4 id="包装类型："><a href="#包装类型：" class="headerlink" title="包装类型："></a>包装类型：</h4><p>基本类型===&gt;    对应的引用类型<br>boolean    ===&gt; java.lang.Boolean<br>byte    ===&gt; java.lang.Byte<br>short    ===&gt; java.lang.Short<br>int        ===&gt; java.lang.Integer<br>long    ===&gt; java.lang.Long<br>float    ===&gt; java.lang.Float<br>double    ===&gt; java.lang.Double<br>char    ===&gt; java.lang.Character</p><p>拓：</p><ul><li><code>public static byte parseByte(String s)</code>：将字符串参数转换为对应的byte基本类型。</li><li><code>public static short parseShort(String s)</code>：将字符串参数转换为对应的short基本类型。</li><li><code>public static int parseInt(String s)</code>：将字符串参数转换为对应的int基本类型。</li><li><code>public static long parseLong(String s)</code>：将字符串参数转换为对应的long基本类型。</li><li><code>public static float parseFloat(String s)</code>：将字符串参数转换为对应的float基本类型。</li><li><code>public static double parseDouble(String s)</code>：将字符串参数转换为对应的double基本类型。</li><li><code>public static boolean parseBoolean(String s)</code>：将字符串参数转换为对应的boolean基本类型。</li></ul><h3 id="2-定义常量"><a href="#2-定义常量" class="headerlink" title="2.定义常量"></a>2.定义常量</h3><p>Java 语言使用 final 关键字来定义一个常量（常量有三种类型：静态常量、成员常量和局部常量。），其语法如下所示：<br><strong>final dataType variableName = value</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 静态常量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> PI = <span class="number">3.14</span>;</span><br><span class="line">    <span class="comment">// 声明成员常量</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> y = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 声明局部常量</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">double</span> x = <span class="number">3.3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-enum枚举类"><a href="#3-enum枚举类" class="headerlink" title="3.enum枚举类"></a>3.enum枚举类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Weekday day = Weekday.SUN;</span><br><span class="line">        <span class="keyword">if</span> (day == Weekday.SAT || day == Weekday.SUN) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Work at home!"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"Work at office!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> Weekday &#123;</span><br><span class="line">    SUN, MON, TUE, WED, THU, FRI, SAT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-常用工具类"><a href="#4-常用工具类" class="headerlink" title="4.常用工具类"></a>4.常用工具类</h3><h4 id="Math：进行数学计算"><a href="#Math：进行数学计算" class="headerlink" title="Math：进行数学计算"></a>Math：进行数学计算</h4><p>Math.abs()求绝对值<br>Math.max/min()<br>Math.pow(a,b)计算a的次方<br>Math.sqrt()计算开方<br>Math.exp()计算e的次方<br>Math.PI 数学常量PI<br>Math.E  数学常量e<br>Math.random() 生成随机[0,1)的数</p><h4 id="Random：创建伪随机数"><a href="#Random：创建伪随机数" class="headerlink" title="Random：创建伪随机数"></a>Random：创建伪随机数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 创建Random实例对象</span><br><span class="line">Random r = new Random(seed); // 种子数只是随机算法的起源数字，和生成的随机数的区间没有任何关系</span><br><span class="line">r.nextInt(); // 2071575453,每次都不一样</span><br><span class="line">r.nextInt(100); // 54,生成一个随机[0,100)的随机整数</span><br><span class="line">r.nextInt(10); // 5,生成一个[0,10)之间的int</span><br><span class="line">r.nextLong(); // 8811649292570369305,每次都不一样</span><br><span class="line">r.nextFloat(); // 0.54335...生成一个[0,1)之间的float</span><br><span class="line">r.nextDouble(); // 0.3716...生成一个[0,1)之间的double</span><br><span class="line"></span><br><span class="line">Random rand =new Random(25); // 预设种子数</span><br><span class="line">int i=rand.nextInt(100);</span><br><span class="line">System.out.println(i);</span><br></pre></td></tr></table></figure><p>初始化时25并没有起直接作用（注意：不是没有起作用）,rand.nextInt(100);中的100是随机数的上限,产生的随机数为0-100的整数,不包括100</p><p><strong>对于种子相同的Random对象，生成的随机数序列是一样的。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Random ran1 = <span class="keyword">new</span> Random(<span class="number">10</span>);</span><br><span class="line">System.out.println(<span class="string">"使用种子为10的Random对象生成[0,10)内随机整数序列: "</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    System.out.print(ran1.nextInt(<span class="number">10</span>) + <span class="string">" "</span>);</span><br><span class="line">   &#125;</span><br><span class="line">System.out.println();</span><br><span class="line">Random ran2 = <span class="keyword">new</span> Random(<span class="number">10</span>);</span><br><span class="line">System.out.println(<span class="string">"使用另一个种子为10的Random对象生成[0,10)内随机整数序列: "</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    System.out.print(ran2.nextInt(<span class="number">10</span>) + <span class="string">" "</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出结果为：</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 使用种子为10的Random对象生成[0,10)内随机整数序列:</span></span><br><span class="line"><span class="comment"> * 3 0 3 0 6 6 7 8 1 4</span></span><br><span class="line"><span class="comment"> * 使用另一个种子为10的Random对象生成[0,10)内随机整数序列:</span></span><br><span class="line"><span class="comment"> * 3 0 3 0 6 6 7 8 1 4</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="BigDecimal大数类"><a href="#BigDecimal大数类" class="headerlink" title="BigDecimal大数类"></a><a href="https://blog.csdn.net/weixin_37730482/article/details/73468042?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-6&utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-6" target="_blank" rel="noopener">BigDecimal大数类</a></h4><p><strong>float和double只能用来做科学计算或者是工程计算，在商业计算中我们要用 java.math.BigDecimal（大数类的运算效率肯定不如原生类型效率高，代价比较昂贵，需要结合具体的场景来使用）</strong><br>大数类的传入的值必须为字符串类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">BigDecimal a=new BigDecimal (&quot;4.5&quot;);</span><br><span class="line">BigDecimal b=new BigDecimal (&quot;1.5&quot;);</span><br><span class="line">a.add(b) // 6.0</span><br><span class="line">add(BigDecimal value)：加法，求两个BigDecimal类型数据的和。</span><br><span class="line">subtract(BigDecimal value)：减法，求两个BigDecimal类型数据的差。</span><br><span class="line">multiply(BigDecimal  value)：乘法，求两个BigDecimal类型数据的积。</span><br><span class="line">divide(BigDecimal divisor)：除法，求两个BigDecimal类型数据的商。</span><br><span class="line">remainder(BigDecimal divisor)：求余数，求BigDecimal类型数据除以divisor的余数。</span><br><span class="line">max(BigDecimal value)：最大数，求两个BigDecimal类型数据的最大值。</span><br><span class="line">min(BigDecimal value)：最小数，求两个BigDecimal类型数据的最小值。</span><br><span class="line">abs()：绝对值，求BigDecimal类型数据的绝对值。</span><br><span class="line">negate()：相反数，求BigDecimal类型数据的相反数。</span><br></pre></td></tr></table></figure><h3 id="5-异常处理机制"><a href="#5-异常处理机制" class="headerlink" title="5.异常处理机制"></a>5.<a href="https://blog.csdn.net/weixin_42359237/article/details/89502035" target="_blank" rel="noopener">异常处理机制</a></h3><p>在Java中，凡是可能抛出异常的语句，都可以用<code>try ... catch</code>捕获。把可能发生异常的语句放在try { … }中，然后使用catch捕获对应的Exception及其子类。</p><p>在使用try…catch捕获处理异常时需要注意：<br><strong>·</strong> 不要过度使用异常，不能使用异常处理机制来代替正常的流程控制语句<br><strong>·</strong> 异常捕获时，一定要先捕获小异常，再捕获大异常。否则小异常将无法被捕获<br><strong>·</strong> 避免出现庞大的try块<br><strong>·</strong> 避免使用catch(Exception e){}<br><strong>·</strong> 不要忽略异常</p><p>Exception类的常用的几种情况：</p><ol><li><p>IOException有：<br>EOFException文件已结束异常；<br>FileNotFoundException文件未找到异常。</p></li><li><p>RuntimeException有：<br>IndexOutOfBoundsException索引越界异常；<br>ArrayIndexOutOfBoundsException数组索引越界异常；<br>ArithmeticException算数条件异常，譬如:整数除零等；<br>NullPointerException空指针异常；<br>NegativeArraySizeException数组长度为负异常；<br>ArrayStoreException数组存储异常，当向数组中存放非数组声明类型对象时抛出；<br>SecurityException违背安全原则异常；<br>IllegalArgumentException非法参数异常；<br>ClassCastException类型强制转换异常。<br>ReflectiveOperationException有：<br>ClassNotFoundException找不到类异常；<br>NoSuchMethodException方法未找到异常；<br>NoSuchFieldException找不到属性异常。</p></li><li><p>错误类Error：<br>一般是指与虚拟机相关的问题，如系统崩溃、虚拟机错误、动态链接失败<br>等，这种错误无法恢复或不可能捕获，将导致应用程序中断。所以不应该试图使用catch块来捕捉Error和不能在throws子句中声明该方法可能抛出Error及其任何子类</p></li></ol><h4 id="多catch语句"><a href="#多catch语句" class="headerlink" title="多catch语句"></a>多catch语句</h4><p><strong>多catch语句:简单来说，多个catch语句只有一个能被执行</strong> 可以使用多个catch语句，每个catch分别捕获对应的Exception及其子类。JVM在捕获到异常后，会从上到下匹配catch语句，匹配到某个catch后，执行catch代码块，然后不再继续匹配。</p><h4 id="finally语句"><a href="#finally语句" class="headerlink" title="finally语句"></a>finally语句</h4><p>无论是否有异常发生，程序语句最终都要执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            process1();</span><br><span class="line">            process2();</span><br><span class="line">            process3();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Bad encoding"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"IO error"</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"END"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-集合"><a href="#6-集合" class="headerlink" title="6.集合"></a>6.集合</h3><blockquote><p>collection接口</p></blockquote><p><strong>Java的集合与数组都是为了处理一类数据</strong>，但Java数组也存在很大的缺陷：</p><ul><li>数组初始化后大小不可变；</li><li>数组只能按索引顺序存取。</li></ul><p>Java标准库自带的java.util包提供了集合类：Collection，它是除Map外所有其他集合类的根接口。Java的java.util包主要提供了以下三种类型的集合：</p><ul><li>List接口：一种有序列表的集合，允许存储重复的元素，具体实现的类有ArrayList集合，LinkedList集合，Vector集合；</li><li>Set接口：一种保证没有重复元素的集合，且没有索引（不能使用普通的for循环遍历集合），具体实现的类有TreeSet集合，HashSet集合，LinkedHashSet集合；</li><li>Map：一种通过键值（key-value）查找的映射表集合。</li></ul><h4 id="6-1-List接口"><a href="#6-1-List接口" class="headerlink" title="6.1 List接口"></a>6.1 List接口</h4><p>创建List：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = new ArrayList&lt;&gt;(); // 只能放入String类型</span><br><span class="line">List&lt;Integer&gt; list1 = new ArrayList&lt;&gt;(); // 只能放入Integer类型</span><br><span class="line">List&lt;Character&gt; list2 = new ArrayList&lt;&gt;(); // 只能放入Character类型</span><br><span class="line">拓展：根据给定的元素快速创建List</span><br><span class="line">List&lt;Integer&gt; list3 = List.of(1, 2, 5);</span><br></pre></td></tr></table></figure><p><strong>collection接口的List接口的共性方法</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在末尾添加一个元素：void add(E e)</span><br><span class="line">在指定索引添加一个元素：void add(int index, E e)</span><br><span class="line">删除指定索引的元素：int remove(int index)</span><br><span class="line">删除某个元素：int remove(Object e)</span><br><span class="line">获取指定索引的元素：E get(int index)</span><br><span class="line">获取链表大小（包含元素的个数）：int size()</span><br></pre></td></tr></table></figure><p>List接口特点：</p><ol><li>它是一个元素存取有序的集合。例如，存元素的顺序是11、22、33。那么集合中，元素的存储就是按照11、22、33的顺序完成的）。</li><li>它是一个带有索引的集合，通过索引就可以精确的操作集合中的元素（与数组的索引是一个道理）。</li><li>集合中可以有重复的元素，通过元素的equals方法，来比较是否为重复的元素。</li></ol><blockquote><p>ArrayList集合</p></blockquote><p>对于ArrayList来说，有一个尖括号<E>代表泛型（<strong>泛型：也就是装在集合中的所有元素，全部都是统一的什么类型。注意，泛型只能是引用数据类型，不能是基本类型</strong>）</p><p><code>java.util.ArrayList</code>集合数据存储的结构是数组结构。元素增删慢，查找快，由于日常开发中使用最多的功能为查询数据、遍历数据，所以<code>ArrayList</code>是最常用的集合。</p><p>许多程序员开发时非常随意地使用ArrayList完成任何需求，并不严谨，这种用法是不提倡的。</p><blockquote><p>LinkedList集合</p></blockquote><p><code>java.util.LinkedList</code>集合数据存储的结构是链表结构。方便元素添加、删除的集合。</p><p>LinkedList是一个双向链表，那么双向链表是什么样子的呢，我们用个图了解下<br><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/20200403114434.png" alt=""></fancybox></p><p>实际开发中对一个集合元素的添加与删除经常涉及到首尾操作，而LinkedList提供了大量首尾操作的方法。这些方法我们作为了解即可：</p><ul><li><code>public void addFirst(E e)</code>:将指定元素插入此列表的开头。</li><li><code>public void addLast(E e)</code>:将指定元素添加到此列表的结尾。</li><li><code>public E getFirst()</code>:返回此列表的第一个元素。</li><li><code>public E getLast()</code>:返回此列表的最后一个元素。</li><li><code>public E removeFirst()</code>:移除并返回此列表的第一个元素。</li><li><code>public E removeLast()</code>:移除并返回此列表的最后一个元素。</li><li><code>public E pop()</code>:从此列表所表示的堆栈处弹出一个元素。</li><li><code>public void push(E e)</code>:将元素推入此列表所表示的堆栈。</li><li><code>public boolean isEmpty()</code>：如果列表不包含元素，则返回true。</li></ul><p>LinkedList是List的子类，List中的方法LinkedList都是可以使用，这里就不做详细介绍，我们只需要了解LinkedList的特有方法即可。在开发时，LinkedList集合也可以作为堆栈，队列的结构使用。（了解即可）</p><h4 id="6-2-Set接口"><a href="#6-2-Set接口" class="headerlink" title="6.2 Set接口"></a>6.2 Set接口</h4><p><code>java.util.Set</code>接口和<code>java.util.List</code>接口一样，同样继承自<code>Collection</code>接口，它与<code>Collection</code>接口中的方法基本一致，并没有对<code>Collection</code>接口进行功能上的扩充，只是比<code>Collection</code>接口更加严格了。与<code>List</code>接口不同的是，<code>Set</code>接口中元素无序，并且都会以某种规则保证存入的元素不出现重复。</p><p>tips: <strong>Set集合取出元素的方式可以采用：迭代器，增强for循环</strong></p><blockquote><p>HashSet集合介绍</p></blockquote><p>HashSet是根据对象的哈希值来确定元素在集合中的存储位置，因此具有良好的存取和查找性能。保证元素唯一性的方式依赖于：<code>hashCode</code>与<code>equals</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSetDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建 Set集合</span></span><br><span class="line">        HashSet&lt;String&gt;  set = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        set.add(<span class="keyword">new</span> String(<span class="string">"cba"</span>));</span><br><span class="line">        set.add(<span class="string">"abc"</span>);</span><br><span class="line">        set.add(<span class="string">"bac"</span>); </span><br><span class="line">        set.add(<span class="string">"cba"</span>);  </span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span> (String name : set) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下，说明集合中不能存储重复元素：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cba</span><br><span class="line">abc</span><br><span class="line">bac</span><br></pre></td></tr></table></figure><p>tips:根据结果我们发现字符串”cba”只存储了一个，也就是说重复的元素set集合不存储。</p><blockquote><p>LinkedHashSet集合</p></blockquote><p>我们知道HashSet保证元素唯一，可是元素存放进去是没有顺序的，那么我们要保证有序，怎么办呢？</p><p>在HashSet下面有一个子类<code>java.util.LinkedHashSet</code>，它是链表和哈希表组合的一个数据存储结构。</p><p>演示代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedHashSetDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Set&lt;String&gt; set = <span class="keyword">new</span> LinkedHashSet&lt;String&gt;();</span><br><span class="line">set.add(<span class="string">"bbb"</span>);</span><br><span class="line">set.add(<span class="string">"aaa"</span>);</span><br><span class="line">set.add(<span class="string">"abc"</span>);</span><br><span class="line">set.add(<span class="string">"bbc"</span>);</span><br><span class="line">        Iterator&lt;String&gt; it = set.iterator();</span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">System.out.println(it.next());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">结果：</span><br><span class="line">  bbb</span><br><span class="line">  aaa</span><br><span class="line">  abc</span><br><span class="line">  bbc</span><br></pre></td></tr></table></figure><h4 id="6-3-Map接口"><a href="#6-3-Map接口" class="headerlink" title="6.3 Map接口"></a>6.3 Map接口</h4><blockquote><p>HashMap</p></blockquote><p>前面已经讲解了List接口下的ArrayList类，接下来我们开始了解Map接口的HashMap类（Map&lt;K, V&gt;是一种键-值映射表，<strong>Map中不存在重复的key，因为放入相同的key，只会把原有的key-value对应的value给替换掉。</strong>）<br>创建HashMap类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Map&lt;键Key数据类型, 值Value的数据类型&gt; map = new HashMap&lt;&gt;();</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"apple"</span>, <span class="number">123</span>);</span><br><span class="line">        map.put(<span class="string">"pear"</span>, <span class="number">456</span>);</span><br><span class="line">        map.put(<span class="string">"banana"</span>, <span class="number">789</span>);</span><br><span class="line">        <span class="comment">// for each循环遍历键所组成的集合</span></span><br><span class="line">        <span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">            Integer value = map.get(key);</span><br><span class="line">            System.out.println(key + <span class="string">" = "</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>collection接口的Map接口的共性方法</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">map.put(key,value):在末尾添加一组键值对</span><br><span class="line">map.get(key):通过指定的key值获取相应的value值</span><br><span class="line">map.containerKey(key):查询某个Key是否存在</span><br><span class="line">map.containerValue(value):查询某个value是否存在</span><br><span class="line">map.size():获取Map中键值对的元素个数</span><br></pre></td></tr></table></figure><p>关于HashMap的小结：</p><ul><li>对Map来说，要遍历key可以使用for each循环遍历Map实例的keySet()方法返回的Set集合，它包含不重复的key的集合</li><li>同时遍历key和value可以使用for each循环遍历Map对象的entrySet()集合，它包含每一个key-value映射</li></ul><h4 id="6-4-Iterator迭代器接口"><a href="#6-4-Iterator迭代器接口" class="headerlink" title="6.4 Iterator迭代器接口"></a>6.4 Iterator迭代器接口</h4><p>collection接口下有各种各样的集合，不同的集合存储方式不同，相应的集合取值方式也不同，这时就需要Iterator迭代器接口了。<br>我们要始终坚持使用迭代器Iterator来访问List。Iterator本身也是一个对象，但它是由List的实例调用iterator()方法的时候创建的。Iterator对象知道如何遍历一个List，并且不同的List类型，返回的Iterator对象实现也是不同的，但总是具有最高的访问效率。</p><p>Iterator对象有两个方法：boolean hasNext()判断是否有下一个元素，E next()返回下一个元素。因此，使用Iterator遍历List代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = List.of(<span class="string">"apple"</span>, <span class="string">"pear"</span>, <span class="string">"banana"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Iterator&lt;String&gt; it = list.iterator(); it.hasNext(); ) &#123;</span><br><span class="line">            String s = it.next();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>童鞋可能觉得使用Iterator访问List的代码比使用索引更复杂。但是，要记住，通过Iterator遍历List永远是最高效的方式。并且，由于Iterator遍历是如此常用，所以，Java的for each循环本身就可以帮我们使用Iterator遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = List.of(<span class="string">"apple"</span>, <span class="string">"pear"</span>, <span class="string">"banana"</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>案例： 找出一组整数缺失的数值案例<br>给定一组整数，找出缺失的数字:这里推荐使用集合，因为不确定整数的数据多少，而Java中的数组个数无法改变</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findMissingNumber</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end, List&lt;Integer&gt; list)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 对等差数列进行求和 Sn=na1+n(n-1)d/2或Sn=n(a1+an)/2</span></span><br><span class="line">            <span class="keyword">int</span> total = ((end+start)*(end-start + <span class="number">1</span>))/<span class="number">2</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 对list集合进行求和</span></span><br><span class="line">            <span class="keyword">for</span>(Integer p : list)</span><br><span class="line">    </span><br><span class="line">                max+= p;</span><br><span class="line">           <span class="comment">// 将两个集合之和做差，即可知晓缺失的是那个数</span></span><br><span class="line">            <span class="keyword">return</span> total - max;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 构造从start到end的序列：</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> start = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> end = <span class="number">20</span>;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= end; i++) &#123;</span><br><span class="line">            list.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 随机删除List中的一个元素:</span></span><br><span class="line">        <span class="keyword">int</span> removed = list.remove((<span class="keyword">int</span>) (Math.random() * list.size()));</span><br><span class="line">        <span class="keyword">int</span> found = findMissingNumber(start, end, list);</span><br><span class="line">        System.out.println(list.toString());</span><br><span class="line">        System.out.println(<span class="string">"missing number: "</span> + found);</span><br><span class="line">        System.out.println(removed == found ? <span class="string">"测试成功"</span> : <span class="string">"测试失败"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-5-集合的综合运用：斗地主游戏"><a href="#6-5-集合的综合运用：斗地主游戏" class="headerlink" title="6.5 集合的综合运用：斗地主游戏"></a>6.5 集合的综合运用：斗地主游戏</h4><p>游戏原理示意图：<br><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/poker.JPG" alt=""></fancybox><br>且每次运行后的发牌结果都不相同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bytedance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pokers</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 1.准备牌：定义一个集合来存储54张扑克牌</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        List&lt;String&gt; pokers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 定义两个数组或集合来分别存储花色与数字</span></span><br><span class="line">        String[] colors = &#123;<span class="string">"♥"</span>,<span class="string">"♣"</span>,<span class="string">"♦"</span>,<span class="string">"♠"</span>&#125;;</span><br><span class="line">        String[] numbers = &#123;<span class="string">"2"</span>,<span class="string">"A"</span>,<span class="string">"K"</span>,<span class="string">"Q"</span>,<span class="string">"J"</span>,<span class="string">"10"</span>,<span class="string">"9"</span>,<span class="string">"8"</span>,<span class="string">"7"</span>,<span class="string">"6"</span>,<span class="string">"5"</span>,<span class="string">"4"</span>,<span class="string">"3"</span>&#125;;</span><br><span class="line">        <span class="comment">// 将两组数组两两嵌套，组成一幅扑克牌</span></span><br><span class="line">        <span class="keyword">for</span> (String color:colors) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String number:numbers) &#123;</span><br><span class="line">                pokers.add(color+number);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 再把大王，小王存储到pokers集合中，这就组成了一幅完整的牌了</span></span><br><span class="line">        pokers.add(<span class="string">"redJoker"</span>);</span><br><span class="line">        pokers.add(<span class="string">"blackJoker"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 2.将完整的扑克牌就行洗牌，利用集合静态方法Collections.shuffle（英文就有洗牌之意）</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        Collections.shuffle(pokers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 3.发牌：建立四个集合，分别存储四个玩家的牌：</span></span><br><span class="line"><span class="comment">        * 遍历pokers集合，获取每一张牌</span></span><br><span class="line"><span class="comment">        * 使用pokers集合的索引%3 个玩家轮流发牌</span></span><br><span class="line"><span class="comment">        * 剩余三张牌给底牌，注意：先判断底牌索引（是否i&gt;=51）,否则牌就发完了</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义四个集合来存储玩家的牌和底牌</span></span><br><span class="line">        List&lt;String&gt; play01 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;String&gt; play02 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;String&gt; play03 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;String&gt; diPai = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;pokers.size();i++)&#123;</span><br><span class="line">            <span class="comment">// 获取每一张牌</span></span><br><span class="line">            String p = pokers.get(i);</span><br><span class="line">            <span class="comment">// 轮流发牌</span></span><br><span class="line">            <span class="keyword">if</span>(i&gt;=<span class="number">51</span>)&#123;</span><br><span class="line">                diPai.add(p);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (i%<span class="number">3</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                play01.add(p);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (i%<span class="number">3</span> == <span class="number">1</span>)&#123;</span><br><span class="line">                play02.add(p);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                play03.add(p);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 4.看牌：可以遍历也可以直接打印</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        System.out.println(<span class="string">"周星驰："</span>+play01);</span><br><span class="line">        System.out.println(<span class="string">"刘德华："</span>+play02);</span><br><span class="line">        System.out.println(<span class="string">"郑伊健："</span>+play03);</span><br><span class="line">        System.out.println(<span class="string">"底牌："</span>+diPai);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>集合的综合运用：斗地主游戏（二）</strong><br>上述在完成斗地主游戏时，实现了基本洗牌，发牌功能，但是对玩家手中的牌却没有进行排序处理，比较散乱,因此需要做出改进，利用Map接口的HashMap类的键值对特性，利用键值来找到相应的value值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bytedance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pokers</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">look</span><span class="params">(String name,ArrayList&lt;Integer&gt; player,HashMap&lt;Integer,String&gt; pokers)</span></span>&#123;</span><br><span class="line">        System.out.print(name+<span class="string">"："</span>);</span><br><span class="line">        <span class="comment">// 遍历ArrayList集合，获取元素，作为建，到Map集合中查找值</span></span><br><span class="line">        <span class="keyword">for</span> (Integer key:player) &#123;</span><br><span class="line">            String value = pokers.get(key);</span><br><span class="line">            System.out.print(value+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 打印换行</span></span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 1.准备牌：定义一个集合来存储54张扑克牌</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="comment">// 创建map集合，键值对</span></span><br><span class="line">        HashMap&lt;Integer, String&gt; pokers = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 创建List集合来存储数字编号</span></span><br><span class="line">        List&lt;Integer&gt; pokerNumber = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 定义两个数组或集合来分别存储花色与数字</span></span><br><span class="line">        String[] colors = &#123;<span class="string">"♥"</span>,<span class="string">"♣"</span>,<span class="string">"♦"</span>,<span class="string">"♠"</span>&#125;;</span><br><span class="line">        String[] numbers = &#123;<span class="string">"2"</span>,<span class="string">"A"</span>,<span class="string">"K"</span>,<span class="string">"Q"</span>,<span class="string">"J"</span>,<span class="string">"10"</span>,<span class="string">"9"</span>,<span class="string">"8"</span>,<span class="string">"7"</span>,<span class="string">"6"</span>,<span class="string">"5"</span>,<span class="string">"4"</span>,<span class="string">"3"</span>&#125;;</span><br><span class="line">        <span class="comment">// 初始索引为2，因为大小王会占据索引值0，1</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 将两组数组两两嵌套，组成一幅扑克牌</span></span><br><span class="line">        <span class="keyword">for</span> (String number:numbers) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String color:colors) &#123;</span><br><span class="line">                pokers.put(index,color+number);</span><br><span class="line">                pokerNumber.add(index);</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 再把大王，小王存储到pokers集合中，这就组成了一幅完整的牌了</span></span><br><span class="line">        pokers.put(<span class="number">0</span>,<span class="string">"redJoker"</span>);</span><br><span class="line">        pokerNumber.add(<span class="number">0</span>);</span><br><span class="line">        pokers.put(<span class="number">1</span>,<span class="string">"blackJoker"</span>);</span><br><span class="line">        pokerNumber.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 2.将完整的扑克牌就行洗牌，利用集合静态方法Collections.shuffle（英文就有洗牌之意）</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        Collections.shuffle(pokerNumber);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 3.发牌：建立四个集合，分别存储四个玩家的牌：</span></span><br><span class="line"><span class="comment">        * 遍历pokers集合，获取每一张牌</span></span><br><span class="line"><span class="comment">        * 使用pokers集合的索引%3 个玩家轮流发牌</span></span><br><span class="line"><span class="comment">        * 剩余三张牌给底牌，注意：先判断底牌索引（是否i&gt;=51）,否则牌就发完了</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义四个集合来存储玩家的牌和底牌</span></span><br><span class="line">        ArrayList&lt;Integer&gt; player1 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; player2 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; player3 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; bottom = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;pokerNumber.size();i++)&#123;</span><br><span class="line">            <span class="comment">// 获取每一张牌</span></span><br><span class="line">            <span class="keyword">int</span> p = pokerNumber.get(i);</span><br><span class="line">            <span class="comment">// 轮流发牌</span></span><br><span class="line">            <span class="comment">// 前三张作为底牌</span></span><br><span class="line">            <span class="keyword">if</span>(i&lt;<span class="number">3</span>)&#123;</span><br><span class="line">                bottom.add(p);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (i%<span class="number">3</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                player1.add(p);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (i%<span class="number">3</span> == <span class="number">1</span>)&#123;</span><br><span class="line">                player2.add(p);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                player3.add(p);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对玩家手中的编号进行排序</span></span><br><span class="line">        Collections.sort(player1);</span><br><span class="line">        Collections.sort(player2);</span><br><span class="line">        Collections.sort(player3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 4.看牌：就是将玩家手中的编号放到map集合中查找，根据键值对</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        look(<span class="string">"周润发"</span>,player1, pokers);</span><br><span class="line">        look(<span class="string">"郭富城"</span>,player2, pokers);</span><br><span class="line">        look(<span class="string">"刘德华"</span>,player3, pokers);</span><br><span class="line">        look(<span class="string">"底牌"</span>,bottom, pokers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-IO，【File类的操作大全】"><a href="#7-IO，【File类的操作大全】" class="headerlink" title="7.IO，【File类的操作大全】"></a>7.IO，<a href="https://blog.csdn.net/lianghl8090/article/details/20539301" target="_blank" rel="noopener">【File类的操作大全】</a></h3><p>Java的标准库java.io提供了File对象来操作文件和目录</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们从之前的知识可以推出java把电脑中的文件和文件夹(目录)封装为了一个File类,我们可以使用File类对文件和文件夹进行操作，并且类中存在构造函数，构造函数里传入的值为文件的路径。要构造一个file对象，需要传入文件路径：构造File对象时，可以是绝对路径（以根目录开头的完整路径），也可以是相对路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">'文件路径'</span>);</span><br><span class="line">        System.out.println(f);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color=#d93a49>注意Windows平台使用\作为路径分隔符，在Java字符串中需要用\\表示一个\。Linux平台使用/作为路径分隔符：</font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">linux: File f = new File(&quot;/usr/bin/javac&quot;);</span><br><span class="line">windows: File f = new File(&quot;C:\\Windows\\notepad.exe&quot;);</span><br></pre></td></tr></table></figure><h4 id="7-1-File类的静态方法"><a href="#7-1-File类的静态方法" class="headerlink" title="7.1 File类的静态方法"></a>7.1 File类的静态方法</h4><p>由之前的<a href="https://ahrilove.top/2020/03/05/Java%E7%9A%84static%E5%85%B3%E9%94%AE%E5%AD%97(%E4%B8%83)/">Java静态方法的专题学习</a>中已经了解到静态方法与静态属性的调用方法：<strong>类名称.方法名，类名称.属性名</strong>。因此下列的静态方法可以直接使用File类调用</p><ul><li>static String pathSeparator 与系统有关的路径分隔符（即环境变量的路径分割符），为了方便，它被表示为一个字符串。</li><li>static char pathSeparatorChar 与系统有关的路径分隔符（即环境变量的路径分割符）。</li><li>static String separator 与系统有关的默认名称分隔符，为了方便，它被表示为一个字符串。</li><li>static char separatorChar 与系统有关的默认名称分隔符。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    操作路径:路径不能写死了(动态路径)</span></span><br><span class="line"><span class="comment">    C:\develop\a\a.txt  windows</span></span><br><span class="line"><span class="comment">    C:/develop/a/a.txt  linux</span></span><br><span class="line"><span class="comment">    "C:"+File.separator+"develop"+File.separator+"a"+File.separator+"a.txt"</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String pathSeparator = File.pathSeparator;</span><br><span class="line">System.out.println(pathSeparator);<span class="comment">//路径分隔符 windows:分号;  linux:冒号:</span></span><br><span class="line"></span><br><span class="line">String separator = File.separator;</span><br><span class="line">System.out.println(separator);<span class="comment">// 文件名称分隔符 windows:反斜杠\  linux:正斜杠/</span></span><br></pre></td></tr></table></figure><h4 id="7-2-文件和目录"><a href="#7-2-文件和目录" class="headerlink" title="7.2 文件和目录"></a>7.2 文件和目录</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;File对象既可以表示文件，也可以表示目录。特别要注意的是，构造一个File对象，即使传入的文件或目录不存在，代码也不会出错，因为构造一个File对象，并不会导致任何磁盘操作。只有当我们调用File对象的某些方法的时候，才真正进行磁盘操作。</p><p>相关的操作方法：用File对象获取到一个文件时，还可以进一步判断文件的权限和大小</p><ul><li>isFile() ： 判断File对象是否存在，即文件是否已经存在</li><li>isDirectory()：判断该File对象是否是一个已存在的目录</li><li>boolean canRead()：是否可读</li><li>boolean canWrite()：是否可写</li><li>boolean canExecute()：是否可执行</li><li>long length()：文件字节大小</li><li>exists() : 判断文件或目录是否存在</li><li>createNewFile()：当且仅当原文件不存在时才会创建一个新文件（createNewFile声明抛出了IOException,我们调用这个方法,就必须的处理这个异常,要么throws,要么try catch）</li><li>mkdir():创建一个文件夹或者说目录</li><li>mkdirs():既可以创建单级目录也可以创建多级目录</li></ul><ul><li>getAbsolutePath() ：返回此File的绝对路径名字符串。</li><li>getPath() ：将此File转换为路径名字符串。</li><li>getName()  ：返回由此File表示的文件或目录的名称。</li></ul><ul><li>delete()：删除该文件或目录（<strong>直接在硬盘上删除，不走回收站，无法找回，需要谨慎</strong>）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 1.调用isFile()，判断该File对象是否是一个已存在的文件，</span></span><br><span class="line"><span class="comment">        * 2.调用isDirectory()，判断该File对象是否是一个已存在的目录</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        File f1 = <span class="keyword">new</span> File(<span class="string">"C:\\Windows"</span>);</span><br><span class="line">        File f2 = <span class="keyword">new</span> File(<span class="string">"C:\\Windows\\notepad.exe"</span>);</span><br><span class="line">        File f3 = <span class="keyword">new</span> File(<span class="string">"C:\\Windows\\nothing"</span>);</span><br><span class="line">        System.out.println(f1.isFile());</span><br><span class="line">        System.out.println(f1.isDirectory());</span><br><span class="line">        System.out.println(f2.isFile());</span><br><span class="line">        System.out.println(f2.isDirectory());</span><br><span class="line">        System.out.println(f3.isFile());</span><br><span class="line">        System.out.println(f3.isDirectory());</span><br><span class="line">        System.out.println(<span class="string">"========"</span>);</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"C:\\Users\\CHD\\Desktop\\abc.txt"</span>);</span><br><span class="line">        <span class="keyword">if</span> (file.createNewFile()) &#123;</span><br><span class="line">            <span class="comment">// 文件创建成功:</span></span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span></span></span><br><span class="line">            <span class="comment">//  file.delete();// 删除文件成功:</span></span><br><span class="line">            System.out.println(file.isFile());  <span class="comment">// true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-3-路径"><a href="#7-3-路径" class="headerlink" title="7.3 路径"></a>7.3 路径</h4><ul><li><p>绝对路径:是一个完整的路径<br>以盘符(c:,D:)开始的路径<br>  c:\a.txt<br>  C:\Users\itcast\IdeaProjects\shungyuan\123.txt<br>  D:\demo\b.txt</p></li><li><p>相对路径:是一个简化的路径，<strong>相对路径指的是相对于当前项目的根目录</strong>(C:\Users\itcast\IdeaProjects\shungyuan)<br>如果使用当前项目的根目录,路径可以简化书写<br>C:\Users\itcast\IdeaProjects\shungyuan\123.txt–&gt;简化为: 123.txt(可以省略项目的根目录)</p></li></ul><p>注意:<br>1.路径是不区分大小写<br>2.路径中的文件名称分隔符windows使用反斜杠,反斜杠是转义字符,两个反斜杠代表一个普通的反斜杠</p><p>PS：<strong>java不同于Python，HTML引入文件可以使用<code>. ：当前文件</code>或 <code>.. ：当前文件的上一级目录</code>，Java的相对路径是以当前的项目的根目录为准</strong></p><h4 id="7-4-遍历文件和目录"><a href="#7-4-遍历文件和目录" class="headerlink" title="7.4 遍历文件和目录"></a>7.4 遍历文件和目录</h4><p>File类遍历(文件夹)目录功能</p><ul><li>public String[] list() ：返回一个String数组，表示该File目录中的所有子文件或目录（相对路径）。</li><li>public File[] listFiles() ：返回一个File数组，表示该File目录中的所有的子文件或目录（绝对路径）。</li></ul><p>实例一：查找桌面上的所有文件，并过滤掉不想要的文件或目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"C:\\Users\\CHD\\Desktop"</span>);</span><br><span class="line">        File[] fs1 = f.listFiles(); <span class="comment">// 列出所有文件和子目录</span></span><br><span class="line">        printFiles(fs1);</span><br><span class="line">        File[] fs2 = f.listFiles(<span class="keyword">new</span> FilenameFilter() &#123; <span class="comment">// 仅列出.exe文件</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File dir, String name)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> name.endsWith(<span class="string">".txt"</span>); <span class="comment">// 返回true表示接受该文件</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        printFiles(fs2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printFiles</span><span class="params">(File[] files)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"=========="</span>);</span><br><span class="line">        <span class="keyword">if</span> (files != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (File f : files) &#123;</span><br><span class="line">                System.out.println(f);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"=========="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"C:\\Users\\itcast\\IdeaProjects\\shungyuan\\08_FileAndRecursion"</span>);</span><br><span class="line">        String[] arr = file.list();</span><br><span class="line">        <span class="keyword">for</span> (String fileName : arr) &#123;</span><br><span class="line">            System.out.println(fileName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>需求：遍历c:\abc文件夹,及abc文件夹的子文件夹，并只要.java结尾的文件</p></blockquote><p>c:\abc<br>c:\abc\abc.txt<br>c:\abc\abc.java<br>c:\abc\a<br>c:\abc\a\a.jpg<br>c:\abc\a\a.java<br>c:\abc\b<br>c:\abc\b\b.java<br>c:\abc\b\b.txt</p><p><strong>方法一：递归遍历所有的文件或目录，并删除指定的文件</strong><br>注意：先判断每一个File对象是否是文件夹，再将File对象转换为String数据类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05Recurison</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"c:\\abc"</span>);</span><br><span class="line">        getAllFile(file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getAllFile</span><span class="params">(File dir)</span></span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println(dir);//打印被遍历的目录名称</span></span><br><span class="line">        File[] files = dir.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File f : files) &#123;</span><br><span class="line">            <span class="comment">//对遍历得到的File对象f进行判断,判断是否是文件夹</span></span><br><span class="line">            <span class="keyword">if</span>(f.isDirectory())&#123;</span><br><span class="line">                <span class="comment">//f是一个文件夹,则继续遍历这个文件夹，我们发现getAllFile方法就是传递文件夹,遍历文件夹的方法，所以直接调用getAllFile方法即可:递归(自己调用自己)</span></span><br><span class="line">                getAllFile(f);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 将File对象转换为字符串</span></span><br><span class="line">                <span class="comment">//String name = f.getName();//abc.java</span></span><br><span class="line">                <span class="comment">//String path = f.getPath();//c:\\abc\\abc.java</span></span><br><span class="line">                <span class="comment">//String s = f.toString();//c:\\abc\\abc.java</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//把字符串,转换为小写</span></span><br><span class="line">                <span class="comment">//s = s.toLowerCase();</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//2.调用String类中的方法endsWith判断字符串是否是以.java结尾</span></span><br><span class="line">                <span class="comment">//boolean b = s.endsWith(".java");</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//3.如果是以.java结尾的文件,则输出</span></span><br><span class="line">                <span class="comment">/*if(b)&#123;</span></span><br><span class="line"><span class="comment">                    System.out.println(f);</span></span><br><span class="line"><span class="comment">                &#125;*/</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(f.getName().toLowerCase().endsWith(<span class="string">".java"</span>))&#123;    <span class="comment">//函数式编程，一步到位</span></span><br><span class="line">                    System.out.println(f);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法二：文件过滤器接口</strong></p><p>在File类中有两个和ListFiles重载的方法,方法的参数传递的就是过滤器</p><ul><li><p>File[] listFiles(FileFilter filter)<br>java.io.FileFilter接口:用于抽象路径名(File对象)的过滤器。<br>  作用:用来过滤文件(File对象)<br>  抽象方法:用来过滤文件的方法</p><pre><code>boolean accept(File pathname) 测试指定抽象路径名是否应该包含在某个路径名列表中。参数:    File pathname:使用ListFiles方法遍历目录,得到的每一个文件对象</code></pre></li><li><p>File[] listFiles(FilenameFilter filter)<br>java.io.FilenameFilter接口:实现此接口的类实例可用于过滤器文件名。<br>  作用:用于过滤文件名称<br>  抽象方法:用来过滤文件的方法</p><pre><code>boolean accept(File dir, String name) 测试指定文件是否应该包含在某一文件列表中。参数:    File dir:构造方法中传递的被遍历的目录    String name:使用ListFiles方法遍历目录,获取的每一个文件/文件夹的名称</code></pre></li></ul><p>注意:<br>    <strong>两个过滤器接口是没有实现类的,需要我们自己写实现类,重写过滤的方法accept,在方法中自己定义过滤的规则</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Filter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"c:\\abc"</span>);</span><br><span class="line">        getAllFile(file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        定义一个方法,参数传递File类型的目录</span></span><br><span class="line"><span class="comment">        方法中对目录进行遍历</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getAllFile</span><span class="params">(File dir)</span></span>&#123;</span><br><span class="line">        File[] files = dir.listFiles(<span class="keyword">new</span> FileFilterImpl());<span class="comment">//传递过滤器对象</span></span><br><span class="line">        <span class="keyword">for</span> (File f : files) &#123;</span><br><span class="line">            <span class="comment">//对遍历得到的File对象f进行判断,判断是否是文件夹</span></span><br><span class="line">            <span class="keyword">if</span>(f.isDirectory())&#123;</span><br><span class="line">                <span class="comment">//f是一个文件夹,则继续遍历这个文件夹</span></span><br><span class="line">                <span class="comment">//我们发现getAllFile方法就是传递文件夹,遍历文件夹的方法</span></span><br><span class="line">                <span class="comment">//所以直接调用getAllFile方法即可:递归(自己调用自己)</span></span><br><span class="line">                getAllFile(f);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//f是一个文件,直接打印即可</span></span><br><span class="line">                System.out.println(f);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    创建过滤器FileFilter的实现类,重写过滤方法accept,定义过滤规则</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileFilterImpl</span> <span class="keyword">implements</span> <span class="title">FileFilter</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File pathname)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            过滤的规则:</span></span><br><span class="line"><span class="comment">            在accept方法中,判断File对象是否是以.java结尾</span></span><br><span class="line"><span class="comment">            是就返回true</span></span><br><span class="line"><span class="comment">            不是就返回false</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//如果pathname是一个文件夹,返回true,继续遍历这个文件夹</span></span><br><span class="line">        <span class="keyword">if</span>(pathname.isDirectory())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pathname.getName().toLowerCase().endsWith(<span class="string">".java"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法三：匿名内部类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Filter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"c:\\abc"</span>);</span><br><span class="line">        getAllFile(file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        定义一个方法,参数传递File类型的目录</span></span><br><span class="line"><span class="comment">        方法中对目录进行遍历</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getAllFile</span><span class="params">(File dir)</span></span>&#123;</span><br><span class="line">        <span class="comment">//传递过滤器对象 使用匿名内部类</span></span><br><span class="line">        <span class="comment">/*File[] files = dir.listFiles(new FileFilter() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public boolean accept(File pathname) &#123;</span></span><br><span class="line"><span class="comment">                //过滤规则,pathname是文件夹或者是.java结尾的文件返回true</span></span><br><span class="line"><span class="comment">                return pathname.isDirectory() || pathname.getName().toLowerCase().endsWith(".java");</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用Lambda表达式优化匿名内部类(接口中只有一个抽象方法)</span></span><br><span class="line">        File[] files = dir.listFiles((File pathname)-&gt;&#123;</span><br><span class="line">            <span class="keyword">return</span> pathname.isDirectory() || pathname.getName().toLowerCase().endsWith(<span class="string">".java"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (File f : files) &#123;</span><br><span class="line">            <span class="comment">//对遍历得到的File对象f进行判断,判断是否是文件夹</span></span><br><span class="line">            <span class="keyword">if</span>(f.isDirectory())&#123;</span><br><span class="line">                <span class="comment">//f是一个文件夹,则继续遍历这个文件夹</span></span><br><span class="line">                <span class="comment">//我们发现getAllFile方法就是传递文件夹,遍历文件夹的方法</span></span><br><span class="line">                <span class="comment">//所以直接调用getAllFile方法即可:递归(自己调用自己)</span></span><br><span class="line">                getAllFile(f);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//f是一个文件,直接打印即可</span></span><br><span class="line">                System.out.println(f);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法四：lambda表达式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Filter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"c:\\abc"</span>);</span><br><span class="line">        getAllFile(file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        定义一个方法,参数传递File类型的目录</span></span><br><span class="line"><span class="comment">        方法中对目录进行遍历</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getAllFile</span><span class="params">(File dir)</span></span>&#123;</span><br><span class="line">        <span class="comment">//使用Lambda表达式优化匿名内部类(接口中只有一个抽象方法)</span></span><br><span class="line">        File[] files = dir.listFiles((File pathname)-&gt;&#123;</span><br><span class="line">            <span class="keyword">return</span> pathname.isDirectory() || pathname.getName().toLowerCase().endsWith(<span class="string">".java"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (File f : files) &#123;</span><br><span class="line">            <span class="comment">//对遍历得到的File对象f进行判断,判断是否是文件夹</span></span><br><span class="line">            <span class="keyword">if</span>(f.isDirectory())&#123;</span><br><span class="line">                <span class="comment">//f是一个文件夹,则继续遍历这个文件夹</span></span><br><span class="line">                <span class="comment">//我们发现getAllFile方法就是传递文件夹,遍历文件夹的方法</span></span><br><span class="line">                <span class="comment">//所以直接调用getAllFile方法即可:递归(自己调用自己)</span></span><br><span class="line">                getAllFile(f);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//f是一个文件,直接打印即可</span></span><br><span class="line">                System.out.println(f);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-5-Path"><a href="#7-5-Path" class="headerlink" title="7.5 Path"></a>7.5 Path</h4><p>Java标准库还提供了一个Path对象，它位于java.nio.file包。Path对象和File对象类似，但操作更加简单。如果需要对目录进行复杂的拼接、遍历等操作，使用Path对象更方便：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Path p1 = Paths.get(<span class="string">"."</span>, <span class="string">"project"</span>, <span class="string">"study"</span>); <span class="comment">// 构造一个Path对象</span></span><br><span class="line">        System.out.println(p1); <span class="comment">// .\project\study</span></span><br><span class="line">        Path p2 = p1.toAbsolutePath(); <span class="comment">// 转换为绝对路径</span></span><br><span class="line">        System.out.println(p2);  <span class="comment">// D:\data\demo2\.\project\study</span></span><br><span class="line">        Path p3 = p2.normalize(); <span class="comment">// 转换为规范路径</span></span><br><span class="line">        System.out.println(p3); <span class="comment">// D:\data\demo2\project\study</span></span><br><span class="line">        File f = p3.toFile(); <span class="comment">// 转换为File对象</span></span><br><span class="line">        System.out.println(f);  <span class="comment">// D:\data\demo2\project\study</span></span><br><span class="line">        <span class="keyword">for</span> (Path p : Paths.get(<span class="string">".."</span>).toAbsolutePath()) &#123; <span class="comment">// 可以直接遍历Path</span></span><br><span class="line">            System.out.println(<span class="string">"  "</span> + p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-InputStream与OutputStream"><a href="#8-InputStream与OutputStream" class="headerlink" title="8.InputStream与OutputStream"></a>8.InputStream与OutputStream</h3><p>InputStream就是Java标准库提供的最基本的输入流。它位于java.io这个包里。java.io包提供了所有同步IO的功能。</p><p>要特别注意的一点是，InputStream并不是一个接口，而是一个抽象类，它是所有输入流的超类。这个抽象类定义的一个最重要的方法就是int read()</p><h3 id="9-日期与时间类"><a href="#9-日期与时间类" class="headerlink" title="9.日期与时间类"></a>9.日期与时间类</h3><p>我们再来看一下Java标准库提供的API。Java标准库有两套处理日期和时间的API：</p><ul><li>定义在java.util这个包里面，主要包括Date、Calendar和TimeZone这几个类(这里面有很多方法已经过时，废弃了，会报出warning)；</li><li>新的API是在Java 8引入的，定义在java.time这个包里面，主要包括LocalDateTime、ZonedDateTime、ZoneId等（推荐使用这个API）</li></ul><h4 id="9-1-Date类"><a href="#9-1-Date类" class="headerlink" title="9.1 Date类"></a>9.1 Date类</h4><p>Date类目前已经过时废弃了很多方法，仅推荐getTime()方法:把日期对象转换成对应的时间毫秒值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Date date = new Date();</span><br><span class="line">// 1586141801899(十三位数，毫秒级，与js的时间戳相同)</span><br><span class="line">System.out.println(date.getTime());</span><br></pre></td></tr></table></figure><h4 id="9-2-Calendar"><a href="#9-2-Calendar" class="headerlink" title="9.2 Calendar"></a>9.2 Calendar</h4><p>Calendar可以用于获取并设置年、月、日、时、分、秒，它和Date比，主要多了一个可以做简单的日期和时间运算的功能</p><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><p>日历我们都见过,<code>java.util.Calendar</code>是日历类，在Date后出现，替换掉了许多Date的方法。该类将所有可能用到的时间信息封装为静态成员变量，方便获取。日历类就是方便获取各个时间属性的。</p><h5 id="获取方式"><a href="#获取方式" class="headerlink" title="获取方式"></a>获取方式</h5><p>Calendar为抽象类，由于语言敏感性，Calendar类在创建对象时并非直接创建，而是通过静态方法创建，返回子类对象，如下：</p><ol><li>Calendar静态方法</li></ol><ul><li><code>public static Calendar getInstance()</code>：使用默认时区和语言环境获得一个日历</li></ul><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06CalendarInit</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Calendar cal = Calendar.getInstance();</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>常用方法</li></ol><p>根据Calendar类的API文档，常用方法有：</p><ul><li><code>public int get(int field)</code>：返回给定日历字段的值。</li><li><code>public void set(int field, int value)</code>：将给定的日历字段设置为给定值。</li><li><code>public abstract void add(int field, int amount)</code>：根据日历的规则，为给定的日历字段添加或减去指定的时间量。</li><li><code>public Date getTime()</code>：返回一个表示此Calendar时间值（从历元到现在的毫秒偏移量）的Date对象。</li></ul><p>Calendar类中提供很多成员常量，代表给定的日历字段：</p><table><thead><tr><th>字段值</th><th>含义</th></tr></thead><tbody><tr><td>YEAR</td><td>年</td></tr><tr><td>MONTH</td><td>月（从0开始，可以+1使用）</td></tr><tr><td>DAY_OF_MONTH</td><td>月中的天（几号）</td></tr><tr><td>HOUR</td><td>时（12小时制）</td></tr><tr><td>HOUR_OF_DAY</td><td>时（24小时制）</td></tr><tr><td>MINUTE</td><td>分</td></tr><tr><td>SECOND</td><td>秒</td></tr><tr><td>DAY_OF_WEEK</td><td>周中的天（周几，周日为1，可以-1使用）</td></tr></tbody></table><br><ul><li>get/set方法</li></ul><p>get方法用来获取指定字段的值，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalendarUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建Calendar对象</span></span><br><span class="line">        Calendar cal = Calendar.getInstance();</span><br><span class="line">        <span class="comment">// 设置年 </span></span><br><span class="line">        <span class="keyword">int</span> year = cal.get(Calendar.YEAR);</span><br><span class="line">        <span class="comment">// 设置月</span></span><br><span class="line">        <span class="keyword">int</span> month = cal.get(Calendar.MONTH) + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 设置日</span></span><br><span class="line">        <span class="keyword">int</span> dayOfMonth = cal.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">        System.out.print(year + <span class="string">"年"</span> + month + <span class="string">"月"</span> + dayOfMonth + <span class="string">"日"</span>);</span><br><span class="line">        <span class="comment">// 2020年4月6日</span></span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>set方法用来设置指定字段的值，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo07CalendarMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Calendar cal = Calendar.getInstance();</span><br><span class="line">        cal.set(Calendar.YEAR, <span class="number">2020</span>);</span><br><span class="line">        System.out.print(year + <span class="string">"年"</span> + month + <span class="string">"月"</span> + dayOfMonth + <span class="string">"日"</span>); <span class="comment">// 2020年1月17日</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>add方法</li></ul><p>add方法可以对指定日历字段的值进行加减操作，如果第二个参数为正数则加上偏移量，如果为负数则减去偏移量。代码如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo08CalendarMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Calendar cal = Calendar.getInstance();</span><br><span class="line">        System.out.print(year + <span class="string">"年"</span> + month + <span class="string">"月"</span> + dayOfMonth + <span class="string">"日"</span>); <span class="comment">// 2018年1月17日</span></span><br><span class="line">        <span class="comment">// 使用add方法</span></span><br><span class="line">        cal.add(Calendar.DAY_OF_MONTH, <span class="number">2</span>); <span class="comment">// 加2天</span></span><br><span class="line">        cal.add(Calendar.YEAR, -<span class="number">3</span>); <span class="comment">// 减3年</span></span><br><span class="line">        System.out.print(year + <span class="string">"年"</span> + month + <span class="string">"月"</span> + dayOfMonth + <span class="string">"日"</span>); <span class="comment">// 2015年1月18日; </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>getTime方法</li></ul><p>Calendar中的getTime方法并不是获取毫秒时刻，而是拿到对应的Date对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo09CalendarMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Calendar cal = Calendar.getInstance();</span><br><span class="line">        Date date = cal.getTime();</span><br><span class="line">        System.out.println(date); <span class="comment">// Tue Jan 16 16:03:09 CST 2018</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小贴士：西方星期的开始为周日，中国为周一。在Calendar类中，月份的表示是以0-11代表1-12月。日期是有大小关系的，时间靠后，时间越大。</p><p>从Java 8开始，java.time包提供了新的日期和时间API，主要涉及的类型有：</p><ol><li>本地日期和时间：LocalDateTime，LocalDate，LocalTime；</li><li>带时区的日期和时间：ZonedDateTime；</li><li>时刻：Instant；</li><li>时区：ZoneId，ZoneOffset；</li><li>时间间隔：Duration。</li><li>以及一套新的用于取代SimpleDateFormat的格式化类型DateTimeFormatter。</li></ol><p>和旧的API相比，新API严格区分了时刻、本地日期、本地时间和带时区的日期时间，并且，对日期和时间进行运算更加方便。</p><p><font color=#ed1941>此外，新API修正了旧API不合理的常量设计：</p><p>Month的范围用1~12表示1月到12月；<br>Week的范围用1~7表示周一到周日。<br>最后，新API的类型几乎全部是不变类型（和String类似），可以放心使用不必担心被修改。</font></p><h4 id="9-3-DateFormat类"><a href="#9-3-DateFormat类" class="headerlink" title="9.3 DateFormat类"></a>9.3 DateFormat类</h4><p><strong>2020-4-6 新增：DateFormat类</strong></p><p><code>java.text.DateFormat</code> 是日期/时间格式化子类的抽象类，我们通过这个类可以帮我们完成日期和文本之间的转换,也就是可以在Date对象与String对象之间进行来回转换。</p><ul><li><strong>格式化</strong>：按照指定的格式，从Date对象转换为String对象。</li><li><strong>解析</strong>：按照指定的格式，从String对象转换为Date对象。</li></ul><p>①. 构造方法</p><p>由于DateFormat为抽象类，不能直接使用，所以需要常用的子类<code>java.text.SimpleDateFormat</code>。这个类需要一个模式（格式）来指定格式化或解析的标准。构造方法为：</p><p> <code>public SimpleDateFormat(String pattern)</code>：用给定的模式和默认语言环境的日期格式符号构造SimpleDateFormat。</p><p>参数pattern是一个字符串，代表日期时间的自定义格式。</p><p>②. 格式规则</p><p>常用的格式规则为：</p><table><thead><tr><th>标识字母（区分大小写）</th><th>含义</th></tr></thead><tbody><tr><td>y</td><td>年</td></tr><tr><td>M</td><td>月</td></tr><tr><td>d</td><td>日</td></tr><tr><td>H</td><td>时</td></tr><tr><td>m</td><td>分</td></tr><tr><td>s</td><td>秒</td></tr></tbody></table><p>③. 常用方法</p><p>DateFormat类的常用方法有：</p><ul><li><code>public String format(Date date)</code>：将Date对象格式化为字符串。</li><li><code>public Date parse(String source)</code>：将字符串解析为Date对象。</li></ul><h5 id="format方法"><a href="#format方法" class="headerlink" title="format方法"></a>format方法</h5><p>使用format方法的代码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 把Date对象转换成String</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03DateFormatMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前的日期对象</span></span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="comment">// 创建日期格式化对象,在获取格式化对象时可以指定风格</span></span><br><span class="line">        DateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">""</span>yyyy-MM-dd HH:mm:ss<span class="string">""</span>);</span><br><span class="line">        String str = df.format(date);</span><br><span class="line">        System.out.println(str); <span class="comment">// 2020-04-06 10:23:54</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="parse方法"><a href="#parse方法" class="headerlink" title="parse方法"></a>parse方法</h5><p>使用parse方法的代码为：把目标String转换成相应的Date对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04DateFormatMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        DateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日"</span>);</span><br><span class="line">        Date date = df.parse(<span class="string">"2018年12月11日"</span>);</span><br><span class="line">        System.out.println(date); <span class="comment">// Tue Dec 11 00:00:00 CST 2018</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-System类"><a href="#10-System类" class="headerlink" title="10.System类"></a>10.System类</h3><p>java.lang.System类中提供了大量的静态方法，可以获取与系统相关的信息或系统级操作，在System类的API文档中，常用的方法有：</p><ul><li>public static long currentTimeMillis()：返回以毫秒为单位的当前时间。</li><li>public static void arraycopy(Object src, int srcPos, Object dest, int destPos, int length)：将数组中指定的数据拷贝到另一个数组中。</li></ul><p>案例展示：验证for循环打印数字1-9999所需要使用的时间（毫秒）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"共耗时毫秒："</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://blog.csdn.net/qq_36850813/article/details/90900744" target="_blank" rel="noopener">JAVA中的Random()</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java（三）：面向对象编程</title>
      <link href="/2020/02/10/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B(%E4%B8%89)/"/>
      <url>/2020/02/10/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B(%E4%B8%89)/</url>
      
        <content type="html"><![CDATA[<p><strong>本章内容：</strong></p><blockquote><p>1.类（class）与实例（instance）<br>2.方法<br>3.this变量<br>4.构造方法<br>5.方法重载Overload<br>6.继承<br>7.多态<br>8.抽象类<br>9.接口<br>10.package包<br>11.作用域</p></blockquote><a id="more"></a><h3 id="1-类（class）与实例（instance）"><a href="#1-类（class）与实例（instance）" class="headerlink" title="1.类（class）与实例（instance）"></a>1.类（class）与实例（instance）</h3><p>现实世界中，我们定义了“人”这种抽象概念，而具体的人则是“小明”、“小红”、“小军”等一个个具体的人。所以，“人”可以定义为一个类（class），而具体的人则是实例（instance）<br>instance是对象实例，instance是根据class创建的实例，可以创建多个instance，每个instance类型相同，但各自属性可能不相同。<br>在Java中，我们来写一个完整的程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// class的public前缀有且仅有一个</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OOP</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 在主类中定义一个demo方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">demo</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义程序入口方法：main方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用定义好的demo方法</span></span><br><span class="line">        System.out.println(demo(<span class="number">5</span>));</span><br><span class="line">        <span class="comment">// 创建一个ming实例变量</span></span><br><span class="line">        Person ming = <span class="keyword">new</span> Person();</span><br><span class="line">        ming.setBirth(<span class="number">2008</span>);</span><br><span class="line">        ming.tel = <span class="string">"15867119504"</span>;</span><br><span class="line">        System.out.println(ming.getTel());</span><br><span class="line">        System.out.println(ming.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个People类（类里包含属性和方法）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String tel;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> birth;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirth</span><span class="params">(<span class="keyword">int</span> birth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.tel;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这里说明一下：利用public型的getAge()方法调用private型的calcAge()方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> calcAge(<span class="number">2019</span>); <span class="comment">// 调用private方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// private方法:</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">calcAge</span><span class="params">(<span class="keyword">int</span> currentYear)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> currentYear - <span class="keyword">this</span>.birth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小结：</p><ul><li>public是用来修饰字段的，它表示这个字段可以被外部访问。</li><li>private方法不允许外部调用,内部方法（即处于同一class中）是可以调用private方法</li></ul><h3 id="2-方法"><a href="#2-方法" class="headerlink" title="2.方法"></a>2.方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修饰符 方法返回类型 方法名(方法参数列表) &#123;</span><br><span class="line">    若干方法语句;</span><br><span class="line">    return 方法返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法返回值通过return语句实现，如果没有返回值，返回类型设置为void，可以省略return</strong>。</p><p><font color=#33a3dc>2020-3-26 补充：</font><br>  最近看到很多面试题，整理到值传递、引用传递，到网上搜了一圈，争议很大。带着一脸蒙圈，线上线下查了好多资料。最终有所收获，所以分享给大家，希望能对你有所帮助。<br>首先说下我的感受，这个题目出的很好，但是在 Java 中这个题目是有问题的(在下面我会解释)。并且，<strong>有很多结论是 Java 中只有 值传递</strong>。我认为这样说不够严谨。当然如果针对 <strong>Java 语言本身来讲，Java 中只有 值传递，没有引用传递</strong>，是正确的。但是如果针对 <strong>值传递，引用传递的定义来说，Java 中还是有引用传递</strong>的</p><p>方法的参数有实参和形参之分，我们现在深入思考一下，方法中可以传递什么类型的值</p><ul><li><p>基本数据类型：整型，字符型，浮点型，布尔型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static void test(int a, char b, double c, float d, boolean e)&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>引用数据类型：字符串，接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static void test(String a)&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>数组类型传递：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static void test(int[] a, char[] b, double[] c,...)&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>class类类型传递：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public static void test(employee a,employee b)&#123;&#125;</span><br><span class="line">...</span><br><span class="line">class employee&#123;</span><br><span class="line">private int id;</span><br><span class="line"></span><br><span class="line">public int getId() &#123;</span><br><span class="line">return id;</span><br><span class="line">&#125;</span><br><span class="line">public void setId(int id) &#123;</span><br><span class="line">this.id = id;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>…</p></li></ul><p>总结：</p><ol><li>基本数据类型、引用类型定义<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;基本数据类：Java 中有八种基本数据类型“byte、short、int、long、float、double、char、boolean”<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;引用类型：new 创建的实体类、对象、及数组</li><li>基本数据类型、引用类型在内存中的存储方式<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;基本数据类型：存放在栈内存中。用完就消失。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;引用类型：在栈内存中存放引用堆内存的地址，在堆内存中存储类、对象、数组等。当没用引用指向堆内存中的类、对象、数组时，由 GC回收机制不定期自动清理。</li></ol><h3 id="3-this变量"><a href="#3-this变量" class="headerlink" title="3.this变量"></a>3.this变量</h3><p>在方法内部，可以使用一个隐含的变量this，它始终指向当前实例。因此，通过this.field就可以访问当前实例的字段。</p><p>如果没有命名冲突，可以省略this。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name; // 相当于this.name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">但是，如果有局部变量和字段重名，那么局部变量优先级更高，就必须加上this：</span><br><span class="line"></span><br><span class="line">class Person &#123;</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name; // 前面的this不可少，少了就变成局部变量name了</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-构造方法"><a href="#4-构造方法" class="headerlink" title="4.构造方法"></a>4.构造方法</h3><p>构造方法是专门用来创建对象的方法，通过关键字new来创建对象，是就是在调用构造方法<br>格式：public 类名称(参数类型 变量名称){方法体}<br>注意事项：</p><ul><li>构造方法的名称必须和所在的类名称完全一样，就连大小写也一样</li><li>构造方法不要写返回值类型，连void都不要写</li><li>构造方法不能return一个具体的返回值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OOP</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 在通过new操作符调用的时候，构造方法的参数数量、位置和类型一一对应</span></span><br><span class="line">        Person p = <span class="keyword">new</span> Person(<span class="string">"chd"</span>,<span class="number">18</span>,<span class="number">10086</span>); </span><br><span class="line">        System.out.println(p.getAge());</span><br><span class="line">        <span class="comment">// 调用实例对象的属性</span></span><br><span class="line">        System.out.println(p.tel);</span><br><span class="line">        System.out.println(p.getAge());</span><br><span class="line">        System.out.println(p.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这个不能省略，用以声明变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> tel;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这就是Java的构造方法，类似于python的def __init__函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age,<span class="keyword">int</span> tel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.tel = tel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拓：多构造方法<br>可以定义多个构造方法，在通过new操作符调用的时候，编译器通过构造方法的参数数量、位置和类型自动区分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = <span class="number">12</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果调用<code>new Person(&quot;Xiao Ming&quot;, 20)</code>;，会自动匹配到构造方法<code>public Person(String, int)</code>。</p><p>如果调用<code>new Person(&quot;Xiao Ming&quot;)</code>;，会自动匹配到构造方法<code>public Person(String)</code>。</p><p>如果调用<code>new Person()</code>;，会自动匹配到构造方法<code>public Person()</code></p><h3 id="5-方法重载"><a href="#5-方法重载" class="headerlink" title="5.方法重载"></a>5.方法重载</h3><p>这种<strong>方法名相同，但各自的参数不同（即参数数目不同，参数数据类型不同），称为方法重载（Overload）</strong>。注意：<strong>方法重载的返回值类型通常都是相同的</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello, world!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello, "</span> + name + <span class="string">"!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (age &lt; <span class="number">18</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Hi, "</span> + name + <span class="string">"!"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"Hello, "</span> + name + <span class="string">"!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-继承"><a href="#6-继承" class="headerlink" title="6.继承"></a>6.继承</h3><p>继承是面向对象编程中非常强大的一种机制，它首先可以复用代码。当我们让Student从Person继承时，Student就获得了Person的所有功能，我们只需要为Student编写新增的功能。<br>继承的特点：</p><ol><li>Java是单继承语言：一个类的直接父类只能有唯一一个</li><li>Java语言可以多级继承：父类也可以继承父类的父类</li><li>一个父类可以拥有多个子类：兄弟子类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 不要重复name和age字段/方法,</span></span><br><span class="line">    <span class="comment">// 只需要定义新增score字段/方法:</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getScore</span><span class="params">()</span> </span>&#123; … &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScore</span><span class="params">(<span class="keyword">int</span> score)</span> </span>&#123; … &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="super"><a href="#super" class="headerlink" title="super"></a>super</h4><p>super关键字表示父类（超类）。子类引用父类的字段时，可以用<code>super.fieldName</code><br>实际上，这里使用<code>super.name</code>，或者<code>this.name</code>，或者<code>name</code>，效果都是一样的。编译器会自动定位到父类的name字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello, "</span> + <span class="keyword">super</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在继承时，如果父类存在构造函数，在这个时候，就必须使用super</strong>,其正确写法应为(牢记)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OOP</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person(<span class="string">"chd"</span>,<span class="number">18</span>,<span class="number">10086</span>); </span><br><span class="line">        <span class="comment">// 实例s为Person的子类Student类的实例</span></span><br><span class="line">        Student s = <span class="keyword">new</span> Student(<span class="string">"gz"</span>,<span class="number">18</span>,<span class="number">10010</span>,<span class="number">100</span>);</span><br><span class="line">        System.out.println(s.getAge());</span><br><span class="line">        System.out.println(p.getAge());</span><br><span class="line">        System.out.println(p.tel);</span><br><span class="line">        System.out.println(p.getAge());</span><br><span class="line">        System.out.println(p.getName());</span><br><span class="line">        System.out.println(s.grand);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> tel;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age,<span class="keyword">int</span> tel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.tel = tel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> grand;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">int</span> tel,<span class="keyword">int</span> grand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age, tel);  <span class="comment">// 自动调用父类的构造方法Person(name, age, tel)</span></span><br><span class="line">        <span class="keyword">this</span>.grand = grand;     <span class="comment">// 这是新构建的字段</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// Override重写，方法名，参数，返回值类型完全相同</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.grand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继承小结：</p><ul><li><strong>Java只允许一个class继承自一个类</strong>，因此，一个类有且仅有一个父类。只有Object特殊，它没有父类</li><li>子类无法访问父类的private字段或者private方法，为了让子类可以访问父类的字段，我们需要把private改为protected</li><li>子类不会继承任何父类的构造方法。子类默认的构造方法是编译器自动生成的，不是继承的</li></ul><h3 id="7-多态"><a href="#7-多态" class="headerlink" title="7.多态"></a>7.多态</h3><p>在继承关系中，<strong>子类如果与父类的方法名完全相同（方法名相同，参数相同，子类方法的返回值必须小于等于父类的返回值范围（推荐：子类和父类方法的返回值类型相同））</strong>，被称为重写（Override，这里要区别于Overload是方法名相同，但各自的参数不同）<br>举一个简单案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Student();</span><br><span class="line">        p.run(); <span class="comment">// 应该打印Person.run还是Student.run?</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// class中的方法不要写static</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Person.run"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Student类继承Person类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// 这是重写符号</span></span><br><span class="line">    <span class="comment">// 将子类的run方法进行重写，增加新的功能</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Student.run"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="调用super关键字"><a href="#调用super关键字" class="headerlink" title="调用super关键字"></a>调用super关键字</h4><p>在子类的覆写方法中，如果要调用父类的被覆写的方法，可以通过super来调用。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello, "</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用父类的hello()方法:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.hello() + <span class="string">"!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小结：<br>区分子类方法中变量名的三种访问方式：</p><ul><li>局部变量： 直接写成员变量名</li><li>本类的成员变量： this.成员变量名</li><li>父类的成员变量： super.成员变量名</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class zi extends Fu&#123;</span><br><span class="line">    public int num = 20; // 成员变量</span><br><span class="line">    public void method()&#123;</span><br><span class="line">        int num = 10;  // 局部变量</span><br><span class="line">        System.out.println(num); // 30:局部变量直接访问</span><br><span class="line">        System.out.println(this.num); // 20:本类的成员变量： this.成员变量名</span><br><span class="line">        System.out.println(super.num); // 10:父类的成员变量： super.成员变量名</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="final"><a href="#final" class="headerlink" title="final"></a>final</h4><p>继承可以允许子类覆写父类的方法。如果一个父类不允许子类对它的某个方法进行覆写，可以把该方法标记为final。用final修饰的方法不能被Override：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello, "</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// compile error: 不允许覆写</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2020-3-9 新增：<br>在父子类的继承关系中，如果成员变量重名，则创建子类访问对象时，访问有两种方法：</p><ol><li>通过子类对象访问成员变量：<strong>等号左边时谁，就优先用谁，没有则向上找父类</strong></li><li>通过成员方法访问成员变量：<strong>该方法属于谁，就有限用谁，没有向上找父类</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Alibaba;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">extendsField</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Fu fu = <span class="keyword">new</span> Fu();</span><br><span class="line">        Zi zi = <span class="keyword">new</span> Zi();<span class="comment">// 实例化两个对象</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 当父类和子类都具有num这个成员变量时</span></span><br><span class="line"><span class="comment">        * 等号左边是谁，优先用谁</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        System.out.println(zi.num);  <span class="comment">// 20</span></span><br><span class="line">        System.out.println(<span class="string">"======"</span>);</span><br><span class="line">        zi.methodZi(); <span class="comment">// 20：这个方法是子类的，优先使用子类的</span></span><br><span class="line"></span><br><span class="line">        zi.methodFu();  <span class="comment">// 10：这个方法实在父类中定义的</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> numFu = <span class="number">100</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodFu</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是父类方法"</span>);</span><br><span class="line">        <span class="comment">// 优先使用本类中的num</span></span><br><span class="line">        System.out.println(num); <span class="comment">// 10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> num = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> numFu = <span class="number">100</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodZi</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是子类方法"</span>);</span><br><span class="line">        <span class="comment">// 优先使用本类中的成员变量</span></span><br><span class="line">        System.out.println(num);  <span class="comment">// 20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-抽象类"><a href="#8-抽象类" class="headerlink" title="8.抽象类"></a>8.抽象类</h3><p>由于多态的存在，每个子类都可以覆写父类的方法，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; … &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; … &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; … &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义：<br><strong>抽象类：抽象方法所在的类，必须是抽象类才行，在class前写上abstract即可</strong><br><strong>抽象方法：就是在方法强加上abstract关键字，然后去掉大括号，直接分号结束</strong></p><p>使用方法：</p><ol><li>不能直接创建new抽象类对象</li><li>必须用一个子类来继承抽象父类</li><li>子类必须覆盖重写抽象父类当中的所有抽象方法</li><li>创建子类实例对象进行使用<br>如果一个class定义了方法，但没有具体执行代码，这个方法就是抽象方法，抽象方法用abstract修饰。因为无法执行抽象方法，因此这个类也必须申明为抽象类（abstract class）。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OOP</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *这里值得值得注意：用abstract修饰的类就是抽象类。我们无法实例化一个抽象类</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        Person p = <span class="keyword">new</span> Student();  <span class="comment">// 第四点：创建子类实例对象</span></span><br><span class="line">        p.age = <span class="number">18</span>;</span><br><span class="line">        p.run();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象类不仅要在类名前加abstract，也要在抽象方法名前加abstract</span></span><br><span class="line"><span class="comment">// Person类用abstract修饰的，表示为抽象类，我们无法实例化抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Student类继承Person类，并将父类的run方法进行重写</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">super</span>.age);  <span class="comment">// super指代父类</span></span><br><span class="line">        System.out.println(<span class="keyword">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>小结：</li></ol><ul><li><p>通过abstract定义的方法是抽象方法，它只有定义，没有实现。抽象方法定义了子类必须实现的接口规范；</p></li><li><p>定义了抽象方法的class必须被定义为抽象类，从抽象类继承的子类必须实现抽象方法；</p></li><li><p>抽象类无法被实例化（即className 变量名 = new className()）</p></li></ul><h3 id="9-接口"><a href="#9-接口" class="headerlink" title="9.接口"></a>9.接口</h3><h4 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h4><p><strong>如果一个抽象类没有字段或者说没有属性，所有方法全部都是抽象方法</strong>【抽象方法：修饰符 abstract 返回值类型 方法名()】，就可以把该抽象类改写为接口：<code>interface</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Java中，可以使用interface可以声明一个接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>所谓interface，就是比抽象类还要抽象的纯抽象接口，因为它连字段都不能有。因为接口定义的所有方法默认都是public abstract的，所以这两个修饰符不需要写出来（写不写效果都一样）</strong></p><h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><p>当一个具体的class去实现一个interface时，需要使用implements关键字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name + <span class="string">" run"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类实现多接口"><a href="#类实现多接口" class="headerlink" title="类实现多接口"></a>类实现多接口</h4><p>在Java中，一个类只能继承自另一个类，不能从多个类继承。但是，一个类可以实现多个interface</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Student implements Person, Hello &#123; // 实现了两个interface</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接口继承"><a href="#接口继承" class="headerlink" title="接口继承"></a>接口继承</h4><p>一个interface可以继承自另一个interface。interface继承自interface使用extends，它相当于扩展了接口的方法。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，Person接口继承自Hello接口，因此，Person接口现在实际上有3个抽象方法签名，其中一个来自继承的Hello接口。</p><h3 id="10-package包"><a href="#10-package包" class="headerlink" title="10.package包"></a>10.package包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">程序目录结构：</span><br><span class="line">package_sample</span><br><span class="line">└─ src</span><br><span class="line">    ├─ hong</span><br><span class="line">    │  └─ Person.java</span><br><span class="line">    │  ming</span><br><span class="line">    │  └─ Person.java</span><br><span class="line">    └─ mr</span><br><span class="line">       └─ jun</span><br><span class="line">          └─ Arrays.java</span><br></pre></td></tr></table></figure><p>使用<code>import</code>导入相关包</p><ul><li>方式一：import 包名.某一类名</li><li>方式二：import 包名.*</li></ul><h3 id="11-作用域"><a href="#11-作用域" class="headerlink" title="11.作用域"></a>11.作用域</h3><p>priavte          本类可见</p><p>public            所有类可见</p><p>protected      作用于继承关系，定义为protected的字段和方法可以被子类访问，以及子类的子类</p><p>default          本包可见（即默认的形式）（本包中的子类非子类均可访问，不同包中的类及子类均不能访问）</p><p><strong>小结</strong></p><ul><li><p>Java内建的访问权限包括public、protected、private和package权限；</p></li><li><p>Java在方法内部定义的变量是局部变量，局部变量的作用域从变量声明开始，到一个块结束；</p></li><li><p>final修饰符不是访问权限，它可以修饰class、field和method；</p></li><li><p>一个.java文件只能包含一个public类，但可以包含多个非public类。如果有public类，文件名必须和public类的名字相同。</p><h3 id="12-未完待续…"><a href="#12-未完待续…" class="headerlink" title="12.未完待续…"></a>12.未完待续…</h3></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java（二）：流程控制</title>
      <link href="/2020/02/09/Java%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6(%E4%BA%8C)/"/>
      <url>/2020/02/09/Java%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<p><strong>本章内容：</strong></p><blockquote><p>1.Java输入输出<br>2.if判断<br>3.switch语句<br>4.while循环<br>5.do-while循环<br>6.for循环与for each循环<br>7.break与continue<br>8.Java多维数组</p></blockquote><a id="more"></a><h3 id="1-输入输出"><a href="#1-输入输出" class="headerlink" title="1.输入输出"></a>1.输入输出</h3><p>在前面的代码中，我们总是使用<code>System.out.println()</code>来向屏幕输出一些内容。println是print line的缩写，表示输出并换行。因此，如果输出后不想换行，可以用<code>System.out.print()</code><br><strong>格式化输出：</strong><br>如果要把数据显示成我们期望的格式，就需要使用格式化输出的功能。格式化输出使用<code>System.out.printf()</code>，通过使用占位符<code>%?</code>，printf()可以把后面的参数格式化成指定格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> d = <span class="number">3.1415927</span>;</span><br><span class="line">        System.out.printf(<span class="string">"%.2f"</span>,d);  </span><br><span class="line">        System.out.printf(<span class="string">"%.4f"</span>,d);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>占位符</th><th align="center">说明</th></tr></thead><tbody><tr><td>%d</td><td align="center">格式化输出整数</td></tr><tr><td>%x</td><td align="center">格式化输出十六进制整数</td></tr><tr><td>%f</td><td align="center">格式化输出浮点数</td></tr><tr><td>%e</td><td align="center">格式化输出科学计数法表示的浮点数</td></tr><tr><td>%s</td><td align="center">格式化字符串</td></tr></tbody></table><p><strong>输入：</strong> 直接看案例<br>输入类型：<br>方法&nbsp;&nbsp;&nbsp;&nbsp;    描述<br>nextBoolean()&nbsp;&nbsp;&nbsp;&nbsp;    从用户输入中读取1个 boolean 值<br>nextByte()    &nbsp;&nbsp;&nbsp;&nbsp;    从用户输入中读取1个 byte 值<br>nextDouble()&nbsp;&nbsp;&nbsp;&nbsp;    从用户输入中读取1个 double 值<br>nextFloat()&nbsp;&nbsp;&nbsp;&nbsp;    从用户输入中读取1个 float 值<br>nextInt()&nbsp;&nbsp;&nbsp;&nbsp;    从用户输入中读取1个 int 值<br>nextLine()&nbsp;&nbsp;&nbsp;&nbsp;    从用户输入中读取1个 String 值<br>nextLong()    &nbsp;&nbsp;&nbsp;&nbsp;从用户输入中读取1个 long 值<br>nextShort()    &nbsp;&nbsp;&nbsp;&nbsp;从用户输入中读取1个 short 值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in); <span class="comment">// 创建Scanner对象</span></span><br><span class="line">        System.out.print(<span class="string">"Input your name: "</span>); <span class="comment">// 打印提示</span></span><br><span class="line">        String name = scanner.nextLine(); <span class="comment">// 读取一行输入并获取字符串</span></span><br><span class="line">        System.out.print(<span class="string">"Input your age: "</span>); <span class="comment">// 打印提示</span></span><br><span class="line">        <span class="keyword">int</span> age = scanner.nextInt(); <span class="comment">// 读取一行输入并获取整数</span></span><br><span class="line">        System.out.printf(<span class="string">"Hi, %s, you are %d\n"</span>, name, age); <span class="comment">// 格式化输出</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，我们通过import语句导入java.util.Scanner，import是导入某个类的语句，必须放到Java源代码的开头</p><p>然后，创建Scanner对象并传入System.in。System.out代表标准输出流，而System.in代表标准输入流。直接使用System.in读取用户输入虽然是可以的，但需要更复杂的代码，而通过Scanner就可以简化后续的代码。</p><p>有了Scanner对象后，要读取用户输入的字符串，使用<code>scanner.nextLine()</code>；要读取用户输入的整数，使用<code>scanner.nextInt()</code>。Scanner会自动转换数据类型，因此不必手动转换。</p><h3 id="2-if判断"><a href="#2-if判断" class="headerlink" title="2.if判断"></a>2.if判断</h3><p>if语句的基本语法是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if (条件) &#123;</span><br><span class="line">    // 条件一满足时执行</span><br><span class="line">&#125;</span><br><span class="line">else if(条件) &#123;</span><br><span class="line">    // 条件二满足时执行</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">    // 条件不满足时执行</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拓：浮点数相等判断。浮点数在计算机中常常无法精确表示，并且计算可能出现误差，因此，判断浮点数相等用==判断不靠谱</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> x = <span class="number">1</span> - <span class="number">9.0</span> / <span class="number">10</span>;</span><br><span class="line">        <span class="comment">// 利用Math的绝对值之差</span></span><br><span class="line">        <span class="keyword">if</span> (Math.abs(x - <span class="number">0.1</span>) &lt; <span class="number">0.00001</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"x is 0.1"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"x is NOT 0.1"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-switch语句"><a href="#3-switch语句" class="headerlink" title="3.switch语句"></a>3.switch语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">switch (option) &#123;</span><br><span class="line">    case 3:</span><br><span class="line">        ...</span><br><span class="line">        break;</span><br><span class="line">    case 2:</span><br><span class="line">        ...</span><br><span class="line">        break;</span><br><span class="line">    case 1:</span><br><span class="line">        ...</span><br><span class="line">        break;</span><br><span class="line">    default:</span><br><span class="line">        ...</span><br><span class="line">        break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-while循环"><a href="#4-while循环" class="headerlink" title="4.while循环"></a>4.while循环</h3><p><code>while循环</code>在每次循环开始前，首先判断条件是否成立。如果计算结果为true，就把循环体内的语句执行一遍，如果计算结果为false，那就直接跳到while循环的末尾，继续往下执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>; <span class="comment">// 累加的和，初始化为0</span></span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (n &lt;= <span class="number">100</span>) &#123; <span class="comment">// 循环条件是n &lt;= 100</span></span><br><span class="line">            sum = sum + n; <span class="comment">// 把n累加到sum中</span></span><br><span class="line">            n ++; <span class="comment">// n自身加1</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum); <span class="comment">// 5050</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>while循环是先判断循环条件，再循环，因此，有可能一次循环都不做。</strong></p><h3 id="5-do…while循环"><a href="#5-do…while循环" class="headerlink" title="5.do…while循环"></a>5.do…while循环</h3><p>在Java中，while循环是先判断循环条件，再执行循环。而另一种do while循环则是先执行循环，再判断条件，条件满足时继续循环，条件不满足时退出。它的用法是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">do &#123;</span><br><span class="line">    执行循环语句</span><br><span class="line">&#125; while (条件表达式);</span><br></pre></td></tr></table></figure><p>可见，do while循环会至少循环一次。</p><h3 id="6-for循环"><a href="#6-for循环" class="headerlink" title="6.for循环"></a>6.for循环</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] ns = &#123; <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span> &#125;;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;ns.length; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"i = "</span> + i + <span class="string">", ns[i] = "</span> + ns[i]);</span><br><span class="line">            sum = sum + ns[i];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"sum = "</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">i = 0, ns[i] = 1</span></span><br><span class="line"><span class="comment">i = 1, ns[i] = 4</span></span><br><span class="line"><span class="comment">i = 2, ns[i] = 9</span></span><br><span class="line"><span class="comment">i = 3, ns[i] = 16</span></span><br><span class="line"><span class="comment">i = 4, ns[i] = 25</span></span><br><span class="line"><span class="comment">sum = 55</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="for-each循环"><a href="#for-each循环" class="headerlink" title="for each循环"></a>for each循环</h4><p>本质上为增强for循环：<strong>用来遍历集合与数组</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">for(集合/数组的数据类型 变量名：集合名/数组名)&#123;</span><br><span class="line">    执行语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-break与continue"><a href="#7-break与continue" class="headerlink" title="7.break与continue"></a>7.break与continue</h3><p>break：会跳出整个循环，也就是整个循环都不会执行了<br>continue：提前结束本次循环，直接继续执行下次循环</p><h3 id="8-二维数组"><a href="#8-二维数组" class="headerlink" title="8.二维数组"></a>8.二维数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] ns = &#123;</span><br><span class="line">            &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;,</span><br><span class="line">            &#123; <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span> &#125;,</span><br><span class="line">            &#123; <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span> &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(ns.length); <span class="comment">// 3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为ns包含3个数组，因此，<code>ns.length为3</code>.<br><strong>访问二维数组的某个元素需要使用array[row][col]</strong>，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(ns[<span class="number">1</span>][<span class="number">2</span>]); <span class="comment">// 7</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java（一）：程序基础</title>
      <link href="/2020/02/07/Java%E7%A8%8B%E5%BA%8F%E5%9F%BA%E7%A1%80(%E4%B8%80)/"/>
      <url>/2020/02/07/Java%E7%A8%8B%E5%BA%8F%E5%9F%BA%E7%A1%80(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Java是一门面向对象编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程  。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Java具有简单性、面向对象、分布式、健壮性、安全性、平台独立与可移植性、多线程、动态性等特点 。Java可以编写桌面应用程序、Web应用程序、分布式系统和嵌入式系统应用程序等</p><blockquote><p>1.Java基础结构<br>2.Java命名规范与注释<br>3.变量，常量与数据类型<br>4.字符与字符串类型<br>5.数组类型<br>6.常量<br>7.访问修饰符</p></blockquote><a id="more"></a><h3 id="1-Java基础结构"><a href="#1-Java基础结构" class="headerlink" title="1.Java基础结构"></a>1.Java基础结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类名与Java文件名相同</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; <span class="comment">// 方法名是main，main方法表示为入口文件</span></span><br><span class="line">        <span class="comment">// 方法代码...</span></span><br><span class="line">    &#125; <span class="comment">// 方法定义结束</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PS：<strong>我们注意到public除了可以修饰class外，也可以修饰方法。而关键字static是另一个修饰符，它表示静态方法，后面我们会讲解方法的类型，目前，我们只需要知道，Java入口程序规定的方法必须是静态方法，方法名必须为main，括号内的参数必须是String数组。</strong></p><h3 id="2-命名规范"><a href="#2-命名规范" class="headerlink" title="2.命名规范"></a>2.命名规范</h3><p>命名规则：包含数字，字母，下划线与$符号（不能以数字开头；不能为关键字）<br>命名规范：类名（大驼峰原则），方法名与变量名（小驼峰原则）</p><p>补充：<a href="https://blog.csdn.net/weixin_39723544/article/details/82144280" target="_blank" rel="noopener">【python的命名规范】</a></p><h3 id="3-注释"><a href="#3-注释" class="headerlink" title="3.注释"></a>3.注释</h3><p>单行注释：\\<br>多行注释：\* content *\<br>从Java 13开始，字符串可以用<code>&quot;&quot;&quot;...&quot;&quot;&quot;</code>表示多行字符串（Text Blocks）</p><h3 id="4-变量与数据类型"><a href="#4-变量与数据类型" class="headerlink" title="4.变量与数据类型"></a>4.变量与数据类型</h3><p><strong>在Java中，变量必须先定义后使用，定义时，也可以赋值一个初始值</strong>，在Java中，变量分为两种：<code>基本类型的变量</code>和<code>引用类型的变量</code>。<br>基本数据类型是CPU可以直接进行运算的类型。Java定义了以下几种基本数据类型：</p><ul><li><p>整数类型：byte，short，int，long</p></li><li><p>浮点数类型：float，double</p></li><li><p>字符类型：char</p></li><li><p>布尔类型：boolean<br>注意char类型使用单引号<code>&#39;</code>，且仅有一个字符，要和双引号<code>&quot;</code>的字符串类型区分开。</p></li></ul><h3 id="5-常量-通常大写"><a href="#5-常量-通常大写" class="headerlink" title="5.常量(通常大写)"></a>5.常量(通常大写)</h3><p>定义变量的时候，如果加上final修饰符，这个变量就变成了常量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">double</span> PI = <span class="number">3.14</span>; <span class="comment">// PI是一个常量</span></span><br><span class="line"><span class="keyword">double</span> r = <span class="number">5.0</span>;</span><br><span class="line"><span class="keyword">double</span> area = PI * r * r;</span><br><span class="line">PI = <span class="number">300</span>; <span class="comment">// compile error! 常量在定义时进行初始化后就不可再次赋值，再次赋值会导致编译错误。</span></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li><p>变量可重新赋值，等号是赋值语句，不是数学意义的等号。</p></li><li><p>常量在初始化后不可重新赋值，使用常量便于理解程序意图。</p></li></ul><h3 id="6-字符与字符串类型"><a href="#6-字符与字符串类型" class="headerlink" title="6.字符与字符串类型"></a>6.字符与字符串类型</h3><p>字符类型：字符char是基本数据类型，一个char保存一个Unicode字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">char c1 = &apos;A&apos;;</span><br><span class="line">char c2 = &apos;中&apos;;</span><br></pre></td></tr></table></figure><p>要显示一个字符的Unicode编码，只需将char类型直接赋值给int类型即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int n1 = &apos;A&apos;; // 字母“A”的Unicodde编码是65</span><br><span class="line">int n2 = &apos;中&apos;; // 汉字“中”的Unicode编码是20013</span><br></pre></td></tr></table></figure><p>字符串类型：<br>和char类型不同，字符串类型String是引用类型，常常使用双引号包裹起来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String s = &quot;&quot;; // 空字符串，包含0个字符</span><br><span class="line">String s1 = &quot;A&quot;; // 包含一个字符</span><br><span class="line">String s2 = &quot;ABC&quot;; // 包含3个字符</span><br><span class="line">String s3 = &quot;中文 ABC&quot;; // 包含6个字符，其中有一个空格</span><br></pre></td></tr></table></figure><h3 id="7-数组类型"><a href="#7-数组类型" class="headerlink" title="7.数组类型"></a>7.数组类型</h3><p>语法：定义一个数组类型的变量，使用数组类型<code>“类型[]”</code>，例如，<code>int[]</code>。和单个基本类型变量不同，<strong>数组变量初始化必须使用new int[5]表示创建一个可容纳5个int元素的数组</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 数组的创建方式</span></span><br><span class="line">        <span class="keyword">int</span>[] grades = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">        System.out.println(ns.length); <span class="comment">// 5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java的数组有几个特点：</p><ul><li>数组所有元素初始化为默认值，整型都是0，浮点型是0.0，布尔型是false；</li><li>数组一旦创建后，大小就不可改变。</li><li>要访问数组中的某一个元素，需要使用索引。数组索引从0开始，例如，5个元素的数组，索引范围是0~4。</li><li>可以修改数组中的某一个元素，使用赋值语句，例如，ns[1] = 79;。</li><li>可以用数组变量.length 获取数组大小</li></ul><p><a href="https://blog.csdn.net/wu1226419614/article/details/80870120" target="_blank" rel="noopener">python的列表List与python的数组的区别</a>：<br>List（列表） 是 Python 中使用最频繁的数据类型。<strong>列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）</strong>。</p><p>Java数值初始化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int[] ns = new int[] &#123; 68, 79, 91, 85, 62 &#125;;</span><br><span class="line">int[] ns = &#123; 68, 79, 91, 85, 62 &#125;   // 这是简写</span><br><span class="line">ns[index] // 按索引值查找</span><br><span class="line">int[] bb = &#123;1,2,3&#125;;</span><br><span class="line">System.out.println(Arrays.toString(bb));  // 直接打印数组</span><br></pre></td></tr></table></figure><p>小结：</p><ul><li><p>数组是同一数据类型的集合，数组一旦创建后，大小就不可变；</p></li><li><p>可以通过索引访问数组元素，但索引超出范围将报错；</p></li><li><p>数组元素可以是值类型（如int）或引用类型（如String），但数组本身是引用类型；</p></li><li><p>java不同于python，Java的数组无法直接打印，可以使用Arrays.toString(数组名)来直接打印出来</p></li></ul><h3 id="8-访问修饰符"><a href="#8-访问修饰符" class="headerlink" title="8.访问修饰符"></a>8.访问修饰符</h3><table><thead><tr><th>作用域</th><th align="center">本类</th><th>本包范围内</th><th>子孙类（只代表其他包中的子孙类）</th><th align="right">其他包</th></tr></thead><tbody><tr><td>public</td><td align="center">可以</td><td>可以</td><td>可以</td><td align="right">可以</td></tr><tr><td>protected</td><td align="center">可以</td><td>可以</td><td>可以</td><td align="right">不可以</td></tr><tr><td>default</td><td align="center">可以</td><td>可以</td><td>不可以</td><td align="right">不可以</td></tr><tr><td>private</td><td align="center">可以</td><td>不可以</td><td>不可以</td><td align="right">不可以</td></tr></tbody></table><p>同一package可以理解为在同一个村庄</p><p>public 可以理解为无论是否在一个村，谁都可以访问</p><p>protected 可以理解为，只有自己一个村的邻居和子女，以及远嫁出去的子女可以访问</p><p>default 可以理解为，只有自己同村的可以范围，如果子女和自己是同村，也可以使用。如果子女远嫁出去，不在自己的村庄了，很抱歉，远水解不了近渴，远亲不如近邻。</p><p>private 可以理解为   私有财产不可侵犯，有些事情，除了自己，绝不能让其他人访问，例如银行密码。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020 新年快乐  \﻿ (•◡•) /</title>
      <link href="/2020/01/24/HappyNewYear/"/>
      <url>/2020/01/24/HappyNewYear/</url>
      
        <content type="html"><![CDATA[<p><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/2020_HappyNewYear.png" alt=""></fancybox></p><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>你很秀！但下一秒，我跟你一样秀</title>
      <link href="/2020/01/23/%E6%88%90%E7%A5%9E%E8%A3%85%E9%80%BC%E8%BF%9B%E5%8C%96%E4%B9%8B%E8%B7%AF/"/>
      <url>/2020/01/23/%E6%88%90%E7%A5%9E%E8%A3%85%E9%80%BC%E8%BF%9B%E5%8C%96%E4%B9%8B%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<p>【天不造人上之人,亦不造人下之人】谢邀，人在美国，刚下飞机。利益相关，圈子太小，匿了(总结装逼的知识百科)。</p><a id="more"></a><p>要想修身,齐家,治国,平天下,无形之中装逼，除了超凡的智商压制，还离不开知识的积累铺垫。</p><h3 id="1-大相径庭：比喻相差很远，大不相同"><a href="#1-大相径庭：比喻相差很远，大不相同" class="headerlink" title="1. 大相径庭：比喻相差很远，大不相同"></a>1. <strong><font color=#ed1941>大相径庭：比喻相差很远，大不相同</font></strong></h3><p>近义词：    迥然不同、泾渭分明、截然不同、天差地别<br>反义词：    一模一样、如出一辙、大同小异、相差无几</p><h3 id="2-量子纠缠态"><a href="#2-量子纠缠态" class="headerlink" title="2. 量子纠缠态"></a>2. <strong><font color=#ed1941>量子纠缠态</font></strong></h3><p>官方解释：<a href="https://baike.baidu.com/item/%E9%87%8F%E5%AD%90%E7%BA%A0%E7%BC%A0/1714985?fr=aladdin" target="_blank" rel="noopener">【在量子力学里，当几个粒子在彼此相互作用后，由于各个粒子所拥有的特性已综合成为整体性质，无法单独描述各个粒子的性质，只能描述整体系统的性质，则称这现象为量子缠结或量子纠缠（quantum entanglement）。量子纠缠是一种纯粹发生于量子系统的现象；在经典力学里，找不到类似的现象。】</a><br>我一直不能理解量子纠缠理论的解释，为什么两个相距甚远的两个粒子发生量子纠缠现象，就会瞬间互相改变对方的状态？今天早晨，我有了新的理解！因为我觉得爱情可以用量子纠缠来解释，两个完全不相关的人，在某一点发生相遇，发生纠缠，产生了爱情，即使这两个人一个在火星，一个在地球，只要一个人心情发生变化，也会影响到另外一个人的心情，比如一个人像另一个人提出分手，即使距离很远，两个人的恋爱状态都在瞬间发生改变了！爱情的不确定性用量子物理学解释的很清楚，太诡异啦！</p><h3 id="3-从量子纠缠态解释记忆"><a href="#3-从量子纠缠态解释记忆" class="headerlink" title="3. 从量子纠缠态解释记忆"></a>3. <strong><font color=#ed1941>从量子纠缠态解释记忆</font></strong></h3><p>记忆是个神奇的东西，虚虚实实，如薛定谔的猫，也就像处在不同态同时叠加的量子，确定了他的位置，就摸不到他的温度。</p><p>集体记忆更是个神奇的东西，大家一起构建，共同维护，却不一定就是真实的时间轨迹。物理学里面世界尺度小到原子级别以后，就会出现量子态，而相干的量子态之间，一定会纠缠。正如有关联的的两个人，记忆缠在一起，只能同时出现或消失，而无法分开。</p><p>最神奇的事情是，量子态被测量时，会坍缩。本来都有一定几率发生的叠加态，会坍缩到其中一个确定的态，而纠缠的量子之间，因为相干，而无法相互独立，故而测量会使得纠缠的所有量子态集体坍缩，如同集体记忆的共同丢失，变得诡异异常。</p><p>当一个群体的记忆发生变化时，一切都仿佛演化到了新的世界线，在那里，现状里看不清过去，过去的推演不到现在。如同被测量的量子态，并不在遵循因果律，因而也完全无法时间反演，要做的，只有重新建立原来的叠加态，然后二次测量。</p><p>假设我是一个眼睁睁地看着另一个量子态在测量中坍缩的（光或者原子）量子，我记得他坍缩前的样子，记得测量前发生的所有事情，我还和他是一个好朋友。目睹了这一切之后，脑子可能要炸了吧。</p><h3 id="4-诸葛大力对张伟的告白情书"><a href="#4-诸葛大力对张伟的告白情书" class="headerlink" title="4. 诸葛大力对张伟的告白情书"></a>4. <strong><font color=#ed1941><a href="https://www.zhihu.com/question/367384052/answer/982020030" target="_blank" rel="noopener">诸葛大力对张伟的告白情书</a></font></strong></h3><p>特斯拉穿过平面，编织成一个又一个韦伯 。 安倍冲过欧姆，寻找着法拉，充电到一个伏特，电键已断，我以库仑之名涌出，化为焦耳，为了你，烟消云散。<br>我们知道，<strong>磁生电的其中一个方法为让闭合电路中的导体在磁场中做切割磁感线的运动</strong>。那么这个“平面”的理解即是其定义式：Φ=BS，即当平面与磁场方向不垂直时：Φ=BS⊥=BScosθ（θ为两个平面的二面角,即垂直于磁感线的平面），所以晚上老抢我被子的大力所说“平面”应该就指的是上文中物理意义上的抽象的平面。所以“特斯拉穿过平面，编织成一个又一个韦伯 ”整句的意思就是以电磁感应做一个开始，以电流作为主要人物贯穿整封情书。</p><h3 id="5-蚂蚁花呗，京东白条背后的真实利率惊人"><a href="#5-蚂蚁花呗，京东白条背后的真实利率惊人" class="headerlink" title="5. 蚂蚁花呗，京东白条背后的真实利率惊人"></a>5. <strong>蚂蚁花呗，京东白条背后的真实利率惊人</strong></h3><p>在网购支付时，经济不宽裕时我们常常选择分期付款，看似每个月支付的很少，其实背后的利率究竟有多吓人？？其计算方式究竟是怎样的？？我用两张图片来展示如何详细计算<br>不同的平台对利息的叫法是不同的，比如阿里的手续费，京东的服务费等等，就是换了个壳子的叫法而已<br><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/20200201143229.png" alt=""></fancybox><br>这是京东上面价值<code>3899.00</code>的iPhone8，可以看到其费率是1.00%（3899.00<em>1.00% = 38.99）即每期的利息相当于38.99元， <code>这里需要注意的是：不管你每月还了多少，每月利息不是按剩余未还本金计算，而是按照总共本金计算每月利息，总结起来都是这样的套路。</code><br>假如我们选择`201.41</em>24期`这一选项，我们来具体算算这些数字的得来吧</p><ul><li>每月固定的利息为1.00%，其利息 = 本金 * 利率 （3899.00*1.00% = 38.99）</li><li>每月固定的偿还本金为：总金额/分期时限 （3899/24 = 162.46）</li></ul><p>相加大约为38.99+162.46 = 201.45 （201.45 * 24 = 4834.8）</p><p><strong>分期付款时，你的商品（手机）价格是一直贬值的，而你一直支付的该商品的原来价值，所以说资本家又会将这价值差拿来在钱生钱</strong></p><p>比如上图这张图片，虽然没有明确标注出费率是多少，我们也可以计算出来，依旧选择<code>24期分期</code>，由图可知，其24期的手续费为<code>14.36元</code>：</p><ul><li>商品价格 * 费率 = 每期固定利息 （14.36 / 2299 = 0.625%费率）</li><li>每月固定偿还的本金：总金额/分期时限 （2299/24 = 95.79） （95.79 + 14.36 = 110.15元）</li></ul><p><strong>可知在分期付款方面，白条的费率更高，更吓人呀！！</strong></p><p><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/20200201143335.png" alt=""></fancybox><br>至于真实的年化率怎么计算，直接在微信小程序<code>IRR内部收益率计算器</code>上输入计算得知</p><h3 id="6-佳句赏析"><a href="#6-佳句赏析" class="headerlink" title="6. 佳句赏析"></a>6. 佳句赏析</h3><ul><li>Diamonds and gold last for ever，and so will our love:宝石与金子能够永存，我们的爱也是！！</li><li>生前何必久睡，死后自会长眠 ：用来文艺化来表达睡什么睡，起来嗨（睡NMB睡这类的）之意</li></ul><h3 id="7-如何做一个优质的自媒体？做B站UP赚钱吗？"><a href="#7-如何做一个优质的自媒体？做B站UP赚钱吗？" class="headerlink" title="7. 如何做一个优质的自媒体？做B站UP赚钱吗？"></a>7. 如何做一个优质的自媒体？做B站UP赚钱吗？</h3><p>对于B站，我是十分喜欢的，上面有很多的优质的视频资源，我认为它是<font color="#585eaa">“多元宇宙最好的APP”</font>，旨在对标YouTube</p><p><a href="https://www.zhihu.com/question/308179641/answer/986833358" target="_blank" rel="noopener">【做B站up主赚钱吗? - 魔法纽扣的回答 - 知乎】</a><br>我这里对于视频流量特别说明一哈：<strong>千万不要刷流量x3，也不要加互助群</strong>，因为平均有效观看时长被你弄得很低很低。系统算法会认为你的视频质量极低<br>首先它很贵…比如说1万的播放量，B站近百元，爱奇艺16元，腾讯2元，优酷8元，乐视0.8元，秒拍、美拍1元。为什么贵这么多，因为<strong>B站一个IP一天算一个播放量</strong>，应该算是播放量最真实的一个视频网站了，所以我说B站潜力很大，像微博僵尸粉和机器人遍地走之后想变回来都不可能。这么贵的刷，会不会回本呢？</p><p>永远不会，你刷一千播放量，是的，视频很快破千，然后你会发现它几乎就不动了。你在互助群和十几个小伙伴点来点去，然后视频就再也没什么赞了。为什么？因为平均有效观看时长被你弄得很低很低。系统算法会认为你的视频质量极低，一千个人都是点开来一秒钟就走，这个视频可能会被判定为标题党。no作no die</p><h3 id="8-微商-amp-amp-传销"><a href="#8-微商-amp-amp-传销" class="headerlink" title="8.微商&amp;&amp;传销"></a>8.微商&amp;&amp;传销</h3><p>微商与传销本质都是割韭菜，找接盘侠。不同之处是微商有真实的商品，传销完完全全是虚空的，没有实际商品价值，纯粹收人头费，入会费！</p><h3 id="9-2019武汉新型冠状肺炎-amp-瑞德西韦"><a href="#9-2019武汉新型冠状肺炎-amp-瑞德西韦" class="headerlink" title="9.2019武汉新型冠状肺炎&amp;瑞德西韦"></a>9.2019武汉新型冠状肺炎&amp;瑞德西韦</h3><p>2019年的武汉肺炎可谓闹的是沸沸扬扬，给全中国人民带来很大的不便和经济损失。美国的吉利德公司（HIV，流感，丙肝等）研发出了一款<code>瑞德西韦</code>药物，中国与吉利德公司于2月5号紧急签订协议，通常一款药物从研发到上市差不多要10年之久，流程十分复杂：</p><ol><li>一期：安全性的试验</li><li>二期，三期：药物疗效对照试验。实验对象分为两组，实验组注射韦德西韦，对照组注射安慰剂。实验主要分为三个阶段：一盲（实验对象不知道自己注射的是那种试剂），双盲（实验对象，医生不知道试剂类别），三盲（实验对象，医生，实验结果统计专家都不知道）</li><li>上市阶段</li></ol><p>拓展：对于某些疾病尚未有有效药物时，美国的“同情原则”==“中国的死马当活马医”，2月5号第一位病人注射了瑞德西韦，到<strong>4月底实验结束才能确定这种特效药究竟有没有作用</strong></p><h3 id="10-老千层饼了"><a href="#10-老千层饼了" class="headerlink" title="10.老千层饼了"></a>10.老千层饼了</h3><p>释义: 大司马直播LOL游戏时对自己预判操作的解释， 我预判他，他预判了我的预判，我预判他预判了我的预判……一层一层预判像千层饼，所以被网友称他为老千层饼</p><p>用法: 多用于形容或者调侃迂腐的人</p><p>来源: LOL主播大司马直播语录:<strong>你只看到了第二层 ，以为我在第一层 ，实际上我在第五层 <del>~</del></strong></p><h3 id="11-幸存者偏差"><a href="#11-幸存者偏差" class="headerlink" title="11.幸存者偏差"></a>11.幸存者偏差</h3><p>幸存者偏差意思是指，当取得资讯的渠道，仅来自于幸存者时（因为死人不会说话），此资讯可能会存在与实际情况不同的偏差。<br>此规律也适用于金融和商业领域。存活下来的企业往往被视为 “传奇”，它们的做法被争相效仿。而其实有些也许只是因为偶然原因幸存下来了而已。<br>生活中的例子：读书无用论</p><h3 id="12-通货膨胀"><a href="#12-通货膨胀" class="headerlink" title="12.通货膨胀"></a>12.通货膨胀</h3><ol><li><strong>20年来，China平均年化通货膨胀率5%</strong>，银行定期利率才2%，存银行只会越来越少。</li><li>若你的基金或股票年化收益率到达15%，那么你就是巴菲特，每十年资本翻一番</li><li>财经类经典读物《小狗钱钱》推荐</li></ol><h3 id="13-GPU与CPU"><a href="#13-GPU与CPU" class="headerlink" title="13.GPU与CPU"></a>13.GPU与CPU</h3><p>CPU(中央处理器)与显卡（有集显和独显之分）是两个不同的配件，两者相辅相成。<br>GPU与CPU也是不同的，GPU图像处理器是显卡的核心组成部分，一个偏向于逻辑计算处理，一个偏向于数据的运算处理</p><p><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/20200408145414.png" alt=""></fancybox></p><ol><li>怎么查看自己的电脑上的CPU，GPU版本？</li></ol><ul><li>Windows：在“运行”对话框中输入dxdiag,点击“确定” 按钮，会打开“DirectX诊断工具”窗口。点击其中的“显示”标签页，便可查看电脑的显卡信息；点击其中的“系统”标签页，便可查看电脑的CPU信息</li><li>Linux： lspci   | grep -i vga</li></ul><ol start="2"><li>怎么查看自己电脑上的显卡算力？ （python深度学习算力至少3.5）</li></ol><p>GPU的计算能力成为算力，可以在NVIDIA官网（ <a href="https://developer.nvidia.com/cuda-gpus" target="_blank" rel="noopener">https://developer.nvidia.com/cuda-gpus</a> ），比如：<br>GPU&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Compute Capability<br>Geforce RTX 2080&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    7.5<br>Geforce RTX 2070&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    7.5<br>Geforce RTX 2060&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    7.5<br>GeForce GTX 1080&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    6.1</p><ol start="3"><li>CUDA<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CUDA（Compute Unified Device Architecture），是显卡厂商NVIDIA推出的运算平台。 CUDA™是一种由NVIDIA推出的通用并行计算架构，该架构使GPU能够解决复杂的计算问题</li></ol>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Javascript篇章七：js函数与构造函数</title>
      <link href="/2020/01/22/Javascript%E7%AF%87%E7%AB%A0%E4%B8%83/"/>
      <url>/2020/01/22/Javascript%E7%AF%87%E7%AB%A0%E4%B8%83/</url>
      
        <content type="html"><![CDATA[<p>函数: 就是可被重复调用执行的代码块。一般来说，一个函数是可以通过外部代码调用的一个“子程序”（或在递归的情况下由内部函数调用）。像程序本身一样，一个函数由称为函数体的一系列语句组成。值可以传递给一个函数，函数将返回一个值。</p><blockquote><p>1.函数的创建方式<br>2.关于变量作用域的说明<br>3.js的构造函数<br>4.python，js与java关于类和对象的理解</p></blockquote><a id="more"></a><h3 id="1-函数的创建方式"><a href="#1-函数的创建方式" class="headerlink" title="1.函数的创建方式"></a>1.函数的创建方式</h3><p><strong>方式一：函数声明/函数语句（推荐）</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function 函数名(参数1, 参数2, ... , 参数3) &#123;  </span><br><span class="line">    // 需要执行的代码块  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方式二：函数表达式 (function expression)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var myFunction = function name([param1, param2, ... paramN)&#123;statements&#125;</span><br></pre></td></tr></table></figure><p>ps:在使用函数表达式时，注意以下几点</p><ul><li>name:函数名，可以省略。当省略函数名的时候，该函数就成为了匿名函数。</li><li>param:传递给函数的参数的名称，一个函数最多可以有255个参数.</li><li>statements:组成函数体的声明语句。</li></ul><h3 id="2-关于变量作用域的说明"><a href="#2-关于变量作用域的说明" class="headerlink" title="2.关于变量作用域的说明"></a>2.关于变量作用域的说明</h3><p>在JavaScript中，用var申明的变量实际上是有作用域的（局部变量：在函数中通过var声明的变量；全局变量：在函数外通过var声明的变量）<br>变量按照作用域划分有局部变量和全局变量。<br>对以下几点做出说明：</p><ul><li>1.如果一个变量在函数体内部申明，则该变量的作用域为整个函数体，在函数体外不可引用该变量</li><li>2.如果两个不同的函数各自申明了同一个变量，那么该变量只在各自的函数体内起作用。换句话说，不同函数内部的同名变量互相独立，互不影响</li><li>3.由于JavaScript的函数可以嵌套，此时，内部函数可以访问外部函数定义的变量，反过来则不行:举例<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> y = x + <span class="number">1</span>; <span class="comment">// bar可以访问foo的变量x!</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> z = y + <span class="number">1</span>; <span class="comment">// ReferenceError! foo不可以访问bar的变量y!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-js的构造函数"><a href="#3-js的构造函数" class="headerlink" title="3.js的构造函数"></a>3.js的构造函数</h3><ol><li>函数名首字母大写(不强制,味蕾和普通函数的区别)</li><li>通过this来给对象添加属性和方法</li><li><strong>new关键字使用自定义的构造函数去创建，那么new不能省略</strong></li></ol><p>举例说明：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name,age,grender</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 添加属性</span></span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.grender = grender;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加方法</span></span><br><span class="line">    <span class="keyword">this</span>.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name+<span class="string">":"</span>+age+<span class="string">":"</span>+grender</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用构造函数来创建对象(new关键字使用自定义的构造函数去创建对那么new不能省略)</span></span><br><span class="line"><span class="keyword">var</span> student1 = <span class="keyword">new</span> Student(<span class="string">"chd"</span>,<span class="number">18</span>,<span class="string">"man"</span>);</span><br><span class="line"><span class="keyword">var</span> student2 = Student(<span class="string">"lmm"</span>,<span class="number">19</span>,<span class="string">"woman"</span>); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用对象的属性和方法</span></span><br><span class="line"><span class="built_in">console</span>.log(student1.name); <span class="comment">// 调用属性："chd"</span></span><br><span class="line"><span class="built_in">console</span>.log(student1.sayHi()); <span class="comment">// 调用方法："chd:18:man"</span></span><br></pre></td></tr></table></figure><p><strong>instanceof判断是否是实例对象，返回true或者false</strong></p><p><em>2020-3-28： 关于构造函数的新增</em><br><strong>我们知道在一个已存在的对象构造器中是不能添加新的属性的</strong>。若想再添加新的属性，要么删除原来的对象，新建一个构造函数；要么通过prototype（原型对象）来再原来的基础上新增<br>举例说明：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">first, last, age, eye</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.firstName = first;</span><br><span class="line">  <span class="keyword">this</span>.lastName = last;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.eyeColor = eye;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在已存在的对象构造器中新增一个nationality属性</span></span><br><span class="line">Person.prototype.nationality = <span class="string">"English"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myFather = <span class="keyword">new</span> Person(<span class="string">"John"</span>, <span class="string">"Doe"</span>, <span class="number">50</span>, <span class="string">"blue"</span>);</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"spider案例"</span>).innerHTML =<span class="string">"我父亲对国籍是 "</span> + myFather.nationality;</span><br></pre></td></tr></table></figure><h3 id="4-python，js与java关于类和对象的理解"><a href="#4-python，js与java关于类和对象的理解" class="headerlink" title="4.python，js与java关于类和对象的理解"></a>4.python，js与java关于类和对象的理解</h3><blockquote><p>Python的类和对象</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class 类名(object/父类):</span><br><span class="line">    def __init__(self,参数1,参数2):</span><br><span class="line">        self.对象的属性1 = 参数1</span><br><span class="line">        self.对象的属性2 = 参数2</span><br><span class="line"></span><br><span class="line">    def 方法名(self):pass</span><br><span class="line"></span><br><span class="line">    def 方法名2(self):pass</span><br><span class="line"></span><br><span class="line">对象名 = 类名(实参1,实参2)  #对象就是实例，代表一个具体的东西</span><br><span class="line">                  #类名() : 类名+括号就是实例化一个类，相当于调用了__init__方法</span><br><span class="line">                  #括号里传参数，参数不需要传self，其他与init中的形参一一对应</span><br><span class="line">                  #结果返回一个对象</span><br><span class="line">对象名.对象的属性1   #查看对象的属性，直接用 对象名.属性名 即可</span><br><span class="line">对象名.方法名()     #调用类中的方法，直接用 对象名.方法名() 即可</span><br></pre></td></tr></table></figure><blockquote><p>js的class类与对象</p></blockquote><p>(<strong>本质上看js是没有class这个概念的：</strong>)constructor 是一种用于创建和初始化class创建的对象的特殊方法(与js的构造函数用法相差无几)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Polygon</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(age) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">"Polygon"</span>;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.demo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name+<span class="string">":"</span>+<span class="keyword">this</span>.age</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> poly1 = <span class="keyword">new</span> Polygon(<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"> <span class="built_in">console</span>.log(poly1);        <span class="comment">// [object Object]</span></span><br><span class="line"> <span class="built_in">console</span>.log(poly1.demo()); <span class="comment">// "Polygon:18"</span></span><br></pre></td></tr></table></figure><blockquote><p>java的类与对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OOP</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 在通过new操作符调用的时候，构造方法的参数数量、位置和类型一一对应</span></span><br><span class="line">        Person p = <span class="keyword">new</span> Person(<span class="string">"chd"</span>,<span class="number">18</span>,<span class="number">10086</span>); </span><br><span class="line">        System.out.println(p.getAge());</span><br><span class="line">        <span class="comment">// 调用实例对象的属性</span></span><br><span class="line">        System.out.println(p.tel);</span><br><span class="line">        System.out.println(p.getAge());</span><br><span class="line">        System.out.println(p.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这个不能省略，用以声明变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> tel;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这就是Java的构造方法，类似于python的def __init__函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age,<span class="keyword">int</span> tel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.tel = tel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更新中。。。</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python的requirement.txt文件</title>
      <link href="/2020/01/22/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89/"/>
      <url>/2020/01/22/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;正如 PHP 中使用 Composer 维护依赖一样，Python 也需要维护项目相关的依赖包。通常我们会在项目的根目录下放置一个 requirement.txt 文件，用于记录所有依赖包和它的确切版本号。</p><a id="more"></a><p><strong>1.Python的依赖</strong><br>requirement.txt 的内容长这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">alembic==1.0.10</span><br><span class="line">appnope==0.1.0</span><br><span class="line">astroid==2.2.5</span><br><span class="line">attrs==19.1.0</span><br><span class="line">backcall==0.1.0</span><br><span class="line">bcrypt==3.1.6</span><br><span class="line">bleach==3.1.0</span><br><span class="line">cffi==1.12.3</span><br><span class="line">Click==7.0</span><br><span class="line">decorator==4.4.0</span><br><span class="line">defusedxml==0.6.0</span><br><span class="line">entrypoints==0.3</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>2.如何使用：</strong><br>那么 requirement.txt 究竟如何使用呢？<br>当我们拿到一个项目时，首先要在项目运行环境安装 requirement.txt 所包含的依赖：</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirement.txt</span><br></pre></td></tr></table></figure><p>当我们要把环境中的依赖写入 requirement.txt 中时，可以借助 freeze 命令：</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt;requirements.txt</span><br></pre></td></tr></table></figure><p><strong>3.环境混用怎么办？</strong><br>在导出依赖到 requirement.txt 文件时会有一种尴尬的情况。<br>你的本地环境不仅包含项目 A 所需要的依赖，也包含着项目 B 所需要的依赖。此时我们要如何做到只把项目 A 的依赖导出呢？</p><p>pipreqs 可以通过扫描项目目录，帮助我们仅生成当前项目的依赖清单。</p><p>通过以下命令安装：</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pipreqs</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipreqs ./</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> requirement.txt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html关于图片自适应大小的说明</title>
      <link href="/2020/01/20/html%E5%85%B3%E4%BA%8E%E5%9B%BE%E7%89%87%E8%87%AA%E9%80%82%E5%BA%94%E5%A4%A7%E5%B0%8F%E7%9A%84%E8%AF%B4%E6%98%8E/"/>
      <url>/2020/01/20/html%E5%85%B3%E4%BA%8E%E5%9B%BE%E7%89%87%E8%87%AA%E9%80%82%E5%BA%94%E5%A4%A7%E5%B0%8F%E7%9A%84%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在div盒子中想要展示一张图片，我们可以使用style样式来设置width或者height中的某一项，即<code>style=&quot;width:100px&quot;</code>，这时另一项就会自适应变化,按比例变化。<strong>学习犹如逆水行舟，不进则退</strong>。</p><a id="more"></a><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在设置网页的整个背景图片时，我们可以在css中的使用<code>background-size：100%</code>来铺满整个页面，也可以设置为其它的百分比数值来局部铺HTML页面。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"../public/images/5927f2c7269aa.jpg"</span>);</span><br><span class="line">    <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在div盒子中想要展示一张图片，我们可以使用style样式来设置width或者height中的某一项，即<code>style=&quot;width:100px&quot;</code>，这时另一项就会自适应变化,按比例变化。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我来举一个例子说明，也可以总结出一个公式，以后若固定了width或height中的某一项，另一项也就会求出来：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../public/images/5d5e5c7d1e1b8.jpg"</span>  <span class="attr">style</span>=<span class="string">"width: 100px"</span> /&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入的图片的原分辨率为1920*1080--&gt;</span></span><br></pre></td></tr></table></figure><p><strong>style=&quot;width: 100px&quot;</strong>：将引入的图片的宽度固定为100px；此时height就会自适应变化。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL0Zpb3JhTG92ZS9JbWFnZXMvJUU1JUJFJUFFJUU0JUJGJUExJUU2JTg4JUFBJUU1JTlCJUJFXzIwMjAwMTIwMTEzMjIzLnBuZw?x-oss-process=image/format,png" alt=""><br>由上图可知，图片已经自适应变化了，<code>height:56.25px</code>，这个数字是怎么得出来的？<br>width:1920---&gt;100<br>heidth:1080 ---&gt;56.25  &nbsp;&nbsp;&nbsp;因为：1080/(1920/100)=56.25px</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql查询大全补充</title>
      <link href="/2020/01/17/sql%E7%B3%BB%E5%88%97%E6%9B%B4%E6%96%B0%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2020/01/17/sql%E7%B3%BB%E5%88%97%E6%9B%B4%E6%96%B0%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>数据库是每一个IT工程师必备的技能树，而select往往是使用频率最大的，总结并补充之前有关于select查询的补充</p><blockquote><p><font color=#FF3030>本文要点：</font><br>1.sql的执行顺序<br>2.select+case…when…then…end 语句<br>3.select top语句<br>4.where条件查询<br>5.sql函数大全</p></blockquote><a id="more"></a><h3 id="1-sql的执行顺序"><a href="#1-sql的执行顺序" class="headerlink" title="1.sql的执行顺序"></a>1.sql的执行顺序</h3><p>下面展示一张sql的执行图：<br><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/20150621112546457.png" alt=""></fancybox></p><p>这里我们可以理解为：先执行from语句，获取表----&gt;然后在使用where过滤掉不相关的记录----&gt;再执行聚合函数或者group by分组----&gt;紧接着执行having进行二次过滤----&gt;最后执行sql的select语句</p><h3 id="2-Select-case…when…then…end-语句"><a href="#2-Select-case…when…then…end-语句" class="headerlink" title="2.Select+case…when…then…end 语句"></a>2.Select+case…when…then…end 语句</h3><p><strong>case…when…then语句，相当于编程语言中if判断(important)</strong></p><ul><li>例1:根据IsUser字段查询学生是否在线<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.StudentID,</span><br><span class="line">(<span class="keyword">case</span> a.IsUse </span><br><span class="line"><span class="keyword">when</span> <span class="string">'0'</span> <span class="keyword">then</span> <span class="string">'未在线'</span> </span><br><span class="line"><span class="keyword">when</span> <span class="string">'1'</span> <span class="keyword">then</span> <span class="string">'在线'</span> <span class="keyword">else</span> <span class="string">'未上传'</span> <span class="keyword">end</span>) <span class="keyword">as</span> 在线情况</span><br><span class="line"><span class="keyword">from</span> StudentBindPaperTypeEntity <span class="keyword">as</span> a</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-select-top语句"><a href="#3-select-top语句" class="headerlink" title="3.select top语句"></a>3.select top语句</h3><p>TOP 子句用于规定要返回的记录的数目。<br>对于拥有数千条记录的大型表来说，TOP 子句是非常有用的。<br>注释：<strong>并非所有的数据库系统都支持 TOP 子句(top仅适用于sql server)。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 例1.取出表中第几行数据（如第一行）</span></span><br><span class="line"><span class="keyword">select</span> top <span class="number">1</span> * <span class="keyword">from</span> TABLE_NAME </span><br><span class="line"></span><br><span class="line"><span class="comment">--例2.取出表中百分之多少数据</span></span><br><span class="line"><span class="keyword">select</span> top <span class="number">50</span> <span class="keyword">percent</span> * <span class="keyword">from</span> TABLE_NAME</span><br></pre></td></tr></table></figure><blockquote><p>oracle语法:rownum</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">ROWNUM</span> &lt;= <span class="built_in">number</span></span><br></pre></td></tr></table></figure><blockquote><p>mysql语法：limit</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">LIMIT</span> <span class="built_in">number</span></span><br></pre></td></tr></table></figure><h3 id="4-where条件查询"><a href="#4-where条件查询" class="headerlink" title="4.where条件查询"></a>4.where条件查询</h3><p><fancybox><img src="https://img-blog.csdnimg.cn/20200114093851576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NoYW5nXzAxMjI=,size_16,color_FFFFFF,t_70" alt=""></fancybox></p><p><strong>特别注意：关于存在多个查询条件时的一个大坑,2020-3-23就是被这个大坑花了很多时间</strong><br>关于SQL的where子句中包含多个and和or是计算顺序问题，SQL在处理操作时会优先处理 and 操作，这就是很多人会得到很多错误的原因,要多使用小括号，以免产生歧义</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">where corg_code = '199' and (period between '201801' and '201803' or  period BETWEEN '201901' and '201903')</span><br></pre></td></tr></table></figure><h3 id="5-sql函数大全"><a href="#5-sql函数大全" class="headerlink" title="5.sql函数大全"></a>5.sql函数大全</h3><p><a href="https://www.cnblogs.com/tongbiao/p/6823427.html" target="_blank" rel="noopener">【常用经典SQL语句大全完整版–详解+实例】</a><br><a href="https://blog.csdn.net/sundna/article/details/89926586" target="_blank" rel="noopener">【SQL函数大全及示例汇总】</a></p><p>补充：left(filed,numbers):字段从左边开始截取指定位数<br>geohash通过算法将1个定位的经度和纬度2个数值，转换成1个hash字符串。如果2个地方距离越近，那么他们的hash值的前缀越相同。然后通过数据库中like操作符 “ like wtw366%” 快速查找到附近的车。比如上海腾讯大厦的经纬度是： （31.1688749, 121.3975184），那么转换成geohash就是 wtw366ngz5qt，我们想找附近的车子，可以用：<br>left(filed,numbers):字段从左边开始截取指定位数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> cart <span class="keyword">where</span> geohash <span class="keyword">like</span> <span class="string">'wtw366%'</span> ;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> cart <span class="keyword">where</span> <span class="keyword">LEFT</span>(geohash, <span class="number">6</span>) = <span class="string">'wtw366'</span>;</span><br></pre></td></tr></table></figure><h3 id="6-多字段的group-by"><a href="#6-多字段的group-by" class="headerlink" title="6.多字段的group by"></a>6.多字段的group by</h3><p><code>group by</code>表示为分组，一定要和聚合函数一起并用。但是在这里，我们不深思分组函数的基本用法，而是考虑sql对多个字段进行group by分组：</p><p><strong>GROUP BY X意思是将所有具有相同X字段值的记录放到一个分组里，<br>GROUP BY X, Y意思是将所有具有相同X字段值进行分组后，再把Y字段值进行分组处理。</strong></p><h3 id="7-SQL中IS-NOT-NULL与-NULL的区别"><a href="#7-SQL中IS-NOT-NULL与-NULL的区别" class="headerlink" title="7. SQL中IS NOT NULL与 !=NULL的区别"></a>7. SQL中IS NOT NULL与 !=NULL的区别</h3><p>平时经常会遇到这两种写法：IS NOT NULL与!=NULL。也经常会遇到数据库有符合条件!=NULL的数据，但是返回为空集合。实际上，是由于对二者使用区别理解不透彻。</p><p><font color="#f58220">默认情况下，推荐使用 IS NOT NULL去做条件判断，因为SQL默认情况下对WHERE XX！= Null的判断会永远返回0行，却不会提示语法错误</font><br>最后，我们再次声明：数据库默认情况下，做SQL条件查询比较时使用关键字“is null”和“is not null”</p><h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><ul><li><a href="https://www.cnblogs.com/87060524test/p/10402784.html" target="_blank" rel="noopener">SQL GROUP BY对多个字段进行分组</a></li><li><a href="https://stackoverflow.com/questions/2421388/using-group-by-on-multiple-columns" target="_blank" rel="noopener">Using group by on multiple columns</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析章节（三）：pandas</title>
      <link href="/2020/01/16/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%AB%A0%E8%8A%82%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2020/01/16/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%AB%A0%E8%8A%82%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Pandas是Python的一个大数据处理模块。Pandas使用一个二维的数据结构DataFrame来表示表格式的数据，相比较于Numpy，Pandas可以存储混合的数据结构，同时使用NaN来表示缺失的数据，而不用像Numpy一样要手工处理缺失的数据，并且Pandas使用轴标签来表示行和列。</p><a id="more"></a><p>pandas与numpy在数据处理前期阶段起着重要作用，两者相辅相成，异曲同工</p><h3 id="1-Series一维数据"><a href="#1-Series一维数据" class="headerlink" title="1.Series一维数据"></a>1.Series一维数据</h3><p><strong>Series是一种类似于一维数组的对象，由一组数据和一组与之相关的数据标签（索引）组成</strong><br>Series的字符串表现形式为：索引在左边，值在右边。如果没有为数据指定索引，于是会自动创建一个0到N-1(N为数据的长度)的整数型索引。可以通过Series的values和index属性获取其数组表现形式和索引对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">a = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="string">""" a:左边为索引，右边为值</span></span><br><span class="line"><span class="string">0    1</span></span><br><span class="line"><span class="string">1    2</span></span><br><span class="line"><span class="string">2    3</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h4 id="1-1-传递带有日期时间索引和标签"><a href="#1-1-传递带有日期时间索引和标签" class="headerlink" title="1.1 传递带有日期时间索引和标签"></a>1.1 传递带有日期时间索引和标签</h4><p>dates = pd.date_range(&#39;20190110&#39;,periods=6):period表示时间期间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; dates</span><br><span class="line">DatetimeIndex([&apos;2020-01-10&apos;, &apos;2020-01-11&apos;, &apos;2020-01-12&apos;, &apos;2020-01-13&apos;,</span><br><span class="line">               &apos;2020-01-14&apos;, &apos;2020-01-15&apos;],</span><br><span class="line">              dtype=&apos;datetime64[ns]&apos;, freq=&apos;D&apos;)</span><br></pre></td></tr></table></figure><h4 id="1-2-pandas的index指定索引目录"><a href="#1-2-pandas的index指定索引目录" class="headerlink" title="1.2 pandas的index指定索引目录"></a>1.2 pandas的index指定索引目录</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a1 = pd.Series([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>])</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>a1</span></span><br><span class="line"><span class="string">a    2</span></span><br><span class="line"><span class="string">b    3</span></span><br><span class="line"><span class="string">c    4</span></span><br><span class="line"><span class="string">d    5</span></span><br><span class="line"><span class="string">dtype: int64</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h3 id="2-Series支持numpy的array特性"><a href="#2-Series支持numpy的array特性" class="headerlink" title="2.Series支持numpy的array特性"></a>2.Series支持numpy的array特性</h3><ul><li><p><strong>从ndarray创建Series</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># np.array创建一维数组</span></span><br><span class="line">a2 = pd.Series(np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]))</span><br><span class="line"><span class="comment"># np.arrange(start,end,jiange)创建一维数组</span></span><br><span class="line">a3 = pd.Series(np.arange(<span class="number">1</span>,<span class="number">9</span>,<span class="number">2</span>))</span><br><span class="line"><span class="string">"""a2:</span></span><br><span class="line"><span class="string">0    1</span></span><br><span class="line"><span class="string">1    2</span></span><br><span class="line"><span class="string">2    3</span></span><br><span class="line"><span class="string">3    4</span></span><br><span class="line"><span class="string">dtype: int32</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure></li><li><p><strong>与标量的运算</strong><br>两个series运算,即索引值相对应的值相加减:<br>a2 + a3</p></li><li><p><strong>Series的索引:下角标从零开始(类似于数组的索引切片)</strong><br>b[0] :单个字符的索引<br>b[[1,2,3]] :数组组合的索引所对应的具体值</p></li><li><p><strong>切片操作(满足左闭右开，起始索引为0的原则)</strong><br>b[1:4]</p></li><li><p><strong>通用函数（最大值，绝对值等）</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">data = <span class="number">10</span></span><br><span class="line">c1 = pd.Series(np.linspace(<span class="number">-1</span>,<span class="number">1</span>,data))</span><br><span class="line">print(c1)</span><br><span class="line">print(c1.min())</span><br><span class="line">print(c1.max())</span><br></pre></td></tr></table></figure><h3 id="3-从字典创建series"><a href="#3-从字典创建series" class="headerlink" title="3.从字典创建series"></a>3.从字典创建series</h3></li></ul><h4 id="3-1-从字典创建series"><a href="#3-1-从字典创建series" class="headerlink" title="3.1 从字典创建series"></a>3.1 从字典创建series</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sr = pd.Series(&#123;<span class="string">'name'</span>: <span class="string">'chd'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'gender'</span>: <span class="string">'man'</span>, <span class="string">'capacity'</span>: <span class="number">10</span>,<span class="string">'is_love_girl'</span>:<span class="literal">True</span>&#125;)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>sr</span></span><br><span class="line"><span class="string">name             chd</span></span><br><span class="line"><span class="string">age               18</span></span><br><span class="line"><span class="string">gender           man</span></span><br><span class="line"><span class="string">capacity          10</span></span><br><span class="line"><span class="string">is_love_girl    True</span></span><br><span class="line"><span class="string">dtype: object</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h4 id="3-2-in运算："><a href="#3-2-in运算：" class="headerlink" title="3.2.in运算："></a>3.2.in运算：</h4><p>&#39;a&#39; in sr:<strong>只能判断键名是否在’pandas.core.series.Series’类中，不能判断values值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'name'</span> <span class="keyword">in</span> sr)  <span class="comment"># true</span></span><br><span class="line">print(<span class="string">'age'</span> <span class="keyword">in</span> sr)   <span class="comment"># true</span></span><br><span class="line">print(<span class="string">'love is unlimited'</span> <span class="keyword">in</span> sr)   <span class="comment"># false</span></span><br></pre></td></tr></table></figure><h4 id="3-3-遍历运算-只遍历打印值，不会打印键名"><a href="#3-3-遍历运算-只遍历打印值，不会打印键名" class="headerlink" title="3.3.遍历运算:只遍历打印值，不会打印键名"></a>3.3.遍历运算:只遍历打印值，不会打印键名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; x = [i for i in sr]</span><br><span class="line">&gt;&gt;&gt; x</span><br><span class="line">[&apos;chd&apos;, 18, &apos;man&apos;, 10, True]</span><br></pre></td></tr></table></figure><h4 id="3-4-获取索引以及对应值"><a href="#3-4-获取索引以及对应值" class="headerlink" title="3.4.获取索引以及对应值"></a>3.4.获取索引以及对应值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(sr.index) <span class="comment"># 获取索引</span></span><br><span class="line">print(sr.values) <span class="comment"># 获取对应的值</span></span><br></pre></td></tr></table></figure><h4 id="3-5-整数索引问题："><a href="#3-5-整数索引问题：" class="headerlink" title="3.5 整数索引问题："></a>3.5 整数索引问题：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str = pd.Series(np.arange(<span class="number">4.</span>))</span><br><span class="line">print(str)</span><br></pre></td></tr></table></figure><h4 id="3-6-浅拷贝，a，b都指向内存地址，若其中一个修改值，则另一个也必会修改值"><a href="#3-6-浅拷贝，a，b都指向内存地址，若其中一个修改值，则另一个也必会修改值" class="headerlink" title="3.6 浅拷贝，a，b都指向内存地址，若其中一个修改值，则另一个也必会修改值"></a>3.6 浅拷贝，a，b都指向内存地址，若其中一个修改值，则另一个也必会修改值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str2 = str[<span class="number">1</span>:].copy()</span><br><span class="line">print(str2)</span><br></pre></td></tr></table></figure><p>series数据对齐，pandas在进行两个Series对象运算时，会按索引自动对齐然后运算<br>若两series对象的index长度不一样，则会当做数据缺失值NaN处理</p><h3 id="4-Series对象运算"><a href="#4-Series对象运算" class="headerlink" title="4.Series对象运算"></a>4.Series对象运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sr1 = pd.Series([<span class="number">12</span>, <span class="number">23</span>, <span class="number">34</span>, <span class="number">34</span>], index=[<span class="string">'c'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>])</span><br><span class="line">sr2 = pd.Series([<span class="number">11</span>, <span class="number">20</span>, <span class="number">10</span>], index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>])</span><br><span class="line">print(sr1 + sr2)</span><br></pre></td></tr></table></figure><h4 id="4-1-Series灵活算术方法"><a href="#4-1-Series灵活算术方法" class="headerlink" title="4.1 Series灵活算术方法"></a>4.1 Series灵活算术方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(sr1.add(sr2,fill_value = <span class="number">0</span>))</span><br><span class="line">print(sr1.sub(sr2,fill_value = <span class="number">0</span>))</span><br><span class="line">print(sr1.div(sr2,fill_value = <span class="number">0</span>))</span><br></pre></td></tr></table></figure><h4 id="4-2-缺失值处理方式："><a href="#4-2-缺失值处理方式：" class="headerlink" title="4.2 缺失值处理方式："></a>4.2 缺失值处理方式：</h4><blockquote><p>缺失值处理方式一：过滤缺失数据str.dropna()：直接删除缺值的键值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = pd.Series(np.array([<span class="number">1</span>, <span class="number">3</span>, <span class="number">4.</span>, <span class="literal">None</span>, <span class="number">8</span>, <span class="literal">None</span>, <span class="number">99</span>]))</span><br><span class="line">print(d.dropna())</span><br><span class="line">print(d.isnull())  <span class="comment"># 判断每一键值对是否缺失数据</span></span><br></pre></td></tr></table></figure><blockquote><p>缺失值处理方式二：填充缺失数据：str.fillna(填充值)</p></blockquote><p>print(d.fillna(1))</p><blockquote><p>缺失值处理方式三：不处理</p></blockquote><blockquote><p>提出NaN后求得平均值</p></blockquote><p>print(d.mean())</p><h3 id="5-DataFrame二维数组对象"><a href="#5-DataFrame二维数组对象" class="headerlink" title="5.DataFrame二维数组对象"></a>5.DataFrame二维数组对象</h3><p>DataFrame是一个表格式的数据结构，含有一组有序的列（即：好几列）。DataFrame可以被看做是由Series组成的字典，并且共用一个索引。</p><h4 id="5-1-创建方式1：通过一个字典来创建"><a href="#5-1-创建方式1：通过一个字典来创建" class="headerlink" title="5.1 创建方式1：通过一个字典来创建"></a>5.1 创建方式1：通过一个字典来创建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = pd.DataFrame(&#123;<span class="string">'name'</span>: [<span class="string">'chd'</span>, <span class="string">'zyq'</span>, <span class="string">'fqt'</span>], <span class="string">'age'</span>: [<span class="number">18</span>, <span class="number">12</span>, <span class="number">15</span>]&#125;)</span><br><span class="line">print(a)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;a  结果为</span></span><br><span class="line"><span class="string">  name  age</span></span><br><span class="line"><span class="string">0  chd   18</span></span><br><span class="line"><span class="string">1  zyq   12</span></span><br><span class="line"><span class="string">2  fqt   15</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h4 id="5-2-index指定行索引"><a href="#5-2-index指定行索引" class="headerlink" title="5.2 index指定行索引"></a>5.2 index指定行索引</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;pd.DataFrame(&#123;&apos;name&apos;: [&apos;chd&apos;, &apos;zyq&apos;, &apos;fqt&apos;], &apos;age&apos;: [18, 12, 15]&#125;,index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;])</span><br><span class="line">  name  age</span><br><span class="line">a  chd   18</span><br><span class="line">b  zyq   12</span><br><span class="line">c  fqt   15</span><br></pre></td></tr></table></figure><h4 id="5-3-创建方式二：用Series来组成字典"><a href="#5-3-创建方式二：用Series来组成字典" class="headerlink" title="5.3 创建方式二：用Series来组成字典"></a>5.3 创建方式二：用Series来组成字典</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;pd.DataFrame(&#123;&apos;one&apos;:pd.Series([1,2,3],index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;]),&apos;two&apos;:pd.Series([5,6,7,8],index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;])&#125;)</span><br><span class="line">   one  two</span><br><span class="line">a  1.0    5</span><br><span class="line">b  2.0    6</span><br><span class="line">c  3.0    7</span><br><span class="line">d  NaN    8</span><br></pre></td></tr></table></figure><h4 id="5-4-其它"><a href="#5-4-其它" class="headerlink" title="5.4 其它"></a>5.4 其它</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#　CSV文件的读写</span></span><br><span class="line"><span class="comment"># CSV文件的写入</span></span><br><span class="line">print(a2.to_csv(<span class="string">'spider案例.csv'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># CSV文件的读取</span></span><br><span class="line">print(pd.read_csv(<span class="string">'spider案例.csv'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># json数据的读取和存储</span></span><br><span class="line">df = pd.read_json(<span class="string">'demo2.json'</span>)</span><br><span class="line"><span class="comment"># 读取时可能乱序，需要对索引进行重新排序</span></span><br><span class="line">df = df.sort_index()</span><br><span class="line">print(df)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 存储为json数据</span></span><br><span class="line">df.to_json(<span class="string">'out.json'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Excel数据的读取</span></span><br><span class="line">df_excel = pd.read_excel(<span class="string">'inputs.xlsx'</span>)</span><br><span class="line"><span class="comment"># Excel的存储:需要用到openpyxl库</span></span><br><span class="line"><span class="comment"># sheet_name：设置工作表名，indexA=None不存储行索引</span></span><br><span class="line">df_excel.to_excel(<span class="string">'biao_name.xlsx'</span>,sheet_name=<span class="string">'biao_name'</span>,index = <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># DataFrame常用属性</span></span><br><span class="line"><span class="comment"># var.index获取行索引</span></span><br><span class="line">print(a2.index)</span><br><span class="line"></span><br><span class="line"><span class="comment"># var.columns:获取列索引</span></span><br><span class="line">print(a2.columns)</span><br><span class="line"></span><br><span class="line"><span class="comment"># values 获取取值数组（一般是二维数组）</span></span><br><span class="line">print(a2.values)</span><br><span class="line"></span><br><span class="line"><span class="comment"># T:装置</span></span><br><span class="line">print(a2.T)</span><br><span class="line"></span><br><span class="line"><span class="comment"># descriibe():获取统计数据</span></span><br><span class="line">print(a2.describe())</span><br></pre></td></tr></table></figure><h3 id="6-pandas操作excel文件"><a href="#6-pandas操作excel文件" class="headerlink" title="6.pandas操作excel文件"></a>6.pandas操作excel文件</h3><p>pandas库操作excel其实是依赖其他的一些库，所以我们需要安装多个库</p><p>pip install xlrd<br>pip install openpyxl<br>pip install numpy<br>pip install pandas</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pandas读取Excel的第一种方法</span></span><br><span class="line"><span class="comment">#方法一：默认读取第一个表单</span></span><br><span class="line">print(<span class="string">"\n方法一："</span>)</span><br><span class="line">xls_data=pd.read_excel(<span class="string">'ceshi.xlsx'</span>,index_col=<span class="string">'序列'</span>) <span class="comment">#index_col 分行编号</span></span><br><span class="line"><span class="comment"># #这个会直接默认读取到这个Excel的第一个表单</span></span><br><span class="line">print(xls_data.head()) <span class="comment">#默认读取前5行的数据</span></span><br><span class="line"><span class="comment"># print("输出:\n&#123;0&#125;".format(xls_data.head()))#格式化输出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#方法二：通过指定表单名的方式来读取</span></span><br><span class="line">print(<span class="string">"\n方法二："</span>)</span><br><span class="line">df=pd.read_excel(<span class="string">'ceshi.xlsx'</span>,sheet_name=<span class="string">'Sheet2'</span>)</span><br><span class="line">data=df.head() <span class="comment">#默认读取前5行的数据</span></span><br><span class="line">print(<span class="string">"获取到所有的值:\n&#123;0&#125;"</span>.format(data))<span class="comment">#格式化输出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#方法三：通过表单索引来指定要访问的表单，0表示第一个表单</span></span><br><span class="line"><span class="comment">#也可以采用表单名和索引的双重方式来定位表单</span></span><br><span class="line"><span class="comment">#也可以同时定位多个表单，方式都罗列如下所示</span></span><br><span class="line">print(<span class="string">"\n方法三："</span>)</span><br><span class="line"><span class="comment"># df=pd.read_excel('ceshi.xlsx',sheet_name=['Sheet1','Sheet2'])</span></span><br><span class="line"><span class="comment">#可以通过表单名同时指定多个--不推荐使用，效果不好</span></span><br><span class="line"><span class="comment"># df=pd.read_excel('ceshi.xlsx',sheet_name=['Sheet2',0])</span></span><br><span class="line"><span class="comment">#可以混合的方式来指定--不推荐使用，效果不好</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># df=pd.read_excel('ceshi.xlsx',sheet_name=1)</span></span><br><span class="line"><span class="comment">#可以通过表单索引来指定读取的表单--列表形式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># df=pd.read_excel('ceshi.xlsx',sheet_name=[0,1])</span></span><br><span class="line"><span class="comment">#可以通过索引 同时指定多个--不推荐使用，效果不好</span></span><br><span class="line"></span><br><span class="line">data=df.values <span class="comment">#获取所有的数据，注意这里不能用head()方法哦~</span></span><br><span class="line">print(<span class="string">"获取到所有的值:\n&#123;0&#125;"</span>.format(data))<span class="comment">#格式化输出</span></span><br><span class="line"><span class="comment"># 以上读取的数据是一个二维矩阵，不利于处理自动化测试，</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pandas操作Excel的行列</span></span><br><span class="line">print(<span class="string">"\npandas操作Excel的行列"</span>)</span><br><span class="line"><span class="comment"># 1：读取指定的单行，数据会存在列表里面</span></span><br><span class="line">df=pd.read_excel(<span class="string">'ceshi.xlsx'</span>)</span><br><span class="line">data1=df.loc[<span class="number">0</span>].values <span class="comment">#0表示第一行 这里读取数据并不包含表头，要注意哦！</span></span><br><span class="line">print(<span class="string">"读取指定的单行数据：\n&#123;0&#125;"</span>.format(data1))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"\n2：读取指定的多行，数据会存在嵌套的列表里面："</span>)</span><br><span class="line"><span class="comment"># 2：读取指定的多行，数据会存在嵌套的列表里面：</span></span><br><span class="line">df=pd.read_excel(<span class="string">'ceshi.xlsx'</span>)</span><br><span class="line">data2=df.loc[[<span class="number">1</span>,<span class="number">2</span>]].values</span><br><span class="line">print(<span class="string">"读取指定的多行数据：\n&#123;0&#125;"</span>.format(data2))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"\n3：读取指定的行列"</span>)</span><br><span class="line"><span class="comment"># 3：读取指定的行列：</span></span><br><span class="line">df=pd.read_excel(<span class="string">'ceshi.xlsx'</span>)</span><br><span class="line">data3=df.iloc[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">print(<span class="string">"读取指定行列的数据：\n&#123;0&#125;"</span>.format(data3)) <span class="comment">#dandelion-alipaymobile</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4：读取指定的多行多列值：</span></span><br><span class="line">print(<span class="string">"\n4：读取指定的多行多列值："</span>)</span><br><span class="line">df=pd.read_excel(<span class="string">'ceshi.xlsx'</span>,sheet_name=<span class="string">'Sheet2'</span>)</span><br><span class="line">data4=df.loc[[<span class="number">1</span>,<span class="number">2</span>],[<span class="string">'姓名'</span>,<span class="string">'年龄'</span>,<span class="string">'性别'</span>]]</span><br><span class="line">print(<span class="string">"读取多行多列的数据：\n&#123;0&#125;"</span>.format(data4))</span><br><span class="line"><span class="comment"># 姓名 年龄 性别</span></span><br><span class="line"><span class="comment"># 1 sun 18 女</span></span><br><span class="line"><span class="comment"># 2 zhao 19 男</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5：获取所有行的指定列</span></span><br><span class="line">print(<span class="string">"\n5：获取所有行的指定列"</span>)</span><br><span class="line">df=pd.read_excel(<span class="string">'ceshi.xlsx'</span>,sheet_name=<span class="string">'Sheet2'</span>)</span><br><span class="line">data5=df.loc[:,[<span class="string">'姓名'</span>,<span class="string">'年龄'</span>,<span class="string">'性别'</span>]].values <span class="comment">#得到的是嵌套列表</span></span><br><span class="line">data6=df.loc[:,[<span class="string">'姓名'</span>,<span class="string">'年龄'</span>,<span class="string">'性别'</span>]] <span class="comment">#得到二维矩阵</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"获取所有行的指定列的数据：\n&#123;0&#125;"</span>.format(data5)) <span class="comment">#得到的是嵌套列表</span></span><br><span class="line">print(<span class="string">"获取所有行的指定列的数据：\n&#123;0&#125;"</span>.format(data6)) <span class="comment">#得到二维矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6：获取行号并打印输出</span></span><br><span class="line">print(<span class="string">"\n6：获取行号并打印输出"</span>)</span><br><span class="line">df=pd.read_excel(<span class="string">'ceshi.xlsx'</span>,sheet_name=<span class="string">'Sheet2'</span>)</span><br><span class="line">print(<span class="string">"输出行号列表:"</span>,df.index.values)</span><br><span class="line"><span class="comment"># 输出行号列表: [0 1 2 3 4 5 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 7：获取列名并打印输出</span></span><br><span class="line">print(<span class="string">"\n7：获取列名并打印输出"</span>)</span><br><span class="line">df=pd.read_excel(<span class="string">'ceshi.xlsx'</span>,sheet_name=<span class="string">'Sheet2'</span>)</span><br><span class="line">print(<span class="string">"输出标题:"</span>,df.columns.values)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出标题: ['姓名' '年龄' '性别' '出生日期']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8：随机获取几行数的值：</span></span><br><span class="line">print(<span class="string">"\n8：获取指定行数的值："</span>)</span><br><span class="line">df=pd.read_excel(<span class="string">'ceshi.xlsx'</span>,sheet_name=<span class="string">'Sheet2'</span>)</span><br><span class="line">print(<span class="string">"输出值:\n"</span>,df.sample(<span class="number">3</span>).values) <span class="comment">#随机抽取3行查看，这个方法类似于head()方法以及df.values方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [['liu' 23 '女' '1995-05']</span></span><br><span class="line"><span class="comment"># ['wang' 17 '男' '1992-11']</span></span><br><span class="line"><span class="comment"># ['li' 20 '男' '1992-09']]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 9：获取指定列的值：</span></span><br><span class="line">print(<span class="string">"\n9：获取指定列的值："</span>)</span><br><span class="line">df=pd.read_excel(<span class="string">'ceshi.xlsx'</span>,sheet_name=<span class="string">'Sheet2'</span>)</span><br><span class="line">print(<span class="string">"输出值:\n"</span>,df[<span class="string">'姓名'</span>].values)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pandas处理Excel数据成为字典</span></span><br><span class="line">print(<span class="string">"\npandas处理Excel数据成为字典"</span>)</span><br><span class="line">df=pd.read_excel(<span class="string">'ceshi.xlsx'</span>,sheet_name=<span class="string">"Sheet2"</span>)</span><br><span class="line">test_data=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> df.index.values: <span class="comment">#获取行号的索引，并对其进行遍历：</span></span><br><span class="line"><span class="comment"># 根据i来获取每一行指定的数据 并利用to_dict转成字典</span></span><br><span class="line">row_data=df.loc[i,[<span class="string">'姓名'</span>,<span class="string">'年龄'</span>,<span class="string">'性别'</span>,<span class="string">'出生日期'</span>]].to_dict()</span><br><span class="line">test_data.append(row_data)</span><br><span class="line">print(test_data)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"> [</span></span><br><span class="line"><span class="string">    &#123;'姓名': 'wang', '年龄': 17, '性别': '男', '出生日期': '1992-11'&#125;, </span></span><br><span class="line"><span class="string">    &#123;'姓名': 'sun', '年龄': 18, '性别': '女', '出生日期': '1992-12'&#125;, </span></span><br><span class="line"><span class="string">    &#123;'姓名': 'zhao', '年龄': 19, '性别': '男', '出生日期': '1993-01'&#125;, </span></span><br><span class="line"><span class="string">    &#123;'姓名': 'zhang', '年龄': 22, '性别': '女', '出生日期': '1994-05'&#125;, </span></span><br><span class="line"><span class="string">    &#123;'姓名': 'zhou', '年龄': 16, '性别': '女', '出生日期': '1992-07'&#125;,</span></span><br><span class="line"><span class="string">     &#123;'姓名': 'liu', '年龄': 23, '性别': '女', '出生日期': '1995-05'&#125;, </span></span><br><span class="line"><span class="string">    &#123;'姓名': 'li', '年龄': 20, '性别': '男', '出生日期': '1992-09'&#125;</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p><strong>这里有点坑的是pandas操作excel没有追加模式，只能先读取数据后使用append追加再写入excel！</strong></p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://www.cnblogs.com/liulinghua90/p/9935642.html" target="_blank" rel="noopener">Python利用pandas处理Excel数据的应用</a> :文章里面有一点问题，详细看12楼评论</li></ul>]]></content>
      
      
      <categories>
          
          <category> Data analysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript篇章六：js的数值保留指定有效位数</title>
      <link href="/2020/01/15/Javascript%E7%AF%87%E7%AB%A0%E5%85%AD/"/>
      <url>/2020/01/15/Javascript%E7%AF%87%E7%AB%A0%E5%85%AD/</url>
      
        <content type="html"><![CDATA[<p>在做数据分析处理时，往往会遇到float或double这类的数据，我们往往应要求会保留指定的小数点后位数，也有这种要求：将数值按照金额格式进行格式化，每三位数值用逗号分隔</p><a id="more"></a><h3 id="1-四舍五入相关"><a href="#1-四舍五入相关" class="headerlink" title="1.四舍五入相关"></a>1.四舍五入相关</h3><ul><li><p>toFixed(number):保留指定小数位数，<font color=#f26522>将数值类型转换为字符串类型</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.四舍五入</span></span><br><span class="line"><span class="keyword">var</span> num =<span class="number">2.446242342</span>;  </span><br><span class="line">num = num.toFixed(<span class="number">2</span>); </span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">//2.45</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num); <span class="comment">// string</span></span><br></pre></td></tr></table></figure></li><li><p>Math.floor()，不四舍五入，向下取整,不改变数据类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.不四舍五入 向下取整</span></span><br><span class="line">num = <span class="built_in">Math</span>.floor(num * <span class="number">100</span>) / <span class="number">100</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">//2.44</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num); <span class="comment">// number</span></span><br></pre></td></tr></table></figure></li><li><p>字符串匹配<br>注意，先将数据转换为字符串，最后再转为数值类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3.不四舍五入 字符串匹配再转换</span></span><br><span class="line">num = <span class="built_in">Number</span>(num.toString().match(<span class="regexp">/^\d+(?:\.\d&#123;0,2&#125;)?/</span>));</span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">//2.44</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num); <span class="comment">// number</span></span><br></pre></td></tr></table></figure></li><li><p>四舍五入保留2位小数（若第二位小数为0，则保留一位小数）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4.四舍五入保留2位小数（若第二位小数为0，则保留一位小数）  </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">keepTwoDecimal</span>(<span class="params">num</span>) </span>&#123;  </span><br><span class="line">     <span class="keyword">var</span> result = <span class="built_in">parseFloat</span>(num);  </span><br><span class="line">     <span class="keyword">if</span> (<span class="built_in">isNaN</span>(result)) &#123;  </span><br><span class="line">         alert(<span class="string">'传递参数错误，请检查！'</span>);  </span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">     &#125;  </span><br><span class="line">     result = <span class="built_in">Math</span>.round(num * <span class="number">100</span>) / <span class="number">100</span>;  </span><br><span class="line">     <span class="keyword">return</span> result;  </span><br><span class="line">&#125;</span><br><span class="line"> keepTwoDecimal(num);</span><br><span class="line"> <span class="built_in">console</span>.log(num); <span class="comment">//2.44</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="keyword">typeof</span> num); <span class="comment">//number</span></span><br></pre></td></tr></table></figure></li><li><p>四舍五入保留2位小数（不够位数，则用0替补）<br>注意，数据类型变为字符串类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//5.四舍五入保留2位小数（不够位数，则用0替补）  </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">keepTwoDecimalFull</span>(<span class="params">num</span>) </span>&#123;  </span><br><span class="line">     <span class="keyword">var</span> result = <span class="built_in">parseFloat</span>(num);  </span><br><span class="line">     <span class="keyword">if</span> (<span class="built_in">isNaN</span>(result)) &#123;  </span><br><span class="line">         alert(<span class="string">'传递参数错误，请检查！'</span>);  </span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">     &#125;  </span><br><span class="line">     result = <span class="built_in">Math</span>.round(num * <span class="number">100</span>) / <span class="number">100</span>;  </span><br><span class="line">     <span class="keyword">var</span> s_x = result.toString(); <span class="comment">//将数字转换为字符串</span></span><br><span class="line">     </span><br><span class="line">     <span class="keyword">var</span> pos_decimal = s_x.indexOf(<span class="string">'.'</span>); <span class="comment">//小数点的索引值</span></span><br><span class="line">     </span><br><span class="line"></span><br><span class="line">     <span class="comment">// 当整数时，pos_decimal=-1 自动补0  </span></span><br><span class="line">     <span class="keyword">if</span> (pos_decimal &lt; <span class="number">0</span>) &#123;  </span><br><span class="line">         pos_decimal = s_x.length;  </span><br><span class="line">         s_x += <span class="string">'.'</span>;  </span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 当数字的长度&lt; 小数点索引+2时，补0  </span></span><br><span class="line">     <span class="keyword">while</span> (s_x.length &lt;= pos_decimal + <span class="number">2</span>) &#123;  </span><br><span class="line">         s_x += <span class="string">'0'</span>;  </span><br><span class="line">     &#125;  </span><br><span class="line">     <span class="keyword">return</span> s_x;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"> <span class="built_in">console</span>.log(keepTwoDecimalFull(<span class="number">120.5</span>)); <span class="comment">//120.50</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="keyword">typeof</span> keepTwoDecimalFull(<span class="number">120.5</span>)); <span class="comment">//string</span></span><br><span class="line"> <span class="built_in">console</span>.log(keepTwoDecimalFull(<span class="number">2.446242342</span>)); <span class="comment">//2.45</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="keyword">typeof</span> keepTwoDecimalFull(<span class="number">2.446242342</span>)); <span class="comment">//string</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-浮点数保留两位小数"><a href="#2-浮点数保留两位小数" class="headerlink" title="2.浮点数保留两位小数"></a>2.浮点数保留两位小数</h3><ul><li><p>将浮点数四舍五入，取小数点后2位(数据类型不变) </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//浮点数保留两位小数   </span></span><br><span class="line">  <span class="comment">//1.功能：将浮点数四舍五入，取小数点后2位   </span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">toDecimal</span>(<span class="params">x</span>) </span>&#123;   </span><br><span class="line">   <span class="keyword">var</span> f = <span class="built_in">parseFloat</span>(x);   </span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">isNaN</span>(f)) &#123;   </span><br><span class="line">    <span class="keyword">return</span>;   </span><br><span class="line">   &#125;   </span><br><span class="line">   f = <span class="built_in">Math</span>.round(x*<span class="number">100</span>)/<span class="number">100</span>;   </span><br><span class="line">   <span class="keyword">return</span> f;   </span><br><span class="line">  &#125;   </span><br><span class="line">  <span class="built_in">console</span>.log(toDecimal(<span class="number">3.1465926</span>)); <span class="comment">// 3.15</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">typeof</span> toDecimal(<span class="number">3.1415926</span>)); <span class="comment">//number</span></span><br></pre></td></tr></table></figure></li><li><p>强制保留2位小数，如：2，会在2后面补上00.即2.00<br>注意，数据类型变为字符串类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.强制保留2位小数，如：2，会在2后面补上00.即2.00   </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toDecimal2</span>(<span class="params">x</span>) </span>&#123;   </span><br><span class="line">    <span class="keyword">var</span> f = <span class="built_in">parseFloat</span>(x);   </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isNaN</span>(f)) &#123;   </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;   </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">var</span> f = <span class="built_in">Math</span>.round(x*<span class="number">100</span>)/<span class="number">100</span>;   </span><br><span class="line">    <span class="keyword">var</span> s = f.toString();   </span><br><span class="line">    <span class="keyword">var</span> rs = s.indexOf(<span class="string">'.'</span>);   </span><br><span class="line">    <span class="keyword">if</span> (rs &lt; <span class="number">0</span>) &#123;   </span><br><span class="line">    rs = s.length;   </span><br><span class="line">    s += <span class="string">'.'</span>;   </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">while</span> (s.length &lt;= rs + <span class="number">2</span>) &#123;   </span><br><span class="line">    s += <span class="string">'0'</span>;   </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">return</span> s;   </span><br><span class="line">&#125;   </span><br><span class="line"><span class="built_in">console</span>.log(toDecimal2(<span class="number">3.1</span>)); <span class="comment">// 3.10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> toDecimal2(<span class="number">3.1415926</span>)); <span class="comment">//string</span></span><br></pre></td></tr></table></figure></li><li><p>保留两位小数 浮点数四舍五入 位数不够 不补0<br>注意，数据类型不变</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3.保留两位小数 浮点数四舍五入 位数不够 不补0</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fomatFloat</span>(<span class="params">src,pos</span>)</span>&#123;    </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.round(src*<span class="built_in">Math</span>.pow(<span class="number">10</span>, pos))/<span class="built_in">Math</span>.pow(<span class="number">10</span>, pos);    </span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">console</span>.log(fomatFloat(<span class="number">3.12645</span>,<span class="number">2</span>)); <span class="comment">// 3.13</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> fomatFloat(<span class="number">3.1415926</span>)); <span class="comment">//number</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="3-JS数字，金额-，用逗号隔开（数字格式化）"><a href="#3-JS数字，金额-，用逗号隔开（数字格式化）" class="headerlink" title="3.JS数字，金额 ，用逗号隔开（数字格式化）"></a>3.JS数字，金额 ，用逗号隔开（数字格式化）</h3><p>JS将数字，金额，用逗号隔开（数字格式化），并按照需求保留规定小数位数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">format_number</span>(<span class="params">s, n</span>) </span>&#123;</span><br><span class="line">n = n &gt; <span class="number">0</span> &amp;&amp; n &lt;= <span class="number">20</span> ? n : <span class="number">2</span>;</span><br><span class="line">s = <span class="built_in">parseFloat</span>((s + <span class="string">""</span>).replace(<span class="regexp">/[^\d\.-]/g</span>, <span class="string">""</span>)).toFixed(n) + <span class="string">""</span>;</span><br><span class="line"><span class="keyword">let</span> l = s.split(<span class="string">"."</span>)[<span class="number">0</span>].split(<span class="string">""</span>).reverse(), r = s.split(<span class="string">"."</span>)[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> t = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; l.length; i++) &#123;</span><br><span class="line">t += l[i] + ((i + <span class="number">1</span>) % <span class="number">3</span> == <span class="number">0</span> &amp;&amp; (i + <span class="number">1</span>) != l.length ? <span class="string">","</span> : <span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> t.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>) + <span class="string">"."</span> + r;</span><br><span class="line">&#125;</span><br><span class="line">format_number(<span class="number">589455642.2598</span>,<span class="number">3</span>);</span><br><span class="line"><span class="comment">// "589,455,642.260"</span></span><br></pre></td></tr></table></figure><p>format_number(s,n):s代表传入的数值，n代表保留的小数位数</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>union和union all（联合查询）</title>
      <link href="/2020/01/14/sql%E7%B3%BB%E5%88%97%E6%9B%B4%E6%96%B0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2020/01/14/sql%E7%B3%BB%E5%88%97%E6%9B%B4%E6%96%B0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>如果我们需要将两个select语句的结果作为一个整体显示出来，我们就需要用到union或者union all关键字。union(或称为联合)的作用是将多个结果合并在一起显示出来。</p><a id="more"></a><h3 id="1-基础概念"><a href="#1-基础概念" class="headerlink" title="1.基础概念"></a>1.基础概念</h3><p>union和union all的区别是,union会自动压缩多个结果集合中的重复结果，而union all则将所有的结果全部显示出来，不管是不是重复。</p><ul><li>Union：对两个结果集进行并集操作，不包括重复行，同时进行默认规则的排序；</li><li>Union All：对两个结果集进行并集操作，包括重复行，不进行排序；</li><li>Intersect：对两个结果集进行交集操作，不包括重复行，同时进行默认规则的排序；</li><li>Minus：对两个结果集进行差操作，不包括重复行，同时进行默认规则的排序。</li></ul><p><strong>注意的是</strong>：<br><font color=#f47920>UNION 、UNION ALL内部的 SELECT 语句必须拥有相同数量的列。列也必须拥有相似的数据类型。同时，每条 SELECT 语句中的列的顺序必须相同。</font></p><h3 id="2-使用方法"><a href="#2-使用方法" class="headerlink" title="2.使用方法"></a>2.使用方法</h3><p>基本语法：</p><ul><li>union：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> employee_id,job_id <span class="keyword">from</span> employees </span><br><span class="line"><span class="keyword">union</span> </span><br><span class="line"><span class="keyword">select</span> employee_id,job_id <span class="keyword">from</span> job_history</span><br></pre></td></tr></table></figure></li><li>union all：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> employee_id,job_id <span class="keyword">from</span> employees </span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> employee_id,job_id <span class="keyword">from</span> job_history</span><br></pre></td></tr></table></figure><h3 id="3-FAQ"><a href="#3-FAQ" class="headerlink" title="3.FAQ"></a>3.FAQ</h3></li></ul><p>1.union 和 union all都可以将多个结果集合并，而不仅仅是两个，你可以将多个结果集串起来。</p><p>2.使用union和union all必须保证各个select 集合的结果有相同个数的列，并且每个列的类型是一样的。但列名则不一定需要相同，<code>oracle会将第一个结果的列名作为结果集的列名</code>。例如下面是一个例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> empno,ename <span class="keyword">from</span> emp </span><br><span class="line"><span class="keyword">union</span> </span><br><span class="line"><span class="keyword">select</span> deptno,dname <span class="keyword">from</span> dept</span><br></pre></td></tr></table></figure><p>3.没有必要在每一个select结果集中使用order by子句来进行排序，我们可以在最后使用一条order by来对整个结果进行排序。例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> empno,ename <span class="keyword">from</span> emp </span><br><span class="line"><span class="keyword">union</span> </span><br><span class="line"><span class="keyword">select</span> deptno,dname <span class="keyword">from</span> dept </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> ename;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> union </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GNE v0.1 正式发布： 4 行代码开发新闻网站通用爬虫</title>
      <link href="/2020/01/12/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89/"/>
      <url>/2020/01/12/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>GNE（GeneralNewsExtractor）是一个通用新闻网站正文抽取模块，输入一篇新闻网页的 HTML， 输出正文内容、标题、作者、发布时间、正文中的图片地址和正文所在的标签源代码。GNE在提取今日头条、网易新闻、游民星空、 观察者网、凤凰网、腾讯新闻、ReadHub、新浪新闻等数百个中文新闻网站上效果非常出色，几乎能够达到100%的准确率。</p><a id="more"></a><h3 id="1-简单使用方式"><a href="#1-简单使用方式" class="headerlink" title="1.简单使用方式"></a>1.简单使用方式</h3><p><font color="#009ad6">GNE的输入是经过js渲染后的HTML代码，所以GNE往往需要配合selenium或Pyppeteer 使用。</font><br>安装GNE：pip install gne<br>使用简单案例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gne <span class="keyword">import</span> GeneralNewsExtractor</span><br><span class="line">extractor = GeneralNewsExtractor()</span><br><span class="line">html = <span class="string">'网站源代码'</span></span><br><span class="line">result = extractor.extract(html)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>GNE配合selenium实现的一个小demo</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> gne <span class="keyword">import</span> GeneralNewsExtractor</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.toutiao.com/a6766986211736158727/'</span>)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">extractor = GeneralNewsExtractor()</span><br><span class="line">result = extractor.extract(browser.page_source)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p><fancybox><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2020-01-01-17-51-47.png" alt=""></fancybox></p><h3 id="2-功能特性"><a href="#2-功能特性" class="headerlink" title="2.功能特性"></a>2.功能特性</h3><h4 id="2-1-获取正文源代码"><a href="#2-1-获取正文源代码" class="headerlink" title="2.1 获取正文源代码"></a>2.1 获取正文源代码</h4><p>在extract()方法只传入网页源代码，不添加任何额外参数时，GNE 返回如下字段：</p><ul><li>title：新闻标题</li><li>publish_time：新闻发布时间</li><li>author：新闻作者</li><li>content：新闻正文</li><li>images: 正文中的图片（相对路径或者绝对路径）</li></ul><p>可能有些朋友希望获取新闻正文所在标签的源代码，此时可以给extract()方法传入with_body_html参数，设置为 True：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">extractor = GeneralNewsExtractor()</span><br><span class="line">extractor.extract(html, with_body_html=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>返回数据中将会增加一个字段body_html，它的值就是正文对应的 HTML 源代码。</p><p>运行效果如下图所示：<br><fancybox><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2020-01-01-18-16-25.png" alt=""></fancybox></p><h4 id="2-2-总是返回图片的绝对路径"><a href="#2-2-总是返回图片的绝对路径" class="headerlink" title="2.2 总是返回图片的绝对路径"></a>2.2 总是返回图片的绝对路径</h4><p>默认情况下，如果新闻中的图片使用的是相对路径，那么 GNE 返回的images字段对应的值也是图片相对路径的列表。</p><p>如果你想始终让 GNE 返回绝对路径，那么你可以给extract()方法增加host参数，这个参数的值是图片的域名，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">extractor = GeneralNewsExtractor()</span><br><span class="line">extractor.extract(html, host=<span class="string">'https://AhriLove.top'</span>)</span><br></pre></td></tr></table></figure><p>这样，如果新闻中的图片是/images/pic.png，那么 GNE 返回时会自动把它变为<a href="https://AhriLove.top/images/pic.png。">https://AhriLove.top/images/pic.png。</a></p><h4 id="2-3-指定新闻标题所在的-XPath"><a href="#2-3-指定新闻标题所在的-XPath" class="headerlink" title="2.3 指定新闻标题所在的 XPath"></a>2.3 指定新闻标题所在的 XPath</h4><p>GNE 预定义了一组 XPath 和正则表达式用于提取新闻的标题。但某些特殊的新闻网站可能无法提取标题，此时，你可以给extract()方法指定title_xpath参数，用于提取新闻标题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">extractor = GeneralNewsExtractor()</span><br><span class="line">extractor.extract(html, title_xpath=<span class="string">'//title/text()'</span>)</span><br></pre></td></tr></table></figure><h4 id="2-4-提前移除噪声标签"><a href="#2-4-提前移除噪声标签" class="headerlink" title="2.4 提前移除噪声标签"></a>2.4 提前移除噪声标签</h4><p>某些新闻下面可能会存在长篇大论的评论，这些评论看起来比新闻正文“更像”正文，为了防止他们干扰新闻的提取，可以通过给extract()方法传入noise_node_list参数，提前把这些噪声节点移除。noise_node_list的值是一个列表，里面是一个或多个 XPath：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">extractor = GeneralNewsExtractor()</span><br><span class="line">extractor.extract(html, noise_node_list=[<span class="string">'//div[@class="comment-list"]'</span>, <span class="string">'//*[@style="display:none"]'</span>])</span><br></pre></td></tr></table></figure><h3 id="2-5使用配置文件"><a href="#2-5使用配置文件" class="headerlink" title="2.5使用配置文件"></a>2.5使用配置文件</h3><p>API 中的参数 title_xpath、 host、 noise_node_list、 with_body_html除了直接写到 extract() 方法中外，还可以通过一个配置文件来设置。<br>请在项目的根目录创建一个文件 .gne，配置文件可以用 YAML 格式，也可以使用 JSON 格式。</p><ul><li>YAML格式配置文件<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span></span><br><span class="line"><span class="attr">   xpath:</span> <span class="string">//title/text()</span></span><br><span class="line"><span class="attr">host:</span> <span class="attr">https://www.xxx.com</span></span><br><span class="line"><span class="attr">noise_node_list:</span></span><br><span class="line"><span class="bullet">   -</span> <span class="string">//div[@class=\"comment-list\"]</span></span><br><span class="line"><span class="bullet">   -</span> <span class="string">//*[@style=\"display:none\"]</span></span><br><span class="line"><span class="attr">with_body_html:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li>json格式配置文件（习惯性用json）<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"title"</span>: &#123;</span><br><span class="line">       <span class="attr">"xpath"</span>: <span class="string">"//title/text()"</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">"host"</span>: <span class="string">"https://www.xxx.com"</span>,</span><br><span class="line">   <span class="attr">"noise_node_list"</span>: [<span class="string">"//div[@class=\"comment-list\"]"</span>,</span><br><span class="line">                       <span class="string">"//*[@style=\"display:none\"]"</span>],</span><br><span class="line">   <span class="attr">"with_body_html"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-FAQ"><a href="#3-FAQ" class="headerlink" title="3.FAQ"></a>3.FAQ</h3><h4 id="GeneralNewsExtractor-以下简称GNE-是爬虫吗？"><a href="#GeneralNewsExtractor-以下简称GNE-是爬虫吗？" class="headerlink" title="GeneralNewsExtractor(以下简称GNE)是爬虫吗？"></a>GeneralNewsExtractor(以下简称GNE)是爬虫吗？</h4>GNE不是爬虫，它的项目名称General News Extractor表示通用新闻抽取器。它的输入是HTML，输出是一个包含新闻标题，新闻正文，作者，发布时间的字典。你需要自行设法获取目标网页的HTML。</li></ul><p>GNE 现在不会，将来也不会提供请求网页的功能。</p><h4 id="GNE支持翻页吗？"><a href="#GNE支持翻页吗？" class="headerlink" title="GNE支持翻页吗？"></a>GNE支持翻页吗？</h4><p>GNE不支持翻页。因为GNE不会提供网页请求的功能，所以你需要自行获取每一页的HTML，并分别传递给GNE。</p><h4 id="GNE支持哪些版本的Python？"><a href="#GNE支持哪些版本的Python？" class="headerlink" title="GNE支持哪些版本的Python？"></a>GNE支持哪些版本的Python？</h4><p>不小于Python 3.6.0</p><h4 id="我用requests-Scrapy获取的HTML传入GNE，为什么不能提取正文？"><a href="#我用requests-Scrapy获取的HTML传入GNE，为什么不能提取正文？" class="headerlink" title="我用requests/Scrapy获取的HTML传入GNE，为什么不能提取正文？"></a>我用requests/Scrapy获取的HTML传入GNE，为什么不能提取正文？</h4><p><font color=#33a3dc>GNE是基于HTML来提取正文的，所以传入的HTML一定要是经过JavaScript渲染以后的HTML。而requests和Scrapy获取的只是JavaScript渲染之前的源代码，所以无法正确提取。</font></p><p>另外，有一些网页，例如今日头条，它的新闻正文实际上是以JSON格式直接写在网页源代码的，当页面在浏览器上面打开的时候，JavaScript把源代码里面的正文解析为HTML。这种情况下，你在Chrome上面就看不到Ajax请求。</p><p>所以<font color=#33a3dc>建议你使用Puppeteer/Pyppeteer/Selenium之类的工具获取经过渲染的HTML再传入GNE</font>。</p><h4 id="GNE-支持非新闻类网站吗（例如博客、论坛……）"><a href="#GNE-支持非新闻类网站吗（例如博客、论坛……）" class="headerlink" title="GNE 支持非新闻类网站吗（例如博客、论坛……）"></a>GNE 支持非新闻类网站吗（例如博客、论坛……）</h4><p>不支持。</p><h3 id="4-关于-GNE"><a href="#4-关于-GNE" class="headerlink" title="4.关于 GNE"></a>4.关于 GNE</h3><p>GNE 官方文档：<a href="https://generalnewsextractor.readthedocs.io/" target="_blank" rel="noopener">https://generalnewsextractor.readthedocs.io/</a></p><p>GNE 的项目源代码在：<a href="https://github.com/kingname/GeneralNewsExtractor。" target="_blank" rel="noopener">https://github.com/kingname/GeneralNewsExtractor。</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> re </tag>
            
            <tag> GNE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python全栈系列章节更新（十一）：某openLaw网站</title>
      <link href="/2020/01/11/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89/"/>
      <url>/2020/01/11/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p>目标网站：<a href="http://openlaw.cn/" target="_blank" rel="noopener">某openLaw裁判文书</a><br>反爬机制：<font color=#d71345>js逆向爬虫，密码加密</font><br>相关技术：js逆向爬虫<br>技术难度：<font color=#d71345>★★★☆☆☆</font><br>爬取目标：模拟登录官网，抓取相关裁判文书<br>源代码：<a href="https://github.com/FioraLove/Python/tree/master/js%E9%80%86%E5%90%91%E7%88%AC%E8%99%AB/openLaw%E7%BD%91%E7%AB%99" target="_blank" rel="noopener">https://github.com/FioraLove/Python/tree/master/js%E9%80%86%E5%90%91%E7%88%AC%E8%99%AB/openLaw%E7%BD%91%E7%AB%99</a><br>说明：先get请求，正则获取csrf，在post携带账号密码来模拟登录</p></blockquote><a id="more"></a><h3 id="1-解析思路："><a href="#1-解析思路：" class="headerlink" title="1.解析思路："></a>1.解析思路：</h3><p><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200111113736.png" alt=""></fancybox></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;按照常规步骤进行抓包：输入错误的账号密码，找到post/get请求地址---&gt;看请求表单数据是否加密---&gt;全局搜索加密关键字---&gt;找到与之相关联的js加密函数，扣出js代码<br><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200111113935.png" alt=""></fancybox><br>这里我们可以看到，有四个参数，其中_csrf是未知的，password是经过加密的，其余两个字段是很简单的。</p><h3 id="2-csrf关键字"><a href="#2-csrf关键字" class="headerlink" title="2. _csrf关键字"></a>2. _csrf关键字</h3><p>我们先全局搜索一下，可以找到_csrf其实就在网页中，是在网页中生成的，所以我们就需要抓取“login.jsp?$=deny”这个数据包,这里是get请求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re,requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先请求一次网页，获取页面中的csrf</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_csrf</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        csrfUrl = <span class="string">"http://openlaw.cn/login.jsp?$=deny"</span></span><br><span class="line">        session = requests.session()</span><br><span class="line">        response = session.get(csrfUrl, headers=headers, timeout=<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">if</span> (response.status_code == <span class="number">200</span>):</span><br><span class="line">            <span class="comment"># 编译正则表达式，带上re.S</span></span><br><span class="line">            pattern = re.compile(<span class="string">'name="_csrf" value="(.*?)"/&gt;'</span>, re.S)</span><br><span class="line">            <span class="comment"># findall是将返回结果以元组型列表</span></span><br><span class="line">            result = re.findall(pattern, response.text)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br></pre></td></tr></table></figure><blockquote><p>拓展：我第一次写的时候就出现了如下的错误提示，其实是re.S在使用compile编译时没有编译到,以后要注意这点</p></blockquote><p>在爬取网页数据时，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p=re.compile(<span class="string">'&lt;div class="card-title"&gt;(.*?)&lt;/div&gt;'</span>)</span><br><span class="line">data=re.findall(p,html.text,re.S)</span><br></pre></td></tr></table></figure><p>出现错误：<br><font color=#d71345>ValueError: Cannot process flags argument with a compiled pattern</font><br>原因：如果re.findall() 中有flags项，如re.S(正则中‘.’代表在每行中的任意字符，每一行遇到换行符‘\n’结束，re.S作用是将‘\n’当成是普通字符，这样就把整个html文档看成了一个字符串。<br>正确写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p=re.compile(<span class="string">'&lt;div class="card-title"&gt;(.*?)&lt;/div&gt;'</span>,re.S)</span><br><span class="line">data=re.findall(p,html.text)</span><br></pre></td></tr></table></figure><h3 id="3-password加密"><a href="#3-password加密" class="headerlink" title="3.password加密"></a>3.password加密</h3><p>依旧全局搜索这个关键字，找到password这个关键字，发现这个generateEncryptPassword(生成加密密码)很可疑，最终输出加密密码的函数其实是keyEncrypt函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $publicKey = <span class="string">'-----BEGIN PUBLIC KEY-----\n\</span></span><br><span class="line"><span class="string">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0zI8aibR9ZN57QObFxvI\n\</span></span><br><span class="line"><span class="string">wiRTmELItVVBLMrLd71ZqakR6oWUKkcAGgmxad2TCy3UeRe4A0Dduw97oXlbl5rK\n\</span></span><br><span class="line"><span class="string">RGISzpLO8iMSYtsim5aXZX9SB5x3S9ees4CZ6MYD/4XQOTrU0r1TMT6wXlhVvwNb\n\</span></span><br><span class="line"><span class="string">fMNYHm3vkY0rhfxBCVPFJoHjAGDFWNCAhf4KfalfvWsGL32p8N/exG2S4yXVHuV6\n\</span></span><br><span class="line"><span class="string">cHDyFJAItKVmyuTmB62pnPs5KvNv6oPmtmhMxxsvBOyh7uLwB5TonxtZpWZ3A1wf\n\</span></span><br><span class="line"><span class="string">43ByuU7F3qGnFqL0GeG/JuK+ZR40LARyevHy9OZ5pMa0Nwqb8PwfK810Bc8PxD8N\n\</span></span><br><span class="line"><span class="string">EwIDAQAB\n\</span></span><br><span class="line"><span class="string">-----END PUBLIC KEY-----\n\</span></span><br><span class="line"><span class="string">'</span>;</span><br><span class="line"><span class="keyword">var</span> encryptPassChars = <span class="string">"0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz*&amp;-%/!?*+=()"</span>;</span><br><span class="line"><span class="keyword">var</span> rsaEncrypt = <span class="keyword">new</span> JSEncrypt();</span><br><span class="line">rsaEncrypt.setPublicKey($publicKey);</span><br><span class="line"><span class="keyword">var</span> keyEncrypt = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> passPhrase = generateEncryptPassword(<span class="number">32</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> iv = CryptoJS.lib.WordArray.random(<span class="number">128</span> / <span class="number">8</span>).toString(CryptoJS.enc.Hex);</span><br><span class="line">    <span class="keyword">var</span> salt = CryptoJS.lib.WordArray.random(<span class="number">128</span> / <span class="number">8</span>).toString(CryptoJS.enc.Hex);</span><br><span class="line">    <span class="keyword">var</span> key = CryptoJS.PBKDF2(passPhrase, CryptoJS.enc.Hex.parse(salt), &#123;</span><br><span class="line">        keySize: <span class="number">128</span> / <span class="number">32</span>,</span><br><span class="line">        iterations: <span class="number">1000</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> aesEncrypted = CryptoJS.AES.encrypt(data, key, &#123;</span><br><span class="line">        iv: CryptoJS.enc.Hex.parse(iv)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">var</span> aesKey = passPhrase + <span class="string">":::"</span> + salt + <span class="string">":::"</span> + aesEncrypted.iv;</span><br><span class="line">    <span class="keyword">var</span> encryptedMessage = aesEncrypted.ciphertext.toString(CryptoJS.enc.Base64);</span><br><span class="line">    <span class="keyword">var</span> encryptedKey = rsaEncrypt.encrypt(aesKey);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> encrypted = encryptedKey + <span class="string">":::"</span> + encryptedMessage;</span><br><span class="line">    <span class="keyword">return</span> encrypted;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> generateEncryptPassword = <span class="function"><span class="keyword">function</span>(<span class="params">length</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> randomstring = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> rnum = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * encryptPassChars.length);</span><br><span class="line">        randomstring += encryptPassChars.substring(rnum, rnum + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> randomstring;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="4-完整代码"><a href="#4-完整代码" class="headerlink" title="4.完整代码"></a>4.完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求登录url</span></span><br><span class="line">url = <span class="string">"http://openlaw.cn/login"</span></span><br><span class="line"><span class="comment"># 构造请求头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">"Origin"</span>: <span class="string">"http://openlaw.cn"</span>,</span><br><span class="line">    <span class="string">"Referer"</span>: <span class="string">"http://openlaw.cn/login.jsp"</span>,</span><br><span class="line">    <span class="string">"Upgrade-Insecure-Requests"</span>: <span class="string">"1"</span>,</span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.88 Safari/537.36"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先请求一次网页，获取页面中的csrf</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_csrf</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        csrfUrl = <span class="string">"http://openlaw.cn/login.jsp?$=deny"</span></span><br><span class="line">        session = requests.session()</span><br><span class="line">        response = session.get(csrfUrl, headers=headers, timeout=<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">if</span> (response.status_code == <span class="number">200</span>):</span><br><span class="line">            pattern = re.compile(<span class="string">'name="_csrf" value="(.*?)"/&gt;'</span>, re.S)</span><br><span class="line">            result = re.findall(pattern, response.text)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_pwd</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'main.static'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        js_code = f.read()</span><br><span class="line">    <span class="comment"># 编译js函数</span></span><br><span class="line">    ctx = execjs.compile(js_code)</span><br><span class="line">    <span class="comment"># 执行js中的getPassword函数，参数为password</span></span><br><span class="line">    result = ctx.call(<span class="string">'getPassword'</span>, <span class="string">'a123456'</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二次post请求模拟登录openLaw网站</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">"_csrf"</span>: (get_csrf())[<span class="number">0</span>],</span><br><span class="line">        <span class="string">"username"</span>: <span class="string">"badwoman"</span>,</span><br><span class="line">        <span class="string">"password"</span>: get_pwd(),</span><br><span class="line">        <span class="string">"_spring_security_remember_me"</span>: <span class="string">"true"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 模拟登录openLaw</span></span><br><span class="line">        response = requests.post(url=url, headers=headers, data=data, timeout=<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">if</span> (response.status_code == <span class="number">200</span>):</span><br><span class="line">            <span class="keyword">return</span> response.text</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    login()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> re </tag>
            
            <tag> js逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python全栈系列章节更新（十）：headers处理小脚本</title>
      <link href="/2020/01/07/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E5%8D%81%EF%BC%89/"/>
      <url>/2020/01/07/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E5%8D%81%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在写python爬虫脚本时，常常需要处理请求头headers，将其转换为字典格式，如果一个个的加单双引号，往往很费劲，所以我们可以借用正则表达式，直接将其替换掉。</p><a id="more"></a><h3 id="1-python字典与js的对象"><a href="#1-python字典与js的对象" class="headerlink" title="1.python字典与js的对象"></a>1.python字典与js的对象</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;兄弟萌，我懵了，最近有点迷糊，刚刚说起字典（值可以取任何数据类型，但键必须是不可变的，如字符串，数字或元组。），这就可以联想到js的对象写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字典</span></span><br><span class="line">dicts = &#123;<span class="string">'Alice'</span>: <span class="string">'2341'</span>, <span class="number">9527</span>: <span class="string">'9102'</span>, (<span class="number">2</span>,<span class="number">3</span>): <span class="string">'3258'</span>&#125;</span><br></pre></td></tr></table></figure><p>js的对象提供多个内建对象，比如 Object、String、Date、Array,Number,Function 等等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name : <span class="string">"xiaoming"</span>,</span><br><span class="line">    age : <span class="number">18</span>,</span><br><span class="line">    show : <span class="function"><span class="keyword">function</span> (<span class="params">girlfriend</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"的女朋友是"</span> + girlfriend);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="headers字符串处理"><a href="#headers字符串处理" class="headerlink" title="headers字符串处理"></a>headers字符串处理</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们从chrome里面的截取到的headers往往是需要我们二次处理的，而我一般喜欢加双引号，构造成json格式，一劳永逸。<br><font color=#ed1941>源代码：</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">headers_str = <span class="string">"""</span></span><br><span class="line"><span class="string">sec-fetch-mode: navigate</span></span><br><span class="line"><span class="string">sec-fetch-site: same-origin</span></span><br><span class="line"><span class="string">sec-fetch-user: ?1</span></span><br><span class="line"><span class="string">upgrade-insecure-requests: 1</span></span><br><span class="line"><span class="string">user-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.88 Safari/537.36</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">pattern = re.compile(<span class="string">"^(.*?): (.*)$"</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> headers_str.splitlines():</span><br><span class="line">    print(re.sub(pattern, <span class="string">"\"\\1\": \"\\2\","</span>, line))</span><br></pre></td></tr></table></figure><p>这里的headers_str存放我们的目标headers字符串，运行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;sec-fetch-mode&quot;: &quot;navigate&quot;,</span><br><span class="line">&quot;sec-fetch-site&quot;: &quot;same-origin&quot;,</span><br><span class="line">&quot;sec-fetch-user&quot;: &quot;?1&quot;,</span><br><span class="line">&quot;upgrade-insecure-requests&quot;: &quot;1&quot;,</span><br><span class="line">&quot;user-agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.88 Safari/537.36&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> re </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析章节（二）：matplotlib</title>
      <link href="/2020/01/02/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%AB%A0%E8%8A%82%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2020/01/02/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%AB%A0%E8%8A%82%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Matplotlib 是 Python 的绘图库。 它可与 NumPy 一起使用，提供了一种有效的 MatLab 开源替代方案。 它也可以和图形工具包一起使用，如 PyQt 和 wxPython。！</p><blockquote><p><font size=4 color=#FF0000>本文要点：</font><br>struct模块<br>科学运算基本三大库Matplotlib<br>图形</p></blockquote><a id="more"></a><h2 id="1-import-struct库"><a href="#1-import-struct库" class="headerlink" title="1.import struct库"></a>1.import struct库</h2><p>1.1 struct模块:</p><p>在Python中，『一切皆对象』，基本数据类型也不列外<br>C语言的数组int a[3] = {1, 2, 4};存储的是真正的值<br>Python的列表list = [1, 2, 4]，存储的是元素的指针 </p><p>1.2 pack(),unpack()函数:</p><p>struct模块最重要的两个函数就是pack()、unpack()方法：打包函数：pack(fmt, v1, v2, v3, …)；解包函数：unpack(fmt, buffer)，其中，fmt是格式字符（format的谐音），struct模块支持的格式化字符如下表</p><h2 id="2-matplotlib库"><a href="#2-matplotlib库" class="headerlink" title="2.matplotlib库"></a>2.matplotlib库</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;在python的matplotlib库中分别可用bar、barh、plot函数来构建它们，再使用xticks与yticks（设置坐标轴刻度）、xlabel与ylabel（设置坐标轴标签）、title（标题）、legend（图例）、xlim与ylim（设置坐标轴数据范围）、grid（设置网格线）等命令来装饰图形</p><h4 id="2-1导入库文件"><a href="#2-1导入库文件" class="headerlink" title="2.1导入库文件"></a>2.1导入库文件</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;from matplotlib import pyplot as plt<br>&nbsp;&nbsp;&nbsp;&nbsp;import numpy as np</p><h4 id="2-2-简单figure图像生成案例："><a href="#2-2-简单figure图像生成案例：" class="headerlink" title="2.2 简单figure图像生成案例："></a>2.2 简单figure图像生成案例：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用import导入模块matplotlib.pyplot，并简写成plt 使用import导入模块numpy，并简写成np</span></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用np.linspace定义x：范围是(-1,1);个数是50</span></span><br><span class="line">x = np.linspace(<span class="number">-1</span>, <span class="number">1</span>, <span class="number">50</span>)</span><br><span class="line"><span class="comment"># 函数y=x^3</span></span><br><span class="line">y = x ** <span class="number">3</span></span><br><span class="line">y1 = x ** <span class="number">2</span></span><br><span class="line"><span class="comment"># 使用plt.figure定义一个图像窗口.num代表图像窗口编号，figsize表示窗口大小</span></span><br><span class="line">plt.figure(num=<span class="number">3</span>, figsize=(<span class="number">8</span>, <span class="number">5</span>), )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用plt.plot画(x ,y1)曲线，曲线的颜色属性(color)为红色;</span></span><br><span class="line"><span class="comment"># 曲线的宽度(linewidth)为1.0；曲线的类型(linestyle)为虚线. 使用plt.show显示图像</span></span><br><span class="line"></span><br><span class="line">plt.plot(x, y1, color=<span class="string">'red'</span>, linewidth=<span class="string">'1.0'</span>, linestyle=<span class="string">'--'</span>)</span><br><span class="line"><span class="comment"># 使用plt.plot画(x ,y1)曲线.</span></span><br><span class="line">plt.plot(x, y)</span><br><span class="line"><span class="comment"># 展示绘制图像</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="2-3坐标轴以及line："><a href="#2-3坐标轴以及line：" class="headerlink" title="2.3坐标轴以及line："></a>2.3坐标轴以及line：</h4><blockquote><p>设置坐标轴不同的名字、刻度以及范围：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用plt.xlim设置x坐标轴范围：(-2, 2)</span></span><br><span class="line">plt.xlim((<span class="number">-2</span>,<span class="number">2</span>))</span><br><span class="line"><span class="comment"># 使用plt.ylim设置x坐标轴范围：(-2, 2)</span></span><br><span class="line">plt.ylim((<span class="number">-2</span>,<span class="number">2</span>))</span><br><span class="line"><span class="comment"># 定义x轴名称</span></span><br><span class="line">plt.xlabel(<span class="string">'x轴'</span>)</span><br><span class="line"><span class="comment"># 定义y轴名称</span></span><br><span class="line">plt.ylabel(<span class="string">'y轴'</span>)</span><br><span class="line"></span><br><span class="line">new_ticks = np.linspace(<span class="number">-2</span>, <span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line">print(new_ticks)</span><br><span class="line"><span class="comment"># 使用plt.xticks设置x轴刻度：范围是(-2,2);个数是8.</span></span><br><span class="line">plt.xticks(new_ticks)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用plt.yticks设置y轴刻度以及名称：刻度为[-2, -1.8, -1, 1.22, 3]</span></span><br><span class="line"><span class="comment"># 对应刻度的名称为[‘really bad’,’bad’,’normal’,’good’, ‘really good’]</span></span><br><span class="line">plt.yticks([<span class="number">-2</span>, <span class="number">-1.8</span>, <span class="number">-1</span>, <span class="number">1.22</span>, <span class="number">2</span>],[<span class="string">r'$really\ bad$'</span>, <span class="string">r'$bad$'</span>, <span class="string">r'$normal$'</span>, <span class="string">r'$good$'</span>, <span class="string">r'$really\ good$'</span>])</span><br></pre></td></tr></table></figure><blockquote><p>坐标轴移至中心：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">plt.gca获取当前坐标轴信息. 使用.spines设置边框；使用.set_color设置边框颜色</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 坐标轴中移：</span></span><br><span class="line">ax = plt.gca()</span><br><span class="line"><span class="comment"># 隐藏上边和右边</span></span><br><span class="line">ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">ax.spines[<span class="string">'right'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line"><span class="comment"># 移动另外两个轴</span></span><br><span class="line">ax.xaxis.set_ticks_position(<span class="string">'bottom'</span>)</span><br><span class="line">ax.spines[<span class="string">'bottom'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br><span class="line">ax.yaxis.set_ticks_position(<span class="string">'left'</span>)</span><br><span class="line">ax.spines[<span class="string">'left'</span>].set_position((<span class="string">'data'</span>,<span class="number">0</span>))</span><br></pre></td></tr></table></figure><blockquote><p>图例legend</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># set line syles</span></span><br><span class="line">l1, = plt.plot(x, y1, label=<span class="string">'linear line'</span>)</span><br><span class="line">l2, = plt.plot(x, y2, color=<span class="string">'red'</span>, linewidth=<span class="number">1.0</span>, linestyle=<span class="string">'--'</span>, label=<span class="string">'square line'</span>)</span><br><span class="line"><span class="comment"># legend将要显示的信息来自于上面代码中的 label(表示图例的名称). 所以我们只需要简单写下一下代码, plt 就能自动的为我们添加图例.</span></span><br><span class="line"><span class="comment"># 图例展示</span></span><br><span class="line">plt.legend(loc=<span class="string">'upper right'</span>) <span class="comment"># loc属性表示图例放置位置：upper，right，bottom，left</span></span><br></pre></td></tr></table></figure><blockquote><p>annotate标注</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 标注具体某点</span></span><br><span class="line">x0 = <span class="number">0.5</span></span><br><span class="line">y0 = x0**<span class="number">2</span></span><br><span class="line">plt.plot([x0, x0,], [<span class="number">0</span>, y0,], <span class="string">'k--'</span>, linewidth=<span class="number">2.5</span>)</span><br><span class="line"><span class="comment"># set dot styles</span></span><br><span class="line">plt.scatter([x0, ], [y0, ], s=<span class="number">50</span>, color=<span class="string">'b'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注释annotate，对(x0,y0)这个点进行标注</span></span><br><span class="line">plt.annotate(<span class="string">r'$x**2=%s$'</span> % x0, xy=(x0, y0), xycoords=<span class="string">'data'</span>, xytext=(+<span class="number">10</span>, <span class="number">-10</span>),</span><br><span class="line">             <span class="comment"># xytext=(+10, -10) 和 textcoords='offset points' 对于标注位置的描述 和 xy 偏差值</span></span><br><span class="line">             textcoords=<span class="string">'offset points'</span>, fontsize=<span class="number">10</span>,</span><br><span class="line">             arrowprops=dict(arrowstyle=<span class="string">'-&gt;'</span>, connectionstyle=<span class="string">"arc3,rad=.2"</span>))</span><br></pre></td></tr></table></figure><blockquote><p>matplotlib的颜色及线条控制（linestyle，color）</p></blockquote><p>linestyle:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&apos;-&apos;       solid line style</span><br><span class="line">&apos;--&apos;      dashed line style</span><br><span class="line">&apos;-.&apos;      dash-dot line style</span><br><span class="line">&apos;:&apos;       dotted line styl</span><br></pre></td></tr></table></figure><p>color:<a href="https://matplotlib.org/examples/color/named_colors.html" target="_blank" rel="noopener">【参考此篇文章】</a><br><fancybox><img src="https://matplotlib.org/mpl_examples/color/named_colors.png" alt=""></fancybox></p><blockquote><p>多图分区展示</p></blockquote><p>语法格式：subplot(a,b,c)表示a行，b列，第c个图像区域</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 规则图形：</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个图形窗口</span></span><br><span class="line">plt.figure()</span><br><span class="line"><span class="comment"># subplot(m,n,x):代表创建m*n个小图，x代表第i个图</span></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment"># 绘制折线图</span></span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">y = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">plt.plot(x, y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># plt.subplot(2,2,2)表示将整个图像窗口分为2行2列, 当前位置为2</span></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">data = np.arange(<span class="number">1</span>, <span class="number">4</span>, <span class="number">.25</span>)</span><br><span class="line">plt.scatter(data, data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># plt.subplot(2,2,3)表示将整个图像窗口分为2行2列,当前位置为3</span></span><br><span class="line">plt.subplot(<span class="number">223</span>)</span><br><span class="line">plt.plot([<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># plt.subplot(2,2,4)表示将整个图像窗口分为2行2列,当前位置为4</span></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">plt.plot([<span class="number">0</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><blockquote><p>plt.text()给图形添加数据标签</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#创建带数字标签的直方图</span></span><br><span class="line">numbers = list(range(<span class="number">1</span>,<span class="number">11</span>))</span><br><span class="line"><span class="comment">#np.array()将列表转换为存储单一数据类型的多维数组</span></span><br><span class="line">x = np.array(numbers)</span><br><span class="line">y = np.array([a**<span class="number">2</span> <span class="keyword">for</span> a <span class="keyword">in</span> numbers])</span><br><span class="line">plt.bar(x,y,width=<span class="number">0.5</span>,align=<span class="string">'center'</span>,color=<span class="string">'c'</span>)</span><br><span class="line">plt.title(<span class="string">'Square Numbers'</span>,fontsize=<span class="number">24</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Value'</span>,fontsize=<span class="number">14</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Square of Value'</span>,fontsize=<span class="number">14</span>)</span><br><span class="line">plt.tick_params(axis=<span class="string">'both'</span>,labelsize=<span class="number">14</span>)</span><br><span class="line">plt.axis([<span class="number">0</span>,<span class="number">11</span>,<span class="number">0</span>,<span class="number">110</span>])</span><br><span class="line"><span class="keyword">for</span> a,b <span class="keyword">in</span> zip(x,y):</span><br><span class="line">    <span class="comment"># 用%.2f保留两位小数，横向居中对齐ha='center'，纵向底部（顶部）对齐va='bottom'</span></span><br><span class="line">    plt.text(a,b+<span class="number">0.1</span>,<span class="string">'%.2f'</span>%b,ha = <span class="string">'center'</span>,va = <span class="string">'bottom'</span>,fontsize=<span class="number">7</span>)</span><br><span class="line">plt.savefig(<span class="string">'images\squares.png'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;首先，前边设置的x、y值其实就代表了不同柱子在图形中的位置（坐标），通过for循环找到每一个x、y值的相应坐标——a、b，再使用plt.text在对应位置添文字说明来生成相应的数字标签，而for循环也保证了每一个柱子都有标签。其中，<font color=#FF0000>a+0.5, b+0.05(表示位置高度)表示在每一柱子对应x值、y值上方0.05处标注文字说明，&#39;%.2f’ % b,代表标注的文字，即每个柱子对应的y值</font>，其中0表示不显示小数后面的数值，1就表示显示小数后面一位，以此类推； ha=’center’, va= ‘bottom’代表horizontalalignment（水平对齐）、verticalalignment（垂直对齐）的方式，fontsize则是文字大小。条形图、折线图也是如此设置，饼图则在pie命令中有数据标签的对应参数。对于累积柱状图、双轴柱状图则需要用两个for循环，同时通过a与b的不同加减来设置数据标签位置。</p><h2 id="3-图形"><a href="#3-图形" class="headerlink" title="3.图形"></a>3.图形</h2><p>未完待续：<br>  -3.1 散点图<br>  -3.2 柱形图</p>]]></content>
      
      
      <categories>
          
          <category> Data analysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> numpy </tag>
            
            <tag> matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python全栈系列章节更新（九）：极验滑动二维码</title>
      <link href="/2019/12/30/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E4%B9%9D%EF%BC%89/"/>
      <url>/2019/12/30/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E4%B9%9D%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;现在的反爬措施越来越复杂，一些常见的反爬措施有Headers and referer反爬机制、语音动作识别、各种变态二维码（12306）、字符js加密、Ajax动态加载、模拟登录和cookie限制。。。</p><blockquote><p>目标网站：<a href="https://www.geetest.com/" target="_blank" rel="noopener">极验官网</a> <a href="https://www.bilibili.com/" target="_blank" rel="noopener">哔哩哔哩</a><br>反爬机制：<font color=#d71345>极验滑动3.0版本</font><br>相关技术：selenium<br>技术难度：<font color=#d71345>★★☆☆☆☆</font><br>爬取目标：模拟登录官网，破解滑动二维码<br>源代码：本页面<br>说明：找到相关节点DOM，其他网站则可复用此源代码</p></blockquote><a id="more"></a><h3 id="1-识别思路"><a href="#1-识别思路" class="headerlink" title="1.识别思路"></a>1.识别思路</h3><p>目标网站：哔哩哔哩动画<br>&nbsp;&nbsp;&nbsp;但是对于应用了极验验证码的网站，识别并不是没有办法的。如果我们直接模拟表单提交的话，加密参数的构造是个问题，参数构造有问题服务端就会校验失败，所以在这里我们采用直接模拟浏览器动作的方式来完成验证，在 Python 中我们就可以使用 Selenium 来通过完全模拟人的行为的方式来完成验证，此验证成本相对于直接去识别加密算法容易不少。<br><fancybox><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A56/01.png" alt=""></fancybox></p><ul><li>模拟登录，找到入口url</li><li>模拟点击验证按钮</li><li>识别滑动缺口的位置</li><li>模拟拖动滑块<br>&nbsp;&nbsp;&nbsp;&nbsp;可以看到缺口的四周边缘有明显的断裂边缘，而且边缘和边缘周围有明显的区别，我们可以实现一个边缘检测算法来找出缺口的位置。对于极验来说，我们可以利用和原图对比检测的方式来识别缺口的位置，因为在没有滑动滑块之前，缺口其实是没有呈现的.<br>&nbsp;&nbsp;&nbsp;&nbsp;所以我们可以同时获取两张图片，设定一个对比阈值，然后遍历两张图片找出相同位置像素 RGB 差距超过此阈值的像素点位置，那么此位置就是缺口的位置。<br>&nbsp;&nbsp;&nbsp;&nbsp;第四步操作看似简单，但是其中的坑比较多，极验验证码增加了机器轨迹识别，匀速移动、随机速度移动等方法都是不行的，只有完全模拟人的移动轨迹才可以通过验证，而人的移动轨迹一般是先加速后减速的，这又涉及到物理学中加速度的相关问题，我们需要模拟这个过程才能成功。<h3 id="2-初始化"><a href="#2-初始化" class="headerlink" title="2.初始化"></a>2.初始化</h3>&nbsp;&nbsp;&nbsp;&nbsp;首先这次我们选定的链接为：<a href="https://account.geetest.com/login，也就是极验的管理后台登录页面，在这里我们首先初始化一些配置，如" target="_blank" rel="noopener">https://account.geetest.com/login，也就是极验的管理后台登录页面，在这里我们首先初始化一些配置，如</a> Selenium 对象的初始化及一些参数的配置：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 极验账号</span></span><br><span class="line">EMAIL = <span class="string">'test@test.com'</span></span><br><span class="line"><span class="comment"># 极验密码</span></span><br><span class="line">PASSWORD = <span class="string">'123456'</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrackGeetest</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.url = <span class="string">'https://account.geetest.com/login'</span></span><br><span class="line">        self.browser = webdriver.Chrome()</span><br><span class="line">        self.wait = WebDriverWait(self.browser, <span class="number">20</span>)</span><br><span class="line">        self.email = EMAIL</span><br><span class="line">        self.password = PASSWORD</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-模拟点击"><a href="#3-模拟点击" class="headerlink" title="3.模拟点击"></a>3.模拟点击</h3><p>随后我们需要实现第一步的操作，也就是模拟点击初始的验证按钮，弹出滑动二维码，所以我们定义一个方法来获取这个按钮，利用显式等待的方法来实现：<br><fancybox><img src="https://qiniu.cuiqingcai.com/2019-08-02-054912.jpg" alt="斗鱼登录页面"></fancybox></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_geetest_button</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    获取初始验证按钮（点击就会弹出验证码滑块，这一步按实际情况出发，</span></span><br><span class="line"><span class="string">                   有些验证码滑块是直接存在，不用再点击一次来触发生成滑块）</span></span><br><span class="line"><span class="string">    :return: 按钮对象</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    button = self.wait.until(EC.element_to_be_clickable((By.CLASS_NAME, <span class="string">'geetest_radar_tip'</span>)))</span><br><span class="line">    <span class="keyword">return</span> button</span><br></pre></td></tr></table></figure><p>这里返回一个网页节点对象，直接调用click()方法即可模拟点击</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">button = self.get_geetest_button()</span><br><span class="line">button.click()</span><br></pre></td></tr></table></figure><p>到这里就完成了第一步，点击一下就会弹出极验滑动二维码界面</p><h3 id="4-识别缺口"><a href="#4-识别缺口" class="headerlink" title="4.识别缺口"></a>4.识别缺口</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;接下来我们需要识别缺口的位置，首先我们需要将前后的两张比对图片获取下来，然后比对二者的不一致的地方即为缺口。首先我们需要获取不带缺口的图片，利用 Selenium 选取图片元素，然后得到其所在位置和宽高，随后获取整个网页的截图，再从截图中裁切出来即可，代码实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_position</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    获取验证码位置</span></span><br><span class="line"><span class="string">    :return: 验证码位置元组</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    img = self.wait.until(EC.presence_of_element_located((By.CLASS_NAME, <span class="string">'geetest_canvas_img'</span>)))</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    location = img.location</span><br><span class="line">    size = img.size</span><br><span class="line">    top, bottom, left, right = location[<span class="string">'y'</span>], location[<span class="string">'y'</span>] + size[<span class="string">'height'</span>], location[<span class="string">'x'</span>], location[<span class="string">'x'</span>] + size[</span><br><span class="line">        <span class="string">'width'</span>]</span><br><span class="line">    <span class="keyword">return</span> (top, bottom, left, right)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_geetest_image</span><span class="params">(self, name=<span class="string">'captcha.png'</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    获取验证码图片</span></span><br><span class="line"><span class="string">    :return: 图片对象</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    top, bottom, left, right = self.get_position()</span><br><span class="line">    print(<span class="string">'验证码位置'</span>, top, bottom, left, right)</span><br><span class="line">    screenshot = self.get_screenshot()</span><br><span class="line">    captcha = screenshot.crop((left, top, right, bottom))</span><br><span class="line">    <span class="keyword">return</span> captcha</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;在这里 get_position() 函数首先获取了图片对象，然后获取了它的位置和宽高，随后返回了其左上角和右下角的坐标。而 get_geetest_image() 方法则是获取了网页截图，然后调用了 crop() 方法将图片再裁切出来，返回的是 Image 对象。<br>&nbsp;&nbsp;&nbsp;&nbsp;随后我们需要获取第二张图片，也就是带缺口的图片，要使得图片出现缺口，我们只需要点击一下下方的滑块即可，触发这个动作之后，图片中的缺口就会显现，实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_slider</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    获取滑块</span></span><br><span class="line"><span class="string">    :return: 滑块对象</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    slider = self.wait.until(EC.element_to_be_clickable((By.CLASS_NAME, <span class="string">'geetest_slider_button'</span>)))</span><br><span class="line">    <span class="keyword">return</span> slider</span><br></pre></td></tr></table></figure><p>利用 get_slider() 方法获取滑块对象，接下来调用其 click() 方法即可触发点击，缺口图片即可呈现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 点击呼出缺口</span></span><br><span class="line">slider = self.get_slider()</span><br><span class="line">slider.click()</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;随后还是调用 get_geetest_image() 方法将第二张图片获取下来即可。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;到现在我们就已经得到了两张图片对象了，分别赋值给变量 image1 和 image2，接下来对比图片获取缺口即可。要对比图片的不同之处，我们在这里遍历图片的每个坐标点，获取两张图片对应像素点的 RGB 数据，然后判断二者的 RGB 数据差异，如果差距超过在一定范围内，那就代表两个像素相同，继续比对下一个像素点，如果差距超过一定范围，则判断像素点不同，当前位置即为缺口位置，代码实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_pixel_equal</span><span class="params">(self, image1, image2, x, y)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    判断两个像素是否相同</span></span><br><span class="line"><span class="string">    :param image1: 图片1</span></span><br><span class="line"><span class="string">    :param image2: 图片2</span></span><br><span class="line"><span class="string">    :param x: 位置x</span></span><br><span class="line"><span class="string">    :param y: 位置y</span></span><br><span class="line"><span class="string">    :return: 像素是否相同</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 取两个图片的像素点</span></span><br><span class="line">    pixel1 = image1.load()[x, y]</span><br><span class="line">    pixel2 = image2.load()[x, y]</span><br><span class="line">    threshold = <span class="number">60</span></span><br><span class="line">    <span class="keyword">if</span> abs(pixel1[<span class="number">0</span>] - pixel2[<span class="number">0</span>]) &lt; threshold <span class="keyword">and</span> abs(pixel1[<span class="number">1</span>] - pixel2[<span class="number">1</span>]) &lt; threshold <span class="keyword">and</span> abs(</span><br><span class="line">            pixel1[<span class="number">2</span>] - pixel2[<span class="number">2</span>]) &lt; threshold:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gap</span><span class="params">(self, image1, image2)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    获取缺口偏移量</span></span><br><span class="line"><span class="string">    :param image1: 不带缺口图片</span></span><br><span class="line"><span class="string">    :param image2: 带缺口图片</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    left = <span class="number">60</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(left, image1.size[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(image1.size[<span class="number">1</span>]):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.is_pixel_equal(image1, image2, i, j):</span><br><span class="line">                left = i</span><br><span class="line">                <span class="keyword">return</span> left</span><br><span class="line">    <span class="keyword">return</span> left</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;get_gap() 方法即为获取缺口位置的方法，此方法的参数为两张图片，一张为带缺口图片，另一张为不带缺口图片，在这里遍历两张图片的每个像素，然后利用 is_pixel_equal() 方法判断两张图片同一位置的像素是否相同，比对的时候比较了两张图 RGB 的绝对值是否均小于定义的阈值 threshold，如果均在阈值之内，则像素点相同，继续遍历，否则遇到不相同的像素点就是缺口的位置。</p><h3 id="5-模拟拖动"><a href="#5-模拟拖动" class="headerlink" title="5.模拟拖动"></a>5.模拟拖动</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_track</span><span class="params">(self, distance)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    根据偏移量获取移动轨迹</span></span><br><span class="line"><span class="string">    :param distance: 偏移量</span></span><br><span class="line"><span class="string">    :return: 移动轨迹</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 移动轨迹</span></span><br><span class="line">    track = []</span><br><span class="line">    <span class="comment"># 当前位移</span></span><br><span class="line">    current = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 减速阈值</span></span><br><span class="line">    mid = distance * <span class="number">4</span> / <span class="number">5</span></span><br><span class="line">    <span class="comment"># 计算间隔</span></span><br><span class="line">    t = <span class="number">0.2</span></span><br><span class="line">    <span class="comment"># 初速度</span></span><br><span class="line">    v = <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span> current &lt; distance:</span><br><span class="line">        <span class="keyword">if</span> current &lt; mid:</span><br><span class="line">            <span class="comment"># 加速度为正2</span></span><br><span class="line">            a = <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 加速度为负3</span></span><br><span class="line">            a = <span class="number">-3</span></span><br><span class="line">        <span class="comment"># 初速度v0</span></span><br><span class="line">        v0 = v</span><br><span class="line">        <span class="comment"># 当前速度v = v0 + at</span></span><br><span class="line">        v = v0 + a * t</span><br><span class="line">        <span class="comment"># 移动距离x = v0t + 1/2 * a * t^2</span></span><br><span class="line">        move = v0 * t + <span class="number">1</span> / <span class="number">2</span> * a * t * t</span><br><span class="line">        <span class="comment"># 当前位移</span></span><br><span class="line">        current += move</span><br><span class="line">        <span class="comment"># 加入轨迹</span></span><br><span class="line">        track.append(round(move))</span><br><span class="line">    <span class="keyword">return</span> track</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move_to_gap</span><span class="params">(self, slider, tracks)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    拖动滑块到缺口处</span></span><br><span class="line"><span class="string">    :param slider: 滑块</span></span><br><span class="line"><span class="string">    :param tracks: 轨迹</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    ActionChains(self.browser).click_and_hold(slider).perform()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> tracks:</span><br><span class="line">        ActionChains(self.browser).move_by_offset(xoffset=x, yoffset=<span class="number">0</span>).perform()</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    ActionChains(self.browser).release().perform()</span><br></pre></td></tr></table></figure><p>在这里传入的参数为滑块对象和运动轨迹，首先调用ActionChains 的 click_and_hold() 方法按住拖动底部滑块，随后遍历运动轨迹获取每小段位移距离，调用 move_by_offset() 方法移动此位移，最后移动完成之后调用 release() 方法松开鼠标即可。</p><h3 id="6-完整源代码"><a href="#6-完整源代码" class="headerlink" title="6.完整源代码"></a>6.完整源代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line">EMAIL = <span class="string">'example@example.com'</span></span><br><span class="line">PASSWORD = <span class="string">''</span></span><br><span class="line">BORDER = <span class="number">6</span></span><br><span class="line">INIT_LEFT = <span class="number">60</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrackGeetest</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.url = <span class="string">'https://account.geetest.com/login'</span></span><br><span class="line">        self.browser = webdriver.Chrome()</span><br><span class="line">        self.wait = WebDriverWait(self.browser, <span class="number">20</span>)</span><br><span class="line">        self.email = EMAIL</span><br><span class="line">        self.password = PASSWORD</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.browser.close()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_geetest_button</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        获取初始验证按钮</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        button = self.wait.until(EC.element_to_be_clickable((By.CLASS_NAME, <span class="string">'geetest_radar_tip'</span>)))</span><br><span class="line">        <span class="keyword">return</span> button</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_position</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        获取验证码位置</span></span><br><span class="line"><span class="string">        :return: 验证码位置元组</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        img = self.wait.until(EC.presence_of_element_located((By.CLASS_NAME, <span class="string">'geetest_canvas_img'</span>)))</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        location = img.location</span><br><span class="line">        size = img.size</span><br><span class="line">        top, bottom, left, right = location[<span class="string">'y'</span>], location[<span class="string">'y'</span>] + size[<span class="string">'height'</span>], location[<span class="string">'x'</span>], location[<span class="string">'x'</span>] + size[</span><br><span class="line">            <span class="string">'width'</span>]</span><br><span class="line">        <span class="keyword">return</span> (top, bottom, left, right)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_screenshot</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        获取网页截图</span></span><br><span class="line"><span class="string">        :return: 截图对象</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        screenshot = self.browser.get_screenshot_as_png()</span><br><span class="line">        screenshot = Image.open(BytesIO(screenshot))</span><br><span class="line">        <span class="keyword">return</span> screenshot</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_slider</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        获取滑块</span></span><br><span class="line"><span class="string">        :return: 滑块对象</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        slider = self.wait.until(EC.element_to_be_clickable((By.CLASS_NAME, <span class="string">'geetest_slider_button'</span>)))</span><br><span class="line">        <span class="keyword">return</span> slider</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_geetest_image</span><span class="params">(self, name=<span class="string">'captcha.png'</span>)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        获取验证码图片</span></span><br><span class="line"><span class="string">        :return: 图片对象</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        top, bottom, left, right = self.get_position()</span><br><span class="line">        print(<span class="string">'验证码位置'</span>, top, bottom, left, right)</span><br><span class="line">        screenshot = self.get_screenshot()</span><br><span class="line">        captcha = screenshot.crop((left, top, right, bottom))</span><br><span class="line">        captcha.save(name)</span><br><span class="line">        <span class="keyword">return</span> captcha</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        打开网页输入用户名密码</span></span><br><span class="line"><span class="string">        :return: None</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.browser.get(self.url)</span><br><span class="line">        email = self.wait.until(EC.presence_of_element_located((By.ID, <span class="string">'email'</span>)))</span><br><span class="line">        password = self.wait.until(EC.presence_of_element_located((By.ID, <span class="string">'password'</span>)))</span><br><span class="line">        email.send_keys(self.email)</span><br><span class="line">        password.send_keys(self.password)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_gap</span><span class="params">(self, image1, image2)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        获取缺口偏移量</span></span><br><span class="line"><span class="string">        :param image1: 不带缺口图片</span></span><br><span class="line"><span class="string">        :param image2: 带缺口图片</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        left = <span class="number">60</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(left, image1.size[<span class="number">0</span>]):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(image1.size[<span class="number">1</span>]):</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> self.is_pixel_equal(image1, image2, i, j):</span><br><span class="line">                    left = i</span><br><span class="line">                    <span class="keyword">return</span> left</span><br><span class="line">        <span class="keyword">return</span> left</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_pixel_equal</span><span class="params">(self, image1, image2, x, y)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        判断两个像素是否相同</span></span><br><span class="line"><span class="string">        :param image1: 图片1</span></span><br><span class="line"><span class="string">        :param image2: 图片2</span></span><br><span class="line"><span class="string">        :param x: 位置x</span></span><br><span class="line"><span class="string">        :param y: 位置y</span></span><br><span class="line"><span class="string">        :return: 像素是否相同</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 取两个图片的像素点</span></span><br><span class="line">        pixel1 = image1.load()[x, y]</span><br><span class="line">        pixel2 = image2.load()[x, y]</span><br><span class="line">        threshold = <span class="number">60</span></span><br><span class="line">        <span class="keyword">if</span> abs(pixel1[<span class="number">0</span>] - pixel2[<span class="number">0</span>]) &lt; threshold <span class="keyword">and</span> abs(pixel1[<span class="number">1</span>] - pixel2[<span class="number">1</span>]) &lt; threshold <span class="keyword">and</span> abs(</span><br><span class="line">                pixel1[<span class="number">2</span>] - pixel2[<span class="number">2</span>]) &lt; threshold:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_track</span><span class="params">(self, distance)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        根据偏移量获取移动轨迹</span></span><br><span class="line"><span class="string">        :param distance: 偏移量</span></span><br><span class="line"><span class="string">        :return: 移动轨迹</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 移动轨迹</span></span><br><span class="line">        track = []</span><br><span class="line">        <span class="comment"># 当前位移</span></span><br><span class="line">        current = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 减速阈值</span></span><br><span class="line">        mid = distance * <span class="number">4</span> / <span class="number">5</span></span><br><span class="line">        <span class="comment"># 计算间隔</span></span><br><span class="line">        t = <span class="number">0.2</span></span><br><span class="line">        <span class="comment"># 初速度</span></span><br><span class="line">        v = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> current &lt; distance:</span><br><span class="line">            <span class="keyword">if</span> current &lt; mid:</span><br><span class="line">                <span class="comment"># 加速度为正2</span></span><br><span class="line">                a = <span class="number">2</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 加速度为负3</span></span><br><span class="line">                a = <span class="number">-3</span></span><br><span class="line">            <span class="comment"># 初速度v0</span></span><br><span class="line">            v0 = v</span><br><span class="line">            <span class="comment"># 当前速度v = v0 + at</span></span><br><span class="line">            v = v0 + a * t</span><br><span class="line">            <span class="comment"># 移动距离x = v0t + 1/2 * a * t^2</span></span><br><span class="line">            move = v0 * t + <span class="number">1</span> / <span class="number">2</span> * a * t * t</span><br><span class="line">            <span class="comment"># 当前位移</span></span><br><span class="line">            current += move</span><br><span class="line">            <span class="comment"># 加入轨迹</span></span><br><span class="line">            track.append(round(move))</span><br><span class="line">        <span class="keyword">return</span> track</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move_to_gap</span><span class="params">(self, slider, track)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        拖动滑块到缺口处</span></span><br><span class="line"><span class="string">        :param slider: 滑块</span></span><br><span class="line"><span class="string">        :param track: 轨迹</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        ActionChains(self.browser).click_and_hold(slider).perform()</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> track:</span><br><span class="line">            ActionChains(self.browser).move_by_offset(xoffset=x, yoffset=<span class="number">0</span>).perform()</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line">        ActionChains(self.browser).release().perform()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        登录</span></span><br><span class="line"><span class="string">        :return: None</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        submit = self.wait.until(EC.element_to_be_clickable((By.CLASS_NAME, <span class="string">'login-btn'</span>)))</span><br><span class="line">        submit.click()</span><br><span class="line">        time.sleep(<span class="number">10</span>)</span><br><span class="line">        print(<span class="string">'登录成功'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">crack</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 输入用户名密码</span></span><br><span class="line">        self.open()</span><br><span class="line">        <span class="comment"># 点击验证按钮</span></span><br><span class="line">        button = self.get_geetest_button()</span><br><span class="line">        button.click()</span><br><span class="line">        <span class="comment"># 获取验证码图片</span></span><br><span class="line">        image1 = self.get_geetest_image(<span class="string">'captcha1.png'</span>)</span><br><span class="line">        <span class="comment"># 点按呼出缺口</span></span><br><span class="line">        slider = self.get_slider()</span><br><span class="line">        slider.click()</span><br><span class="line">        <span class="comment"># 获取带缺口的验证码图片</span></span><br><span class="line">        image2 = self.get_geetest_image(<span class="string">'captcha2.png'</span>)</span><br><span class="line">        <span class="comment"># 获取缺口位置</span></span><br><span class="line">        gap = self.get_gap(image1, image2)</span><br><span class="line">        print(<span class="string">'缺口位置'</span>, gap)</span><br><span class="line">        <span class="comment"># 减去缺口位移</span></span><br><span class="line">        gap -= BORDER</span><br><span class="line">        <span class="comment"># 获取移动轨迹</span></span><br><span class="line">        track = self.get_track(gap)</span><br><span class="line">        print(<span class="string">'滑动轨迹'</span>, track)</span><br><span class="line">        <span class="comment"># 拖动滑块</span></span><br><span class="line">        self.move_to_gap(slider, track)</span><br><span class="line">        </span><br><span class="line">        success = self.wait.until(</span><br><span class="line">            EC.text_to_be_present_in_element((By.CLASS_NAME, <span class="string">'geetest_success_radar_tip_content'</span>), <span class="string">'验证成功'</span>))</span><br><span class="line">        print(success)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 失败后重试</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> success:</span><br><span class="line">            self.crack()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.login()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    crack = CrackGeetest()</span><br><span class="line">    crack.crack()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 极验滑动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript篇章一：TypeScript基本知识</title>
      <link href="/2019/12/23/TypeScript%E7%AF%87%E7%AB%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2019/12/23/TypeScript%E7%AF%87%E7%AB%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JS作为一门动态弱类型语言,对变量类型非常宽容,使得语言具有极大”灵活性”,同时这也是JS的一种”缺陷”.如果在一年前,可能TypeScript还不是刚需,但按目前的趋势看,不管是对于JS语言本身还是开发者类型思维的塑造,TypeScript已经是开发者的必备技能,ES6,TypeScript等也都是面试中经常会被问到的点.</p><blockquote><p><font size=4 color=#FF0000>本文要点：</font><br>1.TS变量及数据类型<br>2.TS变量声明<br>…</p></blockquote><a id="more"></a><h2 id="1-TS的数据类型"><a href="#1-TS的数据类型" class="headerlink" title="1.TS的数据类型"></a>1.TS的数据类型</h2><p>6种基本数据类型：boolean，number，string，symbol，undefined，null，void，any，never，元组，枚举，高级类型</p><p>3种引用类型：array，function，object</p><h2 id="2-变量声明"><a href="#2-变量声明" class="headerlink" title="2.变量声明"></a>2.变量声明</h2><blockquote><p>1.简单数据类型定义</p></blockquote><p>语法:变量修饰符 变量名/函数:数据类型 = value</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Boolean类型</span></span><br><span class="line"><span class="keyword">let</span> flag:<span class="built_in">boolean</span> =  <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// number数值类型</span></span><br><span class="line"><span class="keyword">let</span> age:<span class="built_in">number</span> = <span class="number">18</span>;</span><br><span class="line"><span class="comment">// string字符串类型</span></span><br><span class="line"><span class="keyword">let</span> username:<span class="built_in">string</span> = <span class="string">"chd"</span>;</span><br></pre></td></tr></table></figure><blockquote><p>2.数组类型</p></blockquote><p>数组定义方法:<br>let array1:Array&lt;number|string|object…&gt;;<br>let array2:number[];<br>let array3:any[];</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// arr:number[]要加一个[]表示一维数组，数组创建方式一：基本数组定义</span></span><br><span class="line"><span class="keyword">var</span> arr1:<span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> arr2:<span class="built_in">string</span>[] = [<span class="string">"chd"</span>,<span class="string">"sgx"</span>,<span class="string">"lmm"</span>];</span><br><span class="line"><span class="comment">// 数组创建方式二：数组泛型定义</span></span><br><span class="line"><span class="keyword">var</span> arr3:<span class="built_in">Array</span>&lt;<span class="built_in">number</span>|<span class="built_in">string</span>|object&gt; =[<span class="string">"蒙"</span>,<span class="number">18</span>,&#123;school:<span class="string">"Tinghua"</span>,height:<span class="number">1.75</span>&#125;];</span><br><span class="line"><span class="comment">// 数组创建方式三：any</span></span><br><span class="line"><span class="keyword">let</span> arr4:<span class="built_in">any</span>[] = [<span class="string">'Xcat Liu'</span>, <span class="number">25</span>, &#123; website: <span class="string">'http://xcatliu.com'</span>, port:<span class="number">3306</span>&#125;];</span><br></pre></td></tr></table></figure><blockquote><p>3.元组类型</p></blockquote><p>元组是一种限制数组的元素类型和个数的数组,此时,如果改变数组的元素类型或添加元素数量,编辑器都会报错:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tuple: [<span class="built_in">number</span>, <span class="built_in">string</span>,object] = [<span class="number">0</span>, <span class="string">'1'</span>, &#123; website: <span class="string">'http://xcatliu.com'</span>, port:<span class="number">3306</span>&#125;]</span><br></pre></td></tr></table></figure><p><font color=#FF0000>元组越界问题:</font><br>虽然元组限制了数组元素的类型和数量,过多的元素声明会报错,但TS允许向元组中使用数组的push方法插入新元素(但不允许访问)</p><blockquote><p>4.函数</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">a:<span class="built_in">number</span>,b:<span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"数值型a:"</span>,a);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"字符串型b:"</span>,b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = fun(<span class="number">18</span>,<span class="string">"hello world"</span>);</span><br></pre></td></tr></table></figure><blockquote><p>5.对象</p></blockquote><p>在JS中，可以任意修改对象属性，但在TS中不允许</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj: object = &#123;x: <span class="string">'a'</span>, y: <span class="string">'b'</span>&#125;;</span><br><span class="line">obj.x = <span class="number">3</span><span class="comment">// Property 'x' does not exist on type 'object'.</span></span><br></pre></td></tr></table></figure><blockquote><p>6.symbol</p></blockquote><p>具有唯一的值，可以显式声明，也可以创建</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> symbol1:Symbol = Symbol();  <span class="comment">// 显示声明</span></span><br><span class="line"><span class="keyword">let</span> symbol2 = Symbol() ; <span class="comment">// 直接创建</span></span><br><span class="line"><span class="comment">// 验证:是否是同一个对象</span></span><br><span class="line"><span class="built_in">console</span>.log(symbol1 === symbol2)    <span class="comment">// fasle</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>《守护之 Vue(三)：组件与webpack 无限开启》</title>
      <link href="/2019/12/22/Vue(%E4%B8%89)/"/>
      <url>/2019/12/22/Vue(%E4%B8%89)/</url>
      
        <content type="html"><![CDATA[<p>前端为什么需要模块化：模块化是一种思想, 是将大工程拆成小的模块分治的思想。 像react 和 vue. 只是视图层. 它们没有帮开发解决系统结构的问题. 它们只是做好了自己在视图渲染上的组件化</p><p><font size=4 color=#FF0000>本文要点：</font></p><blockquote><p>1.父子组件之间的访问方式<br>2.前端模块化<br>3.webpack</p></blockquote><a id="more"></a><h3 id="1-父子组件之间的访问方式"><a href="#1-父子组件之间的访问方式" class="headerlink" title="1.父子组件之间的访问方式"></a>1.父子组件之间的访问方式</h3><p><a href="https://ahrilove.top/2019/11/08/Vue/">Vue基础知识</a><br>&nbsp;&nbsp;&nbsp;&nbsp;之前我们已经了解到组件的创建方式（三种全局组件创建方式和两种局部组建方式），props属性使用以及接受动态数据和静态数据。那我们今天就要学习一下关于：</p><p>有时候我们需要父组件访问子组件，子组件直接访问父组件，或者是子组件访问跟组件</p><blockquote><p>父组件访问子组件：使用$children或$refs(reference引用之意)</p></blockquote><p>$refs =&gt; 对象类型，默认为空的对象，必须要加ref=”xxxx” ：在组件中使用ref（即<componentName ref="one">，即表示给组件添加唯一的id属性）相当于给标签添加一个id，使得开发者可以知道我们操作的是那个DOM，用来获取DOM元素和组建引用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">ref</span>=<span class="string">"aaa"</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"btnClick('hello woman')"</span> <span class="attr">value</span>=<span class="string">"click"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cpn"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                message:<span class="string">'hello man'</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                btnClick(hi)&#123;</span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(hi);</span></span><br><span class="line">                    /*</span><br><span class="line">                    *调用子组件的name返回值</span><br><span class="line"><span class="actionscript">                    * 经测试：<span class="keyword">this</span>必须添加，否则会出现$refs未定义的报错</span></span><br><span class="line"><span class="actionscript">                    * $refs.aaa.name中的aaa相当于id属性，也必须需要，否则会弹出name未定义的错误<span class="literal">undefined</span></span></span><br><span class="line">                    * */</span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.aaa.name);</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.aaa.num)</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            components:&#123;</span><br><span class="line"><span class="actionscript">                <span class="string">'cpn'</span>:&#123;</span></span><br><span class="line"><span class="actionscript">                   template:<span class="string">'#cpn'</span> ,</span></span><br><span class="line">                   data()&#123;</span><br><span class="line"><span class="actionscript">                       <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                           name:<span class="string">"我是子组件的name"</span>,</span></span><br><span class="line">                           num:18</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;,</span><br><span class="line">                   methods: &#123;</span><br><span class="line">                       showMessage()&#123;</span><br><span class="line"><span class="javascript">                           <span class="built_in">console</span>.log(<span class="string">"showMessage"</span>)</span></span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>子组件访问父组件：使用$parent（不常用）</p></blockquote><h3 id="2-前端模块化方式"><a href="#2-前端模块化方式" class="headerlink" title="2.前端模块化方式"></a>2.前端模块化方式</h3><blockquote><p>2.1 CommonJS的模块化实现,需要nodeJS的支持</p></blockquote><p><a href="https://ahrilove.top/2019/11/23/Javascript%E7%AF%87%E7%AB%A0%E5%9B%9B/">【参考之前的文章】</a></p><blockquote><p>2.2 ES6的模块化实现(可以直接在浏览器上直接运行) </p></blockquote><p>如何实现模块化，在html中需要使用type=’module’属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./aaa.js"</span> <span class="attr">type</span>=<span class="string">"module"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./bbb.js"</span> <span class="attr">type</span>=<span class="string">"module"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时表示aaa.js等是一个单独的模块，此模块是有作用域的。如果要使用aaa.js内的变量，需要在aaa.js中先导出变量，再在需要使用的地方导入变量。</p><p><font size=4 color=#FF0000>2.1 导出方式:这里推荐使用统一导出</font></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// aaa.static</span></span><br><span class="line"><span class="comment">// 这里推荐使用统一导出：</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">22</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(sum(<span class="number">10</span>, <span class="number">20</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.最后统一导出,导出sum函数，flag，age等属性值</span></span><br><span class="line"><span class="keyword">export</span> &#123;flag,sum,age&#125;</span><br></pre></td></tr></table></figure><p><font size=4 color=#FF0000>2.2 导入方式:</font><br>使用import {name,flag,sum} from &#39;./aaa.js&#39;导入多个变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bbb.js导入aaa.js中的sum函数，flag，name等属性值</span></span><br><span class="line"><span class="keyword">import</span> &#123;name,flag,sum&#125; <span class="keyword">from</span> <span class="string">'./aaa.static'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"小明是天才"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">20</span>,<span class="number">30</span>));</span><br></pre></td></tr></table></figure><p><font size=4 color=#FF0000>2.3 默认导入 export default:有且只有一个export default</font><br>导出：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  flag,sum,age</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导入：注意：使用默认导出会将所有需要导出的变量打包成一个对象，此时导出一个对象，此时我在bbb.js中导入变量时候命名为aaa，如果要调用变量需要使用aaa.变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认导入 export default</span></span><br><span class="line"><span class="keyword">import</span> aaa <span class="keyword">from</span> <span class="string">'./aaa.static'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(aaa.sum(<span class="number">10</span>,<span class="number">110</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用import * as aaa from './aaa.static'统一全部导入</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.统一全部导入</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> aaa <span class="keyword">from</span> <span class="string">'./aaa.static'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(aaa.flag);</span><br><span class="line"><span class="built_in">console</span>.log(aaa.name);</span><br></pre></td></tr></table></figure><h3 id="3-webpack"><a href="#3-webpack" class="headerlink" title="3.webpack"></a>3.webpack</h3><h4 id="3-1-webpack的安装"><a href="#3-1-webpack的安装" class="headerlink" title="3.1 webpack的安装"></a>3.1 webpack的安装</h4><ol><li>webpack依赖node环境。</li><li>node环境依赖众多包，所以需要npm，npm（node packages manager）node包管理工具</li><li>nvm是node管理工具可以自由切换node环境版本</li></ol><h4 id="3-2-webpack起步"><a href="#3-2-webpack起步" class="headerlink" title="3.2 webpack起步"></a>3.2 webpack起步</h4><p><a href="https://github.com/zhangtianyi0110/VueLearnNotes/blob/master/15-webpack/15-webpack.md" target="_blank" rel="noopener">【参考GitHub关于webpack的详细说明，这里不做重复累述】</a> 以及<a href="https://www.bilibili.com/video/av59594689?p=76" target="_blank" rel="noopener">【哔哩哔哩视频】</a></p><h3 id="未完待续。。。"><a href="#未完待续。。。" class="headerlink" title="未完待续。。。"></a>未完待续。。。</h3>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> CommonJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Frame与iFrame标签</title>
      <link href="/2019/12/20/frame%E4%B8%8Eiframe/"/>
      <url>/2019/12/20/frame%E4%B8%8Eiframe/</url>
      
        <content type="html"><![CDATA[<blockquote><p><font size=4 color=#FF0000>本文要点：</font><br>1.Frame 和 IFrame 对象<br>2.frame 和 iframe 的区别<br>3.frame<br>4.iframe</p></blockquote><a id="more"></a><h3 id="1-Frame-和-IFrame-对象"><a href="#1-Frame-和-IFrame-对象" class="headerlink" title="1. Frame 和 IFrame 对象"></a>1. <a href="https://www.cnblogs.com/showcase/p/11162091.html" target="_blank" rel="noopener">Frame 和 IFrame 对象</a></h3><p>其实就是在HTML页面中镶入了一个框架，并且框架可拆分为多个内容区。<br>Frame 对象代表一个 HTML 框架。&lt;frame&gt;标签定义了在框架中一个特定的窗口（框架）。在 HTML 文档中 &lt;frame&gt; 每出现一次，就会创建一个 Frame对象。</p><p>IFrame 对象代表一个 HTML 的内联框架。&lt;iframe&gt; 标签定义了包含另外一个文档的内联框架。在 HTML 文档中 &lt;iframe&gt; 每出现一次，一个 IFrame 对象就会被创建。</p><h3 id="2-frame-和-iframe-的区别"><a href="#2-frame-和-iframe-的区别" class="headerlink" title="2.frame 和 iframe 的区别"></a>2.frame 和 iframe 的区别</h3><p>　1、frame 不能脱离 frameset 单独使用，iframe 可以；</p><p>　2、frame 不能放到body中，否则将无法显示；</p><p>　3、iframe 也可以嵌套在frameset ，但是必须放到body中，不嵌套在frameset 中的iframe 可以随意使用；</p><p>　4、frame 的高度只能通过 frameset 控制，iframe 是自己本身控制，不能通过 frameset 设置；</p><p>　5、iframe 可以放到表格中；</p><h3 id="3-frame"><a href="#3-frame" class="headerlink" title="3.frame"></a>3.frame</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    noresize: 规定无法调整框架的大小</span></span><br><span class="line"><span class="comment">    frameborder: 规定是否显示框架周围的边框 0为无边框 1为有</span></span><br><span class="line"><span class="comment">    marginheight: 定义框架的上方和下方的边距</span></span><br><span class="line"><span class="comment">    marginwidth: 定义框架的左侧和右侧的边距</span></span><br><span class="line"><span class="comment">    noresize: 规定无法调整框架的大小</span></span><br><span class="line"><span class="comment">    scrolling: 规定是否在框架中显示滚动条 yes no auto</span></span><br><span class="line"><span class="comment">    src:      规定在框架中显示的文档的 URL。</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    cols: 定义框架集中列的数目和尺寸</span></span><br><span class="line"><span class="comment">    rows: 定义框架集中行的数目和尺寸</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">frameset</span> <span class="attr">cols</span>=<span class="string">"25%,50%,25%"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"frame_a.htm"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"frame_b.htm"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"frame_c.htm"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-iframe"><a href="#4-iframe" class="headerlink" title="4.iframe"></a>4.iframe</h3><p>126邮箱登陆框就涉及到iframe</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">"x-URS-iframe"</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">           ...</span><br><span class="line">           <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"email"</span> &gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/yangzhengquan19/article/details/83211285" target="_blank" rel="noopener">【iframe标签详解参考文章】</a><br>注：iframe是迫不得已才使用的，因为使用iframe会带来较多的问题，而有的浏览器可以设置将iframe当作广告屏蔽。 </p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python全栈系列章节更新（八）：js逆向爬虫的奇技淫巧</title>
      <link href="/2019/12/19/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0(%E5%85%AB)/"/>
      <url>/2019/12/19/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0(%E5%85%AB)/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;现在的反爬措施越来越复杂，一些常见的反爬措施有Headers and referer反爬机制、语音动作识别、各种变态二维码（12306）、字符js加密、Ajax动态加载、模拟登录和cookie限制。。。</p><blockquote><p>目标网站：<a href="https://mp.weixin.qq.com/" target="_blank" rel="noopener">微信公众平台</a><br>反爬机制：<font color=#d71345>用户名不变，密码加密</font><br>相关技术：selenium，requests，execjs<br>技术难度：<font color=#d71345>★★☆☆☆☆</font><br>爬取目标：模拟登陆公共号，获取页面的所有信息<br>源代码：本页面（selenium代码还在测试更新当中）<br>说明：第一次玩js逆向爬虫，如有不足，多多指教</p></blockquote><a id="more"></a><h3 id="1-分析js，找到目标接口函数"><a href="#1-分析js，找到目标接口函数" class="headerlink" title="1.分析js，找到目标接口函数"></a>1.分析js，找到目标接口函数</h3><p>F12打开 开发者工具, 按照一般逻辑步骤，先输入一个错误账号密码，找到真正的入口接口函数,案例如下：<br><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/D:/data/images20191219154415.png" alt=""></fancybox><br>继续向下翻动，我们可以看到请求参数表单数据的pwd密码是明显经过加密的<br><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/D:/data/images20191219154530.png" alt=""></fancybox></p><h3 id="2-破解"><a href="#2-破解" class="headerlink" title="2.破解"></a>2.破解</h3><p>在Search功能栏下搜索pwd 很快可以定位到以下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">_loginPost: <span class="function"><span class="keyword">function</span>(<span class="params">e, i</span>) </span>&#123;</span><br><span class="line">    n.post(&#123;</span><br><span class="line">        url: i.url,</span><br><span class="line">        data: &#123;</span><br><span class="line">            username: i.account,</span><br><span class="line">            pwd: o(i.pwd.substr(<span class="number">0</span>, <span class="number">16</span>)), <span class="comment">// 关键代码</span></span><br><span class="line">            imgcode: i.verify,</span><br><span class="line">            f: <span class="string">"json"</span>,</span><br><span class="line">            userlang: i.currentLang,</span><br><span class="line">            redire</span><br></pre></td></tr></table></figure><p>我们在pwd: o(i.pwd.substr(0, 16))行处下断点。然后步入进去.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">t.exports = <span class="function"><span class="keyword">function</span>(<span class="params">n, r, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> r ? t ? c(r, n) : <span class="function"><span class="keyword">function</span>(<span class="params">n, r</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> e(c(n, r))</span><br><span class="line">    &#125;(r, n) : t ? o(n) : <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> e(o(n)) <span class="comment">// *****</span></span><br><span class="line">    &#125;(n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续步入一次，代码最后会走到我标****的地方。这就是我们需要的关键函数,扣代码吧。</p><p>扣下代码。然后自己编写一个Js function</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">JsKiller</span>(<span class="params">pwd</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> e(o(pwd));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>js逆向加密源代码：pwd.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params">n, r</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> t = (<span class="number">65535</span> &amp; n) + (<span class="number">65535</span> &amp; r);</span><br><span class="line">    <span class="keyword">return</span> (n &gt;&gt; <span class="number">16</span>) + (r &gt;&gt; <span class="number">16</span>) + (t &gt;&gt; <span class="number">16</span>) &lt;&lt; <span class="number">16</span> | <span class="number">65535</span> &amp; t</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">n, r, t, e, u, o</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> d(<span class="function"><span class="keyword">function</span> (<span class="params">n, r</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n &lt;&lt; r | n &gt;&gt;&gt; <span class="number">32</span> - r</span><br><span class="line">    &#125;(d(d(r, n), d(e, o)), u), t)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params">n, r, t, e, u, o, c</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f(r &amp; t | ~r &amp; e, n, r, u, o, c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">l</span>(<span class="params">n, r, t, e, u, o, c</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f(r &amp; e | t &amp; ~e, n, r, u, o, c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">v</span>(<span class="params">n, r, t, e, u, o, c</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f(r ^ t ^ e, n, r, u, o, c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params">n, r, t, e, u, o, c</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f(t ^ (r | ~e), n, r, u, o, c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">n, r</span>) </span>&#123;</span><br><span class="line">    n[r &gt;&gt; <span class="number">5</span>] |= <span class="number">128</span> &lt;&lt; r % <span class="number">32</span>;</span><br><span class="line">        n[<span class="number">14</span> + (r + <span class="number">64</span> &gt;&gt;&gt; <span class="number">9</span> &lt;&lt; <span class="number">4</span>)] = r;</span><br><span class="line">    <span class="keyword">var</span> t, e, u, o, c, f = <span class="number">1732584193</span>, i = <span class="number">-271733879</span>, a = <span class="number">-1732584194</span>, h = <span class="number">271733878</span>;</span><br><span class="line">    <span class="keyword">for</span> (t = <span class="number">0</span>; t &lt; n.length; t += <span class="number">16</span>)</span><br><span class="line">        i = s(i = s(i = s(i = s(i = v(i = v(i = v(i = v(i = l(i = l(i = l(i = l(i = g(i = g(i = g(i = g(u = i, a = g(o = a, h = g(c = h, f = g(e = f, i, a, h, n[t], <span class="number">7</span>, <span class="number">-680876936</span>), i, a, n[t + <span class="number">1</span>], <span class="number">12</span>, <span class="number">-389564586</span>), f, i, n[t + <span class="number">2</span>], <span class="number">17</span>, <span class="number">606105819</span>), h, f, n[t + <span class="number">3</span>], <span class="number">22</span>, <span class="number">-1044525330</span>), a = g(a, h = g(h, f = g(f, i, a, h, n[t + <span class="number">4</span>], <span class="number">7</span>, <span class="number">-176418897</span>), i, a, n[t + <span class="number">5</span>], <span class="number">12</span>, <span class="number">1200080426</span>), f, i, n[t + <span class="number">6</span>], <span class="number">17</span>, <span class="number">-1473231341</span>), h, f, n[t + <span class="number">7</span>], <span class="number">22</span>, <span class="number">-45705983</span>), a = g(a, h = g(h, f = g(f, i, a, h, n[t + <span class="number">8</span>], <span class="number">7</span>, <span class="number">1770035416</span>), i, a, n[t + <span class="number">9</span>], <span class="number">12</span>, <span class="number">-1958414417</span>), f, i, n[t + <span class="number">10</span>], <span class="number">17</span>, <span class="number">-42063</span>), h, f, n[t + <span class="number">11</span>], <span class="number">22</span>, <span class="number">-1990404162</span>), a = g(a, h = g(h, f = g(f, i, a, h, n[t + <span class="number">12</span>], <span class="number">7</span>, <span class="number">1804603682</span>), i, a, n[t + <span class="number">13</span>], <span class="number">12</span>, <span class="number">-40341101</span>), f, i, n[t + <span class="number">14</span>], <span class="number">17</span>, <span class="number">-1502002290</span>), h, f, n[t + <span class="number">15</span>], <span class="number">22</span>, <span class="number">1236535329</span>), a = l(a, h = l(h, f = l(f, i, a, h, n[t + <span class="number">1</span>], <span class="number">5</span>, <span class="number">-165796510</span>), i, a, n[t + <span class="number">6</span>], <span class="number">9</span>, <span class="number">-1069501632</span>), f, i, n[t + <span class="number">11</span>], <span class="number">14</span>, <span class="number">643717713</span>), h, f, n[t], <span class="number">20</span>, <span class="number">-373897302</span>), a = l(a, h = l(h, f = l(f, i, a, h, n[t + <span class="number">5</span>], <span class="number">5</span>, <span class="number">-701558691</span>), i, a, n[t + <span class="number">10</span>], <span class="number">9</span>, <span class="number">38016083</span>), f, i, n[t + <span class="number">15</span>], <span class="number">14</span>, <span class="number">-660478335</span>), h, f, n[t + <span class="number">4</span>], <span class="number">20</span>, <span class="number">-405537848</span>), a = l(a, h = l(h, f = l(f, i, a, h, n[t + <span class="number">9</span>], <span class="number">5</span>, <span class="number">568446438</span>), i, a, n[t + <span class="number">14</span>], <span class="number">9</span>, <span class="number">-1019803690</span>), f, i, n[t + <span class="number">3</span>], <span class="number">14</span>, <span class="number">-187363961</span>), h, f, n[t + <span class="number">8</span>], <span class="number">20</span>, <span class="number">1163531501</span>), a = l(a, h = l(h, f = l(f, i, a, h, n[t + <span class="number">13</span>], <span class="number">5</span>, <span class="number">-1444681467</span>), i, a, n[t + <span class="number">2</span>], <span class="number">9</span>, <span class="number">-51403784</span>), f, i, n[t + <span class="number">7</span>], <span class="number">14</span>, <span class="number">1735328473</span>), h, f, n[t + <span class="number">12</span>], <span class="number">20</span>, <span class="number">-1926607734</span>), a = v(a, h = v(h, f = v(f, i, a, h, n[t + <span class="number">5</span>], <span class="number">4</span>, <span class="number">-378558</span>), i, a, n[t + <span class="number">8</span>], <span class="number">11</span>, <span class="number">-2022574463</span>), f, i, n[t + <span class="number">11</span>], <span class="number">16</span>, <span class="number">1839030562</span>), h, f, n[t + <span class="number">14</span>], <span class="number">23</span>, <span class="number">-35309556</span>), a = v(a, h = v(h, f = v(f, i, a, h, n[t + <span class="number">1</span>], <span class="number">4</span>, <span class="number">-1530992060</span>), i, a, n[t + <span class="number">4</span>], <span class="number">11</span>, <span class="number">1272893353</span>), f, i, n[t + <span class="number">7</span>], <span class="number">16</span>, <span class="number">-155497632</span>), h, f, n[t + <span class="number">10</span>], <span class="number">23</span>, <span class="number">-1094730640</span>), a = v(a, h = v(h, f = v(f, i, a, h, n[t + <span class="number">13</span>], <span class="number">4</span>, <span class="number">681279174</span>), i, a, n[t], <span class="number">11</span>, <span class="number">-358537222</span>), f, i, n[t + <span class="number">3</span>], <span class="number">16</span>, <span class="number">-722521979</span>), h, f, n[t + <span class="number">6</span>], <span class="number">23</span>, <span class="number">76029189</span>), a = v(a, h = v(h, f = v(f, i, a, h, n[t + <span class="number">9</span>], <span class="number">4</span>, <span class="number">-640364487</span>), i, a, n[t + <span class="number">12</span>], <span class="number">11</span>, <span class="number">-421815835</span>), f, i, n[t + <span class="number">15</span>], <span class="number">16</span>, <span class="number">530742520</span>), h, f, n[t + <span class="number">2</span>], <span class="number">23</span>, <span class="number">-995338651</span>), a = s(a, h = s(h, f = s(f, i, a, h, n[t], <span class="number">6</span>, <span class="number">-198630844</span>), i, a, n[t + <span class="number">7</span>], <span class="number">10</span>, <span class="number">1126891415</span>), f, i, n[t + <span class="number">14</span>], <span class="number">15</span>, <span class="number">-1416354905</span>), h, f, n[t + <span class="number">5</span>], <span class="number">21</span>, <span class="number">-57434055</span>), a = s(a, h = s(h, f = s(f, i, a, h, n[t + <span class="number">12</span>], <span class="number">6</span>, <span class="number">1700485571</span>), i, a, n[t + <span class="number">3</span>], <span class="number">10</span>, <span class="number">-1894986606</span>), f, i, n[t + <span class="number">10</span>], <span class="number">15</span>, <span class="number">-1051523</span>), h, f, n[t + <span class="number">1</span>], <span class="number">21</span>, <span class="number">-2054922799</span>), a = s(a, h = s(h, f = s(f, i, a, h, n[t + <span class="number">8</span>], <span class="number">6</span>, <span class="number">1873313359</span>), i, a, n[t + <span class="number">15</span>], <span class="number">10</span>, <span class="number">-30611744</span>), f, i, n[t + <span class="number">6</span>], <span class="number">15</span>, <span class="number">-1560198380</span>), h, f, n[t + <span class="number">13</span>], <span class="number">21</span>, <span class="number">1309151649</span>), a = s(a, h = s(h, f = s(f, i, a, h, n[t + <span class="number">4</span>], <span class="number">6</span>, <span class="number">-145523070</span>), i, a, n[t + <span class="number">11</span>], <span class="number">10</span>, <span class="number">-1120210379</span>), f, i, n[t + <span class="number">2</span>], <span class="number">15</span>, <span class="number">718787259</span>), h, f, n[t + <span class="number">9</span>], <span class="number">21</span>, <span class="number">-343485551</span>),</span><br><span class="line">            f = d(f, e);</span><br><span class="line">            i = d(i, u);</span><br><span class="line">            a = d(a, o);</span><br><span class="line">            h = d(h, c);</span><br><span class="line">    <span class="keyword">return</span> [f, i, a, h]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> r, t = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (r = <span class="number">0</span>; r &lt; <span class="number">32</span> * n.length; r += <span class="number">8</span>)</span><br><span class="line">        t += <span class="built_in">String</span>.fromCharCode(n[r &gt;&gt; <span class="number">5</span>] &gt;&gt;&gt; r % <span class="number">32</span> &amp; <span class="number">255</span>);</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">h</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> r, t = [];</span><br><span class="line">    <span class="keyword">for</span> (t[(n.length &gt;&gt; <span class="number">2</span>) - <span class="number">1</span>] = <span class="keyword">void</span> <span class="number">0</span>,</span><br><span class="line">             r = <span class="number">0</span>; r &lt; t.length; r += <span class="number">1</span>)</span><br><span class="line">        t[r] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (r = <span class="number">0</span>; r &lt; <span class="number">8</span> * n.length; r += <span class="number">8</span>)</span><br><span class="line">        t[r &gt;&gt; <span class="number">5</span>] |= (<span class="number">255</span> &amp; n.charCodeAt(r / <span class="number">8</span>)) &lt;&lt; r % <span class="number">32</span>;</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> r, t, e = <span class="string">"0123456789abcdef"</span>, u = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (t = <span class="number">0</span>; t &lt; n.length; t += <span class="number">1</span>)</span><br><span class="line">        r = n.charCodeAt(t);</span><br><span class="line">            u += e.charAt(r &gt;&gt;&gt; <span class="number">4</span> &amp; <span class="number">15</span>) + e.charAt(<span class="number">15</span> &amp; r);</span><br><span class="line">    <span class="keyword">return</span> u</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">u</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">unescape</span>(<span class="built_in">encodeURIComponent</span>(n))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a(i(h(n), <span class="number">8</span> * n.length))</span><br><span class="line">    &#125;(u(n))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">n, r</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">n, r</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> t, e, u = h(n), o = [], c = [];</span><br><span class="line">        <span class="keyword">for</span> (o[<span class="number">15</span>] = c[<span class="number">15</span>] = <span class="keyword">void</span> <span class="number">0</span>,</span><br><span class="line">             <span class="number">16</span> &lt; u.length &amp;&amp; (u = i(u, <span class="number">8</span> * n.length)),</span><br><span class="line">                 t = <span class="number">0</span>; t &lt; <span class="number">16</span>; t += <span class="number">1</span>)</span><br><span class="line">            o[t] = <span class="number">909522486</span> ^ u[t];</span><br><span class="line">                c[t] = <span class="number">1549556828</span> ^ u[t];</span><br><span class="line">        <span class="keyword">return</span> e = i(o.concat(h(r)), <span class="number">512</span> + <span class="number">8</span> * r.length);</span><br><span class="line">            a(i(c.concat(e), <span class="number">640</span>))</span><br><span class="line">    &#125;(u(n), u(r))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">JsKiller</span>(<span class="params">pwd</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> e(o(pwd))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-执行破解出的js"><a href="#3-执行破解出的js" class="headerlink" title="3.执行破解出的js"></a>3.执行破解出的js</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseJS</span><span class="params">(pwd)</span>:</span></span><br><span class="line">    <span class="comment"># 读取pwd.js文件内容</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"pwd.static"</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        js_code = f.read()</span><br><span class="line">    <span class="comment"># 编译js函数</span></span><br><span class="line">    ctx = execjs.compile(js_code)</span><br><span class="line">    <span class="comment"># 执行js中的JsKiller函数，参数为pwd</span></span><br><span class="line">    result = ctx.call(<span class="string">'JsKiller'</span>, pwd)</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>比如我们来执行一下这个python代码，测试一下结果：令pwd=”Github”<br> ctx.call(‘JsKiller’, pwd) ==&gt; &quot;e1adbcbb92c622d0b3e619f9d0730abf”,即将GitHub加密成32位。</p><h3 id="4-模拟登陆"><a href="#4-模拟登陆" class="headerlink" title="4.模拟登陆"></a>4.模拟登陆</h3><p> 这里直接列出来模拟登录的源代码，这里需要注意一定要加referer<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"https://mp.weixin.qq.com/cgi-bin/bizlogin?action=startlogin"</span>  <span class="comment"># 这就是真正的入口url</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_content</span><span class="params">(username, pwd)</span>:</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">"referer"</span>: <span class="string">"https://mp.weixin.qq.com/"</span>,  <span class="comment"># 必须要写</span></span><br><span class="line">        <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36"</span></span><br><span class="line">    &#125;</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">"username"</span>: username,</span><br><span class="line">        <span class="string">"pwd"</span>: pwd,</span><br><span class="line">        <span class="string">"f"</span>: <span class="string">"json"</span>,</span><br><span class="line">        <span class="string">"imgcode"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"userlang"</span>: <span class="string">"zh_CN"</span>,</span><br><span class="line">        <span class="string">"lang"</span>: <span class="string">"zh_CN"</span>,</span><br><span class="line">        <span class="string">"ajax"</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.post(url=url, headers=headers, data=data, timeout=<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">if</span> (response.status_code == <span class="number">200</span>):</span><br><span class="line">            <span class="keyword">return</span> response.text</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseJS</span><span class="params">(pwd)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"pwd.static"</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        js_code = f.read()</span><br><span class="line"></span><br><span class="line">    ctx = execjs.compile(js_code)</span><br><span class="line">    result = ctx.call(<span class="string">'JsKiller'</span>, pwd)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    username = <span class="string">"980710425@qq.com"</span></span><br><span class="line">    pwd = <span class="string">"XXXXXXXX"</span></span><br><span class="line">    pwd = parseJS(pwd)</span><br><span class="line">    print(get_content(username, pwd))</span><br></pre></td></tr></table></figure></p><h3 id="5-结果分析"><a href="#5-结果分析" class="headerlink" title="5.结果分析"></a>5.结果分析</h3><p>得到返回结果：这里返回了一个json格式数据，并且我们可以得知，这里其实是重定向到了这个新的URL地址</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"base_resp"</span>:&#123;</span><br><span class="line">      <span class="attr">"err_msg"</span>:<span class="string">"ok"</span>,</span><br><span class="line">      <span class="attr">"ret"</span>:<span class="number">0</span>&#125;,</span><br><span class="line">  <span class="attr">"redirect_url"</span>:<span class="string">"/cgi-bin/bizlogin?action=validate&amp;lang=zh_CN&amp;account=980710425%40qq.com"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <a href="https://mp.weixin.qq.com/cgi-bin/bizlogin?action=validate&amp;lang=zh_CN&amp;account=980710425%40qq.com" target="_blank" rel="noopener">https://mp.weixin.qq.com/cgi-bin/bizlogin?action=validate&amp;lang=zh_CN&amp;account=980710425%40qq.com</a><br><font color=#00ced1>这个链接其实是需要微信扫码登陆认证的链接，我也不知道怎么去绕过这个扫码认证，如果有大神巨佬知道，请带带我。我的笨办法是通过selenium自动化测试，还是不可避免要扫码，然后扫码登陆，获取目标数据</font></p><h3 id="未完待续。。。"><a href="#未完待续。。。" class="headerlink" title="未完待续。。。"></a>未完待续。。。</h3>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript篇章五：常见函数和属性</title>
      <link href="/2019/12/18/Javascript%E7%AF%87%E7%AB%A0%E4%BA%94/"/>
      <url>/2019/12/18/Javascript%E7%AF%87%E7%AB%A0%E4%BA%94/</url>
      
        <content type="html"><![CDATA[<blockquote><p>1.isFinite()函数<br>2.jQuery中的$.inArray()<br>3.Math(算术对象)<br>4.数据类型判断<br>5.arguments参数属性<br>6.map，reduce与filter函数</p></blockquote><a id="more"></a><h3 id="1-isFinite-函数"><a href="#1-isFinite-函数" class="headerlink" title="1.isFinite()函数"></a>1.isFinite()函数</h3><p>isFinite() 函数用于检查其参数是否是无穷大。（如果 number 是 NaN（非数字），或者是正、负无穷大的数，则返回 false。）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="built_in">isFinite</span>(<span class="number">123</span>)+ <span class="string">"&lt;br&gt;"</span>);   <span class="comment">//true</span></span><br><span class="line"><span class="built_in">document</span>.write(<span class="built_in">isFinite</span>(<span class="number">-1.23</span>)+ <span class="string">"&lt;br&gt;"</span>);    <span class="comment">// true</span></span><br><span class="line"><span class="built_in">document</span>.write(<span class="built_in">isFinite</span>(<span class="number">5</span><span class="number">-2</span>)+ <span class="string">"&lt;br&gt;"</span>);      <span class="comment">// true</span></span><br><span class="line"><span class="built_in">document</span>.write(<span class="built_in">isFinite</span>(<span class="number">0</span>)+ <span class="string">"&lt;br&gt;"</span>);        <span class="comment">// true</span></span><br><span class="line"><span class="built_in">document</span>.write(<span class="built_in">isFinite</span>(<span class="string">"Hello"</span>)+ <span class="string">"&lt;br&gt;"</span>);  <span class="comment">// false</span></span><br><span class="line"><span class="built_in">document</span>.write(<span class="built_in">isFinite</span>(<span class="string">"2005/12/12"</span>)+ <span class="string">"&lt;br&gt;"</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="2-jQuery中的-inArray（）"><a href="#2-jQuery中的-inArray（）" class="headerlink" title="2.jQuery中的$.inArray（）"></a>2.jQuery中的$.inArray（）</h3><p>$.inArray( value, array)判断参数值是否存在数组中，并返回索引值（默认从0开始）如果不存在就返回-1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">var</span> arr = [ <span class="number">4</span>, <span class="string">"Pete"</span>, <span class="number">8</span>, <span class="string">"John"</span> ];</span><br><span class="line">    <span class="keyword">var</span> $spans = $( <span class="string">"span"</span> );</span><br><span class="line">    $spans.eq( <span class="number">0</span> ).text( jQuery.inArray( <span class="string">"John"</span>, arr ) );</span><br><span class="line">    $spans.eq( <span class="number">1</span> ).text( jQuery.inArray( <span class="number">4</span>, arr ) );</span><br><span class="line">    $spans.eq( <span class="number">2</span> ).text( jQuery.inArray( <span class="string">"Karl"</span>, arr ) );</span><br><span class="line">    $spans.eq( <span class="number">3</span> ).text( jQuery.inArray( <span class="string">"Pete"</span>, arr, <span class="number">2</span> ) );</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-Math-算术对象"><a href="#3-Math-算术对象" class="headerlink" title="3.Math(算术对象)"></a>3.Math(算术对象)</h3><p>Math对象，提供科学数学计算，也同样具有属性与方法，案例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> mypi = <span class="built_in">Math</span>.PI;</span><br><span class="line">    <span class="keyword">let</span> myabs = <span class="built_in">Math</span>.abs(<span class="number">-15.88963</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(mypi);</span><br><span class="line">    <span class="built_in">console</span>.log(myabs);    </span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"kajima"</span>).innerHTML=mypi;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"bady"</span>).innerHTML=myabs;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Math对象属性</p></blockquote><p><fancybox><img src="http://img.mukewang.com/532fe7cf0001e7b505170269.jpg" alt=""></fancybox></p><blockquote><p>Math 对象方法</p></blockquote><p><fancybox><img src="http://img.mukewang.com/532fe841000174db05160622.jpg" alt=""></fancybox></p><h3 id="4-数据类型判断"><a href="#4-数据类型判断" class="headerlink" title="4.数据类型判断"></a>4.数据类型判断</h3><p>PS:typeof无法判断数组，null和对象，因为他会把这些都判断为Object，其余都可以正常判断。<br>最完美的检测数组类型的方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArrayFn</span> (<span class="params">o</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o) === <span class="string">'[object Array]'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>];</span><br><span class="line">alert(isArrayFn(arr));<span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>其实这个函数可以改进一下，使得同样能够判断其它数据类型：数组，null，function，String，object等等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArrayFn</span> (<span class="params">o</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>实例</th><th align="center">测试结果</th></tr></thead><tbody><tr><td>[1,2,3,1]</td><td align="center">[object Array]</td></tr><tr><td>{a:”chenhaodong”,age:18}</td><td align="center">[object Object]</td></tr><tr><td>function a(){return null}</td><td align="center">[object Function]</td></tr><tr><td>“hello world”</td><td align="center">[object String]</td></tr><tr><td>null</td><td align="center">[object Null]</td></tr></tbody></table><h3 id="5-arguments参数属性"><a href="#5-arguments参数属性" class="headerlink" title="5.arguments参数属性"></a>5.arguments参数属性</h3><p>arguments.length 属性返回函数调用过程接收到的参数个数<br>arguments[0]:获取传入的第一个参数值<br>arguments[1]:获取传入的第二个参数值</p><h3 id="6-map，reduce与filter方法"><a href="#6-map，reduce与filter方法" class="headerlink" title="6.map，reduce与filter方法"></a>6.map，reduce与filter方法</h3><p><strong>map()，reduce()与filter()方法的参数均为匿名函数（也可以为箭头函数），即不存在函数名的函数</strong></p><p>PS：JavaScript这里的map与reduce方法与之前提到的<a href="https://ahrilove.top/2019/11/11/python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/">Python的map与reduce方法</a> 实现效果相同。</p><ul><li>map() 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;   <span class="comment">//严格模式</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> newArr = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;　　<span class="comment">// 使用map方法将每一个元素变为两倍</span></span><br><span class="line">    <span class="keyword">return</span> item * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(newArr);    <span class="comment">// [2, 4, 6, 8]</span></span><br></pre></td></tr></table></figure><ul><li>filter()函数用于筛选出符合要求的数据,并返回该数据集合.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> newArr = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;　　<span class="comment">// 使用filter方法：判断每一个元素，如果是奇数，则直接返回该值</span></span><br><span class="line">    <span class="keyword">if</span> (item % <span class="number">2</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> item;&#125;</span><br><span class="line"> &#125;);</span><br><span class="line"> <span class="built_in">console</span>.log(newArr);    <span class="comment">// [1, 3];</span></span><br></pre></td></tr></table></figure><ul><li>reduce()函数用于把数组或对象归结为一个值,并返回这个值,使用方法为arr.reduce(func,memo),其中func为处理函数,memo为初始值,初始值可缺省.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> newArr=arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125;,<span class="number">0</span>); </span><br><span class="line"><span class="built_in">console</span>.log(newArr)  ;  <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>《我真的只想 Vue(二)：生命周期函数》</title>
      <link href="/2019/12/17/Vue(%E4%BA%8C)/"/>
      <url>/2019/12/17/Vue(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<blockquote><p><font size=4 color=#FF0000>本文要点：</font><br>1.生命周期函数<br>2.Watch方法<br>3.计算属性computed</p></blockquote><a id="more"></a><h3 id="1-生命周期函数（与el，data，methods，computed等等同级）"><a href="#1-生命周期函数（与el，data，methods，computed等等同级）" class="headerlink" title="1.生命周期函数（与el，data，methods，computed等等同级）"></a>1.生命周期函数（与el，data，methods，computed等等同级）</h3><blockquote><p>创建阶段</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.beforeCreate():表示实例完全被创建时，会执行它</span><br><span class="line">    /ps：在beforCreate生命周期函数执行时，data和methods中的数据均未被初始化</span><br><span class="line"></span><br><span class="line">2.created():在created中，data与methods都已经被实例化了，</span><br><span class="line"></span><br><span class="line">3.beforeMount(): 表示模板已经在内存中编译好了，只是未渲染到真正要展示的页面上</span><br><span class="line"></span><br><span class="line">4.mounted():是实例创建期间最后一个生命周期函数，当执行完mounted就表示，实例已经完全创建好了，</span><br><span class="line">            此时，如果没有其它操作的话，这个实例就静静地躺在内存中</span><br></pre></td></tr></table></figure><blockquote><p>组件运行阶段：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.beforeUpdate(): 表示我们的界面还没有更新，但数据肯定被更新了 </span><br><span class="line">        结论：运行beforeUpdate，页面上显示的数据还没有被更新，但数据已经更新了，页面与数据更新不同步</span><br><span class="line"></span><br><span class="line">2.updated():页面都data数据已经保持同步了，都是最新的</span><br></pre></td></tr></table></figure><blockquote><p>销毁过程</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.beforeDestroy：Vue示例已经从运行阶段，进入到销毁阶段，实例身上的所有data，methods以及过滤器，指令都处于可用状态，未执行真正的销毁动作</span><br><span class="line"></span><br><span class="line">2.destroyed：组件已经完全销毁了，一切data，方法，指令，过滤器均不可使用</span><br></pre></td></tr></table></figure><h3 id="2-Watch属性"><a href="#2-Watch属性" class="headerlink" title="2.Watch属性"></a>2.Watch属性</h3><p>Watch，可以监听data属性域中的数据变化，主要有handler方法，immediate属性，deep属性<br>handler方法就是你watch中需要具体执行的方法；<br>immediate为true时则立即触发回调函数；如果为false，则和上面的例子一样，不会立即执行回调<br>deep顾名思义就是深入监听，也就是在对象中层层遍历，并在监听对象上的每一个属性上都添加监听，固然也会损耗性能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">    orgBarChartData: &#123;      <span class="comment">//  监听的目标属性</span></span><br><span class="line">        handler(newVal,oldVal)&#123;</span><br><span class="line">            <span class="keyword">this</span>.renderOrgBarChart();       <span class="comment">//重设图表，这两个都是动作体</span></span><br><span class="line">            <span class="keyword">this</span>.orgBarChart.resize();     <span class="comment">//重新设置图表高宽</span></span><br><span class="line">        &#125;,</span><br><span class="line">        deep: <span class="literal">true</span>  <span class="comment">// deep:true </span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-methods与computed的区别："><a href="#3-methods与computed的区别：" class="headerlink" title="3.methods与computed的区别："></a>3.methods与computed的区别：</h3><blockquote><p>computed 和 methods虽然都可以实现对数据的计算,但两者有一定的区别:</p></blockquote><p> methods:使用methods方法可以接受外部传参,使用更加灵活；computed:计算属性，computed的亮点在于:它能够依赖缓存，当计算属性所依赖的数据发生改变时，才会重新触发计算属性方法执行。所以对于较复杂或消耗效率的计算,一定要采用计算属性。<br>计算属性computed里面也可以写函数，并且调用函数时使用的mustache语法不用加括号，案例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;!--这里的mustache语法调用函数时没有声明括号---&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;fullName&#125;&#125;&lt;<span class="regexp">/p&gt;  </span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;script &gt;</span><br><span class="line">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">'#app'</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            firstName:<span class="string">"浩东"</span>,</span><br><span class="line">            lastName:<span class="string">"陈"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        computed:&#123;</span><br><span class="line">            fullname () &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">this</span>.lastName+<span class="keyword">this</span>.firstName;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>使用methods的方法,每次页面刷新都会触发方法的执行，使用计算属性,只要依赖的数据没有变化,就会直接从缓存中读取结果,不需要重新计算,这种做法可以提升效率更可以带来更好的用户体验</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThinkPHP项目（三）：常见函数和属性</title>
      <link href="/2019/12/16/ThinkPHP(%E4%B8%89)/"/>
      <url>/2019/12/16/ThinkPHP(%E4%B8%89)/</url>
      
        <content type="html"><![CDATA[<p>还是紧接前面的知识展开，本章节列举出遇到的一些项目相关函数与属性</p><blockquote><p>1.条件判断以及prompt() 方法<br>2.循环<br>3.Map与Reduce<br>4.全局作用域与浏览器对象<br>5.高阶函数与操作表单</p></blockquote><a id="more"></a><h3 id="1-is-array-search-value-array-type"><a href="#1-is-array-search-value-array-type" class="headerlink" title="1. is_array(search_value,array,type)"></a>1. is_array(search_value,array,type)</h3><p>in_array() 函数搜索数组中是否存在指定的值。type是可选的，如果设置该参数为true，则又要检查搜索的数据与数组的值的类型是否相同</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">    $people = <span class="keyword">array</span>(<span class="string">"Bill"</span>, <span class="string">"Steve"</span>, <span class="string">"Mark"</span>, <span class="string">"David"</span>);</span></span><br><span class="line"><span class="php">    </span></span><br><span class="line"><span class="php">    <span class="keyword">if</span> (in_array(<span class="string">"Mark"</span>, $people))&#123;</span></span><br><span class="line"><span class="php">      <span class="keyword">echo</span> <span class="string">"匹配已找到"</span>;&#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="php">      <span class="keyword">echo</span> <span class="string">"匹配未找到"</span>;&#125;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ThinkPHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> thinkPHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析章节（一）：初始数学之美</title>
      <link href="/2019/12/15/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%AB%A0%E8%8A%82%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2019/12/15/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%AB%A0%E8%8A%82%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数学是一门美丽的学科，是美丽的，也充满悲剧的！</p><blockquote><p><font size=4 color=#FF0000>本文要点：</font><br>直角坐标系与极坐标方程<br>科学运算基本三大库Matplotlib，Numpy，Pandas<br>一个浪漫又悲情的爱情故事——笛卡尔心形线<br>执子之魂，与子共生——玫瑰线<br>给我一个支点——阿基米德螺线</p></blockquote><a id="more"></a><h2 id="1-直角坐标与极坐标方程"><a href="#1-直角坐标与极坐标方程" class="headerlink" title="1.直角坐标与极坐标方程"></a>1.直角坐标与极坐标方程</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比较直角坐标系方程y=x，它表示平面上的一条线，而极坐标方程ρ=θ表示螺线。用极坐标系描述的曲线方程称作极坐标方程，通常用来表示ρ为自变量θ的函数(ρ,θ)=0。</p><blockquote><p>两坐标系之间的转换</p></blockquote><p>极坐标系中的两个坐标r和θ可以由下面的公式转换为直角坐标系下的坐标值。<br>x = rcos（θ），<br>y = rsin（θ），<br>由上述二公式，可得到从直角坐标系中x和y两坐标如何计算出极坐标下的坐标：<br><fancybox><img src="https://gss0.bdstatic.com/94o3dSag_xI4khGkpoWK1HF6hhy/baike/pic/item/a2cc7cd98d1001e9b122d01bba0e7bec54e7978c.jpg" alt=""></fancybox>角度θ = arctan(y/x)<br>总结如下：</p><p><fancybox><img src="https://gss0.baidu.com/9fo3dSag_xI4khGko9WTAnF6hhy/zhidao/wh%3D600%2C800/sign=70d3a907c095d143da23ec2543c0ae3a/9d82d158ccbf6c81b27e69ecb43eb13533fa406c.jpg" alt=""></fancybox></p><h2 id="2-科学运算三大基本库"><a href="#2-科学运算三大基本库" class="headerlink" title="2.科学运算三大基本库"></a>2.科学运算三大基本库</h2><p><a href="https://github.com/FioraLove/Deep-learning-Best-AI/tree/Dev" target="_blank" rel="noopener">基本知识点参考我的GitHub</a><br>补充一点：PYTHON使用MATPLOTLIB绘图时出现的中文乱码问题,设置代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'SimHei'</span>]  <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="literal">False</span>  <span class="comment"># 用来正常显示负号</span></span><br></pre></td></tr></table></figure><h2 id="3-一个浪漫又悲情的爱情故事——笛卡尔心形线"><a href="#3-一个浪漫又悲情的爱情故事——笛卡尔心形线" class="headerlink" title="3.一个浪漫又悲情的爱情故事——笛卡尔心形线"></a>3.一个浪漫又悲情的爱情故事——笛卡尔心形线</h2><p><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/D:/data/imagesaa.gif" alt=""></fancybox><br><a href="https://blog.csdn.net/qq_35379989/article/details/89707176" target="_blank" rel="noopener">【转载】</a><br>1650年，斯德哥尔摩的街头，52岁的笛卡尔邂逅了18岁的瑞典公主克里斯汀。<br><fancybox><img src="https://img-blog.csdnimg.cn/2019043012470316.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1Mzc5OTg5,size_16,color_FFFFFF,t_70" alt=""></fancybox></p><p>那时，落魄、一文不名的笛卡尔过着乞讨的生活，全部的财产只有身上穿的破破烂烂的衣服和随身所带的几本数学书籍。生性清高的笛卡尔从来不开口请求路人施舍，他只是默默地低头在纸上写写画画，潜心于他的数学世界。</p><p>一个宁静的午后，笛卡尔照例坐在街头，沐浴在阳光中研究数学问题。他如此沉溺于数学世界，身边过往的人群，喧闹的车马队伍。都无法对他造成干扰。 </p><p>突然，有人来到他旁边，拍了拍他的肩膀，“你在干什么呢？”扭过头，笛卡尔看到一张年轻秀丽的睑庞，一双清澈的眼睛如湛蓝的湖水，楚楚动人，长长的睫毛一眨一眨的，期待着他的回应。她就是瑞典的小公主，国王最宠爱的女儿克里斯汀。</p><p>她蹲下身，拿过笛卡尔的数学书和草稿纸，和他交谈起来。言谈中，他发现，这个小女孩思维敏捷，对数学有着浓厚的兴趣。</p><p>和女孩道别后，笛卡尔渐渐忘却了这件事，依旧每天坐在街头写写画画。</p><p>几天后，他意外地接到通知，国王聘请他做小公主的数学老师。满心疑惑的笛卡尔跟随前来通知的侍卫一起来到皇宫，在会客厅等候的时候，他听到了从远处传来的银铃般的笑声。转过身，他看到了前儿天在街头偶遇的女孩子。慌忙中，他赶紧低头行礼。</p><p>从此，他当上了公主的数学老师。</p><p>公主的数学在笛卡尔的悉心指导下突飞猛进，他们之间也开始变得亲密起来。笛卡尔向她介绍了他研究的新领域——直角坐标系。通过它，代数与几何可以结合起来，也就是日后笛卡尔创立的解析几何学的雏形。</p><p>在笛卡尔的带领下，克里斯汀走进了奇妙的坐标世界，她对曲线着了迷。每天的形影不离也使他们彼此产生了爱慕之心。</p><p>在瑞典这个浪漫的国度里，一段纯粹、美好的爱情悄然萌发。</p><p>然而，没过多久，他们的恋情传到了国王的耳朵里。国王大怒，下令马上将笛卡尔处死。在克里斯汀的苦苦哀求下，国王将他放逐回国，公主被软禁在宫中。</p><p>当时，欧洲大陆正在流行黑死病。身体孱弱的笛卡尔回到法国后不久，便染上重病。在生命进入倒计时的那段日子，他日夜思念的还是街头偶遇的那张温暖的笑脸。他每天坚持给她写信，盼望着她的回音。然而，这些信都被国王拦截下来，公主一直没有收到他的任何消息。</p><p>在笛卡尔给克里斯汀寄出第十三封信后，他永远地离开了这个世界。此时，被软禁在宫中的小公主依然徘徊在皇宫的走廊里，思念着远方的情人。</p><p>这最后一封信上没有写一句话，只有一个方程：<font color=#009ad6>r=a(1-sinθ)</font>。</p><p>国王看不懂，以为这个方程里隐藏着两个人不可告人的秘密，便把全城的数学家召集到皇宫，但是没有人能解开这个函数式。他不忍看着心爱的女儿每天闷闷不乐，便把这封信给了她。</p><p>拿到信的克里斯汀欣喜若狂，她立即明白了恋人的意图，找来纸和笔，着手把方程图形画了出来，一颗心形图案出现在眼前，克里斯汀不禁流下感动的泪水，这条曲线就是著名的“心形线”。</p><p>国王去世后，克里斯汀继承王位，登基后，她便立刻派人去法国寻找心上人的下落，收到的却是笛卡尔去世的消息，留下了一个永远的遗憾……</p><p>这封享誉世界的另类情书，至今，还保存在欧洲笛卡尔的纪念馆里。<br>————————————————</p><h2 id="4-三大曲线图像展示"><a href="#4-三大曲线图像展示" class="headerlink" title="4.三大曲线图像展示"></a>4.三大曲线图像展示</h2><blockquote><p>极坐标方程：</p></blockquote><p>心形线：r=a(1-cosθ) (a&gt;0)<br>玫瑰线：r=asin(3θ) (a&gt;0)<br>阿基米德螺线：r=aθ(a&gt;0,θ&gt;=0)</p><blockquote><p>成品展示</p></blockquote><p><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/D:/data/imagesmath.png" alt=""></fancybox></p><blockquote><p>源代码：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'SimHei'</span>]  <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="literal">False</span>  <span class="comment"># 用来正常显示负号</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw</span><span class="params">()</span>:</span></span><br><span class="line">    plt.title(<span class="string">"数学其实很美"</span>)</span><br><span class="line">    pi = np.pi</span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    <span class="comment"># 生成0到2pi的数据集</span></span><br><span class="line">    datas = np.linspace(<span class="number">0</span>, <span class="number">2</span> * pi, <span class="number">100</span>)</span><br><span class="line">    <span class="comment"># 绘制极坐标r = a(1-cosθ)(a&gt;0)的心形图</span></span><br><span class="line">    x = a * (<span class="number">1</span> - np.cos(datas)) * (np.cos(datas))</span><br><span class="line">    y = a * (<span class="number">1</span> - np.cos(datas)) * (np.sin(datas))</span><br><span class="line">    plt.plot(x, y, label=<span class="string">'心形线'</span>, color=<span class="string">'red'</span>, linewidth=<span class="string">'1.0'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 绘制极坐标r = a(1-cosθ)(a&gt;0)的心形图</span></span><br><span class="line">    x1 = a * (np.sin(<span class="number">3</span> * datas)) * (np.cos(datas))</span><br><span class="line">    y1 = a * (np.sin(<span class="number">3</span> * datas)) * (np.sin(datas))</span><br><span class="line">    plt.plot(x1, y1, label=<span class="string">'玫瑰线'</span>, color=<span class="string">'blue'</span>, linewidth=<span class="string">'2.0'</span>, linestyle=<span class="string">"--"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 绘制极坐标r = a(1-cosθ)(a&gt;0)的阿基米德螺线图</span></span><br><span class="line">    x2 = a * datas * (np.cos(datas))</span><br><span class="line">    y2 = a * datas * (np.sin(datas))</span><br><span class="line">    plt.plot(x2, y2, label=<span class="string">'阿基米德螺线'</span>, color=<span class="string">'black'</span>, linewidth=<span class="string">'1.0'</span>, linestyle=<span class="string">"-."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># # 使用plt.xlim设置x坐标轴范围：</span></span><br><span class="line">    <span class="comment"># plt.ylim((-10, 10))</span></span><br><span class="line">    <span class="comment"># # 使用plt.ylim设置x坐标轴范围：</span></span><br><span class="line">    <span class="comment"># plt.ylim((-10, 10))</span></span><br><span class="line">    <span class="comment"># 定义x轴名称</span></span><br><span class="line">    plt.xlabel(<span class="string">'x轴'</span>)</span><br><span class="line">    <span class="comment"># 定义y轴名称</span></span><br><span class="line">    plt.ylabel(<span class="string">'y轴'</span>)</span><br><span class="line">    new_ticks = np.arange(<span class="number">-5</span>, <span class="number">10</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 使用plt.xticks设置x轴刻度：范围是(-2,2);个数是8.</span></span><br><span class="line">    plt.xticks(new_ticks)</span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    plt.gca获取当前坐标轴信息. 使用.spines设置边框；使用.set_color设置边框颜色</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 坐标轴中移</span></span><br><span class="line">    ax = plt.gca()</span><br><span class="line">    <span class="comment"># 隐藏上边和右边</span></span><br><span class="line">    ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">    ax.spines[<span class="string">'right'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">    <span class="comment"># 移动另外两个轴</span></span><br><span class="line">    ax.xaxis.set_ticks_position(<span class="string">'bottom'</span>)</span><br><span class="line">    ax.spines[<span class="string">'bottom'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br><span class="line">    ax.yaxis.set_ticks_position(<span class="string">'left'</span>)</span><br><span class="line">    ax.spines[<span class="string">'left'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.savefig(<span class="string">"math.png"</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    draw()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Data analysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装使用redis</title>
      <link href="/2019/12/12/docker%E7%9A%84redis/"/>
      <url>/2019/12/12/docker%E7%9A%84redis/</url>
      
        <content type="html"><![CDATA[<p><font color=#00CD00>docker系列章节更新（三），这一章节主要学习docker安装redis以及非关系型数据库redis学习</font></p><ul><li>docker安装redis</li><li>redis学习笔记</li></ul><a id="more"></a><h3 id="1-docker安装redis"><a href="#1-docker安装redis" class="headerlink" title="1.docker安装redis"></a>1.docker安装redis</h3><blockquote><p>拉取镜像</p></blockquote><p>docker search redis<br>docker pull redis:[version]</p><blockquote><p>创建容器</p></blockquote><p>docker run -di -p 6379:6379  -p指定端口,-d以守护式形式<br>-v /zzyyuse/myredis/data:/data<br>-v /zzyyuse/myredis/conf/redis.conf:/usr/local/etc/redis/redis.conf<br>redis-server /usr/local/etc/redis/redis.conf<br>redis:3.2 指定redis版本<br>--appendonly yes</p><blockquote><p>新建redis.conf文件</p></blockquote><p>在宿主机/zzyyuse/myredis/conf/redis.conf目录下新建redis.conf文件（<a href="https://cdn.jsdelivr.net/gh/FioraLove/CDN@v1.2.8.3/redis.conf" target="_blank" rel="noopener">文件内容</a>）</p><blockquote><p>进入容器并以命令行交互</p></blockquote><p>docker exec -it container_id redis-cli(区分其它容器的/bin/bash或者/bin/sh)</p><blockquote><p>退出命令</p></blockquote><p>SHUTDOWN</p><h3 id="2-redis的基础知识"><a href="#2-redis的基础知识" class="headerlink" title="2.redis的基础知识"></a>2.redis的基础知识</h3><p>【转载】<a href="http://andus.top/page/5/" target="_blank" rel="noopener">羊松林博客的redis讲解就很详细了，不重复造轮子，先抄他一手再说</a></p><h3 id="3-Windows下的redis"><a href="#3-Windows下的redis" class="headerlink" title="3.Windows下的redis"></a>3.Windows下的redis</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;之前我们已经了解到了通过docker命令安装运行redis内部，但是在Windows和Linux下，我们也可以通过安装exe或者tar.gz包来运行</p><p>Windows下的配置：</p><ul><li>安装完毕后，进入redis安装目录找到配置文件，注意是<strong>redis.windows-service.conf</strong>,不是redis.windows.conf,后者是以非系统服务方式启动程序使用的配置文件</li><li>在配置文件中,找到<strong>requirepass foobared</strong>字样，在其后面追加一行，输入requirepass 123456。这是访问Redis时所需的密码，一般测试情况下可以不用设定密码。不过，即使是作为本地访问，也建议设定一个密码。此处以简单的123456来演示，然后保存退出</li><li>由于前面修改过配置文件，需要重启服务</li></ul><p>Windows下的简单使用：</p><ul><li>用命令进入redis安装路径，输入redis-cli并回车（redis-cli是客户端程序）</li><li>输入 <strong>auth 设置的密码</strong>：返回提示OK表示验证通过</li></ul><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://blog.csdn.net/weixin_41381863/article/details/88231397" target="_blank" rel="noopener">windows下Redis的安装和配置–图文教程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ALL MY LIFE</title>
      <link href="/2019/12/11/2020/"/>
      <url>/2019/12/11/2020/</url>
      
        <content type="html"><![CDATA[<p><font size=5>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;做她的战士，跟她一起经历&nbsp;&nbsp;&nbsp;失败！！</font><br><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/D:/data/imagesmaster.png" alt=""></fancybox></p><a id="more"></a><h3 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h3><p>&nbsp;&nbsp;&nbsp;兄弟萌，您们好，我叫陈浩东，浩东陈的陈，你也可以叫我<font color=#BF3EFF>陈某</font>。97年的四川绵阳人，于2019年6月5日毕业于中国计量大学信息与计算科学专业。虽然口头上一直在说~不会再爱了( ﹁ ﹁ ) ~→，但是我还是忘不了那个badwoman,<br>试问，如果不是真心喜欢，谁愿意当舔狗呢？☹ ☹ ☹<br><fancybox> <img src="https://cdn.jsdelivr.net/gh/FioraLove/CDN@1.2.1/badwoman.jpg" height="328px"></fancybox><br>她不是漂不漂亮的问题，她真的就是那种，很少见，很冷艳的漂亮…<br>&nbsp;&nbsp;&nbsp;你们有可能会说：<font color=#00CD00>你那叫喜欢吗？你那是馋她的身子，你下贱</font><br><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/CDN@1.2.1/a168c4cd7b899e511e931f114da7d933c8950d23.gif" alt=""></fancybox></p><p>&nbsp;&nbsp;&nbsp;作为一个正能量，儒雅随和的知识分子，兴趣爱好当然必不可少。喜欢羽毛球、乒乓球、登山、游泳（仅能浮起来☹ ☹）、钓鱼以及英雄联盟，当然作为一个<font color=#FF0000>资深的土味鉴定师,文艺复兴模仿者</font>,能够快速洞察每一个土味视频背后的正能量思想，有内味了。<br><img src="https://api.jikipedia.com/upload/c1bcbdc1a19f0d6bc225d03e88139c62_75.jpg" height="300px"></p><h3 id="2020年职业技术规划："><a href="#2020年职业技术规划：" class="headerlink" title="2020年职业技术规划："></a>2020年职业技术规划：</h3><ul><li>XXXXXXXXX(终极目标，可以决定是否可以改变未来轨迹的)</li><li>Python进阶，web框架以及爬虫框架~js逆向解密爬虫</li><li>Python爬取抓包app数据</li><li>Vue基础知识与微信小程序MVVM（两者大同小异）</li><li>java</li><li>ThinkPHP以及PHP学习</li><li>HTML+CSS+JavaScript</li><li>Jquery进阶以及bootstrap</li><li>Docker容器虚拟技术</li><li>Linux的Ubuntu要经常多用</li><li>数据库进阶以及存储过程</li><li>数据分析与深度学习</li><li>完成一个简单的健康指数的微信小程序</li><li>完成一个GitHub开源项目，暂时有一点想法</li></ul><h3 id="每日作息安排："><a href="#每日作息安排：" class="headerlink" title="每日作息安排："></a>每日作息安排：</h3><p>1.早上7:25-7:50起床<br>2.中午早点休息，下午一点上班<br>3.五点下班：会寝室吃饭并休息到6:00-6:30,继续学习<br>4.晚上10:40到11:00开始收拾收拾准备下班<br>5.回到寝室，做10-15分钟的Keep，锻炼胸肌腹肌<br>6.周六周日特殊安排：早上9-10点起床，其余正常安排</p><p><font color=#BF3EFF> 7.周而复始，学会坚持，每天多学一点，未来会好很多，兄弟萌，不甘碌碌无为，那就，冲，杀！！ </font></p><h3 id="推荐学习方法："><a href="#推荐学习方法：" class="headerlink" title="推荐学习方法："></a>推荐学习方法：</h3><blockquote><p>渗透科学学习法</p></blockquote><p>晚上睡觉前，把文献放在脑袋和枕头之间，知识会从浓度较高的的书本向浓度较低的脑袋渗透。书本越多，外界知识浓度越高，夜间复习的效果越好！</p><h3 id="奋斗目标"><a href="#奋斗目标" class="headerlink" title="奋斗目标"></a>奋斗目标</h3><blockquote><p>1.翻新/二手iPhone</p></blockquote><p> 16年买的iPhone6s 32G，现在内存不到5个G。可以买但没必要☹ ☹ ☹，还不卡，让手机再奋斗个两三年吧，先存钱买房吧</p><blockquote><p>2.翻新/二手Macbook Pro</p></blockquote><p>16年5月买的联想小新700，有点重，不方便携带，但换个内存条也超神。可以买，但没必要☹ ☹ ☹，让电脑再奋斗个三四年吧，存钱买房<br><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/D:/data/images744c5f8010b532b5635f1bbf1ce75c3b.jpg" alt=""></fancybox></p><blockquote><p>3.Audi</p></blockquote><p>直接想就完事了，买不起，也没必要☹ ☹ ☹<br><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/D:/data/images20191218151134.png" alt=""></fancybox></p><blockquote><p>4.买房</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font size=6>红颜一春树,流年一掷梭，一瞬为白骨</font></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python全栈系列章节更新（七）：爬虫解析库</title>
      <link href="/2019/12/10/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E4%B8%83%EF%BC%89/"/>
      <url>/2019/12/10/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E4%B8%83%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;列举几个常用的python爬虫解析库</p><blockquote><p>正则表达式<br>Xpath<br>BeautifulSoup<br>pyquery<br>Scrapy的selector的用法<br>Selenium自动测试库学习</p></blockquote><a id="more"></a><h2 id="1-正则表达式"><a href="#1-正则表达式" class="headerlink" title="1.正则表达式"></a>1.<a href="https://meethigher.top/blog/2019/11/29/regular-expression/" target="_blank" rel="noopener">正则表达式</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&apos;.&apos;     默认匹配除\n之外的任意一个字符，若指定flag DOTALL,则匹配任意字符，包括换行</span><br><span class="line">&apos;^&apos;     匹配字符串的开头，若指定flags MULTILINE,这种也可以匹配上(r&quot;^a&quot;,&quot;\nabc\neee&quot;,flags=re.MULTILINE)</span><br><span class="line">&apos;$&apos;     匹配字符结尾， 若指定flags MULTILINE ,re.search(&apos;foo.$&apos;,&apos;foo1\nfoo2\n&apos;,re.MULTILINE).group() 会匹配到foo1</span><br><span class="line">&apos;*&apos;     匹配*号前的字符0次或多次， re.search(&apos;a*&apos;,&apos;aaaabac&apos;)  结果&apos;aaaa&apos;</span><br><span class="line">&apos;+&apos;     匹配前一个字符1次或多次，re.findall(&quot;ab+&quot;,&quot;ab+cd+abb+bba&quot;) 结果[&apos;ab&apos;, &apos;abb&apos;]</span><br><span class="line">&apos;?&apos;     匹配前一个字符1次或0次 ,re.search(&apos;b?&apos;,&apos;alex&apos;).group() 匹配b 0次</span><br><span class="line">&apos;&#123;m&#125;&apos;   匹配前一个字符m次 ,re.search(&apos;b&#123;3&#125;&apos;,&apos;alexbbbs&apos;).group()  匹配到&apos;bbb&apos;</span><br><span class="line">&apos;&#123;n,m&#125;&apos; 匹配前一个字符n到m次，re.findall(&quot;ab&#123;1,3&#125;&quot;,&quot;abb abc abbcbbb&quot;) 结果&apos;abb&apos;, &apos;ab&apos;, &apos;abb&apos;]</span><br><span class="line">&apos;|&apos;     匹配|左或|右的字符，re.search(&quot;abc|ABC&quot;,&quot;ABCBabcCD&quot;).group() 结果&apos;ABC&apos;</span><br><span class="line">&apos;(...)&apos; 分组匹配， re.search(&quot;(abc)&#123;2&#125;a(123|45)&quot;, &quot;abcabca456c&quot;).group() 结果为&apos;abcabca45&apos;</span><br><span class="line">&apos;[...]&apos; 用来表示一组字符，单独列出，比如匹配[amk]匹配a,m或k</span><br><span class="line">&apos;[^...]&apos;  用来匹配不在[]里面的字符：如[^abc]匹配除了a，b，c之外的字符</span><br><span class="line"> </span><br><span class="line">&apos;\A&apos;    只从字符开头匹配，re.search(&quot;\Aabc&quot;,&quot;alexabc&quot;) 是匹配不到的，相当于re.match(&apos;abc&apos;,&quot;alexabc&quot;) 或^</span><br><span class="line">&apos;\Z&apos;    匹配字符结尾，同$</span><br><span class="line">&apos;\d&apos;    匹配数字0-9</span><br><span class="line">&apos;\D&apos;    匹配非数字</span><br><span class="line">&apos;\w&apos;    匹配[A-Za-z0-9],还包括下划线‘_’</span><br><span class="line">&apos;\W&apos;    匹配非[A-Za-z0-9]</span><br><span class="line">&apos;\s&apos;     匹配空白字符、\t、\n、\r , re.search(&quot;\s+&quot;,&quot;ab\tc1\n3&quot;).group() 结果 &apos;\t&apos;</span><br><span class="line">&apos;(.*?)&apos; 贪婪匹配，用来获取目标字符</span><br><span class="line">&apos;.*?&apos;   非贪婪匹配，用来替换任意非目标字符</span><br></pre></td></tr></table></figure><p>常用方法：</p><blockquote><p>re.match()</p></blockquote><p>re.match()方法会从字符串的起始位置开始匹配正则表达式，如果匹配，就返回匹配成功的结果，一旦开头不匹配，直接返回None，整个匹配失败</p><blockquote><p>re.search()</p></blockquote><p>re.search()：扫描整个字符串，然后返回第一个成功匹配的结果</p><blockquote><p>re.findall()</p></blockquote><p>re.findall()：把所有匹配到的字符放到以列表中的元素返回，返回的列表中的每一个元素都是元组类型</p><blockquote><p>re.sub()</p></blockquote><p>re.sub(‘a’,’b’,content) ,即在content中，用b替换a的内容</p><blockquote><p>re.compile()</p></blockquote><p>re.compile(正则表达式,修饰符re.S等)方法将正则表达式字符串编译成正则表达式对象，以便在后面的匹配中复用</p><blockquote><p>修饰符</p></blockquote><table><thead><tr><th>修饰符</th><th>描述</th></tr></thead><tbody><tr><td>re.I</td><td>使匹配对大小写不敏感</td></tr><tr><td>re.M</td><td>多行匹配</td></tr><tr><td>re.S</td><td>使.匹配包括换行在内的所有字符</td></tr></tbody></table><h2 id="2-xpath"><a href="#2-xpath" class="headerlink" title="2.xpath"></a>2.xpath</h2><p>1.导入相关库包<br>from lxml import etree<br>2.初始化<br>html = etree.HTML(response.text)</p><p>3.文本内容的获取<br>标签的属性值获取：/@属性名（如：@href，@class…）<br>文本内容的获取：/text()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree </span><br><span class="line">text = <span class="string">'''</span></span><br><span class="line"><span class="string">    &lt;html&gt;&lt;body&gt;&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="item-0"&gt;&lt;a href="link1.html"&gt;first item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="item-inactive"&gt;&lt;a href="link3.html"&gt;third item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="item-1"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line"></span><br><span class="line">result = html.xpath(<span class="string">'//li[2]/a/text()'</span>)     <span class="comment"># second item</span></span><br><span class="line">response = html.xpath(<span class="string">".//li[2]/a/@href"</span>)   <span class="comment"># link2.html</span></span><br></pre></td></tr></table></figure><p>4.常用规则</p><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>nodename</td><td>选取此节点的所有子节点</td></tr><tr><td>/</td><td>从根节点选取</td></tr><tr><td>//</td><td>从匹配选择的当前节点选择文档的节点，而不考虑它们的位置</td></tr><tr><td>.</td><td>选取当前节点</td></tr><tr><td>..</td><td>选取当前节点的父节点</td></tr><tr><td>@</td><td>选取属性</td></tr></tbody></table><table><thead><tr><th>路径表达式</th><th>描述</th></tr></thead><tbody><tr><td>bookstore</td><td>选取 bookstore 元素的所有子节点</td></tr><tr><td>/bookstore</td><td>选取根元素 bookstore。注释：假如路径起始于正斜杠( / )，则此路径始终代表到某元素的绝对路径！</td></tr><tr><td>bookstore/book</td><td>选取属于 bookstore 的子元素的所有 book 元素</td></tr><tr><td>//book</td><td>选取所有 book 子元素，而不管它们在文档中的位置。</td></tr><tr><td>bookstore//book</td><td>选择属于 bookstore 元素的后代的所有 book 元素，而不管它们位于 bookstore 之下的什么位置。</td></tr><tr><td>/bookstore/book[1]</td><td>选取属于 bookstore 子元素的第一个 book 元素。<strong>索引默认从1开始</strong></td></tr><tr><td>/bookstore/book[last()]</td><td>选取属于 bookstore 子元素的最后一个 book 元素。</td></tr><tr><td>/bookstore/book[last()-1]</td><td>选取属于 bookstore 子元素的倒数第二个 book 元素。</td></tr><tr><td>/bookstore/book[position()&lt;3]</td><td>选取最前面的两个属于 bookstore 元素的子元素的 book 元素。</td></tr><tr><td>//title[@lang]</td><td>选取所有拥有名为 lang 的属性的 title 元素。</td></tr><tr><td>//title[@lang=’eng’]</td><td>选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。</td></tr><tr><td>/bookstore/book[price&gt;35.00]</td><td>选取 bookstore 元素的所有 book 元素，且其中的 price 元素的值须大于 35.00。</td></tr><tr><td>/bookstore/book[price&gt;35.00]/title</td><td>选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须大于 35.00。</td></tr></tbody></table><p>举例说明如何使用xpath：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.指定url</span></span><br><span class="line">url = <span class="string">'https://ishuo.cn/joke'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.发起请求</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(url=url, headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.获取页面内容</span></span><br><span class="line">page_text = response.text</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.数据解析</span></span><br><span class="line">tree = etree.HTML(page_text)</span><br><span class="line"><span class="comment"># 获取所有的li标签（已经经过了xpath插件验证）</span></span><br><span class="line">li_list = tree.xpath(<span class="string">'//div[@id="list"]/ul/li'</span>)</span><br><span class="line"><span class="comment"># 这段话的意思是：选择所有子孙节点是id="list"的div标签，在选择子节点ul标签，再选择子节点li标签</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[&lt;Element li at 0x10e32c248&gt;, &lt;Element li at 0x10e30ae88&gt;,...,&lt;Element li at 0x10ef5bfc8&gt;]</span></span><br><span class="line"><span class="string"># 注意：Element类型的对象可以继续调用xpath函数，对该对象表示的局部内容进行指定内容的解析</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">fp = open(<span class="string">'./duanZi.txt'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>)  <span class="comment"># 一次打开多次写入</span></span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">    content = li.xpath(<span class="string">'./div[@class="content"]/text()'</span>)[<span class="number">0</span>]  <span class="comment"># 调用text()函数取得段子内容</span></span><br><span class="line">    title = li.xpath(<span class="string">'./div[@class="info"]/a/text()'</span>)[<span class="number">0</span>]   <span class="comment"># 获得a标签文本内容</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 5.持久化</span></span><br><span class="line">    fp.write(title + <span class="string">":"</span> + content + <span class="string">"\n\n"</span>)  <span class="comment"># 段子换行分隔</span></span><br><span class="line">    print(<span class="string">"一条数据写入成功"</span>)</span><br></pre></td></tr></table></figure><h2 id="3-pyquery"><a href="#3-pyquery" class="headerlink" title="3.pyquery"></a>3.pyquery</h2><blockquote><p>导入相关库包</p></blockquote><p>from pyquery import PyQuery as pq</p><blockquote><p>初始化工作</p></blockquote><p>doc = pq(html)字符串初始化<br>doc = pq(url)URL初始化<br>doc = pq(filename=””)文件初始化<br>item = doc(&#39;li&#39;))  获取li标签的变量为item</p><blockquote><p>css选择器</p></blockquote><table><thead><tr><th>表达式</th><th>说明</th></tr></thead><tbody><tr><td>id选择器</td><td>使用#</td></tr><tr><td>class选择器</td><td>使用.</td></tr><tr><td>标签选择器</td><td>直接使用标签，什么都不加</td></tr><tr><td>*</td><td>选择所有元素</td></tr><tr><td>p</td><td>选择所有p标签</td></tr><tr><td>div,p</td><td>选择所有的div和p标签（并集）</td></tr><tr><td>div p</td><td>选择div下的所有p标签（子集），空格代表嵌套关系</td></tr></tbody></table><p>举例说明：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">doc = pq(html)</span><br><span class="line"><span class="comment">#首先选class=“.list”，空格即使选择list里面的标签，再选class=“item-0”，并列active（实际就是一个整体）</span></span><br><span class="line">li = doc(<span class="string">'.list .item-0.active'</span>)</span><br><span class="line"><span class="comment">#获取所有的兄弟元素</span></span><br><span class="line">print(li.siblings())</span><br><span class="line"></span><br><span class="line"><span class="comment">#在向其中筛选</span></span><br><span class="line">print(li.siblings(<span class="string">'.active'</span>))</span><br></pre></td></tr></table></figure><blockquote><p>pyquery获取信息(跟jQuery用法一样)</p></blockquote><p>1.获取指定属性值：变量名.attr(目标属性名) 或者 变量名.attr.属性名<br>2.获取文本内容：变量名.text()<br>3.获取html： 变量名.html()<br>4.获取父节点： 变量名.parent()<br>5.获取所有的祖先节点： 变量名.parents()<br>6.获取所有的兄弟元素： 变量名.siblings()<br>7.过滤选择器：li = doc(&quot;li:first-child&quot;)#第一个子节点<br>8.过滤选择器：li = doc(&quot;li:gt(2)&quot;)#索引值大于2的<br>9.<font color=#ef4136><strong>找寻某一特定标签：变量名.find(标签名).eq(n) n从0开始，表示find某标签，并选择第n个目标值</strong></font></p><blockquote><p>遍历(重要)</p></blockquote><p><strong>pyquery的遍历需要使用items()方法</strong><br>我们可以观察到，pyquery的选择结果可能是多个节点，也可能是单个节点，但类型都是PyQuery类型。</p><ul><li>对于单节点来说，可以直接打印输出，也可以直接转换为字符串</li><li>对于多个节点来说，就必须使用遍历items()函数来获取了（<font color=#ef4136>PS：这里的items函数不同于字典的items函数，注意区分</font>）</li></ul><p>举例说明：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string">.stock_sub .stockTable a</span></span><br><span class="line"><span class="string">&lt;div class= "stock_sub"&gt; </span></span><br><span class="line"><span class="string">    &lt;li class="stockTable"&gt;</span></span><br><span class="line"><span class="string">        &lt;a href="link1.html"&gt; link1.html &lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;a href="link2.html"&gt; link2.html &lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;a href="link3.html"&gt; link3.html &lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">doc = pq(html)</span><br><span class="line"><span class="comment"># 查找目标节点</span></span><br><span class="line">result = doc(<span class="string">".stock_sub .stockTable a"</span>)  <span class="comment"># 单节点可以直接打印</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(result)):</span><br><span class="line">    print(result.eq(i).attr(<span class="string">"href"</span>), result.eq(i).text())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多节点测试</span></span><br><span class="line">lis = doc(<span class="string">".stock_sub .stockTable a"</span>)  <span class="comment"># 这里有多个a标签节点</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> lis.items():</span><br><span class="line">    print(item.attr(<span class="string">"href"</span>), item.text())</span><br></pre></td></tr></table></figure><h2 id="4-Selenium库学习"><a href="#4-Selenium库学习" class="headerlink" title="4.Selenium库学习"></a>4.<a href="https://blog.csdn.net/weixin_36279318/article/details/79475388" target="_blank" rel="noopener">Selenium库学习</a></h2><p>动态渲染页面不仅仅涉及到Ajax技术，绝大多数的网页是通过Javascript计算生成新页面的，比如说百度Echarts，淘宝，中国青年网。。。</p><blockquote><p> 4.1基本库导入</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdrive</span><br><span class="line"><span class="keyword">from</span> selenium.webdrive.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="comment"># 若想要模拟键盘，就需要导入keys()类</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdrive.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="comment"># 等待条件类</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdrive.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="comment"># 等待条件</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdrive.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="comment"># 监听鼠标事件,声明动作链</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdrive <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="comment"># 导入下拉选择框Select类</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.select <span class="keyword">import</span> Select</span><br></pre></td></tr></table></figure><blockquote><p>4.2 声明浏览器对象</p></blockquote><p>browser = webdriver.Chrome()/Firefox()/PhantomJS() 等等</p><blockquote><p>4.3 访问目标页面</p></blockquote><p><font color=#FF0000>browser.page_source:打印网页源代码</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 访问目标网址</span></span><br><span class="line">browser.get(<span class="string">"https://www.taobao.com"</span>)</span><br><span class="line"><span class="comment"># 打印页面源代码</span></span><br><span class="line">print(browser.page_source)</span><br><span class="line"><span class="comment"># 关闭浏览器</span></span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><blockquote><p>4.4 获取单个节点的方法</p></blockquote><p>语法：find_element(By.xx,”XXX”)或者是find_elements(By.xx,”XXX”)<br>一般常用的是(By.ID,id_name),(By.XPath,xpath_path),(By.CSS_SELECTOR,css_selector_path)</p><blockquote><p>4.5 节点交互</p></blockquote><p>Selenium可以驱动浏览器执行一些列操作，可以模仿一些列简单的人的动作：<br>nodeName.send_keys(“content”)：输入目标节点框文字<br>nodeName.clear()：清空目标节点框文字<br>nodeName.click()：点击目标节点</p><table><thead><tr><th>控制浏览器的操作方法</th><th>说明</th></tr></thead><tbody><tr><td>click()</td><td>点击目标节点</td></tr><tr><td>set_window_size()</td><td>设置浏览器的大小</td></tr><tr><td>back()</td><td>控制浏览器后退</td></tr><tr><td>forward()</td><td>控制浏览器前进</td></tr><tr><td>refresh()</td><td>刷新当前页面</td></tr><tr><td>clear()</td><td>清除文本</td></tr><tr><td>send_keys (value)</td><td>模拟按键输入</td></tr><tr><td>close()</td><td>关闭浏览器</td></tr><tr><td>quit()</td><td>关闭所有窗口</td></tr><tr><td>submit()</td><td>用于提交表单</td></tr><tr><td>is_displayed()</td><td>设置该元素是否用户可见</td></tr><tr><td>size</td><td>返回元素的尺寸</td></tr><tr><td>location</td><td>返回元素在浏览器中的位置，以字典的形式返回</td></tr><tr><td>get_attribute(name)</td><td>获取元素节点的属性值</td></tr><tr><td>text</td><td>获取元素的文本内容</td></tr></tbody></table><p><font color=#FF0000>2019-12-30：新增关于location和size方法的说明</font><br>先看示例源代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示等待图片节点加载出来</span></span><br><span class="line">img = self.wait.until(EC.presence_of_element_located((By.CLASS_NAME, <span class="string">'geetest_canvas_img'</span>)))</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">location = img.location</span><br><span class="line">size = img.size</span><br></pre></td></tr></table></figure><p>这里用了显示等待获取到了我要识别的滑动验证码图片对象，接下来调用该对象的location属性和size属性。<br>location属性可以返回该图片对象(既这张图片)在浏览器中的位置(坐标轴是以屏幕左上角为原点，x轴向右递增，y轴像下递增)，以字典的形式返回</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;x&quot;:30,</span><br><span class="line"> &quot;y&quot;:30  </span><br><span class="line">&#125;</span><br><span class="line"># 这里我们假设图片的位置是（30,30)</span><br><span class="line"></span><br><span class="line">size属性同样返回一个字典，size属性是图片对象的高度，宽度。</span><br><span class="line">&#123;</span><br><span class="line">&quot;height&quot;:30,</span><br><span class="line">&quot;width&quot;:30</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>4.6 鼠标事件</p></blockquote><p>在WebDriver中，将这些关于鼠标操作的方法封装在 ActionChains 类提供。<a href="https://blog.csdn.net/wudaoshihun/article/details/82990670" target="_blank" rel="noopener">详情ActionChains解析参考</a></p><table><thead><tr><th>鼠标监听方法</th><th>说明</th></tr></thead><tbody><tr><td>ActionChains(driver)</td><td>构造ActionChains对象</td></tr><tr><td>move_to_element(above)</td><td>执行鼠标悬停操作</td></tr><tr><td>context_click()</td><td>右击</td></tr><tr><td>double_click()</td><td>双击</td></tr><tr><td>drag_and_drop()</td><td>拖动</td></tr><tr><td>move_to_element(above)</td><td>执行鼠标悬停操作</td></tr><tr><td>context_click()</td><td>用于模拟鼠标右键操作， 在调用时需要指定元素定位</td></tr><tr><td>click_and_hold(on_element=None)</td><td>点击鼠标左键，不松开</td></tr><tr><td>drag_and_drop_by_offset(source, xoffset, yoffset)</td><td>拖拽到某个坐标然后松开</td></tr><tr><td>move_to_element_with_offset(to_element, xoffset, yoffset)</td><td>移动到距某个元素（左上角坐标）多少距离的位置</td></tr><tr><td>perform()</td><td>执行所有 ActionChains 中存储的行为，可以理解成是对整个操作的提交动作</td></tr></tbody></table><p>————————————————</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="comment"># 淘宝滑块的拖动</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self, username, password, chromedriverpath, **kwargs)</span>:</span></span><br><span class="line"><span class="comment"># 基本设置</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=chromedriverpath, options=self.chrome_opts)</span><br><span class="line">browser.get(self.login_url)</span><br><span class="line">driver_wait = WebDriverWait(browser, <span class="number">60</span>)</span><br><span class="line"><span class="comment"># 点击'亲, 请登录', 进入登录界面</span></span><br><span class="line">button = driver_wait.until(EC.presence_of_element_located((By.CLASS_NAME, <span class="string">'h'</span>)))</span><br><span class="line">button.click()</span><br><span class="line"><span class="comment"># 输入用户名密码</span></span><br><span class="line">username_sender = driver_wait.until(EC.presence_of_element_located((By.ID, <span class="string">'fm-login-id'</span>)))</span><br><span class="line">username_sender.send_keys(username)</span><br><span class="line">password_sender = driver_wait.until(EC.presence_of_element_located((By.ID, <span class="string">'fm-login-password'</span>)))</span><br><span class="line">password_sender.send_keys(password)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 检查是否出现了滑动验证码</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">slider = browser.find_element_by_xpath(<span class="string">"//span[contains(@class, 'btn_slide')]"</span>)</span><br><span class="line"><span class="keyword">if</span> slider.is_displayed():</span><br><span class="line">ActionChains(browser).click_and_hold(on_element=slider).perform()</span><br><span class="line">ActionChains(browser).move_by_offset(xoffset=<span class="number">258</span>, yoffset=<span class="number">0</span>).perform()</span><br><span class="line">ActionChains(browser).pause(<span class="number">0.5</span>).release().perform()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 点击登录按钮</span></span><br><span class="line">button = driver_wait.until(EC.presence_of_element_located((By.CLASS_NAME, <span class="string">'password-login'</span>)))</span><br><span class="line">button.click()</span><br></pre></td></tr></table></figure><blockquote><p>4.7 多表单切换，<a href="https://ahrilove.top/2019/12/20/frame与iframe/">点击详情</a></p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;在Web应用中经常会遇到frame/iframe表单嵌套页面的应用，WebDriver只能在一个页面上对元素识别与定位，对于frame/iframe表单内嵌页面上的元素无法直接定位。这时就需要通过switch_to.frame()方法将当前定位的主体切换为frame/iframe表单的内嵌页面中。</p><table><thead><tr><th>鼠标监听方法</th><th>说明</th></tr></thead><tbody><tr><td>switch_to.frame()</td><td>将当前定位的主体切换为frame/iframe表单的内嵌页面中</td></tr><tr><td>switch_to.default_content()</td><td>跳回最外层的页面</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(&quot;http://www.126.com&quot;)</span><br><span class="line"># 切换到id为x-URS-iframe的iframe表单</span><br><span class="line">driver.switch_to.frame(&apos;x-URS-iframe&apos;)</span><br><span class="line">driver.find_element_by_name(&quot;email&quot;).clear()</span><br><span class="line">driver.find_element_by_name(&quot;email&quot;).send_keys(&quot;username&quot;)</span><br><span class="line">driver.find_element_by_name(&quot;password&quot;).clear()</span><br><span class="line">driver.find_element_by_name(&quot;password&quot;).send_keys(&quot;password&quot;)</span><br><span class="line">driver.find_element_by_id(&quot;dologin&quot;).click()</span><br><span class="line">driver.switch_to.default_content()</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><blockquote><p>switch_to.frame() 默认可以直接取表单的id 或name属性。如果iframe没有可用的id和name属性，则可以通过下面的方式进行定位。</p></blockquote><p>先通过xpth定位到iframe<br>xf = driver.find_element_by_xpath(‘//*[@id=”x-URS-iframe”]’)</p><p>再将定位对象传给switch_to.frame()方法<br>driver.switch_to.frame(xf)</p><p>driver.switch_to.parent_frame()</p><blockquote><p>4.8 <a href="http://www.testclass.net/selenium_python/element-wait/" target="_blank" rel="noopener">设置元素等待</a></p></blockquote><p>元素等待分为显示等待（推荐：显式等待使WebdDriver等待某个条件成立时继续执行，否则在达到最大时长时抛出超时异常（TimeoutException））与隐式等待<br><strong>selenium.webdriver.support.ui 和selenium.webdriver.support.wait都是用来做显式等待的，但两者没有任何一丢丢的区别，将ui换成了wait，这样更直接易懂。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="comment"># 导入时间等待库文件</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line"><span class="comment"># 最长超时时间为10s，检测间隔为0.5s</span></span><br><span class="line">wait = WebDriverWait(driver,<span class="number">10</span>,<span class="number">0.5</span>)</span><br><span class="line">element = wait.until(</span><br><span class="line">                      <span class="comment"># 等待节点出现的含义</span></span><br><span class="line">                      EC.presence_of_element_located((By.ID, <span class="string">"kw"</span>))</span><br><span class="line">                      )</span><br><span class="line"><span class="comment"># 输入文本                      </span></span><br><span class="line">element.send_keys(<span class="string">'selenium'</span>)</span><br><span class="line">time.sleep(<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 浏览器退出</span></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p><font color=#d71345>2020-1-11 新增：</font></p><blockquote><p>4.9 下拉框选择操作</p></blockquote><p>导入选择下拉框Select类，使用该类处理下拉框操作<br>方法：select_by_value(“选择值”)：相当于我们使用鼠标选择下拉框的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.select <span class="keyword">import</span> Select</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#1.鼠标悬停至“设置”链接</span></span><br><span class="line">driver.find_element_by_link_text(<span class="string">'设置'</span>).click()</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#2.打开搜索设置</span></span><br><span class="line">driver.find_element_by_link_text(<span class="string">"搜索设置"</span>).click()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.搜索结果显示条数</span></span><br><span class="line">sel = driver.find_element_by_xpath(<span class="string">"//select[@id='nr']"</span>)</span><br><span class="line">Select(sel).select_by_value(<span class="string">'50'</span>)  <span class="comment"># 显示50条</span></span><br><span class="line"></span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><blockquote><p>4.10 警告框处理</p></blockquote><p>在WebDriver中处理JavaScript所生成的alert、confirm以及prompt十分简单，具体做法是使用 switch_to.alert 方法定位到 alert/confirm/prompt，然后使用text/accept/dismiss/ send_keys等方法进行操作。</p><table><thead><tr><th>鼠标监听方法</th><th>说明</th></tr></thead><tbody><tr><td>text</td><td>返回 alert/confirm/prompt 中的文字信息</td></tr><tr><td>accept()</td><td>接受现有警告框</td></tr><tr><td>dismiss()</td><td>解散现有警告框</td></tr><tr><td>send_keys(keysToSend)</td><td>发送文本至警告框。keysToSend：将文本发送至警告框</td></tr></tbody></table><p><font color="#ff4500">2020-3-30:新增</font></p><blockquote><p>4.11 正确移除Selenium中window.navigator.webdriver的值</p></blockquote><p>前言：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有不少朋友在开发爬虫的过程中喜欢使用Selenium + Chromedriver，以为这样就能做到不被网站的反爬虫机制发现。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;先不说淘宝这种基于用户行为的反爬虫策略，仅仅是一个普通的小网站，使用一行Javascript代码，就能轻轻松松识别你是否使用了Selenium + Chromedriver模拟浏览器。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里我就不详细阐述了，<strong>Kingname青南</strong>大佬已经给出了解决方案（亲测成功）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明一个浏览器</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.execute_cdp_cmd(<span class="string">"Page.addScriptToEvaluateOnNewDocument"</span>, &#123;</span><br><span class="line">  <span class="string">"source"</span>: <span class="string">"""</span></span><br><span class="line"><span class="string">    Object.defineProperty(navigator, 'webdriver', &#123;</span></span><br><span class="line"><span class="string">      get: () =&gt; undefined</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">  """</span></span><br><span class="line">&#125;)</span><br><span class="line">driver.get(<span class="string">'http://exercise.kingname.info'</span>)</span><br></pre></td></tr></table></figure><p><font color="#ff4500">2020-5-12:新增</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上述的阐述了移除Selenium中window.navigator.webdriver的值的方法：<strong>但有些网站，点击了它的页面超链接以后，会自动以新的标签页打开，这种情况下就无法使用上面提到的技巧了</strong>(即在webdriver测试控制阶段，若点击跳转链接后，浏览器会新开一个选项页，会重新请求所有的url)</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;要解决这个问题实际上非常简单，我们只需要知道一点点HTML知识和 JavaScript 的知识即可。如果要用一个a标签的链接在当前页面打开，我们只需要设置它的target属性值为_self。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;现在我们需要用 JavaScript 把当面页面上的所有a标签的target属性值全部改成_self。</p><p>将所有的a标签的target属性设置为_self:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a_list = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'a'</span>);</span><br><span class="line"><span class="comment">// 匿名函数,map函数以及“...”表示ES6的扩展运算符</span></span><br><span class="line">[...a_list].map(<span class="function">(<span class="params">a</span>)=&gt;</span> &#123;a.setAttribute(<span class="string">'target'</span>, <span class="string">'_self'</span>)&#125;);</span><br></pre></td></tr></table></figure><p>使用这个方法有4个地方需要注意：</p><ul><li>不适用于通过 JavaScript 的 window.open()函数打开新网址的情况</li><li>对于&lt;form&gt;标签的表单提交，也可以设置target=”_self”属性。</li><li>必须等页面完全加载完成才能执行这两行 JavaScript 语句。如果执行语句以后，页面通过 Ajax 或者其他途径又加载了新的 HTML，那么需要重新执行。</li><li>每次打开新的链接以后，需要再次执行这两行语句。</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个方法可以与本文开始提到的那篇文章中的方法结合起来使用。首先通过<code>Page.addScriptToEvaluateOnNewDocument</code>让当前标签页的window.navigator.webdriver属性消失，等页面完全加载完成以后，再通过driver.execute_script()运行本文讲到的两行 JavaScript 代码，强迫网页在当前标签页打开新的链接。</p><h3 id="5-HTTP状态码的理解"><a href="#5-HTTP状态码的理解" class="headerlink" title="5.HTTP状态码的理解"></a>5.HTTP状态码的理解</h3><blockquote><p>状态码304 Not Modified</p></blockquote><p>当我们爬取某些网站时<a href="http://www.pufei8.com/" target="_blank" rel="noopener">扑飞漫画</a>中会遇到对浏览器缓存下请求资源返回304的情况流量的计费的情况，这里就需要了解HTTP 304的响应状态的资源更新机制。</p><p>这是因为该网站采取了强缓存验证， 服务器将要爬取的内容在本地做了缓存，再次请求的时候，会首先检查本地缓存中是否已存在，如果有就返回304</p><p>首先看一个关于304请求的响应头的信息，这里面有两个比较重要的请求头字段：<code>If-Modified-Since</code> 和 <code>If-None-Match</code>，这两个字段表示发送的是一个条件请求。</p><p><fancybox><img src="http://7xkn2v.dl1.z0.glb.clouddn.com/QQ20160215-0.png" alt=""></fancybox></p><p>当客户端缓存了目标资源但不确定该缓存资源是否是最新版本的时候, 就会发送一个条件请求，这样就可以辨别出一个请求是否是条件请求，在进行条件请求时,客户端会提供给服务器一个If-Modified-Since请求头,其值为服务器上次返回的Last-Modified响应头中的Date日期值,还会提供一个If-None-Match请求头,值为服务器上次返回的ETag响应头的值。</p><p>服务器会读取到这两个请求头中的值,判断出客户端缓存的资源是否是最新的,如果是的话,服务器就会返回HTTP/304 Not Modified响应头, 但没有响应体.客户端收到304响应后,就会从本地缓存中读取对应的资源.</p><p><strong>解决方案：</strong></p><ul><li>方案一：请求头里的 <strong><em>If-Modified-Since、If-None-Match和Cache-control</em></strong>，都必须禁用</li><li>方案二：请求头里User-Agent为动态的</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">"Host"</span>: <span class="string">"www.pufei8.com"</span>,</span><br><span class="line">    <span class="string">"Referer"</span>: <span class="string">"http://www.pufei8.com/"</span>,</span><br><span class="line">    <span class="string">'Accept'</span>: <span class="string">'text/html'</span>,</span><br><span class="line">    <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate'</span>,</span><br><span class="line">    <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.9'</span>,</span><br><span class="line">    <span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>,</span><br><span class="line">    <span class="string">'Upgrade-Insecure-Requests'</span>: <span class="string">"1"</span>,</span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3945.88 Safari/537.36"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://mp.weixin.qq.com/s/TqL3OawPe9zW_nneyXvefQ" target="_blank" rel="noopener">一日一技：如何正确移除Selenium中window.navigator.webdriver的值</a></li><li><a href="https://mp.weixin.qq.com/s/U2aAC6K6RuQDRqfb8m35_w" target="_blank" rel="noopener">（最新版）如何正确移除Selenium中的 window.navigator.webdriver</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 解析库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>兄弟萌！枯啦，要恰不了饭了</title>
      <link href="/2019/12/08/%E6%81%B0%E9%A5%AD%E5%8D%B1%E6%9C%BA/"/>
      <url>/2019/12/08/%E6%81%B0%E9%A5%AD%E5%8D%B1%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;兄弟萌，怎么办？我要枯啦，要恰不了饭了，要吃红牌出场了</p><a id="more"></a><p>最近一直没有什么活干，每天就是混吃等死，建彬哥说也没有什么我能做的项目，呀！糟了呀，以前一直打趣说“你有你的好果子吃”，现在才明白过来，原来是我才没有好果子吃。<br>而且就目前的市场和我最近咸鱼，我也感觉我要直接吃红牌了，看不到生活的希望（55555。。。）<br>算了吧！！走一步算一步，做好心理准备，每天使劲多学一些，也不至于打包回家的时候那么狼狈，现在回想起来，15年做决定的时候是不是选对了？是当时脑瘫了？</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>探究密码加salt原理以及PHP防止SQL注入</title>
      <link href="/2019/12/08/%E6%B5%85%E8%B0%88%E5%AF%86%E7%A0%81%E5%8A%A0%E7%9B%90%E5%8E%9F%E7%90%86/"/>
      <url>/2019/12/08/%E6%B5%85%E8%B0%88%E5%AF%86%E7%A0%81%E5%8A%A0%E7%9B%90%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般来说，一些小网站，小公司对于用户的账号密码很大概率是对其进行散列处理。我们知道，如果直接对密码进行散列，那么黑客可以对通过获得这个密码散列值，然后通过查散列值字典（例如某MD5密码破解网站），得到某用户的密码。</p><a id="more"></a><h3 id="1-加salt原理"><a href="#1-加salt原理" class="headerlink" title="1.加salt原理"></a>1.加salt原理</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;所谓加Salt方法，就是加点“佐料”。其基本想法是这样的：<font color=#5CACEE>当用户首次提供密码时（通常是注册时），由系统自动往这个密码里撒一些“佐料”，然后再散列。而当用户登录时，系统为用户提供的代码撒上同样的“佐料”，然后散列，再比较散列值，以确定密码是否正确。</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里的“佐料”被称作“Salt值”，这个值是由系统随机生成的，并且只有系统知道。这样，即便两个用户使用了同一个密码，由于系统为它们生成的salt值不同，他们的散列值也是不同的。即便黑客可以通过自己的密码和自己生成的散列值来找具有特定密码的用户，但这个几率太小了（密码和salt值都得和黑客使用的一样才行）。</p><h3 id="2-加密示例（以PHP为例，python同理调用hashlib库）"><a href="#2-加密示例（以PHP为例，python同理调用hashlib库）" class="headerlink" title="2.加密示例（以PHP为例，python同理调用hashlib库）"></a>2.加密示例（以PHP为例，python同理调用hashlib库）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> <span class="title">hash</span><span class="params">($a)</span> </span>&#123;</span></span><br><span class="line"><span class="php">    $salt=”Random_KUGBJVY”;  <span class="comment">//定义一个salt值，程序员规定下来的随机字符串</span></span></span><br><span class="line"><span class="php">    $b=$a.$salt;  <span class="comment">//把密码和salt连接,</span></span></span><br><span class="line"><span class="php">    $b=md5($b);  <span class="comment">//执行MD5散列</span></span></span><br><span class="line"><span class="php">    <span class="keyword">return</span> $b;  <span class="comment">//返回散列   </span></span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>这里的加salt处理方式有很多种，程序员按要求自定义，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$salt=”Random_KUGBJVY”;</span><br><span class="line">$b=$a.$salt;</span><br><span class="line">$b1=$salt.$a.$salt;</span><br><span class="line">$b2=$salt.md5($a.$salt);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>调用方式：$new_password=hash($_POST[password]);   //这里接受表单提交值，并进行加密</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下面详细介绍一下加Salt散列的过程。介绍之前先强调一点，前面说过，验证密码时要使用和最初散列密码时使用“相同的”佐料。所以Salt值是要存放在数据库里的。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用户注册时：用户输入【账号】和【密码】（以及其他用户信息）；系统为用户生成【Salt值】；系统将【Salt值】和【用户密码】连接到一起；对连接后的值进行散列，得到【Hash值】；将【Hash值1】和【Salt值】分别放到数据库中。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用户登录时：用户输入【账号】和【密码】；系统通过用户名找到与之对应的【Hash值】和【Salt值】；系统将【Salt值】和【用户输入的密码】连接到一起；对连接后的值进行散列，得到【Hash值2】（注意是即时运算出来的值）；比较【Hash值1】和【Hash值2】是否相等，相等则表示密码正确，否则表示密码错误。<br><font color=#5CACEE>有时候，为了减轻开发压力，程序员会统一使用一个salt值（储存在某个地方），而不是每个用户都生成私有的salt值</font></p><h3 id="3-php基本语法知识-参考FioraLove的GitHub"><a href="#3-php基本语法知识-参考FioraLove的GitHub" class="headerlink" title="3.php基本语法知识,参考FioraLove的GitHub"></a>3.php基本语法知识,<a href="https://github.com/FioraLove/HTML-CSS-JavaScript/blob/master/PHP/README.md" target="_blank" rel="noopener">参考FioraLove的GitHub</a></h3><blockquote><p>1.为什么要使用PDO：增加数据库连接扩展，是程序连接数据库的方法之一</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PDO是PHP5新加入的一个重大功能，我们的数据库服务器为MySQL，所有的程序代码的数据库操作全是一mysql(）或者mysqli()函数来操作，当我们的数据库 需要更换时比如换成，SQL、SERVER、PostgreSQL、MS 等，我们不可能去修改所有的程序代码！所以就要用到PDO，PDO很好的帮我们解决了这个问题，使用PDO操作非常方便，只需要修改数据源格式，和加载相应的驱动文件到PHP.ini即可；</p><blockquote><p>2.PDO连接数据库`<a href="https://blog.csdn.net/jia_1418422386/article/details/80394840" target="_blank" rel="noopener">PDO(php data object)</a>连接MySQL</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">    方式一：借由mysqli</span><br><span class="line">    <span class="php"><span class="meta">&lt;?php</span> </span></span><br><span class="line"><span class="php">        $servername = <span class="string">'localhost'</span>;</span></span><br><span class="line"><span class="php">        $username = <span class="string">'username'</span>;</span></span><br><span class="line"><span class="php">        $password = <span class="string">'password'</span>;</span></span><br><span class="line"><span class="php">        $db_name = <span class="string">'NMSL'</span>;</span></span><br><span class="line"><span class="php">        <span class="comment">// 创建连接</span></span></span><br><span class="line"><span class="php">        $conn = mysqli($servername, $username, $password,$db_name); </span></span><br><span class="line"><span class="php">        <span class="comment">// 检测连接</span></span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> (!$conn) &#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">die</span>(<span class="string">"Connection failed: "</span> . mysqli_error());</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> <span class="string">"连接成功"</span>;</span></span><br><span class="line"><span class="php">    <span class="meta">?&gt;</span></span></span><br><span class="line">    方式二：PDO   </span><br><span class="line">    $DSN = 'mysql:host=localhost;dbname=demo;charset=utf-8';</span><br><span class="line">    $pdo = new PDO($DSN,'username','password');  // 表示已连接了数据库</span><br><span class="line"> ```   </span><br><span class="line">&gt;3.设置PDO在处理数据的过程中采用什么方式去处理</span><br><span class="line"> ```html</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    setAttribute()方法是设置部分属性，主要属性有：PDO::ATTR_CASE、PDO::ATTR_ERRMODE等，我们设置的是PDO::ATTR_CASE(使用关联索引获取数据)</span><br><span class="line">    </span><br><span class="line">    PDO::ATTR_CASE：强制列名为指定的大小写。他的$value可为：</span><br><span class="line">    </span><br><span class="line">    　　PDO::CASE_LOWER：强制列名小写。</span><br><span class="line">    </span><br><span class="line">    　　PDO::CASE_NATURAL：保留数据库驱动返回的列名。</span><br><span class="line">    </span><br><span class="line">    　　PDO::CASE_UPPER：强制列名大写。</span><br><span class="line">   </span><br><span class="line">    PDO::ATTR_ERRMODE：错误报告。他的$value可为：</span><br><span class="line">    </span><br><span class="line">    　　PDO::ERRMODE_SILENT： 仅设置错误代码。</span><br><span class="line">    </span><br><span class="line">    　　PDO::ERRMODE_WARNING: 引发 E_WARNING 错误</span><br><span class="line">    </span><br><span class="line">    　　PDO::ERRMODE_EXCEPTION: 抛出 exceptions 异常。</span><br><span class="line">    </span><br><span class="line">    PDO::ATTR_ORACLE_NULLS （在所有驱动中都可用，不仅限于Oracle）： 转换 NULL 和空字符串。他的$value可为：</span><br><span class="line">    </span><br><span class="line">    　　PDO::NULL_NATURAL: 不转换。</span><br><span class="line">    </span><br><span class="line">    　　PDO::NULL_EMPTY_STRING： 将空字符串转换成 NULL 。</span><br><span class="line">    </span><br><span class="line">    　　PDO::NULL_TO_STRING: 将 NULL 转换成空字符串。</span><br><span class="line">``` </span><br><span class="line">&gt; 4.数据库操作：exec(不返回数据集，即insert，update，delete)与query(仅执行带结果返回的，即select)方法</span><br><span class="line">```html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">    <span class="comment">/* 连接数据库*/</span></span></span><br><span class="line"><span class="php">    $DSN = <span class="string">'mysql:host=localhost;dbname=demo;charset=utf-8'</span>;</span></span><br><span class="line"><span class="php">    $pdo = <span class="keyword">new</span> PDO($DSN,<span class="string">'username'</span>,<span class="string">'password'</span>); </span></span><br><span class="line"><span class="php">    </span></span><br><span class="line"><span class="php">    <span class="comment">/*  删除 FRUIT 数据表中满足条件的所有行~exec方法 */</span></span></span><br><span class="line"><span class="php">    $count = $pdo-&gt;exec(<span class="string">"DELETE FROM fruit WHERE colour = 'red'"</span>);</span></span><br><span class="line"><span class="php">    </span></span><br><span class="line"><span class="php">    <span class="comment">/* 返回被删除的行数 */</span></span></span><br><span class="line"><span class="php">    <span class="keyword">print</span>(<span class="string">"Deleted $count rows.\n"</span>);</span></span><br><span class="line"><span class="php">    <span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="未完待续。。。"><a href="#未完待续。。。" class="headerlink" title="未完待续。。。"></a>未完待续。。。</h3>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> salt </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML+CSS易忘点</title>
      <link href="/2019/12/06/html%E4%B8%8Ecss/"/>
      <url>/2019/12/06/html%E4%B8%8Ecss/</url>
      
        <content type="html"><![CDATA[<p>HTML是网页内容的载体,CSS样式是表现,JavaScript是用来实现网页上的特效效果与交互。总结自己遇到的一些知识点，查漏补缺，<strong>学习犹如逆水行舟，不进则退</strong>。<br><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/29a76b455d18153b5a5a2f141fee8bee.jpeg" alt=""></fancybox></p><a id="more"></a><h3 id="1-HTML的音视频播放"><a href="#1-HTML的音视频播放" class="headerlink" title="1.HTML的音视频播放"></a>1.HTML的音视频播放</h3><h4 id="1-1-HTML视频Video播放"><a href="#1-1-HTML视频Video播放" class="headerlink" title="1.1 HTML视频Video播放"></a>1.1 HTML视频Video播放</h4><p>最好的 HTML 解决方法：以下实例中使用了 4 种不同的视频格式。HTML 5 &lt;video&gt; 元素会尝试播放以 mp4、ogg 或 webm 格式中的一种来播放视频。如果均失败，则回退到 &lt;embed&gt; 元素。</p><p>HTML5 + &lt;object&gt; +&lt;embed&gt;<strong>mp3文件路径为相对路径</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--创建固定宽高的播放器标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">width</span>=<span class="string">"320"</span> <span class="attr">height</span>=<span class="string">"240"</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"movie.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"movie.ogg"</span> <span class="attr">type</span>=<span class="string">"video/ogg"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"movie.webm"</span> <span class="attr">type</span>=<span class="string">"video/webm"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">object</span> <span class="attr">data</span>=<span class="string">"movie.mp4"</span> <span class="attr">width</span>=<span class="string">"320"</span> <span class="attr">height</span>=<span class="string">"240"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">"movie.swf"</span> <span class="attr">width</span>=<span class="string">"320"</span> <span class="attr">height</span>=<span class="string">"240"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line">拓展：js与DOM操作设置视频播放器的功能（视频暂停，缩小，放大）</span><br><span class="line">```html</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align:center"</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"playPause()"</span>&gt;</span>播放/暂停<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"makeBig()"</span>&gt;</span>放大<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"makeSmall()"</span>&gt;</span>缩小<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"makeNormal()"</span>&gt;</span>普通<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">"video1"</span> <span class="attr">width</span>=<span class="string">"420"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"mov_bbb.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"mov_bbb.ogg"</span> <span class="attr">type</span>=<span class="string">"video/ogg"</span>&gt;</span></span><br><span class="line">        您的浏览器不支持 HTML5 video 标签。</span><br><span class="line">      <span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> myVideo=<span class="built_in">document</span>.getElementById(<span class="string">"video1"</span>); </span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">playPause</span><span class="params">()</span></span></span></span><br><span class="line">    &#123; </span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (myVideo.paused) </span></span><br><span class="line">          myVideo.play(); </span><br><span class="line"><span class="actionscript">        <span class="keyword">else</span> </span></span><br><span class="line">          myVideo.pause(); </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">makeBig</span><span class="params">()</span></span></span></span><br><span class="line">    &#123; </span><br><span class="line">        myVideo.width=560; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">makeSmall</span><span class="params">()</span></span></span></span><br><span class="line">    &#123; </span><br><span class="line">        myVideo.width=320; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">makeNormal</span><span class="params">()</span></span></span></span><br><span class="line">    &#123; </span><br><span class="line">        myVideo.width=420; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-audio音频文件的播放设置"><a href="#1-2-audio音频文件的播放设置" class="headerlink" title="1.2 audio音频文件的播放设置"></a>1.2 audio音频文件的播放设置</h4><p>src:MP3文件为相对路径</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span> <span class="attr">style</span>=<span class="string">"height:100px; width=100px"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"../static_audio/yiluxiangbei.mp3"</span> <span class="attr">type</span>=<span class="string">"audio/mpeg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"../static_audio/yiluxiangbei.ogg"</span> <span class="attr">type</span>=<span class="string">"audio/ogg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">embed</span> <span class="attr">height</span>=<span class="string">"50"</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">src</span>=<span class="string">"../static_audio/yiluxiangbei.mp3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&lt;audio&gt;标签的属性值有：</p><ul><li>autoplay：如果设置该属性，音频将自动播放，值为：autoplay；</li><li>controls：如果设置该属性，则显示音频控件（播放/暂停按钮），值：controls；</li><li>loop：如果设置该属性，则音频重复播放，值为：loop；</li><li>muted：如果设置该属性，则音频输出为静音，值：muted；</li><li>preload：规定当网页加载时，音频是否默认被加载以及如何被加载。值：auto/metadata/none；</li><li>src：规定音频文件的地址；</li></ul><h3 id="2-PC与移动端响应式布局"><a href="#2-PC与移动端响应式布局" class="headerlink" title="2.PC与移动端响应式布局"></a>2.PC与移动端响应式布局</h3><p><a href="https://www.jb51.net/web/459394.html" target="_blank" rel="noopener">【转载：PC端和移动端自适应问题的快速解决方法】</a><br><a href="https://blog.csdn.net/dalqyou/article/details/87880895" target="_blank" rel="noopener">【转载：解决PC端和移动端自适应问题？】</a></p><h3 id="3-css知识点补充"><a href="#3-css知识点补充" class="headerlink" title="3.css知识点补充"></a>3.css知识点补充</h3><p>文本格式：</p><ul><li>text-align:center,right,justify :文本对齐方式</li><li>text-decoration :none 主要是用来删除链接的下划线</li><li>text-transform：uppercase，lowercase，capitalize 所有字句变成大写，小写或首字母大写     </li><li>text-indent：50px 用来指定文本的第一行的缩进<br></li></ul><p>css边框属性：</p><ul><li>border: 边框样式的简写，可同时包含颜色，宽度，样式</li><li>border-width ：属性为边框指定宽度</li><li>border-color ：设置边框的颜色</li><li>border-style： 定义边框样式（可以使得四个边框分别由四个不同样式，满足上右下左四个次序）</li><li>border-（top，right，bottom，left）-style: 设置某一边的具体属性</li><li>border-radius ：用于创建边框圆角（拓：四个值: 第一个值为左上角，第二个值为右上角，第三个值为右下角，第四个值为左下角。）</li><li>box-shadow： 在div中添加阴影属性，并设置阴影的颜色（10px 10px 5px #888888）</li></ul><p><fancybox><img src="https://www.html.cn/newimg88/2018/07/syntax-1.png" alt=""></fancybox><br><fancybox><img src="https://www.html.cn/newimg88/2018/07/syntax-2.png" alt=""></fancybox></p><br><p>css渐变属性：</p><ul><li>background-image：linear-gradient（direction，color1，color2… ）：线性渐变（linear-gradient(to bottom right, red , yellow)从左上方开始渐变）</li><li>background-image：radial-gradient（direction，color1，color2… ）：径向渐变<br></li></ul><p>css的透明度：</p><ul><li>rgba(a,b,c,d):rgba 是 CSS3 中的属性。rgba 括号中前 3 个数字代表着 red green blue 三种颜色的 rgb 值（0-255），最后一个是设定这个颜色的透明度即 alpha 值。范围从 0 到 1，越接近 1，代表透明度越低。</li><li>opacity: 0-1 设置透明度(<strong>&lt;body&gt;标签里面是不能直接设置背景图片的透明度的，要利用&lt;div&gt;标签</strong>)</li><li>filter:alpha(opacity=10-100) IE和更早的版本使用<br></li></ul><p>css滤镜：filter属性<br>2020年4月4日清明节当天全国悼念因新冠状肺炎逝世的同胞，几乎全网都变成了灰色了，包括按钮、图片等等。这时候我们可能会好奇这是怎么做到的呢？<br><fancybox><img src="https://qiniu.cuiqingcai.com/2020-04-04-045630.png" alt=""></fancybox></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-filter</span>: <span class="built_in">grayscale</span>(100%);</span><br><span class="line">    <span class="attribute">-moz-filter</span>: <span class="built_in">grayscale</span>(100%);</span><br><span class="line">    <span class="comment">/*-ms-filter: grayscale(100%); ie不具有这个属性*/</span></span><br><span class="line">    <span class="attribute">-o-filter</span>: <span class="built_in">grayscale</span>(100%);</span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">grayscale</span>(100%);</span><br><span class="line">    <span class="attribute">filter</span>: progid:DXImageTransform.Microsoft.<span class="built_in">BasicImage</span>(grayscale=1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-display与visibility"><a href="#4-display与visibility" class="headerlink" title="4.display与visibility"></a>4.display与visibility</h3><p>display通常可以设置为none、inline、block</p><p>visibility通常可以设置为hidden、visible</p><p>visibility：hidden 相当于display：none，能把元素隐藏起来，但是两者的区别在于：</p><ul><li><p>display：none 不显示对应的元素，在文档布局中不再分配空间（回流+重绘）</p></li><li><p>visibility：hidden 隐藏对应元素，在文档布局中仍保留原来的空间（重绘）</p></li></ul><p><strong>display会将元素隐藏掉，并且位置不再被占据，释放空间，而visibility则会依旧占据原来的位置</strong></p><p><strong>2020-4-20：关于display属性的补充</strong><br>之前我们已经在博客上大致描述了display属性（<a href="https://ahrilove.top/2019/12/06/html%E4%B8%8Ecss/">display与visibility</a>）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;所有主流浏览器都支持 display 属性。其次，我们都知道display 属性规定元素应该生成的框的类型，我们常用的display属性值有：</p><ul><li>inline(默认值)</li><li>block</li><li>inline-block</li><li>none</li></ul><p>要先弄明白display，先要清楚行内元素与块级元素：</p><pre>行内元素特点    1、和其他元素都在一行上；    2、元素的高度、宽度、行高及顶部和底部边距不可设置；    3、元素的宽度就是它包含的文字或图片的宽度，不可改变。 块级元素特点    1、每个块级元素都从新的一行开始，并且其后的元素也另起一行。（真霸道，      一个块级元素独占一行）    2、元素的高度、宽度、行高以及顶和底边距都可设置。    3、元素宽度在不设置的情况下，是它本身父容器的100%（和父元素的宽度一致），       除非设定一个宽度。</pre><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在html中，&lt;span&gt;、&lt;a&gt;、&lt;label&gt;、&lt;input&gt;、&lt;img&gt;、 &lt;strong&gt; 和&lt;em&gt;就是典型的行内元素（inline）元素。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;块级元素是可以设置宽高的，但是它的实际宽高是本身宽高+padding。block元素要单独占一行。内联元素不单独占一行，给他设置宽高是没有用的。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在html中&lt;div&gt;、 &lt;p&gt;、&lt;h1&gt;、&lt;form&gt;、&lt;ul&gt; 和 &lt;li&gt;就是块级元素。设置display:block就是将元素显示为块级元素。如下代码就是将行内元素a转换为块状元素，从页使用a元素具有块状元素特点。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span>&#123;<span class="attribute">display</span>:block;&#125;</span><br></pre></td></tr></table></figure><h3 id="5-多媒体查询"><a href="#5-多媒体查询" class="headerlink" title="5.多媒体查询"></a>5.多媒体查询</h3><p>针对不同的媒体类型(包括显示器、便携设备、电视机，等等)设置不同的样式规则。多媒体查询可以做很多的事情，例如：</p><ul><li>viewport(视窗) 的宽度与高度</li><li>设备的宽度与高度</li><li>朝向 (智能手机横屏，竖屏) 。</li><li>分辨率</li></ul><blockquote><p>多媒体查询语法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@media  and|not|only   mediaType (media feature) &#123;</span><br><span class="line">    CSS-Code;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对各个含义分析:</p><ul><li><p>not: not是用来排除掉某些特定的设备的，比如 @media not print（非打印设备）。</p></li><li><p>only: 用来定某种特别的媒体类型。对于支持Media Queries的移动设备来说，如果存在only关键字，移动设备的Web浏览器会忽略only关键字并直接根据后面的表达式应用样式文件。对于不支持Media Queries的设备但能够读取Media Type类型的Web浏览器，遇到only关键字时会忽略这个样式文件。</p></li><li><p>mediaType:多媒体类型，有如下四种：all(所有多媒体设备),print(打印机设备),screen(用于电脑屏幕，平板，智能手机等。),speech(用于屏幕阅读器)</p></li></ul><p>举例说明：</p><ol><li>在屏幕可视窗口尺寸小于 480 像素的设备上修改背景颜色<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">body &#123;</span><br><span class="line">    background-color: pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css">@<span class="keyword">media</span> screen and (max-width: <span class="number">480px</span>) &#123;</span></span><br><span class="line">    body &#123;</span><br><span class="line">        background-color: lightgreen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>重置浏览器窗口查看效果！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>屏幕可视窗口尺寸大于 480 像素时将菜单浮动到页面左侧<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">body &#123;</span><br><span class="line">    background-color: pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css">@<span class="keyword">media</span> screen and (max-width: <span class="number">480px</span>) &#123;</span></span><br><span class="line">    body &#123;</span><br><span class="line">        background-color: lightgreen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>重置浏览器窗口查看效果！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><a href="https://blog.csdn.net/nanjinzhu/article/details/82251110?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">HTML-表单（非常详细）原创 北方的南先生</a></li><li><a href="https://blog.csdn.net/cooooooooco/article/details/79656358" target="_blank" rel="noopener">关于设置背景图片的透明度（html+css）</a></li><li><a href="https://www.runoob.com/try/try.php?filename=trycss_ex_images_thumbnail" target="_blank" rel="noopener">HTML创建图片缩略图</a></li><li><a href="https://www.html.cn/archives/9360/" target="_blank" rel="noopener">CSS3 box-shadow 效果大全（内阴影，外阴影，三边阴影，双边阴影，单边阴影，细线描边…）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python全栈系列章节更新（六）：装饰器</title>
      <link href="/2019/12/05/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E5%85%AD%EF%BC%89%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
      <url>/2019/12/05/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E5%85%AD%EF%BC%89%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;让爬虫像人一样打卡工作，工作还得有快有慢，wtf，想了半天，写个装饰器算了，也顺便复习下装饰器，也能基本能满足需求：<br>其实也可以使用<br><font color=#ef4136><br>1.轻量级的Python定时任务调度框架（<a href="https://www.cnblogs.com/zhaoyingjie/p/9664081.html" target="_blank" rel="noopener">APSchedule库</a>）<br>2.Linux的定时任务<br>3.文件数多，还要做监控和扩展之类的话，用 Flask 写一个服务，将 Apscheduler 和 Scrapyd 继承到服务中，这样就是一个完整的爬虫项目部署和调度管理平台了<br></font></p><a id="more"></a><p>装饰器原理：不修改已实现的功能代码块，不改变原函数调用方式，只对现有功能进行扩展</p><h2 id="装饰器案例"><a href="#装饰器案例" class="headerlink" title="装饰器案例"></a>装饰器案例</h2><p>举一个简单的装饰器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(func)</span>:</span>  <span class="comment"># 装饰器接受一个函数作为参数，并返回一个函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span>  <span class="comment"># (*args, **kwargs)表示带参数的装饰器</span></span><br><span class="line">        print(<span class="string">'call %s(): '</span> % func.__name__)  <span class="comment"># 魔法函数，返回函数名</span></span><br><span class="line">        func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@test  # 运用@语法把装饰器放置在函数定义处</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    print(<span class="string">"%s:%s"</span>%(a,b))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    now(<span class="string">"hello"</span>,<span class="string">"world"</span>)</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :return</span></span><br><span class="line"><span class="string">    call now(): </span></span><br><span class="line"><span class="string">    hello:world </span></span><br><span class="line"><span class="string">    """</span></span><br></pre></td></tr></table></figure><h2 id="爬虫波动性工作装饰器函数"><a href="#爬虫波动性工作装饰器函数" class="headerlink" title="爬虫波动性工作装饰器函数"></a>爬虫波动性工作装饰器函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time,datetime,random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jobstatus</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    爬虫的工作状态装饰器</span></span><br><span class="line"><span class="string">    周一至周五</span></span><br><span class="line"><span class="string">    09:00-18:00</span></span><br><span class="line"><span class="string">    小时数是偶数</span></span><br><span class="line"><span class="string">    每分钟请求30次左右</span></span><br><span class="line"><span class="string">    小时数是奇数</span></span><br><span class="line"><span class="string">    每分钟请求10次左右</span></span><br><span class="line"><span class="string">    其余时间等待</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">            week_now = datetime.datetime.now().weekday()</span><br><span class="line">            hour_now = datetime.datetime.now().hour  <span class="comment"># 14</span></span><br><span class="line">            <span class="comment"># 判断当前星期是否为工作日</span></span><br><span class="line">            <span class="keyword">if</span> week_now <span class="keyword">in</span> list(range(<span class="number">1</span>,<span class="number">6</span>)):</span><br><span class="line">            <span class="comment"># 判断当前时间是否为工作时间</span></span><br><span class="line">                <span class="keyword">if</span> <span class="number">9</span> &lt;= hour_now &lt;= <span class="number">18</span>:</span><br><span class="line">                    <span class="keyword">if</span> hour_now % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                        time.sleep(random.choice([<span class="number">1</span>,<span class="number">2</span>]))</span><br><span class="line">                        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        time.sleep(random.choice([<span class="number">3</span>,<span class="number">4</span>]))</span><br><span class="line">                        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment">#</span></span><br><span class="line">                    time.sleep(<span class="number">3600</span>*<span class="number">16</span>)</span><br><span class="line">            <span class="comment"># 休眠24小时</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                time.sleep(<span class="number">86400</span>)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br></pre></td></tr></table></figure><h2 id="APschedule库"><a href="#APschedule库" class="headerlink" title="APschedule库"></a>APschedule库</h2><h3 id="1-APScheduler共有4种组件"><a href="#1-APScheduler共有4种组件" class="headerlink" title="1.APScheduler共有4种组件"></a>1.APScheduler共有4种组件</h3><ul><li>触发器（trigger），触发器中包含调度逻辑，每个作业都有自己的触发器来决定下次运行时间。除了它们自己初始配置以外，触发器完全是无状态的。</li><li>作业存储器（job store），存储被调度的作业，默认的作业存储器只是简单地把作业保存在内存中，其他的作业存储器则是将作业保存在数据库中，当作业被保存在一个持久化的作业存储器中的时候，该作业的数据会被序列化，并在加载时被反序列化，需要说明的是，作业存储器不能共享调度器。</li><li>执行器（executor），处理作业的运行，通常通过在作业中提交指定的可调用对象到一个线程或者进程池来进行，当作业完成时，执行器会将通知调度器。</li><li>调度器（scheduler），配置作业存储器和执行器可以在调度器中完成。例如添加、修改、移除作业，根据不同的应用场景，可以选择不同的调度器，可选的将在下一小节展示。</li></ul><h3 id="2-调度器"><a href="#2-调度器" class="headerlink" title="2.调度器"></a>2.调度器</h3><ul><li>BlockingScheduler : 当调度器是你应用中唯一要运行的东西时。</li><li>BackgroundScheduler : 当你没有运行任何其他框架并希望调度器在你应用的后台执行时使用（充电桩即使用此种方式）。</li><li>AsyncIOScheduler : 当你的程序使用了asyncio（一个异步框架）的时候使用。</li><li>GeventScheduler : 当你的程序使用了gevent（高性能的Python并发框架）的时候使用。</li><li>TornadoScheduler : 当你的程序基于Tornado（一个web框架）的时候使用。</li><li>TwistedScheduler : 当你的程序使用了Twisted（一个异步框架）的时候使用</li><li>QtScheduler : 如果你的应用是一个Qt应用的时候可以使用。</li></ul><h3 id="3-触发器"><a href="#3-触发器" class="headerlink" title="3.触发器"></a>3.触发器</h3><p>当你调度作业的时候，你需要为这个作业选择一个触发器，用来描述这个作业何时被触发，APScheduler有三种内置的触发器类型：</p><ul><li>date 一次性指定日期，最基本的一种调度，作业只会执行一次</li><li>interval 在某个时间范围内间隔多长时间执行一次</li><li>cron 和Linux crontab格式兼容，最为强大</li></ul><blockquote><p>date触发器： </p></blockquote><p>语法格式：<code>add_job(function,&quot;date&quot;,run_date,args,id)</code></p><ul><li>function：表示要触发执行的函数</li><li>触发器类型：“date”</li><li>run_date：指定的日期（datetime.datetime(年，月，日，时，分，秒 均为number型)）</li><li>args: 代表传入执行函数中的参数，<strong>是一个列表类型</strong></li><li>id：任务id标识</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2016-12-12运行一次job_function</span></span><br><span class="line">sched.add_job(job_function, <span class="string">'date'</span>, run_date=date(<span class="number">2016</span>, <span class="number">12</span>, <span class="number">12</span>), args=[<span class="string">'text'</span>])</span><br><span class="line"><span class="comment"># 2016-12-12 12:00:00运行一次job_function</span></span><br><span class="line">sched.add_job(job_function, <span class="string">'date'</span>, run_date=datetime(<span class="number">2016</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">0</span>), args=[<span class="string">'text'</span>])</span><br></pre></td></tr></table></figure><blockquote><p>interval触发器：</p></blockquote><p>语法格式： <code>add_job(function,&quot;interval&quot;,执行间隔参数,args,id)</code></p><ul><li>function：表示要触发执行的函数</li><li>args: 代表传入执行函数中的参数，<strong>是一个列表类型</strong></li><li>id：任务id标识</li><li>执行间隔参数：<ul><li>weeks (int) – 间隔几周 </li><li>days (int) – 间隔几天 </li><li>hours (int) – 间隔几小时 </li><li>minutes (int) – 间隔几分钟 </li><li>seconds (int) – 间隔多少秒 </li><li>start_date (datetime|str) – 开始日期 </li><li>end_date (datetime|str) – 结束日期 </li><li>timezone (datetime.tzinfo|str) – 时区 </li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每两个小时调一下job_function</span></span><br><span class="line">sched.add_job(job_function, <span class="string">'interval'</span>, hours=<span class="number">2</span>)</span><br></pre></td></tr></table></figure><blockquote><p>cron触发器：</p></blockquote><p>语法格式： <code>add_job(function,&quot;cron&quot;,执行间隔参数,args,id)</code></p><ul><li>function：表示要触发执行的函数</li><li>args: 代表传入执行函数中的参数，<strong>是一个列表类型</strong></li><li>id：任务id标识</li><li>执行间隔参数：<ul><li>year (int|str) – 年，4位数字 </li><li>month (int|str) – 月 (范围1-12) </li><li>day (int|str) – 日 (范围1-31) </li><li>week (int|str) – 周 (范围1-53) </li><li>day_of_week (int|str) – 周内第几天或者星期几 (范围0-6 或者 mon,tue,wed,thu,fri,sat,sun) </li><li>hour (int|str) – 时 (范围0-23) </li><li>minute (int|str) – 分 (范围0-59) </li><li>second (int|str) – 秒 (范围0-59) </li><li>start_date (datetime|str) – 最早开始日期(包含) </li><li>end_date (datetime|str) – 最晚结束时间(包含) </li><li>timezone (datetime.tzinfo|str) – 指定时区 </li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># job_function将会在6,7,8,11,12月的第3个周五的1,2,3点运行</span></span><br><span class="line">sched.add_job(job_function, <span class="string">'cron'</span>, month=<span class="string">'6-8,11-12'</span>, day=<span class="string">'3rd fri'</span>, hour=<span class="string">'0-3'</span>)</span><br><span class="line"><span class="comment"># 截止到2016-12-30 00:00:00，每周一到周五早上五点半运行job_function</span></span><br><span class="line">sched.add_job(job_function, <span class="string">'cron'</span>, day_of_week=<span class="string">'mon-fri'</span>, hour=<span class="number">5</span>, minute=<span class="number">30</span>, end_date=<span class="string">'2016-12-31'</span>)</span><br></pre></td></tr></table></figure><h3 id="4-使用教程"><a href="#4-使用教程" class="headerlink" title="4.使用教程"></a>4.使用教程</h3><p>当你需要调度作业的时候，你需要为这个作业选择一个触发器，用来描述该作业将在何时被触发，APScheduler有3中内置的触发器类型：</p><ul><li>新建一个调度器（scheduler）</li><li>添加一个调度任务（job store)</li><li>运行调度任务</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://www.cnblogs.com/zhaoyingjie/p/9664081.html" target="_blank" rel="noopener">★★ APScheduler（Python化的Cron）使用总结 定时任务</a></li><li><a href="https://www.cnblogs.com/Neeo/p/10435059.html" target="_blank" rel="noopener">Python - APScheduler</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 装饰器 </tag>
            
            <tag> 定时任务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Echarts</title>
      <link href="/2019/12/05/echarts/"/>
      <url>/2019/12/05/echarts/</url>
      
        <content type="html"><![CDATA[<p><font color=#ef4136>简而言之，百度Echarts真的是数据展示的神器，官方给出的实例就能够满足实际基本要求</font></p><blockquote><p>1.echarts创建实例<br>2.异步加载<br>3.移动端自适应<br>4.Echarts的标题title设置大全<br>5.echarts知识点<br>6.Echarts解决的实际问题</p></blockquote><a id="more"></a><h3 id="1-引入ECharts"><a href="#1-引入ECharts" class="headerlink" title="1.引入ECharts"></a>1.引入ECharts</h3><p>通过标签方式直接引入构建好的 echarts 文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 ECharts 文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"echarts.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-为-ECharts-准备一个具备高宽的-DOM-容器"><a href="#2-为-ECharts-准备一个具备高宽的-DOM-容器" class="headerlink" title="2.为 ECharts 准备一个具备高宽的 DOM 容器"></a>2.为 ECharts 准备一个具备高宽的 DOM 容器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 为 ECharts 准备一个具备大小（宽高）的 DOM --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span> <span class="attr">style</span>=<span class="string">"width: 600px;height:400px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-echarts-init-方法初始化一个-echarts-实例并通过-setOption-方法生成一个简单的柱状图"><a href="#3-echarts-init-方法初始化一个-echarts-实例并通过-setOption-方法生成一个简单的柱状图" class="headerlink" title="3. echarts.init 方法初始化一个 echarts 实例并通过 setOption 方法生成一个简单的柱状图"></a>3. echarts.init 方法初始化一个 echarts 实例并通过 setOption 方法生成一个简单的柱状图</h3><p>完整案例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>ECharts<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 echarts.static --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"echarts.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 为ECharts准备一个具备大小（宽高）的Dom --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span> <span class="attr">style</span>=<span class="string">"width: 600px;height:400px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 基于准备好的dom，初始化echarts实例</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> myChart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'main'</span>));</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 指定图表的配置项和数据</span></span></span><br><span class="line"><span class="vbscript">        <span class="keyword">let</span> <span class="keyword">option</span> = &#123;</span></span><br><span class="line">            title: &#123;</span><br><span class="line"><span class="actionscript">                text: <span class="string">'ECharts 入门示例'</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            tooltip: &#123;&#125;,</span><br><span class="line">            legend: &#123;</span><br><span class="line"><span class="actionscript">                data:[<span class="string">'销量'</span>]</span></span><br><span class="line">            &#125;,</span><br><span class="line">            xAxis: &#123;</span><br><span class="line"><span class="actionscript">                data: [<span class="string">"衬衫"</span>,<span class="string">"羊毛衫"</span>,<span class="string">"雪纺衫"</span>,<span class="string">"裤子"</span>,<span class="string">"高跟鞋"</span>,<span class="string">"袜子"</span>]</span></span><br><span class="line">            &#125;,</span><br><span class="line">            yAxis: &#123;&#125;,</span><br><span class="line">            series: [&#123;</span><br><span class="line"><span class="actionscript">                name: <span class="string">'销量'</span>,</span></span><br><span class="line"><span class="actionscript">                type: <span class="string">'bar'</span>,</span></span><br><span class="line">                data: [5, 20, 36, 10, 10, 20]</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 使用刚指定的配置项和数据显示图表。</span></span></span><br><span class="line"><span class="vbscript">        myChart.setOption(<span class="keyword">option</span>);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-异步加载"><a href="#4-异步加载" class="headerlink" title="4.异步加载"></a>4.异步加载</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 ECharts 文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"echarts.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"pie"</span> <span class="attr">style</span>=<span class="string">"width: 600px;height:400px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> myChart1 = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'pie'</span>));</span></span><br><span class="line">myChart1.showLoading();</span><br><span class="line"><span class="actionscript">setInterval(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line">    myChart1.hideLoading();</span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="comment">&lt;!---这里面进行数据绑定与实例化图表 --&gt;</span></span></span></span><br><span class="line">    myChart1.setOption(&#123;</span><br><span class="line">            series : [</span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                    name: <span class="string">'访问来源'</span>,</span></span><br><span class="line"><span class="actionscript">                    type: <span class="string">'pie'</span>,</span></span><br><span class="line"><span class="actionscript">                    radius: <span class="string">'55%'</span>,</span></span><br><span class="line">                    data:[</span><br><span class="line"><span class="actionscript">                        &#123;value:<span class="number">235</span>, name:<span class="string">'视频广告'</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                        &#123;value:<span class="number">274</span>, name:<span class="string">'联盟广告'</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                        &#123;value:<span class="number">310</span>, name:<span class="string">'邮件营销'</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                        &#123;value:<span class="number">335</span>, name:<span class="string">'直接访问'</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                        &#123;value:<span class="number">400</span>, name:<span class="string">'搜索引擎'</span>&#125;</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,1000);    </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-移动端自适应"><a href="#5-移动端自适应" class="headerlink" title="5.移动端自适应"></a>5.移动端自适应</h3><p>1.为Echarts准备一个具有宽高(有一个即可)的DOM，推荐使用bootstrap的栅栏系统来设置布局<br>2.大部分的组件和系列的left/right/top/bottom/width/height的定位方式</p><ul><li>绝对值，用number形式书写（已经固定写死了浏览器的像素）</li><li>百分比，表示占DOM容器的宽高的百分之多少，用string形式书写</li><li>位置描述，即center（水平居中），middle（垂直居中）</li></ul><h3 id="6-Echarts的标题title设置大全"><a href="#6-Echarts的标题title设置大全" class="headerlink" title="6.Echarts的标题title设置大全"></a>6.Echarts的标题title设置大全</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">var option = &#123;</span><br><span class="line">    //标题</span><br><span class="line">    title : &#123;</span><br><span class="line">        show:true,//显示策略，默认值true,可选为：true（显示） | false（隐藏）</span><br><span class="line">        text: &apos;主标题&apos;,//主标题文本，&apos;\n&apos;指定换行</span><br><span class="line">        link:&apos;&apos;,//主标题文本超链接,默认值true</span><br><span class="line">        target: null,//指定窗口打开主标题超链接，支持&apos;self&apos; | &apos;blank&apos;，不指定等同为&apos;blank&apos;（新窗口）</span><br><span class="line">        subtext: &apos;副标题&apos;,//副标题文本，&apos;\n&apos;指定换行</span><br><span class="line">        sublink: &apos;&apos;,//副标题文本超链接</span><br><span class="line">        subtarget: null,//指定窗口打开副标题超链接，支持&apos;self&apos; | &apos;blank&apos;，不指定等同为&apos;blank&apos;（新窗口）</span><br><span class="line">        x:&apos;center&apos;//水平安放位置，默认为&apos;left&apos;，可选为：&apos;center&apos; | &apos;left&apos; | &apos;right&apos; | &#123;number&#125;（x坐标，单位px）</span><br><span class="line">        y: &apos;top&apos;,//垂直安放位置，默认为top，可选为：&apos;top&apos; | &apos;bottom&apos; | &apos;center&apos; | &#123;number&#125;（y坐标，单位px）</span><br><span class="line">        textAlign: null,//水平对齐方式，默认根据x设置自动调整，可选为： left&apos; | &apos;right&apos; | &apos;center</span><br><span class="line">        backgroundColor: &apos;rgba(0,0,0,0)&apos;,//标题背景颜色，默认&apos;rgba(0,0,0,0)&apos;透明</span><br><span class="line">        borderColor: &apos;#ccc&apos;,//标题边框颜色,默认&apos;#ccc&apos;</span><br><span class="line">        borderWidth: 0,//标题边框线宽，单位px，默认为0（无边框）</span><br><span class="line">        padding: 5,//标题内边距，单位px，默认各方向内边距为5，接受数组分别设定上右下左边距</span><br><span class="line">        itemGap: 10,//主副标题纵向间隔，单位px，默认为10</span><br><span class="line">        textStyle: &#123;//主标题文本样式&#123;&quot;fontSize&quot;: 18,&quot;fontWeight&quot;: &quot;bolder&quot;,&quot;color&quot;: &quot;#333&quot;&#125;</span><br><span class="line">            fontFamily: &apos;Arial, Verdana, sans...&apos;,</span><br><span class="line">            fontSize: 12,</span><br><span class="line">            fontStyle: &apos;normal&apos;,</span><br><span class="line">            fontWeight: &apos;normal&apos;,</span><br><span class="line">        &#125;,</span><br><span class="line">        subtextStyle: &#123;//副标题文本样式&#123;&quot;color&quot;: &quot;#aaa&quot;&#125;</span><br><span class="line">            fontFamily: &apos;Arial, Verdana, sans...&apos;,</span><br><span class="line">            fontSize: 12,</span><br><span class="line">            fontStyle: &apos;normal&apos;,</span><br><span class="line">            fontWeight: &apos;normal&apos;,</span><br><span class="line">        &#125;,</span><br><span class="line">        zlevel: 0,//一级层叠控制。默认0,每一个不同的zlevel将产生一个独立的canvas，相同zlevel的组件或图标将在同一个canvas上渲染。zlevel越高越靠顶层，canvas对象增多会消耗更多的内存和性能，并不建议设置过多的zlevel，大部分情况可以通过二级层叠控制z实现层叠控制。</span><br><span class="line">        z: 6,//二级层叠控制，默认6,同一个canvas（相同zlevel）上z越高约靠顶层。</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="7-echarts知识点"><a href="#7-echarts知识点" class="headerlink" title="7.echarts知识点"></a>7.echarts知识点</h3><blockquote><p>legend默认不显示某些图例(selected属性)</p></blockquote><ol><li><p>selected属性将目标图例设置为false</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">legend: &#123;</span><br><span class="line">　　show: &apos;&apos;,</span><br><span class="line">　　icon:&quot;circle&quot;,　　//更改图列的默认样式    （ &apos;circle&apos;, &apos;rect&apos;, &apos;roundRect&apos;, &apos;triangle&apos;, &apos;diamond&apos;, &apos;pin&apos;, &apos;arrow&apos;）（全部的图例类型改变）</span><br><span class="line">　　selected:&#123;</span><br><span class="line">　　　　&quot;上期增长率&quot;:false  //图例为‘上期增长率’的一项默认置灰</span><br><span class="line">　　　　&quot;同比增长率&quot;:false  //图例为‘同比增长率’的一项默认置灰</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br></li><li><p>图例的列表布局与文本对齐方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">legend: &#123;</span><br><span class="line">    orient:&apos;horizontal&apos; 或 &apos;vertical&apos;  // 图例列表的布局朝向。</span><br><span class="line">    align: &apos;auto&apos;或 &apos;left&apos; 或&apos;right&apos;   // 图例标记和文本的对齐</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是legend.align由right变为left的效果<br><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/demo.png" alt=""></p><br></li><li><p>legend的其它参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">legend: &#123;</span><br><span class="line">    orient: &apos;vertical&apos;,</span><br><span class="line">    x:&apos;right&apos;,      //可设定图例在左、右、居中</span><br><span class="line">    y:&apos;center&apos;,     //可设定图例在上、下、居中</span><br><span class="line">    padding:[0,50,0,0],   //可设定图例[距上方距离，距右方距离，距下方距离，距左方距离]</span><br><span class="line">    data: [&apos;直接访问&apos;,&apos;微信&apos;,&apos;百度&apos;,&apos;其他文章&apos;,&apos;网页&apos;]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>①x : 可以设定图例在—-左（left）、右（right）、居中（center）、填写数字（如:100px）<br>②y : 可以设定图例在—-上（top）、下（bottom）、居中（center）、填写数字（如:100px）<br>③另外，可使用padding:<br>padding:[0,50,0,0] [（距离上方距离），（距离右方距离）、（距离下方距离）、（距离左方距离）]</p><br></li><li><p>series 系列列表。每个系列通过 type 决定自己的图表类型</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">series: [&#123;</span><br><span class="line">    name: &apos;邮件营销&apos;, // 鼠标放在折线点上显示的名称</span><br><span class="line">    type: &apos;line&apos;,</span><br><span class="line">    stack: &apos;总量&apos;,</span><br><span class="line">    symbol:&apos;arrow&apos;, // 折线点样式：&apos;circle&apos;, &apos;rect&apos;, &apos;roundRect&apos;, &apos;triangle&apos;, &apos;diamond&apos;, &apos;pin&apos;, &apos;arrow&apos;</span><br><span class="line">    symbolSize:15,  // 折线点的大小</span><br><span class="line">    cursor:&apos;pointer&apos;, // 设置鼠标停置在图表上的显示样式</span><br><span class="line">    smooth:true,      // 设置后折现会变得平滑</span><br><span class="line">    itemStyle: &#123;  // 设置折线样式</span><br><span class="line">         normal: &#123;</span><br><span class="line">             color: &quot;#386db3&quot;,//折线点的颜色</span><br><span class="line">             lineStyle: &#123;color: &quot;#386db3&quot;//折线的颜色</span><br><span class="line">        &#125;&#125;,</span><br><span class="line">    data: [120, 132, 101, 134, 90, 230, 210]</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        name: &apos;联盟广告&apos;,</span><br><span class="line">        type: &apos;line&apos;,</span><br><span class="line">        stack: &apos;总量&apos;,</span><br><span class="line">        data: [220, 182, 191, 234, 290, 330, 310]</span><br><span class="line">    &#125;,&#123;&#125;,&#123;&#125;...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>series数据集：是一个数组，表示可以在一张表上展示多个折线图<br>type：表示图表类型。<br>stack:折线图堆叠的重要参数。只要将stack的值设置不相同，两个图形就不会堆叠了<br><br></p><ol start="5"><li>x，y轴的数据倾斜<br><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/20200509090103.png" alt="效果图"></fancybox><br><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/20200509085925.png" alt="原理图"></fancybox></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">xAxis: &#123;</span><br><span class="line">    type: &apos;category&apos;,</span><br><span class="line">    data: [&apos;Mon&apos;, &apos;Tue&apos;, &apos;Wed&apos;, &apos;Thu&apos;, &apos;Fri&apos;, &apos;Sat&apos;, &apos;Sun&apos;],</span><br><span class="line">    axisLabel:&#123;</span><br><span class="line">        // 设置坐标轴刻度数据旋转</span><br><span class="line">        rotate:60</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><ol start="6"><li>关于x轴，y轴的xAxis，yAxis的使用说明</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">xAxis : [&#123;</span><br><span class="line">      type : &apos;category&apos;,   </span><br><span class="line">     // type:坐标轴类型。</span><br><span class="line">     // [ default: &apos;category&apos; ]</span><br><span class="line">     /*可选：</span><br><span class="line">     1.&apos;value&apos; 数值轴，适用于连续数据；</span><br><span class="line">     2.&apos;category&apos; 类目轴，适用于离散的类目数据，为该类型时必须通过 data 设置类目数据； </span><br><span class="line">     3.&apos;time&apos; 时间轴，适用于连续的时序数据，与数值轴相比时间轴带有时间的格式化，在刻度计算上也有所不同，例如会根据跨度的范围来决定使用月，星期，日还是小时范围的刻度；</span><br><span class="line">     4.&apos;log&apos; 对数轴。适用于对数数据。*/</span><br><span class="line">    data : [&apos;上海&apos;,&apos;北京&apos;], //x轴下面的数据</span><br><span class="line">    axisTick: &#123;</span><br><span class="line">        show: false,  //是否显示网状线 默认为true</span><br><span class="line">        alignWithLabel: true</span><br><span class="line">    &#125;,</span><br><span class="line">    //用于设置x下面的字体</span><br><span class="line">    axisLabel:&#123;</span><br><span class="line">        show:true,  //这里的show用于设置是否显示x轴下的字体 默认为true</span><br><span class="line">　　　　 interval:0,  //可以设置成 0 强制显示所有标签（即类目category）。如果设置为 1，表示『隔一个标签显示一个标签』，如果值为 2，表示隔两个标签显示一个标签，以此类推。</span><br><span class="line">        rotate: 60   // 坐标轴刻度旋转</span><br><span class="line">        textStyle:&#123;   //textStyle里面写x轴下的字体的样式</span><br><span class="line">            color:&apos;#333&apos;,</span><br><span class="line">            fontSize:13</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    axisLine:&#123;</span><br><span class="line">        show:true,  //这里的show用于设置是否显示x轴那一条线 默认为true</span><br><span class="line">        lineStyle:&#123; //lineStyle里面写x轴那一条线的样式</span><br><span class="line">            color:&apos;#6FC6F3&apos;,</span><br><span class="line">            width:2,    //轴线的粗细 我写的是2 最小为0，值为0的时候线隐藏</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>yAxis属性代表echarts图表的y轴，样式设置方式与x轴的方式是一样，就是设置的属性会有所差异</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">yAxis:[&#123;</span><br><span class="line">    min:0, //y轴的最小值</span><br><span class="line">    max:100, //y轴最大值 </span><br><span class="line">    interval:20, //值之间的间隔</span><br><span class="line">    //上面的三个值可以根据自己需求随意设置 不设置时会根据图中的值自动生成相应的值</span><br><span class="line">   </span><br><span class="line">   type:&apos;value&apos;,</span><br><span class="line">   /* type坐标轴类型:[ default: &apos;value&apos; ]</span><br><span class="line">　　　　可选：1.&apos;value&apos; 数值轴，适用于连续数据。x</span><br><span class="line">　　　　2.&apos;category&apos; 类目轴，适用于离散的类目数据，为该类型时必须通过 data 设置类目数据。</span><br><span class="line">       3.&apos;time&apos; 时间轴，适用于连续的时序数据，与数值轴相比时间轴带有时间的格式化，在刻度计算上也有所不同，例如会根据跨度的范围来决定使用月，星期，日还是小时范围的刻度。</span><br><span class="line">       4.&apos;log&apos; 对数轴。适用于对数数据。*/</span><br><span class="line">    splitLine:&#123;show:false&#125;, //去除网状线 默认为true</span><br><span class="line">    //用于设置y轴的字体</span><br><span class="line">    axisLabel:&#123;</span><br><span class="line">        show:true,  //这里的show用于设置是否显示y轴下的字体 默认为true</span><br><span class="line">        rotate: 60  // 设置坐标轴数据旋转大小，Number类型</span><br><span class="line">        textStyle:&#123;   //textStyle里面写y轴下的字体的样式</span><br><span class="line">           color:&apos;#333&apos;,</span><br><span class="line">           fontSize:13</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    //用于设置y轴的那一条线</span><br><span class="line">    axisLine:&#123;</span><br><span class="line">           show:true,  //这里的show用于设置是否显示y轴那一条线 默认为true</span><br><span class="line">           lineStyle:&#123; //lineStyle里面写y轴那一条线的样式</span><br><span class="line">             color:&apos;#6FC6F3&apos;,</span><br><span class="line">             width:2,    //轴线的粗细 我写的是2 最小为0，值为0的时候线隐藏</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><h3 id="8-Echarts解决的实际问题"><a href="#8-Echarts解决的实际问题" class="headerlink" title="8.Echarts解决的实际问题"></a>8.Echarts解决的实际问题</h3><ul><li><input checked="" disabled="" type="checkbox"> x轴xAxis配置<ul><li><input checked="" disabled="" type="checkbox"> x轴显示全部文字，强制显示</li></ul></li><li><input disabled="" type="checkbox"> 改善项目</li></ul><ol><li>x轴显示全部文字，强制显示（参考<a href="https://blog.csdn.net/zm_miner/article/details/78321254" target="_blank" rel="noopener">Echarts x轴文本内容太长的几种解决方案</a>）</li></ol><p>&nbsp;&nbsp;&nbsp;&nbsp;问题描述：当我们做一个月度报表时，展示1~12月份的数据，在<strong>某些分辨率较低的PC，mobile设备</strong>上，Echarts就会自适应调整，就有可能无法完全显示，比如只显示1，3，5，…,11月份数据，那这时我们想要完全展示怎么办呢？</p><ul><li>显示全部文字，强制显示</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">xAxis: &#123;</span><br><span class="line">    data: [&quot;衬衫11111&quot;,&quot;羊毛二二&quot;,&quot;雪纺衫111&quot;,&quot;裤子111&quot;,&quot;高跟鞋11&quot;,&quot;袜子111&quot;],//x轴中的数据</span><br><span class="line">    name:&quot;123&quot;,//坐标轴名称。</span><br><span class="line">    nameLocation:&apos;end&apos;,//坐标轴名称显示位置。</span><br><span class="line">    axisLabel : &#123;//坐标轴刻度标签的相关设置。</span><br><span class="line">        interval:0, //强制显示文字</span><br><span class="line">        show: true,</span><br><span class="line">        textStyle: &#123;</span><br><span class="line">            color: &apos;black&apos;,</span><br><span class="line">            fontSize:10,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>文本字体倾斜</li><li>换行显示</li><li>文本文字竖直显示</li><li>隔一个换行</li></ul><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li>Echarts图例位置 - legend属性：<a href="https://blog.csdn.net/woteafuck/article/details/91986313" target="_blank" rel="noopener">https://blog.csdn.net/woteafuck/article/details/91986313</a></li><li>ECharts图例组件配置: <a href="https://www.w3cschool.cn/echarts_tutorial/echarts_tutorial-vnga2cgx.html" target="_blank" rel="noopener">https://www.w3cschool.cn/echarts_tutorial/echarts_tutorial-vnga2cgx.html</a></li><li>Echarts中的<strong>ROOT_PATH</strong>都表示：<a href="https://echarts.apache.org/examples/" target="_blank" rel="noopener">https://echarts.apache.org/examples/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> echarts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python全栈系列章节更新（五）：并发编程~多线程</title>
      <link href="/2019/12/04/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E4%BA%94%EF%BC%89/"/>
      <url>/2019/12/04/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>线程顾名思义，就是一条流水线工作的过程（流水线的工作需要电源，电源就相当于cpu），而一条流水线必须属于一个车间，一个车间的工作过程是一个进程，车间负责把资源整合到一起，是一个资源单位，而一个车间内至少有一条流水线。<br>所以，<font color=#ef4136>进程只是用来把资源集中到一起（进程只是一个资源单位，或者说资源调度集合），而线程才是cpu上的执行单位</font></p><blockquote><p>1.线程与进程的区别<br>2.为何会选择多线程<br>3.创建多线程的方式<br>4.线程对象的属性和方法<br>5.守护线程<br>6.线程池与进程池<br>7.多线程，到底该设置多少个线程？</p></blockquote><a id="more"></a><h3 id="1-线程与进程的区别"><a href="#1-线程与进程的区别" class="headerlink" title="1.线程与进程的区别"></a>1.线程与进程的区别</h3><p>1、每启动一个进程，进程内都至少有一个线程。</p><p>　　2、进程本身只是一个资源调度集合，并不能真正执行，进程内开的线程才是真正的运行单位。</p><p>　　3、一个进程内可以启动多个线程，同一进程内线程间共享资源。</p><p><font color=#ef4136>4、启动线程的开销远远小于开进程。</font></p><p>　　5、线程可以相当程度控制相同进程下的线程，进程只能控制其子进程。</p><p>　　6、对主线程的更改（取消、优先级更改等）可能会进程的其他线程的行为；对父进程的修改则不会影响子进程。</p><p>   7、进程之间是竞争关系，线程之间是协作关系 </p><h3 id="2-为何会选择多线程？"><a href="#2-为何会选择多线程？" class="headerlink" title="2.为何会选择多线程？"></a>2.为何会选择多线程？</h3><ol><li><p>同一个进程内的多个线程共享该进程内的地址资源</p></li><li><p>线程比进程更轻量级，线程比进程更容易创建可撤销</p></li></ol><p><strong>join方法：join 会卡住主线程，并让当前已经 start 的子线程继续运行，直到调用.join的这个线程运行完毕</strong></p><h3 id="3-创建线程的方式"><a href="#3-创建线程的方式" class="headerlink" title="3.创建线程的方式"></a>3.创建线程的方式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time, random</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">piao</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'%s piaoing'</span> % name)</span><br><span class="line">    time.sleep(random.randrange(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line">    print(<span class="string">'%s piao end'</span> % name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t1 = Thread(target=piao, args=(<span class="string">'egon'</span>, ))</span><br><span class="line">    t1.start()  <span class="comment"># 主线程向操作系统发信号，又开了一个线程</span></span><br><span class="line">    print(<span class="string">"主线程"</span>)   <span class="comment"># 执行角度看是主线程，从资源角度看是主进程</span></span><br><span class="line"><span class="comment"># 这个程序总体是一个进程、两个线程</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">egon piaoing</span></span><br><span class="line"><span class="string">主线程</span></span><br><span class="line"><span class="string">egon piao end</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h3 id="4-线程对象的属性和方法"><a href="#4-线程对象的属性和方法" class="headerlink" title="4.线程对象的属性和方法"></a>4.线程对象的属性和方法</h3><blockquote><p>4.1 Thread实例对象的方法</p></blockquote><p>isAlive():返回线程是否活动的<br>getName():返回线程名<br>setName():设置线程名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, currentThread   <span class="comment"># 得到线程对象的方法</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> active_count    <span class="comment"># 得到活跃进程数</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> enumerate   <span class="comment"># 返回一个包含正在运行的线程的list。正在运行指线程启动后、结束前，不包括启动前和终止后的线程。</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要注意的是线程没有子线程的概念，线程都是属于进程的</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"%s is running"</span> % currentThread().getName())   <span class="comment"># 对象下有一个getName()方法</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">"%s is done"</span> % currentThread().getName())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># getName()方法返回线程名</span></span><br><span class="line">    t = Thread(target=task, name=<span class="string">'子线程1'</span>)</span><br><span class="line">    t.start()</span><br><span class="line">    print(<span class="string">"主进程"</span>, currentThread().getName())</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    子线程1 is running</span></span><br><span class="line"><span class="string">    主进程 MainThread</span></span><br><span class="line"><span class="string">    子线程1 is done</span></span><br><span class="line"><span class="string">    """</span></span><br></pre></td></tr></table></figure><h3 id="5-守护线程"><a href="#5-守护线程" class="headerlink" title="5.守护线程"></a>5.守护线程</h3><p>守护线程守护主线程，等到主线程死了才会被销毁。在有其他线程的情况下，主线程代码运行完后，等其他非守护线程结束，守护线程才会死掉。</p><p>　　无论是进程还是线程，都遵循：守护xxx会等待主xxx运行完毕后被销毁。需要强调的是：运行完毕并非终止运行。运行完毕的真正含义：<br><font color=#ef4136><br>　　1、对主进程来说，运行完毕指的是主进程代码运行完毕。</p><p>　　2、对主线程来说，运行完毕指的是主线程所在的进程内所有非守护线程统统运行完毕，主线程才能运行完毕。</font></p><h3 id="6-进程池和线程池"><a href="#6-进程池和线程池" class="headerlink" title="6.进程池和线程池"></a>6.进程池和线程池</h3><p>进程池和线程池的接口一模一样，用法也一样。池就是要对数目加以限制，保证机器一个可承受的范围，以一个健康的状态保证它的运行</p><p>concurrent.futures   模块提供了高度封装的异步调用接口<br>ThreadPoolExecutor： 线程池，提供异步调用<br>ProcessPoolExecutor: 进程池，提供异步调用</p><p>基本方法：<br>1、submit(fn, <em>args, *</em>kwargs)<br>异步提交任务</p><p>2、map(func, *iterables, timeout=None, chunksize=1)<br>取代for循环submit的操作</p><p>3、shutdown(wait=True)<br>相当于进程池的pool.close()+pool.join()操作<br>wait=True，等待池内所有任务执行完毕回收完资源后才继续<br>wait=False，立即返回，并不会等待池内的任务执行完毕<br>但不管wait参数为何值，整个程序都会等到所有任务执行完毕<br>submit和map必须在shutdown之前</p><p>4、result(timeout=None)<br>取得结果</p><p>5、add_done_callback(fn)<br>回调函数</p><blockquote><p>进程池</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ProcessPoolExecutor,ThreadPoolExecutor</span><br><span class="line"><span class="keyword">import</span> os, time, random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">"name: %s pid: %s run"</span> % (name, os.getpid()))</span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    pool = ProcessPoolExecutor(<span class="number">4</span>)    <span class="comment"># 指定进程池大小，最大进程数，如果不指定默认是CPU核数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        <span class="string">"""从始至终四个进程解决这10个任务，谁没事了接新任务"""</span></span><br><span class="line">        pool.submit(task, <span class="string">'egon%s'</span> %i)   <span class="comment"># 提交任务的方式————异步调用：提交完任务，不用在原地等任务执行拿到结果。</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"主进程"</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">name: egon0 pid: 12445 run</span></span><br><span class="line"><span class="string">name: egon1 pid: 12444 run</span></span><br><span class="line"><span class="string">name: egon2 pid: 12446 run</span></span><br><span class="line"><span class="string">name: egon3 pid: 12447 run</span></span><br><span class="line"><span class="string">主进程</span></span><br><span class="line"><span class="string">name: egon4 pid: 12445 run</span></span><br><span class="line"><span class="string">name: egon5 pid: 12444 run</span></span><br><span class="line"><span class="string">name: egon6 pid: 12446 run</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><blockquote><p>shutdown()方法的使用</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ProcessPoolExecutor,ThreadPoolExecutor</span><br><span class="line"><span class="keyword">import</span> os, time, random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">"name: %s pid: %s run"</span> % (name, os.getpid()))</span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    pool = ProcessPoolExecutor(<span class="number">4</span>)    <span class="comment"># 指定进程池大小，最大进程数，如果不指定默认是CPU核数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        <span class="string">"""从始至终四个进程解决这10个任务，谁没事了接新任务"""</span></span><br><span class="line">        pool.submit(task, <span class="string">'egon%s'</span> %i)   <span class="comment"># 提交任务的方式————异步调用：提交完任务，不用在原地等任务执行拿到结果。</span></span><br><span class="line"></span><br><span class="line">    pool.shutdown()   <span class="comment"># 把提交任务入口关闭，默认参数wait=True；同时还进行了pool.join()操作，等任务提交结束，再结束主进程</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"主进程"</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">name: egon0 pid: 12502 run</span></span><br><span class="line"><span class="string">name: egon1 pid: 12503 run</span></span><br><span class="line"><span class="string">....</span></span><br><span class="line"><span class="string">name: egon9 pid: 12505 run</span></span><br><span class="line"><span class="string">主进程</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h3 id="7-多线程，到底该设置多少个线程？"><a href="#7-多线程，到底该设置多少个线程？" class="headerlink" title="7.多线程，到底该设置多少个线程？"></a>7.多线程，到底该设置多少个线程？</h3><p>那我们如何分配线程？我们提供一个公式：</p><p><font color=#d71345>最佳线程数目 = （（线程等待时间+线程CPU时间）/线程CPU时间 ）* CPU数目</font></p><p>备注：这个公式也是前辈们分享的，当然之前看了淘宝前台系统优化实践的文章，和上面的公式很类似，不过在CPU数目那边，他们更细化了，上面的公式只是参考。不过不管什么公式，最终还是在生产环境中运行后，再优化调整。</p><p>我们继续上面的任务，我们的服务器CPU核数为4核，一个任务线程cpu耗时为20ms，线程等待（网络IO、磁盘IO）耗时80ms，那最佳线程数目：( 80 + 20 )/20 * 4 = 20。也就是设置20个线程数最佳。</p><p>从这个公式上面我们就得出，线程的等待时间越大，线程数就要设置越大，这个正好符合我们上面的分析，可提升CPU利用率。那从另一个角度上面说，线程数设置多大，是根据我们自身的业务的，需要自己去压力测试，设置一个合理的数值。</p><blockquote><p>基础常规标准</p></blockquote><p>我们可以尝试去猜想，因为很多业务集中到一个线程池中，不像上面的案例比较简单，事实上业务太多，怎么设置呢？这个就是要去压力测试去调整。不过我们的前辈已经帮我们总结了一个基础的值（最终还是要看运行情况自行调整）</p><p>1、CPU密集型：操作内存处理的业务，一般线程数设置为：CPU核数 + 1 或者 CPU核数*2。核数为4的话，一般设置 5 或 8</p><p>2、IO密集型：文件操作，网络操作，数据库操作，一般线程设置为：cpu核数 / (1-0.9)，核数为4的话，一般设置 40</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql语句关于时间的讨论</title>
      <link href="/2019/12/04/ThinkPHP(%E4%BA%8C)/"/>
      <url>/2019/12/04/ThinkPHP(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<p><font color=#ef4136>进程只是用来把资源集中到一起（进程只是一个资源单位，或者说资源调度集合），而线程才是cpu上的执行单位</font></p><blockquote><p>1.oracle时间和日期的处理<br>2.mysql 查询今天，昨天，本月，今年，本季度，上一年等的sql语句编写</p></blockquote><a id="more"></a><h3 id="1-oracle时间和日期的处理，详情请点击此处"><a href="#1-oracle时间和日期的处理，详情请点击此处" class="headerlink" title="1.oracle时间和日期的处理，详情请点击此处"></a>1.oracle时间和日期的处理，<a href="https://www.cnblogs.com/xuhai/p/9949464.html" target="_blank" rel="noopener">详情请点击此处</a></h3><blockquote><p>1.字符串转换为日期时分秒格式：to_date(字符串, ‘yyyy-mm-dd hh24:mi:ss’)</p></blockquote><p>select to_date(‘20180831154546’, ‘yyyy-mm-dd hh24:mi:ss’) from dual;<br>结果为：2018-08-31 15:45:46</p><blockquote><p>2.获取系统时间</p></blockquote><p>SELECT SYSDATE FROM  dual;  – 系统时间:2019-12-04 21:40:15</p><p>SELECT SYSTIMESTAMP FROM  dual;  – 当前系统时间戳:2019-12-04 21:40:41.328000 +08:00</p><blockquote><p>3.时间类型与字符串相互转换</p></blockquote><p>字符串转换为时间类型：to_date(字符串, ‘yyyy-mm-dd hh24:mi:ss’);</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 字符串转时间类型</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">to_date</span>(<span class="string">'2018-08-23 00:00:00'</span>,<span class="string">'yyyy-mm-dd hh24:mi:ss'</span>) <span class="keyword">FROM</span> dual;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 时间类型转字符串</span></span><br><span class="line"><span class="keyword">select</span> to_char(<span class="keyword">sysdate</span>,<span class="string">'yyyy-mm-dd hh24:mi:ss'</span>) <span class="keyword">from</span> dual;</span><br><span class="line"><span class="keyword">select</span> to_char(<span class="keyword">sysdate</span>,<span class="string">'yyyy-mm-dd'</span>) <span class="keyword">from</span> dual;</span><br><span class="line">``` </span><br><span class="line">&gt; 4.日期的加减</span><br><span class="line"></span><br><span class="line">如果时间要进行加减，和现在的时间或者某个目标时间进行比较。</span><br><span class="line"></span><br><span class="line">to_date(字符串, 'yyyy-mm-dd hh24:mi:ss')+1</span><br><span class="line"></span><br><span class="line">后面为1的时候就是加1天，2的时候就是加两天，如果加一个小时，就是为1/24，如果加一分钟，就是为1/24/60,...</span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line"><span class="comment">-- 案例：</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">to_date</span>(<span class="string">'2019-02-18 23:59:00'</span>,<span class="string">'yyyy-mm-dd hh24-mi-ss'</span>)+<span class="number">1</span> <span class="keyword">from</span> dual;</span><br><span class="line"><span class="comment">-- 加一天 2019-02-19 23:59:00</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">to_date</span>(<span class="string">'2019-02-18 23:59:00'</span>,<span class="string">'yyyy-mm-dd hh24-mi-ss'</span>)+<span class="number">1</span>/<span class="number">24</span> <span class="keyword">from</span> dual;</span><br><span class="line"><span class="comment">-- 加一个小时 2019-02-19 00:59:00</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">to_date</span>(<span class="string">'2019-02-18 23:59:00'</span>,<span class="string">'yyyy-mm-dd hh24-mi-ss'</span>)+<span class="number">1</span>/<span class="number">24</span>/<span class="number">60</span> <span class="keyword">from</span> dual;</span><br><span class="line"><span class="comment">-- 加一分钟 2019-02-19 00:00:00</span></span><br></pre></td></tr></table></figure><h3 id="2-MySQL的时间与日期的处理"><a href="#2-MySQL的时间与日期的处理" class="headerlink" title="2.MySQL的时间与日期的处理"></a>2.MySQL的时间与日期的处理</h3><blockquote><p>mysql 查询今天，昨天，本月，今年，本季度，上一年等的sql语句编写</p></blockquote><p>– 今天<br>SELECT 【想要的字段】 FROM 【表名】 WHERETO_DAYS(【时间字段名】) =TO_DAYS(now());</p><p>– 昨天<br>SELECT 【想要的字段】 FROM 【表名】 WHERE TO_DAYS( NOW( ) ) - TO_DAYS(【时间字段名】) = 1;</p><p>– 近七天<br>SELECT 【想要的字段】 FROM 【表名】 WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) &lt;=DATE(【时间字段名】);</p><p>– 本周内<br>SELECT 【想要的字段】 FROM 【表名】 WHERE YEARWEEK(DATE_FORMAT(【时间字段名】,’%Y-%m-%d’)) = YEARWEEK(now());</p><p>– 上一周<br>SELECT 【想要的字段】 FROM 【表名】 WHERE YEARWEEK(DATE_FORMAT(【时间字段名】,’%Y-%m-%d’)) = YEARWEEK(now())-1;</p><p>– 30天内 注意这个不是本月是从当天起向前推30天<br>SELECT 【想要的字段】 FROM 【表名】 WHERE DATE_SUB(CURDATE(), INTERVAL 30 DAY) &lt;=DATE(【时间字段名】);</p><p>– 本月<br>SELECT 【想要的字段】 FROM 【表名】 WHERE DATE_FORMAT( 【时间字段名】, ‘%Y%m’ ) = DATE_FORMAT( CURDATE( ) , ‘%Y%m’ );</p><p>– 上一个月<br>SELECT 【想要的字段】 FROM 【表名】 WHERE PERIOD_DIFF( DATE_FORMAT( now( ) , ‘%Y%m’ ) , DATE_FORMAT( 【时间字段名】, ‘%Y%m’ ) ) =1;</p><p>– 本季度<br>SELECT 【想要的字段】 FROM 【表名】 WHERE QUARTER(【时间字段名】)=QUARTER(now());</p><p>– 上一季度<br>SELECT 【想要的字段】 FROM 【表名】 WHERE QUARTER(【时间字段名】)=QUARTER(DATE_SUB(now(),interval 1 QUARTER));</p><p>– 本年度<br>SELECT 【想要的字段】 FROM 【表名】 WHERE YEAR(【时间字段名】)=YEAR(NOW());</p><p>– 上一年度<br>SELECT 【想要的字段】 FROM 【表名】 WHERE YEAR(【时间字段名】)=YEAR(date_sub(now(),interval 1 YEAR)); </p><h3 id="未完待续。。。"><a href="#未完待续。。。" class="headerlink" title="- 未完待续。。。"></a>- 未完待续。。。</h3>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python全栈系列章节更新（四）：并发编程~多进程</title>
      <link href="/2019/12/04/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%EF%BC%88%E5%A4%9A%E8%BF%9B%E7%A8%8B%EF%BC%89/"/>
      <url>/2019/12/04/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%EF%BC%88%E5%A4%9A%E8%BF%9B%E7%A8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="1-进程与程序"><a href="#1-进程与程序" class="headerlink" title="1.进程与程序"></a>1.进程与程序</h2><p>程序仅仅是一堆代码，进程指的是程序的运行过程<br>注意：同一个程序执行两次，也是两个进程<br>进程：正在进行的一个过程，是一个任务，或者说是一个资源调度的集合。</p><h2 id="2-并发与并行"><a href="#2-并发与并行" class="headerlink" title="2.并发与并行"></a>2.并发与并行</h2><p>无论是并行还是并发，在用户看来都是’同时’运行的，不管是进程还是线程，都只是一个任务而已，真实干活的是cpu，cpu来做这些任务，而<font color=#1d953f>一个cpu同一时刻只能执行一个任务。</font><br><font color=#1d953f><br>　　一、并发：伪并行，即看起来多个进程像在同时运行。单个cpu+多道技术可实现并发。</p><p>　　二、并行：多个进程同时运行，只有具备多个cpu才能实现。</font><br><fancybox><img src="https://images2018.cnblogs.com/blog/1311506/201805/1311506-20180506164225499-509092524.png" alt="并发，并行，串行"></fancybox></p><h2 id="3-多进程的创建：Process类"><a href="#3-多进程的创建：Process类" class="headerlink" title="3.多进程的创建：Process类"></a>3.多进程的创建：Process类</h2><p><font color=#1d953f>注意：在windows中Process()必须放到# if __name__ == &#39;__main__&#39;:下</font><br>进程创建格式：target表示函数名，args=(参数一,参数二,…,)，参数最后一定要保留一个逗号<br>p = Process(target=task, args=(‘子进程1’,))</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">"%s is running"</span> % name)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">"%s is done"</span> % name)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 创建进程    </span></span><br><span class="line">    p = Process(target=task, args=(<span class="string">'子进程1'</span>,))  <span class="comment"># 得到对象</span></span><br><span class="line">    <span class="comment"># 启动进程</span></span><br><span class="line">    p.start()</span><br><span class="line">    print(<span class="string">"这是主进程"</span>)</span><br></pre></td></tr></table></figure><h3 id="3-1-Process类的方法和属性介绍"><a href="#3-1-Process类的方法和属性介绍" class="headerlink" title="3.1 Process类的方法和属性介绍"></a>3.1 Process类的方法和属性介绍</h3><table><thead><tr><th>方法</th><th align="center">详解</th></tr></thead><tbody><tr><td>p.start()：</td><td align="center">启动进程，并调用该子进程中的p.run()</td></tr><tr><td>p.run():</td><td align="center">进程启动时运行的方法，正是它去调用target指定的函数，我们自定义类的类中一定要实现该方法</td></tr><tr><td>p.terminate():</td><td align="center">强制终止进程p，不会进行任何清理操作，如果p创建了子进程，该子进程就成了僵尸进程，使用该方法需要特别小心这种情况。如果p还保存了一个锁那么也将不会被释放，进而导致死锁</td></tr><tr><td>p.is_alive():</td><td align="center">如果p仍然运行，返回True</td></tr><tr><td>p.join([timeout]):</td><td align="center">主线程等待p线程终止（强调：是主线程处于等的状态，而p是处于运行的状态）。timeout是可选的超时时间</td></tr><tr><td>Process属性</td><td align="center">详解</td></tr><tr><td>p.daemon：</td><td align="center">默认值为False，如果设为True，代表p为后台运行的守护进程，当p的父进程终止时，p也随之终止，并且设定为True后，p不能创建自己的新进程，必须在p.start()之前设置</td></tr><tr><td>p.name:</td><td align="center">进程的名称</td></tr><tr><td>p.pid：</td><td align="center">进程的pid</td></tr><tr><td>p.exitcode:</td><td align="center">进程在运行时为None、如果为–N，表示被信号N结束(了解即可)</td></tr><tr><td>p.authkey:</td><td align="center">进程的身份验证键,默认是由os.urandom()随机生成的32字符的字符串</td></tr></tbody></table><h3 id="3-2-进程之间的内存空间是隔离的"><a href="#3-2-进程之间的内存空间是隔离的" class="headerlink" title="3.2 进程之间的内存空间是隔离的"></a>3.2 进程之间的内存空间是隔离的</h3><h3 id="3-3-Process对象的join方法"><a href="#3-3-Process对象的join方法" class="headerlink" title="3.3 Process对象的join方法"></a>3.3 Process对象的join方法</h3><ol><li><p>join方法：优先运行子进程，主进程卡在原地，子进程结束后，运行主进程后面的代码。案例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time, os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'%s is running, parent id is &lt;%s&gt;'</span> % (os.getpid(), os.getppid()))   <span class="comment"># 进程和父进程查看方式</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">"%s is done, parent id is &lt;%s&gt;"</span> % (os.getpid(), os.getppid()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p = Process(target=task, )</span><br><span class="line">    p.start()</span><br><span class="line"></span><br><span class="line">    p.join()   <span class="comment"># 优先运行子进程，主进程卡在原地</span></span><br><span class="line">    print(<span class="string">'主进程'</span>, os.getpid(), <span class="string">'pycharm ID'</span>, os.getppid())</span><br><span class="line">    print(p.pid)  <span class="comment"># 子进程运行完，变为僵尸进程，主进程仍能够查到子进程的pid，当主进程结束后，所有僵尸子进程将被丢掉。</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">is running, parent id is &lt;827&gt;</span></span><br><span class="line"><span class="string">is done, parent id is &lt;827&gt;</span></span><br><span class="line"><span class="string">主进程 827 pycharm ID 504</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure></li><li><p>使用join方法实现并发执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(name ,n)</span>:</span></span><br><span class="line">    print(<span class="string">'%s is running'</span> % name)</span><br><span class="line">    time.sleep(n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    start = time.time()</span><br><span class="line">    p1 = Process(target=task, args=(<span class="string">"子进程1"</span>,<span class="number">5</span>,))</span><br><span class="line">    p2 = Process(target=task, args=(<span class="string">"子进程2"</span>,<span class="number">3</span>,))</span><br><span class="line">    p3 = Process(target=task, args=(<span class="string">"子进程3"</span>,<span class="number">2</span>,))</span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    p3.start()</span><br><span class="line">    <span class="comment"># 再添加join函数前，主程序的执行输出次序是完全随机的，需要加join()保证主程序等到在子进程之后执行完成</span></span><br><span class="line">    p1.join()</span><br><span class="line">    p2.join()</span><br><span class="line">    p3.join()</span><br><span class="line">    <span class="comment"># 以上并非串行执行，实际是并发执行，只是约束了主程序要等在子程序后结束</span></span><br><span class="line">    <span class="comment"># print('主进程', os.getpid(), 'pycharm ID', os.getppid())</span></span><br><span class="line">    print(<span class="string">"主进程"</span>, (time.time()-start))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">子进程1 is running</span></span><br><span class="line"><span class="string">子进程2 is running</span></span><br><span class="line"><span class="string">子进程3 is running</span></span><br><span class="line"><span class="string">主进程 5.010260343551636   # 主程序只等了5秒，说明确实是并发执行</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure></li><li><p>使用join方法实现多进程串行执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(name ,n)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    p1 = Process(target=task, args=(<span class="string">"子进程1"</span>,<span class="number">5</span>))</span><br><span class="line">    p2 = Process(target=task, args=(<span class="string">"子进程2"</span>,<span class="number">3</span>))</span><br><span class="line">    p3 = Process(target=task, args=(<span class="string">"子进程3"</span>,<span class="number">2</span>))</span><br><span class="line">    <span class="comment"># 串行执行</span></span><br><span class="line">    p1.start()</span><br><span class="line">    p1.join()</span><br><span class="line">    p2.start()</span><br><span class="line">    p2.join()</span><br><span class="line">    p3.start()</span><br><span class="line">    p3.join()</span><br><span class="line">    print(<span class="string">"我是主进程"</span>)</span><br></pre></td></tr></table></figure></li></ol><p>4.守护进程<br>主进程创建守护进程：<br>　　一：守护进程会在主进程代码执行结束后就终止，主进程代码运行结束，守护进程立即死亡</p><p>　　二：守护进程内无法再开启子进程,否则抛出异常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    p = Process(target=task, args=(&apos;子进程&apos;, ))</span><br><span class="line">    p.daemon=True    # 守护进程一定要在进程开启前,即p.start()开启前设置</span><br><span class="line">    p.start()</span><br><span class="line">    print(&quot;我是主进程&quot;)</span><br></pre></td></tr></table></figure><h2 id="4-互斥锁"><a href="#4-互斥锁" class="headerlink" title="4.互斥锁"></a>4.互斥锁</h2><p>进程之间数据不共享,但是共享同一套文件系统,所以访问同一个文件,或同一个打印终端,是没有问题的,而共享带来的是竞争，竞争带来的结果就是错乱<br>互斥锁的原理：就是把并发改成穿行，降低了效率，但保证了数据安全不错乱</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def task():</span><br><span class="line">    # 获得锁</span><br><span class="line">    lock.acquire()</span><br><span class="line">    ...</span><br><span class="line">    # 释放锁</span><br><span class="line">    lock.release()</span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    lock = Lock()   # 只实例化一次，并传给子进程，要保证所有进程用同一把锁</span><br><span class="line">    for i in range(3):</span><br><span class="line">        p = Process(target=task, args=(&apos;进程%s&apos; % i, lock,))  # 传递给子进程的锁</span><br><span class="line">        p.start()</span><br></pre></td></tr></table></figure><h2 id="5-队列"><a href="#5-队列" class="headerlink" title="5.队列"></a>5.队列</h2><p>进程彼此之间互相隔离，要实现进程间通信（IPC），multiprocessing模块支持两种形式：队列和管道，这两种方式都是使用消息传递的</p><blockquote><p>队列的创建</p></blockquote><p>Queue（maxsize）：创建队列中允许的最大项数</p><blockquote><p>队列的主要方法</p></blockquote><p>q.put(value)方法用以插入数据到队列中。<br>q.get(value)方法可以从队列读取并且删除一个元素。<br>q.empty():调用此方法时q为空则返回True，该结果不可靠，比如在返回True的过程中，如果队列中又加入了项目。<br>q.full()：调用此方法时q已满则返回True，该结果不可靠，比如在返回True的过程中，如果队列中的项目被取走。<br>q.qsize():返回队列中目前项目的正确数量，结果也不可靠，理由同q.empty()和q.full()一样<br>q.close():关闭队列<br>PS:使用q.get()从空队列中再取值时与使用q.put()在队列为满时继续插入数据，都会出现程序卡在原地的结果</p><blockquote><p>队列的使用</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"><span class="comment"># 队列中应该放消息，不应该放大文件大数据</span></span><br><span class="line"><span class="comment"># 队列可以不设置长度，但是队列是受制于内存大小的，不可能无限存放</span></span><br><span class="line">q = Queue(<span class="number">3</span>)  <span class="comment"># 指定队列大小</span></span><br><span class="line">q.put(<span class="string">'hello'</span>)</span><br><span class="line">q.put(&#123;<span class="string">'a'</span>: <span class="number">1</span>&#125;)</span><br><span class="line">q.put([<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,])</span><br><span class="line"></span><br><span class="line">print(q.full())   <span class="comment"># 查看队列是否满了  # True</span></span><br><span class="line"><span class="comment"># q.put(123)    # 队列满了再往里面放时，被锁住，只能在原地卡着。</span></span><br><span class="line"></span><br><span class="line">print(q.get())  <span class="comment"># hello</span></span><br><span class="line">print(q.get())  <span class="comment"># &#123;'a':1&#125;</span></span><br><span class="line">print(q.get())  <span class="comment"># [3,3,3]</span></span><br><span class="line">print(q.empty())   <span class="comment"># 判断队列是否全部清空  # True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(q.get())   # 由于已经空了，程序也卡在原处</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多进程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python全栈系列章节更新（三）：数据库分批次处理和数据库通用连接函数</title>
      <link href="/2019/12/03/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2019/12/03/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p>1.数据库分批次处理:execute,executemany<br>2.数据库通用连接函数<br>3.数据库插入百万级数据优化<br>4.python 一个.py文件如何调用另一个.py文件中的类和函数</p></blockquote><a id="more"></a><h2 id="1-数据库通用连接函数（连接模块视实际数据库决定，大同小异）"><a href="#1-数据库通用连接函数（连接模块视实际数据库决定，大同小异）" class="headerlink" title="1.数据库通用连接函数（连接模块视实际数据库决定，大同小异）"></a>1.数据库通用连接函数（连接模块视实际数据库决定，大同小异）</h2><p>将其封装成一个新的python文件，以便可以重复调用，命名为SqlConnectManage.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> DBUtils <span class="keyword">import</span> PooledDB</span><br><span class="line"><span class="keyword">import</span> pymssql</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sqlserverManager</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 构造函数，初始化连接</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, server, user, password, database, table)</span>:</span></span><br><span class="line">        self.server = server</span><br><span class="line">        self.user = user</span><br><span class="line">        self.password = password</span><br><span class="line">        self.database = database</span><br><span class="line">        self.table = table</span><br><span class="line">        self.conn = <span class="literal">None</span></span><br><span class="line">        self.cursor = <span class="literal">None</span></span><br><span class="line">        self.maxconnections = <span class="number">15</span> <span class="comment"># 设置最大连接数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存数据到SQL server</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connect_database</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.conn = PooledDB(creator=pymssql,</span><br><span class="line">                                 maxconnections=self.maxconnections,</span><br><span class="line">                                 server=self.server,</span><br><span class="line">                                 user=self.user,</span><br><span class="line">                                 password=self.password,</span><br><span class="line">                                 database=self.database,</span><br><span class="line">                                 charset=<span class="string">'utf8'</span>).connection()</span><br><span class="line">            <span class="comment"># 创建游标</span></span><br><span class="line">            self.cursor = self.conn.cursor()</span><br><span class="line">            print(<span class="string">"sql server had connected"</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">"the connect failed:"</span>, e)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dbclose</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.cursor.close()</span><br><span class="line">        self.conn.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dbcommit</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.conn.commit()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(self, sql)</span>:</span></span><br><span class="line">        print(<span class="string">"-----插入数据-----"</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.cursor.execute(sql)</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">'\033[1;31;0m\t4---插入更新失败，msg：\033[0m'</span>, e, sql.replace(<span class="string">"\n"</span>, <span class="string">""</span>))</span><br><span class="line">            self.conn.rollback()</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">executemany</span><span class="params">(self, sql,*args)</span>:</span></span><br><span class="line">        print(<span class="string">"-----插入数据-----"</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.cursor.executemany(sql,*args)</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">'\033[1;31;0m\t4---插入更新失败，msg：\033[0m'</span>, e, sql.replace(<span class="string">"\n"</span>, <span class="string">""</span>))</span><br><span class="line">            self.conn.rollback()</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><br><blockquote><p>MySQL通用封装函数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">===============================================</span></span><br><span class="line"><span class="string">@Project -&gt; File   ：OAPlug -&gt; MySQLHelper.py</span></span><br><span class="line"><span class="string">@IDE    ：PyCharm</span></span><br><span class="line"><span class="string">@Author ：Miss.BadWoman </span></span><br><span class="line"><span class="string">@Date   ：2020/7/4 13：30</span></span><br><span class="line"><span class="string">@Desc   ：MySQL通用连接函数</span></span><br><span class="line"><span class="string">===================================================</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySQLHelper</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, username, password, host, port, database)</span>:</span></span><br><span class="line">        self.username = username</span><br><span class="line">        self.port = port</span><br><span class="line">        self.password = password</span><br><span class="line">        self.host = host</span><br><span class="line">        self.database = database</span><br><span class="line">        self.cursor = <span class="literal">None</span></span><br><span class="line">        self.conn = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mysql_conn</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        连接数据库并创建游标</span></span><br><span class="line"><span class="string">        :return: None</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.conn = pymysql.connect(user=self.username, password=self.password, port=self.port,</span><br><span class="line">                                    host=self.host, charset=<span class="string">"utf8"</span>, database=self.database)</span><br><span class="line">        <span class="comment"># 创建游标,以字典形式返回</span></span><br><span class="line">        self.cursor = self.conn.cursor(cursor=pymysql.cursors.DictCursor)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mysql_select</span><span class="params">(self, sql, *args)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        sql语言执行查询操作，返回单行数据</span></span><br><span class="line"><span class="string">        :param sql:sql语句</span></span><br><span class="line"><span class="string">        :return: rows 字典型列表</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 开始执行sql</span></span><br><span class="line">            self.cursor.execute(sql, *args)</span><br><span class="line">            rows = self.cursor.fetchone()</span><br><span class="line">            <span class="keyword">return</span> rows</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mysql_select_all</span><span class="params">(self, sql, *args)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        sql语言执行查询操作，返回数据集</span></span><br><span class="line"><span class="string">        :param sql:sql语句</span></span><br><span class="line"><span class="string">        :return: rows 字典型列表</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 开始执行sql</span></span><br><span class="line">            self.cursor.execute(sql, *args)</span><br><span class="line">            rows = self.cursor.fetchall()</span><br><span class="line">            <span class="keyword">return</span> rows</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(self, sql, *args)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        sql语言执行插入更新操作</span></span><br><span class="line"><span class="string">        :param sql: sql语句</span></span><br><span class="line"><span class="string">        :param args: 不定数据</span></span><br><span class="line"><span class="string">        :return: None</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        print(<span class="string">"-----插入更新数据-----"</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.cursor.execute(sql, *args)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">'\033[1;31;0m\t4---插入更新失败，msg：\033[0m'</span>, e, sql.replace(<span class="string">"\n"</span>, <span class="string">""</span>))</span><br><span class="line">            self.conn.rollback()</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">executemany</span><span class="params">(self, sql, *args)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        sql语言执行批次插入操作</span></span><br><span class="line"><span class="string">        :param sql: 不管字段为什么类型，占位符统一使用%s,且不能加上引号</span></span><br><span class="line"><span class="string">        :param args: 元组型列表或元组型元组[(1, '张三', '男'),(2, '李四', '女'),]</span></span><br><span class="line"><span class="string">        :return:None</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        print(<span class="string">"-----插入数据-----"</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.cursor.executemany(sql, *args)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">'\033[1;31;0m\t4---插入更新失败，msg：\033[0m'</span>, e, sql.replace(<span class="string">"\n"</span>, <span class="string">""</span>))</span><br><span class="line">            self.conn.rollback()</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">commit</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.conn.commit()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.cursor.close()</span><br><span class="line">        self.conn.close()</span><br></pre></td></tr></table></figure><br><blockquote><p>Oracle通用封装函数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> cx_Oracle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OracleHepler</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, ora_username, ora_password, ora_host, ora_port, ora_sid)</span>:</span></span><br><span class="line">        <span class="string">'''初始化Oracle连接'''</span></span><br><span class="line">        self.db = cx_Oracle.connect(ora_username, ora_password, ora_host + <span class="string">':'</span> + ora_port + <span class="string">'/'</span> + ora_sid)</span><br><span class="line">        self.cur = self.db.cursor()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Ora_Select</span><span class="params">(self, sql_str)</span>:</span></span><br><span class="line">        <span class="string">'''执行sql_str语句进行查询操作'''</span></span><br><span class="line">        self.cur.execute(sql_str)</span><br><span class="line">        rows = self.cur.fetchall()</span><br><span class="line">        cols = [d[<span class="number">0</span>] <span class="keyword">for</span> d <span class="keyword">in</span> self.cur.description]</span><br><span class="line">        datas = []</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">            b = dict(zip(cols, row))</span><br><span class="line">            datas.append(b)</span><br><span class="line">        <span class="keyword">return</span> datas</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Ora_Execute</span><span class="params">(self, sql_str)</span>:</span></span><br><span class="line">        <span class="string">'''执行sql_str语句进行增加、删除、修改操作'''</span></span><br><span class="line">        self.cur.execute(sql_str)</span><br><span class="line">        self.db.commit()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Ora_Cur_Close</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''关闭游标'''</span></span><br><span class="line">        self.cur.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Ora_db_Close</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''关闭Oracle数据库连接'''</span></span><br><span class="line">        self.db.close()</span><br></pre></td></tr></table></figure><h2 id="2-数据分批次处理"><a href="#2-数据分批次处理" class="headerlink" title="2.数据分批次处理"></a>2.数据分批次处理</h2><p>数据库分批次处理可以使用两种方法：execute()与executemany()方法</p><h3 id="2-1-executemany"><a href="#2-1-executemany" class="headerlink" title="2.1 executemany()"></a>2.1 executemany()</h3><p><font color=#f15a22>在使用executemany方法时，需要注意的几个问题：</font></p><blockquote><p>1.在写sql语句时，不管字段为什么类型，占位符统一使用%s,且不能加上引号。例如</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sql="<span class="keyword">insert</span> <span class="keyword">into</span> tablename (<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span> (%s,%s)<span class="string">"</span></span><br></pre></td></tr></table></figure><blockquote><p>2.添加的数据的格式必须为元组型列表或元组型元组(并不是无限添加):list[tuple(),tuple(),tuple()]或者tuple(tuple(),tuple(),tuple())例如</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">values</span>=[(<span class="number">1</span>,<span class="string">"zhangsan"</span>),(<span class="number">2</span>,<span class="string">"lisi"</span>)]</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line"><span class="keyword">values</span>=((<span class="number">1</span>,<span class="string">"zhangsan"</span>),(<span class="number">2</span>,<span class="string">"lisi"</span>))</span><br></pre></td></tr></table></figure><blockquote><p>3.最后通过executemany插入</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cursor.executemany(sql,<span class="keyword">values</span>)</span><br><span class="line">connect.commit()</span><br></pre></td></tr></table></figure><h3 id="2-2-execute"><a href="#2-2-execute" class="headerlink" title="2.2 execute()"></a>2.2 execute()</h3><p>execute()语法一次只能执行一个sql语句，分批次处理的原理是：循环执行批量语句，然后在commit，如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for i in range(10):</span><br><span class="line">    sql = "<span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">users</span>(<span class="keyword">id</span>,grand) <span class="keyword">values</span>(i,i+<span class="number">10</span>)<span class="string">"</span></span><br><span class="line"><span class="string">    cursor.execute(sql)</span></span><br><span class="line"><span class="string"># 批量执行数据后，然后提交    </span></span><br><span class="line"><span class="string">connect.commit()</span></span><br></pre></td></tr></table></figure><h2 id="3-数据库插入百万级数据优化-参考此文章：Python3-多线程-连接池-操作MySQL插入数据"><a href="#3-数据库插入百万级数据优化-参考此文章：Python3-多线程-连接池-操作MySQL插入数据" class="headerlink" title="3.数据库插入百万级数据优化,参考此文章：Python3 多线程(连接池)操作MySQL插入数据"></a>3.数据库插入百万级数据优化,<a href="https://www.cnblogs.com/insane-Mr-Li/p/11634417.html" target="_blank" rel="noopener">参考此文章：Python3 多线程(连接池)操作MySQL插入数据</a></h2><p>最近做一个项目，需要插入和读取很多数据，所以就需要对数据库大量插入操作进行优化，还是以python为基石，不过在开始动工前，需要明确以下几点：<br>1.考虑是一条线程完整地执行数据库的连接、创建游标、然后插入数据、commit数据、断开连接这一系列操作，还是使用多线程执行获取数据的操作，然后单线程来插入整理好的数据？<br>2.考虑是每执行一次insert，update或者delete，就执行一次commit，还是批量处理数据后，才执行一次commit<br>3.数据执行语句execute()与executemany()的选择</p><p>对我而言，我的设计是<font color=#ef5b9c>调用数据库的通用数据池连接文件SqlConnectManage.py，将数据库的连接和关闭函数作为全局使用，放在程序的首尾（就相当于不会重复连接数据库，减少IO开销）<br>然后创建多线程+队列的方式获取数据，以单线程形式来插入数据，批量处理数据后，才commit提交。</font><br>案例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> SqlConnectManage <span class="keyword">import</span> sqlserverManager</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建全局连接和游标(这里暂时不用DBUtils库)</span></span><br><span class="line">DB_CONN = pymssql.connect(SERVER , USER , PASSWORD, DATABASE)</span><br><span class="line">DB_CURSOR = DB_CONN.cursor()</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># ... </span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开始时间戳</span></span><br><span class="line">    s_time = time.time()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设定最大队列数和线程数</span></span><br><span class="line">    q = Queue(maxsize=<span class="number">10</span>)</span><br><span class="line">    threads = []</span><br><span class="line">    starttime, endtime = get_date()</span><br><span class="line">    <span class="comment"># print(starttime,endtime)  # 经测试，获取查询时间段成功</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取所有用户组列表</span></span><br><span class="line">    userid_all_list = get_user_list()</span><br><span class="line">    <span class="comment"># print(userid_all_list) # 经测试，获取所有用户组成功</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 循环每一个用户组列表并开启多线程采集企业微信考勤数据</span></span><br><span class="line">    <span class="keyword">while</span> userid_all_list:</span><br><span class="line">        user_list = userid_all_list.pop()</span><br><span class="line">        t = Thread(target=gatherData, args=(starttime, endtime, user_list, ))</span><br><span class="line">        q.put(t)</span><br><span class="line">        <span class="keyword">if</span> (q.full() == <span class="literal">True</span> <span class="keyword">or</span> len(userid_all_list) == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">while</span> q.empty() == <span class="literal">False</span>:</span><br><span class="line">                t = get()</span><br><span class="line">                threads.append(t)</span><br><span class="line">                t.start()</span><br><span class="line">            <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">                t.join()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 单线程插入数据</span></span><br><span class="line">    insert_sql()</span><br></pre></td></tr></table></figure><h2 id="4-python-一个-py文件如何调用另一个-py文件中的类和函数"><a href="#4-python-一个-py文件如何调用另一个-py文件中的类和函数" class="headerlink" title="4.python 一个.py文件如何调用另一个.py文件中的类和函数"></a>4.<a href="https://blog.csdn.net/winycg/article/details/78512300" target="_blank" rel="noopener">python 一个.py文件如何调用另一个.py文件中的类和函数</a></h2><p>类和文件名相同</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库分批次处理 </tag>
            
            <tag> 数据库通用连接函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Python数据库返回值的讨论</title>
      <link href="/2019/12/02/%E5%85%B3%E4%BA%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E8%AE%A8%E8%AE%BA/"/>
      <url>/2019/12/02/%E5%85%B3%E4%BA%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E8%AE%A8%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;每到深夜，打开音乐，带上耳机，周围很安静，只有到这个时候我才感觉到自己是一个学者，而此刻头脑中只有两件事罢了：1.记下今天所用到的知识 2.安安静静听歌<br>最近做一个python获取考勤数据的小脚本，一直没有怎么用到数据库，今天就来探讨一下获取数据库的返回值</p><blockquote><p>1.关于数据库返回值的讨论<br>2.fetchall(),fetchone()<br>3.python连接各类数据库教程</p></blockquote><a id="more"></a><h2 id="1-关于数据库返回值的讨论"><a href="#1-关于数据库返回值的讨论" class="headerlink" title="1.关于数据库返回值的讨论"></a>1.关于数据库返回值的讨论</h2><h3 id="1-1-构造简单sql语句"><a href="#1-1-构造简单sql语句" class="headerlink" title="1.1.构造简单sql语句"></a>1.1.构造简单sql语句</h3><p>假设存在这样一个简单的数据库,获取每一行的数据，并保存为txt格式<br><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/D:/data/imagesdatabase_resp.JPG" alt=""></fancybox></p><blockquote><p>构造sql语句</p></blockquote><p>select  * from dbo.userlist where user_serial&lt;100010</p><h3 id="1-2-python连接数据库（SQL-server）"><a href="#1-2-python连接数据库（SQL-server）" class="headerlink" title="1.2.python连接数据库（SQL server）"></a>1.2.python连接数据库（SQL server）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> pymssql</span><br><span class="line"><span class="comment"># 获取考勤系统数据</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">()</span>:</span></span><br><span class="line">    server = <span class="string">""</span></span><br><span class="line">    user = <span class="string">""</span></span><br><span class="line">    password = <span class="string">""</span></span><br><span class="line">    database = <span class="string">""</span></span><br><span class="line">    conn = pymssql.connect(</span><br><span class="line">        server=server,</span><br><span class="line">        user=user,</span><br><span class="line">        password=password,</span><br><span class="line">        database=database</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 创建游标</span></span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    <span class="comment"># 构造查询sql语句</span></span><br><span class="line">    sql =<span class="string">"select  * from dbo.kt_dev where user_serial&lt;100010"</span></span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    numbers = cursor.fetchall()</span><br><span class="line">    print(numbers[<span class="number">0</span>])  <span class="comment"># 元组(100002, '0010014', '00101')</span></span><br><span class="line">    print(type(numbers[<span class="number">0</span>])) <span class="comment"># tuple元组类型</span></span><br><span class="line">    <span class="comment"># 元组访问方式与拼接</span></span><br><span class="line">    print(str(str(numbers[<span class="number">1</span>][<span class="number">0</span>]))+<span class="string">":"</span>+str(numbers[<span class="number">1</span>][<span class="number">1</span>]))  <span class="comment"># 100002:0010002</span></span><br><span class="line">    print(type(numbers))  <span class="comment"># list 列表</span></span><br><span class="line">    print(<span class="string">'总列表：'</span>,numbers)</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    loan_count = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 获取所有的查询数据(1.区别于fetchone() 2.fetchall/fetchone()的返回值均为元组型列表，即[(第一行数据),(第二行数据),...()])</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"test_demo.txt"</span>,<span class="string">'a+'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> number <span class="keyword">in</span> numbers:</span><br><span class="line">            f.write(str(number[<span class="number">0</span>])+<span class="string">"  "</span>+str(number[<span class="number">1</span>]) + <span class="string">"  "</span>+str(number[<span class="number">2</span>]+<span class="string">"\n"</span>)) <span class="comment"># 元组数据number=("考勤卡号”，"刷卡时间")</span></span><br><span class="line">            loan_count += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 断开连接</span></span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br><span class="line">    print(<span class="string">"写入完成,共写入%d条数据！"</span> % loan_count)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    demo()</span><br></pre></td></tr></table></figure><p>数据库查询后返回的所有数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 总列表： </span></span><br><span class="line">[(<span class="number">100002</span>, <span class="string">'0010014'</span>, <span class="string">'00101'</span>), (<span class="number">100002</span>, <span class="string">'0010002'</span>, <span class="string">'00101'</span>),..., (<span class="number">100006</span>, <span class="string">'0010014'</span>, <span class="string">'00101'</span>)]</span><br></pre></td></tr></table></figure><p>由上式案列可知：<br><font color=#ed1941><br>1.fetchall():表示返回查询到的所有数据；fetchone():表示返回查询到的第一行数据<br>2.python查询返回的所有数据类型为元组型列表，即[(),(),...()]<br>3.元组的访问方式为：元组名[index]<br></font></p><h3 id="1-3-字典型的数据库返回值"><a href="#1-3-字典型的数据库返回值" class="headerlink" title="1.3 字典型的数据库返回值"></a>1.3 字典型的数据库返回值</h3><p><strong>思考：</strong> 由上述推论可知无论是fetchall，还是fetchone，返回的数据都是元祖型列表，即我们不能通过键名（即数据库的字段名），只能使用索引。<br>这时就出现了一个问题：如果数据库的字段很多，难道要一个个数过去，找到其对应的索引值，这太麻烦了。思考一下，<strong>能不能返回的是字典型列表，便可用数据库的字段名作为键名，十分方便。</strong></p><blockquote><p>oracle</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cx_Oracle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">connection = cx_Oracle.connect(<span class="string">"Booker"</span>, <span class="string">"123456"</span>, <span class="string">"172.18.240.31:1521/Book"</span>)</span><br><span class="line"><span class="comment"># 创建游标</span></span><br><span class="line">cursor = connection.cursor() </span><br><span class="line"><span class="comment"># 执行sql</span></span><br><span class="line">cursor.execute(<span class="string">"select * from book"</span>)</span><br><span class="line"><span class="comment"># 获取返回值</span></span><br><span class="line">a = cursor.fetchall()</span><br><span class="line">cols = [d[<span class="number">0</span>] <span class="keyword">for</span> d <span class="keyword">in</span> cursor.description]</span><br><span class="line">print(cols)</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> a:</span><br><span class="line">    b = dict(zip(cols, row))</span><br><span class="line">    print(b[<span class="string">'book_name'</span>])</span><br><span class="line">cursor.close()</span><br><span class="line">connection.close()</span><br></pre></td></tr></table></figure><p><strong>这样我们就可以使用b[‘字段名’]的方式进入各种操作了，又清晰又方便。</strong></p><blockquote><p>mysql</p></blockquote><p>想返回字典格式，只需要在建立游标的时候加个参数，cursor=pymysql.cursors.DictCursor。这样<strong>每行返回的值放在字典里面，然后整体放在一个list里面</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">export</span><span class="params">(table_name)</span>:</span></span><br><span class="line">    conn =pymysql.connect(host = <span class="string">'118.24.3.40'</span>,</span><br><span class="line">                          user = <span class="string">'jxz'</span>,password=<span class="string">'123456'</span>,</span><br><span class="line">                          db=<span class="string">'jxz'</span>,port=<span class="number">3306</span>,charset = <span class="string">'utf8'</span>)</span><br><span class="line">    cur = conn.cursor(cursor=pymysql.cursors.DictCursor)</span><br><span class="line">    cur.execute(<span class="string">'select * from %s'</span>%table_name)</span><br><span class="line">    print(cur.fetchall())</span><br><span class="line">export(<span class="string">'app_student'</span>)</span><br></pre></td></tr></table></figure><h2 id="2-python连接各类数据库教程"><a href="#2-python连接各类数据库教程" class="headerlink" title="2.python连接各类数据库教程"></a>2.python连接各类数据库教程</h2><p><a href="https://www.cnblogs.com/tester-l/p/8198939.html" target="_blank" rel="noopener">【python连接各类数据库教程】</a><br><a href="https://www.cnblogs.com/dhanchor/p/11111247.html" target="_blank" rel="noopener">【Python连接Oracle数据库，以字典形式返回结果】</a><br><a href="https://www.cnblogs.com/once-again/p/9824381.html" target="_blank" rel="noopener">【python操作mysql数据-执行语句返回值直接返回字典类型】</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fetchall() </tag>
            
            <tag> fetchone() </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python全栈系列章节更新（二）：常见库模块</title>
      <link href="/2019/11/29/python(%E4%BA%8C)%E5%B8%B8%E8%A7%81%E5%BA%93%E5%87%BD%E6%95%B0/"/>
      <url>/2019/11/29/python(%E4%BA%8C)%E5%B8%B8%E8%A7%81%E5%BA%93%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>Python是一个“优雅”、“明确”、“简单”的编程语言,主要流行于网络爬虫、数据分析挖掘、机器学习、人工智能以及运维等等</p><blockquote><p>1.time模块<br>2.DBUtils管理数据库连接池<br>3.ftplib模块<br>4.os模块<br>5.datetime模块<br>6.tqdm模块<br>7.控制台输出带颜色文字的方法<br>8.random模块<br>9.Logger模块</p></blockquote><a id="more"></a><h2 id="1-time模块"><a href="#1-time模块" class="headerlink" title="1.time模块"></a>1.time模块</h2><h3 id="Unix时间戳转与时间的转换"><a href="#Unix时间戳转与时间的转换" class="headerlink" title="Unix时间戳转与时间的转换"></a>Unix时间戳转与时间的转换</h3><blockquote><p>将时间戳转换成时间，首先需要将时间戳转换成localtime，再转换成时间的具体格式：</p></blockquote><p>利用localtime()函数将时间戳转化成localtime的格式<br>利用strftime()函数重新格式化时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 将时间戳转化为目标时间格式</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timestamp_datatime</span><span class="params">(value)</span>:</span></span><br><span class="line">    format = <span class="string">'%Y-%m-%d %H:%M'</span></span><br><span class="line">    <span class="comment"># format = '%Y-%m-%d %H:%M:%S'</span></span><br><span class="line">    <span class="comment"># value 为时间戳值,如:1460073600.0</span></span><br><span class="line">    value = time.localtime(value)</span><br><span class="line">    dt = time.strftime(format, value)</span><br><span class="line">    <span class="keyword">return</span> dt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将目标时间格式转化为时间戳</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">datetime_timestamp</span><span class="params">(dt)</span>:</span></span><br><span class="line">    newTime = time.strptime(dt, <span class="string">'%Y-%m-%d %H:%M'</span>)</span><br><span class="line">    s = time.mktime(newTime)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = timestamp_datatime(<span class="number">1460073600.0</span>)</span><br><span class="line">    print(s)  <span class="comment"># 2016-04-08 08:00</span></span><br><span class="line">    d = datetime_timestamp(<span class="string">'2019-06-05 08:00'</span>)</span><br><span class="line">    print(d)  <span class="comment"># 1559692800.0</span></span><br></pre></td></tr></table></figure><h3 id="按指定的格式获取当前时间"><a href="#按指定的格式获取当前时间" class="headerlink" title="按指定的格式获取当前时间"></a>按指定的格式获取当前时间</h3><p>利用time()获取当前时间，再利用localtime()函数转换为localtime，最后利用strftime()函数重新格式化时间。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:UTF-8</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取当前时间</span></span><br><span class="line">time_now = int(time.time())</span><br><span class="line"><span class="comment">#转换成localtime</span></span><br><span class="line">time_local = time.localtime(time_now)</span><br><span class="line"><span class="comment">#转换成新的时间格式(2016-05-09 18:59:20),时间连接符号可改变</span></span><br><span class="line">dt = time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>,time_local)</span><br><span class="line"></span><br><span class="line">print(dt)</span><br></pre></td></tr></table></figure><h3 id="time模块的毫秒级"><a href="#time模块的毫秒级" class="headerlink" title="time模块的毫秒级"></a>time模块的毫秒级</h3><ul><li>获取当前的时间戳：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">time.time() <span class="comment"># 返回的是当前的时间戳; 如果想取一个整数则 int(time.time())</span></span><br></pre></td></tr></table></figure><ul><li><p>获取毫秒级别的时间戳:</p><p>int(round(time.time() * 1000))</p></li></ul><h2 id="2-DBUtils管理数据库连接池"><a href="#2-DBUtils管理数据库连接池" class="headerlink" title="2.DBUtils管理数据库连接池"></a>2.DBUtils管理数据库连接池</h2><p>当使用多线程，多进程将海量数据存入数据库时，每次执行一个sql的时候都单独建立一个mysql连接，执行完就close掉，很明显这样的问题在于，频繁连接，断开mysql，这样是相当消耗系统资源的，而且增加了mysql连接失败的几率，所以万一哪个线程没有连接成功 这个线程也over了。</p><h3 id="2-1-连接池原理"><a href="#2-1-连接池原理" class="headerlink" title="2.1 连接池原理"></a>2.1 连接池原理</h3><p><fancybox><img src="https://img-blog.csdn.net/20180816112104584?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21vdWRheQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></fancybox><br>1.在程序创建连接的时候，可以从一个空闲的连接中获取，不需要重新初始化连接，提升获取连接的速度<br>2.关闭连接的时候，把连接放回连接池，而不是真正的关闭，所以可以减少频繁地打开和关闭连接</p><blockquote><p>安装DBUtils库</p></blockquote><p>pip install DBUtils</p><blockquote><p>参数解释</p></blockquote><table><thead><tr><th>参数</th><th align="center">详解</th></tr></thead><tbody><tr><td>creator,</td><td align="center"># 使用链接数据库的模块(必须：pymssql，pymysql，cx_oralce,…)</td></tr><tr><td>mincached=0,</td><td align="center"># 初始化时，链接池中至少创建的空闲的链接，0表示不创建</td></tr><tr><td>maxcached=0,</td><td align="center"># 链接池中最多闲置的链接，0和None不限制</td></tr><tr><td>maxshared=0,</td><td align="center"># 链接池中最多共享的链接数量，0和None表示全部共享。PS: 无用</td></tr><tr><td>maxconnections=0,</td><td align="center"># 连接池允许的最大连接数，0和None表示不限制连接数</td></tr><tr><td>blocking=False,</td><td align="center"># 连接池中如果没有可用连接后，是否阻塞等待。True，等待；False，不等待然后报错</td></tr><tr><td>maxusage=None,</td><td align="center"># 一个链接最多被重复使用的次数，None表示无限制</td></tr><tr><td>setsession=None,</td><td align="center"># 开始会话前执行的命令列表。如：[“set datestyle to …”, “set time zone …”]</td></tr><tr><td>reset=True,</td><td align="center"></td></tr><tr><td>failures=None,</td><td align="center"></td></tr><tr><td>ping=1,</td><td align="center"># ping MySQL服务端，检查是否服务可用</td></tr></tbody></table><blockquote><p>数据库设置(数据库连接模块不一样，其参数名也不同)</p></blockquote><p>如creator=pymysql：<br>host=&#39;localhost&#39;, port=3306,db=&#39;mydata&#39;,user=&quot;root&quot;,passwd=&quot;123456&quot;,charset=&#39;utf8&#39;</p><blockquote><p>数据库通用连接函数（连接模块视实际数据库决定）</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> DBUtils <span class="keyword">import</span> PooledDB</span><br><span class="line"><span class="keyword">import</span> pymssql</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sqlserverManager</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 构造函数，初始化连接</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, server, user, password, database, table)</span>:</span></span><br><span class="line">        self.server = server</span><br><span class="line">        self.user = user</span><br><span class="line">        self.password = password</span><br><span class="line">        self.database = database</span><br><span class="line">        self.table = table</span><br><span class="line">        self.conn = <span class="literal">None</span></span><br><span class="line">        self.cursor = <span class="literal">None</span></span><br><span class="line">        self.maxconnections = <span class="number">15</span> <span class="comment"># 设置最大连接数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存数据到SQL server</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connect_database</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.conn = PooledDB(creator=pymssql,</span><br><span class="line">                                 maxconnections=self.maxconnections,</span><br><span class="line">                                 server=self.server,</span><br><span class="line">                                 user=self.user,</span><br><span class="line">                                 password=self.password,</span><br><span class="line">                                 database=self.database,</span><br><span class="line">                                 charset=<span class="string">'utf8'</span>).connection()</span><br><span class="line">            <span class="comment"># 创建游标</span></span><br><span class="line">            self.cursor = self.conn.cursor()</span><br><span class="line">            print(<span class="string">"sql server had connected"</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">"the connect failed:"</span>, e)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dbclose</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.cursor.close()</span><br><span class="line">        self.conn.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dbcommit</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.conn.commit()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(self, sql)</span>:</span></span><br><span class="line">        print(<span class="string">"-----插入数据-----"</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.cursor.execute(sql)</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">'\033[1;31;0m\t4---插入更新失败，msg：\033[0m'</span>, e, sql.replace(<span class="string">"\n"</span>, <span class="string">""</span>))</span><br><span class="line">            self.conn.rollback()</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="2-2-多线程（连接池）操作MySQL插入数据"><a href="#2-2-多线程（连接池）操作MySQL插入数据" class="headerlink" title="2.2 多线程（连接池）操作MySQL插入数据"></a>2.2 <a href="https://www.cnblogs.com/insane-Mr-Li/p/11634417.html" target="_blank" rel="noopener">多线程（连接池）操作MySQL插入数据</a></h3><blockquote><p>启动线程任务</p></blockquote><p>每调用一次插入函数就从连接池中取出一个链接操作,完成后关闭链接;<br>executemany 批量操作,减少 commit 次数,提升效率;</p><h2 id="3-ftplib操作ftp实现上传和下载的"><a href="#3-ftplib操作ftp实现上传和下载的" class="headerlink" title="3.ftplib操作ftp实现上传和下载的"></a>3.ftplib操作ftp实现上传和下载的</h2><p>ftplib模块是系统默认安装的，实现文件的上传与下载</p><h3 id="3-1-ftp登陆连接"><a href="#3-1-ftp登陆连接" class="headerlink" title="3.1 ftp登陆连接"></a>3.1 ftp登陆连接</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> ftplib <span class="keyword">import</span> FTP            <span class="comment">#加载ftp模块</span></span><br><span class="line">ftp=FTP()                         <span class="comment">#设置变量</span></span><br><span class="line">ftp.set_debuglevel(<span class="number">2</span>)             <span class="comment">#打开调试级别2，显示详细信息</span></span><br><span class="line">ftp.connect(<span class="string">"IP"</span>,<span class="string">"port"</span>)          <span class="comment">#连接的ftp sever和端口</span></span><br><span class="line">ftp.login(<span class="string">"user"</span>,<span class="string">"password"</span>)      <span class="comment">#连接的用户名，密码</span></span><br><span class="line">print(ftp.getwelcome())            <span class="comment">#打印出欢迎信息</span></span><br><span class="line"></span><br><span class="line">bufsize=<span class="number">1024</span>                      <span class="comment">#设置的缓冲区大小</span></span><br><span class="line">filename=<span class="string">"filename.txt"</span>           <span class="comment">#需要下载的文件</span></span><br><span class="line">file_handle=open(filename,<span class="string">"wb"</span>).write <span class="comment">#以写模式在本地打开文件</span></span><br><span class="line">ftp.retrbinaly(<span class="string">"RETR filename.txt"</span>,file_handle,bufsize) <span class="comment">#接收服务器上文件并写入本地文件</span></span><br><span class="line">ftp.set_debuglevel(<span class="number">0</span>)             <span class="comment">#关闭调试模式</span></span><br><span class="line">ftp.quit()                        <span class="comment">#退出ftp</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># ftp相关命令操作</span></span><br><span class="line">ftp.cwd(pathname)                 <span class="comment">#设置FTP当前操作的路径</span></span><br><span class="line">ftp.dir()                         <span class="comment">#显示目录下所有目录信息</span></span><br><span class="line">ftp.nlst()                        <span class="comment">#获取目录下的文件</span></span><br><span class="line">ftp.mkd(pathname)                 <span class="comment">#新建远程目录</span></span><br><span class="line">ftp.pwd()                         <span class="comment">#返回当前所在位置</span></span><br><span class="line">ftp.rmd(dirname)                  <span class="comment">#删除远程目录</span></span><br><span class="line">ftp.delete(filename)              <span class="comment">#删除远程文件</span></span><br><span class="line">ftp.rename(fromname, toname)<span class="comment">#将fromname修改名称为toname。</span></span><br><span class="line">ftp.storbinary(<span class="string">"STOR filename.txt"</span>,file_content,bufsize)  <span class="comment">#上传目标文件</span></span><br><span class="line">ftp.retrbinary(<span class="string">"RETR filename.txt"</span>,file_content,bufsize)  <span class="comment">#下载FTP文件</span></span><br></pre></td></tr></table></figure><h3 id="3-2-ftp上传或下载文件-目录"><a href="#3-2-ftp上传或下载文件-目录" class="headerlink" title="3.2 ftp上传或下载文件/目录"></a>3.2 ftp上传或下载文件/目录</h3><h2 id="4-os模块"><a href="#4-os模块" class="headerlink" title="4.os模块"></a>4.os模块</h2><p>记下常用的os模块的操作指令</p><table><thead><tr><th>命令</th><th align="center">含义</th></tr></thead><tbody><tr><td>os.getcwd()</td><td align="center">获取当前工作目录，即当前python脚本工作的目录路径,相当于shell的pwd</td></tr><tr><td>os.chdir(“dirname”)</td><td align="center">改变当前脚本工作目录；相当于shell下cd</td></tr><tr><td>os.curdir</td><td align="center">返回当前目录: (‘.’)</td></tr><tr><td>os.pardir</td><td align="center">获取当前目录的父目录字符串名：(‘..’)</td></tr><tr><td>os.makedirs(‘dirname1/dirname2’)</td><td align="center">可生成多层递归目录</td></tr><tr><td>os.removedirs(‘dirname1’)</td><td align="center">若目录为空，则删除，并递归到上一级目录，如若也为空，则删除，依此类推</td></tr><tr><td>os.mkdir(‘dirname’)</td><td align="center">生成单级目录；相当于shell中mkdir dirname</td></tr><tr><td>os.rmdir(‘dirname’)</td><td align="center">删除单级空目录，若目录不为空则无法删除，报错；相当于shell中rmdir dirname</td></tr><tr><td>os.listdir(‘dirname’)</td><td align="center">列出指定目录下的所有文件和子目录，包括隐藏文件，并以列表方式打印</td></tr><tr><td>os.remove()</td><td align="center">删除一个文件</td></tr><tr><td>os.rename(“oldname”,”newname”)</td><td align="center">重命名文件/目录</td></tr><tr><td>os.stat(‘path/filename’)</td><td align="center">获取文件/目录信息</td></tr><tr><td>os.name</td><td align="center">输出字符串指示当前使用平台。win-&gt;’nt’; Linux-&gt;’posix’</td></tr><tr><td>os.system(“执行的命令”)</td><td align="center">运行shell命令，直接显示,相当于直接在cmd命令中执行，<a href="https://blog.csdn.net/CDersTeam/article/details/51346911?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">Windows的cmd命令大全</a></td></tr><tr><td>os.environ</td><td align="center">获取系统环境变量</td></tr><tr><td>os.path.abspath(path)</td><td align="center">返回path规范化的绝对路径</td></tr><tr><td>os.path.split(path)</td><td align="center">将path分割成目录和文件名二元组返回</td></tr><tr><td>os.path.dirname(path)</td><td align="center">返回path的目录。其实就是os.path.split(path)的第一个元素</td></tr><tr><td>os.path.basename(path)</td><td align="center">返回path最后的文件名。如何path以／或\结尾，那么就会返回空值。即os.path.split(path)的第二个元素</td></tr><tr><td>os.path.exists(path/file)</td><td align="center">如果路径或文件存在，返回True；如果path不存在，返回False</td></tr><tr><td>os.path.isabs(path)</td><td align="center">如果path是绝对路径，返回True</td></tr><tr><td>os.path.isfile(path)</td><td align="center">如果path是一个存在的文件，返回True。否则返回False</td></tr><tr><td>os.path.join(path1,path2,…,pathn)</td><td align="center">将多个路径组合后返回</td></tr></tbody></table><p>简要样例说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.split(&quot;/Users/hqs/PycharmProjects/startMyPython3.0&quot;)             </span><br><span class="line">(&apos;/Users/hqs/PycharmProjects&apos;, &apos;startMyPython3.0&apos;)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; os.path.dirname(&apos;/Users/hqs/PycharmProjects/startMyPython3.0&apos;)</span><br><span class="line">&apos;/Users/hqs/PycharmProjects&apos;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;os.system(&quot;ping 127.0.0.1&quot;)</span><br><span class="line">正在 Ping 127.0.0.1 具有 32 字节的数据:</span><br><span class="line">来自 127.0.0.1 的回复: 字节=32 时间&lt;1ms TTL=64</span><br><span class="line">来自 127.0.0.1 的回复: 字节=32 时间&lt;1ms TTL=64</span><br><span class="line">来自 127.0.0.1 的回复: 字节=32 时间&lt;1ms TTL=64</span><br><span class="line">来自 127.0.0.1 的回复: 字节=32 时间&lt;1ms TTL=64</span><br><span class="line"></span><br><span class="line">127.0.0.1 的 Ping 统计信息:</span><br><span class="line">    数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)，</span><br><span class="line">往返行程的估计时间(以毫秒为单位):</span><br><span class="line">    最短 = 0ms，最长 = 0ms，平均 = 0ms</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;os.path.abspath(__file__) </span><br><span class="line">当前文件的绝对路径</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">当前文件的上一层目录的绝对路径</span><br><span class="line"></span><br><span class="line">os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line">当前文件的上上层目录的绝对路径</span><br></pre></td></tr></table></figure><p>BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(_ _file_ _)))</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">__file__：表示当前文件名称</span><br><span class="line">os.path.abspath(__file__)：表示运行当前文件的完整绝对路径</span><br><span class="line">os.path.dirname：表示文件的上一级目录</span><br><span class="line">eg：目录结构：</span><br><span class="line">app|</span><br><span class="line">   | ---core.py</span><br><span class="line">   |---settings.json</span><br><span class="line">   | ---mangage.py</span><br><span class="line">    运行core.py文件十，调用settings.py文件为:</span><br><span class="line">    BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) # 获取了app目录的相对目录</span><br><span class="line">    dir =os.path.join(BASE.DIR,&apos;settings.py&apos;) # app目录拼接就为settings.py文件目录：app/settings.py</span><br></pre></td></tr></table></figure><p>python路径拼接os.path.join()函数的用法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">os.path.join()函数：连接两个或更多的路径名组件</span><br><span class="line"></span><br><span class="line"> 1.如果各组件名首字母不包含’/’，则函数会自动加上</span><br><span class="line"></span><br><span class="line"> 2.如果有一个组件是一个绝对路径，则在它之前的所有组件均会被舍弃</span><br><span class="line"></span><br><span class="line"> 3.如果最后一个组件为空，则生成的路径以一个’/’分隔符结尾</span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">Path1 = &apos;home&apos;</span><br><span class="line">Path2 = &apos;develop&apos;</span><br><span class="line">Path3 = &apos;code&apos;</span><br><span class="line"></span><br><span class="line">Path10 = Path1 + Path2 + Path3</span><br><span class="line">Path20 = os.path.join(Path1,Path2,Path3)</span><br><span class="line">print (&apos;Path10 = &apos;,Path10)</span><br><span class="line">print (&apos;Path20 = &apos;,Path20)</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line"></span><br><span class="line">Path10 = homedevelopcode</span><br><span class="line">Path20 = home\develop\code</span><br></pre></td></tr></table></figure><h2 id="5-datetime模块"><a href="#5-datetime模块" class="headerlink" title="5 datetime模块"></a>5 <a href="https://blog.csdn.net/qq_24753293/article/details/80954840" target="_blank" rel="noopener">datetime模块</a></h2><p>1.datetime.date：表示日期的类<br>2.datetime.datetime：表示日期时间的类<br>3.datetime.time：表示时间的类<br>4.datetime.timedelta：表示时间间隔，即两个时间点的间隔<br>5.datetime.tzinfo：时区的相关信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;datetime.datetime.now()</span><br><span class="line">当前系统时间：datetime.datetime(2019, 12, 3, 20, 31, 10, 740869)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;datetime.datetime.now().year/month/day</span><br><span class="line">分别为：2019，12，3</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;datetime.datetime.now().weekday()</span><br><span class="line">1 表示在第几周</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;time1 = datetime.datetime(2016, 10, 20)</span><br><span class="line">&gt;&gt;&gt;time2 = datetime.datetime(2015, 11, 2)</span><br><span class="line"> </span><br><span class="line">&quot;&quot;&quot;计算天数差值&quot;&quot;&quot;</span><br><span class="line">print(time1-time2).days</span><br><span class="line"> </span><br><span class="line">&quot;&quot;&quot;计算两个日期之间相隔的秒数&quot;&quot;&quot;</span><br><span class="line">print (time1-time2).total_seconds()</span><br><span class="line"></span><br><span class="line"># 获取当前时间,并转化为字符串型</span><br><span class="line">&gt;&gt;&gt;time_new = str(datetime.datetime.now().date())  # &apos;2019-12-4&apos;</span><br><span class="line"></span><br><span class="line"># 以当天的09：00为开始时间（时间戳格式）</span><br><span class="line">&gt;&gt;&gt;time_on = time.mktime(time.strptime(time_new+ &apos; 09:00&apos;, &apos;%Y-%m-%d %H:%M&apos;))</span><br><span class="line"></span><br><span class="line"># 以当天的18：00为结束时间（时间戳格式）</span><br><span class="line">&gt;&gt;&gt;time_off = time.mktime(time.strptime(time_new+ &apos; 18:00&apos;, &apos;%Y-%m-%d %H:%M&apos;))</span><br><span class="line"></span><br><span class="line"># 当前星期几</span><br><span class="line">&gt;&gt;&gt;week_now = datetime.datetime.now().weekday()</span><br><span class="line"></span><br><span class="line"># 当前时间</span><br><span class="line">&gt;&gt;&gt;time_now = datetime.datetime.now()  # datetime.datetime(2019, 12, 4, 14, 57, 48, 988520)</span><br><span class="line"></span><br><span class="line"># 当前第几小时（24小时制）</span><br><span class="line">&gt;&gt;&gt;hour_now = datetime.datetime.now().hour  # 14</span><br></pre></td></tr></table></figure><h2 id="5-tqdm模块（最优雅的进度条）"><a href="#5-tqdm模块（最优雅的进度条）" class="headerlink" title="5.tqdm模块（最优雅的进度条）"></a>5.tqdm模块（最优雅的进度条）</h2><p>from tqdm import tqdm<br>使用方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> tqdm(range(<span class="number">1000</span>)):</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><p>拓：如何解决tqdm一直向下滚动的问题？<br>当我们使用控制台输出时，使用tqdm有可能会一直向下滚动，原因是进度条太长了，只能换行显示，此我们规定一下滚动条的长度<br><code>for i in tqdm(range(1000), ncols = 80)</code> :ncols规定长度为80</p><h2 id="6-控制台输出带颜色文字的方法"><a href="#6-控制台输出带颜色文字的方法" class="headerlink" title="6.控制台输出带颜色文字的方法"></a>6.<a href="https://www.jianshu.com/p/6610b0abb2ea" target="_blank" rel="noopener">控制台输出带颜色文字的方法</a></h2><p>设置颜色开始 ：\033[显示方式;前景色;背景色m 文本内容 \033[0m（此处为结束语）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'\033[1;31m我以我血荐轩辕\033[0m'</span>)</span><br><span class="line">print(<span class="string">'\033[4;35m我以我血荐轩辕\033[0m'</span>)</span><br><span class="line">print(<span class="string">'\033[5;37;40m我以我血荐轩辕\033[0m'</span>)</span><br><span class="line">print(<span class="string">'\033[0;32m我以我血荐轩辕\033[0m'</span>)</span><br><span class="line">print(<span class="string">'\033[1;32m我以我血荐轩辕\033[0m'</span>)</span><br></pre></td></tr></table></figure><h2 id="7-random模块"><a href="#7-random模块" class="headerlink" title="7.random模块"></a>7.random模块</h2><table><thead><tr><th>函数</th><th align="center">说明</th></tr></thead><tbody><tr><td>randint(a, b)</td><td align="center">生成一个[a, b]之间的整数</td></tr><tr><td>randrange(m, n[, k])</td><td align="center">生成一个[m, n)之间以k为步长的随机整数</td></tr><tr><td>getrandbits(k)</td><td align="center">生成一个k比特长的随机整数</td></tr><tr><td>uniform(a, b)</td><td align="center">生成一个[a, b]之间的随机小数</td></tr><tr><td>choice(seq)</td><td align="center">从序列seq中随机选择一个元素</td></tr><tr><td>choices(seq,k = n)</td><td align="center">从序列seq中随机选择n个元素</td></tr><tr><td>shuffle(seq)</td><td align="center">将序列seq中元素随机排列，返回打乱后的序列(类似于洗牌)</td></tr><tr><td>random()</td><td align="center">生成一个[0.0, 1.0)之间的随机小数</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line"></span><br><span class="line">random.random()</span><br><span class="line">0.5</span><br><span class="line">random.randint(10, 100)</span><br><span class="line">64</span><br><span class="line">random.randrange(10, 100, 10)</span><br><span class="line">80</span><br><span class="line">random.getrandbits(16)</span><br><span class="line">37885</span><br><span class="line">random.uniform(10, 100)</span><br><span class="line">13.096321648808136</span><br><span class="line">random.choice([1,2,3,4,5,6,7,8,9])</span><br><span class="line">8 </span><br><span class="line">s=[1,2,3,4,5,6,7,8,9];</span><br><span class="line">random.shuffle(s);</span><br><span class="line">print(s) # [3, 5, 8, 9, 6, 1, 2, 7, 4]</span><br></pre></td></tr></table></figure><h2 id="8-execjs库"><a href="#8-execjs库" class="headerlink" title="8.execjs库"></a>8.execjs库</h2><p>针对现在大部分的网站都是使用js加密，js加载的，并不能直接抓取出来，这时候就不得不适用一些三方类库来执行js语句。执行JS的类库：execjs，PyV8，selenium，node<br>安装： pip install PyExecJS</p><p>js运行时环境：没有js环境会报错（Could not find an available JavaScript runtime），常见的js运行环境有PyV8，<strong>Node.js</strong>,PhantomJS</p><p>执行js脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"></span><br><span class="line"><span class="comment"># compile 编译执行复杂的js源代码</span></span><br><span class="line">x = execjs.compile(<span class="string">'''</span></span><br><span class="line"><span class="string">    // static 源代码</span></span><br><span class="line"><span class="string">    function get_time()&#123;</span></span><br><span class="line"><span class="string">        let d = new Date();</span></span><br><span class="line"><span class="string">        return d.getTime()</span></span><br><span class="line"><span class="string">    &#125;'''</span>)</span><br><span class="line"><span class="comment"># 执行目标函数</span></span><br><span class="line">x.call(<span class="string">"get_time"</span>)  <span class="comment"># 1587110199832</span></span><br></pre></td></tr></table></figure><p><strong>执行步骤：</strong></p><ol><li>compile(js源代码)先编译js源代码</li><li>call(目标函数，实参) 开始执行目标函数，并传参</li></ol><h2 id="9-string模块"><a href="#9-string模块" class="headerlink" title="9.string模块"></a>9.string模块</h2><ul><li>string.digits: 数字字符串集</li><li>string.ascii_letters: 字母字符串集</li><li>string.ascii_lowercase: 小写字母字符串集</li><li>string.ascii_uppercase: 大写字母字符串集</li><li>string.ascii_punctuation: 特殊字符集（!”#$%&amp;&#39;()*+,-./:;&lt;=&gt;?@[\]^_`{|}~）</li></ul><h2 id="10-Logger模块"><a href="#10-Logger模块" class="headerlink" title="10. Logger模块"></a>10. Logger模块</h2><p>新建一个Logger.py文件，内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> logging <span class="keyword">import</span> handlers</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 日志级别关系映射</span></span><br><span class="line">    level_relations = &#123;</span><br><span class="line">        <span class="string">'debug'</span>:logging.DEBUG,</span><br><span class="line">        <span class="string">'info'</span>:logging.INFO,</span><br><span class="line">        <span class="string">'warning'</span>:logging.WARNING,</span><br><span class="line">        <span class="string">'error'</span>:logging.ERROR,</span><br><span class="line">        <span class="string">'crit'</span>:logging.CRITICAL</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,filename,level=<span class="string">'info'</span>,when=<span class="string">'D'</span>,backCount=<span class="number">3</span>,fmt=<span class="string">'%(asctime)s - %(filename)s[line:%(lineno)d] - %(levelname)s: %(message)s'</span>)</span>:</span></span><br><span class="line">        self.logger = logging.getLogger(filename)</span><br><span class="line">        <span class="comment"># 设置日志格式</span></span><br><span class="line">        format_str = logging.Formatter(fmt)</span><br><span class="line">        <span class="comment"># 设置日志级别</span></span><br><span class="line">        self.logger.setLevel(self.level_relations.get(level))</span><br><span class="line">        <span class="comment"># 往屏幕上输出</span></span><br><span class="line">        sh = logging.StreamHandler()</span><br><span class="line">        <span class="comment"># 设置屏幕上显示的格式</span></span><br><span class="line">        sh.setFormatter(format_str) </span><br><span class="line">        <span class="comment"># 往文件里写入</span></span><br><span class="line">        <span class="comment"># 指定间隔时间自动生成文件的处理器</span></span><br><span class="line">        th = handlers.TimedRotatingFileHandler(filename=filename,when=when,backupCount=backCount,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">        <span class="comment"># 实例化TimedRotatingFileHandler</span></span><br><span class="line">        <span class="comment"># interval是时间间隔，backupCount是备份文件的个数，如果超过这个个数，就会自动删除，when是间隔的时间单位，单位有以下几种：</span></span><br><span class="line">        <span class="comment"># S 秒</span></span><br><span class="line">        <span class="comment"># M 分</span></span><br><span class="line">        <span class="comment"># H 小时、</span></span><br><span class="line">        <span class="comment"># D 天、</span></span><br><span class="line">        <span class="comment"># W 每星期（interval==0时代表星期一）</span></span><br><span class="line">        <span class="comment"># midnight 每天凌晨</span></span><br><span class="line">        <span class="comment"># 设置文件里写入的格式</span></span><br><span class="line">        th.setFormatter(format_str)</span><br><span class="line">        <span class="comment"># 把对象加到logger里</span></span><br><span class="line">        self.logger.addHandler(sh) </span><br><span class="line">        self.logger.addHandler(th)</span><br></pre></td></tr></table></figure><p>那我们如何调用这个Logger.py文件呢？</p><p>导入模块：from Logger import Logger<br>开启日志设置：<br>   log = Logger(‘log/OA_F25ToPaymentBill.log’,level=’debug’)<br>日志等级：</p><ul><li>log.log.info(string)</li><li>log.log.warn(String)</li><li>log.log.error(String)</li></ul><h2 id="未完待续。。。"><a href="#未完待续。。。" class="headerlink" title="未完待续。。。"></a>未完待续。。。</h2>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 常见库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术小白教你如何定位照片拍摄位置</title>
      <link href="/2019/11/28/%E7%85%A7%E7%89%87%E7%9A%84GPS%E4%BF%A1%E6%81%AF%E5%AE%9A%E4%BD%8D/"/>
      <url>/2019/11/28/%E7%85%A7%E7%89%87%E7%9A%84GPS%E4%BF%A1%E6%81%AF%E5%AE%9A%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;某些情况，我们需要照片显示记录位置信息，那么当下最便捷的拍照工具就是手机。手机拍摄的照片如何记录详细的位置信息，本经验以华为Mate9为例，展示如何从手机照片定位至拍摄地点。<font color=#c85d44>（同时，经测试，定位精度较高，为保护隐私，请关闭手机拍照功能中记录地理信息的功能，或者保护好照片避免外泄，以免被他人用于非法活动）</font></p><a id="more"></a><h2 id="1-获取GPS信息"><a href="#1-获取GPS信息" class="headerlink" title="1.获取GPS信息"></a>1.获取GPS信息</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;将照片复制至电脑。点击照片，右键--“右键菜单”--“属性”--“详细信息”，下拉至“GPS”，将会看到经纬度信息。如下图所示：<br><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/D:/data/imagespostion.JPG" alt=""></fancybox></p><h2 id="2-经纬度计算方法"><a href="#2-经纬度计算方法" class="headerlink" title="2.经纬度计算方法"></a>2.经纬度计算方法</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;我们可以看到经纬度信息，<font color=#c85d44>是以度分秒的格式展示的（度分秒之间以“；”间隔），为了方便定位，我们需要将度分秒转换为度的格式。</font><br>计算方法：经纬度同理（本例为32；49；49.942932000005413）<br>经度：度+（分+秒/60）/60，即32+(49+49.9429/60)/60=32.8305;</p><h2 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h2><p>在<a href="http://www.gpsov.com/cn/main.php" target="_blank" rel="noopener">奥维地图</a>上将计算后的经纬度（以英文格式书写）代入其中，就可以获得地理位置信息。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 定位照片拍摄位置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx（二）：Nginx的命令和配置文件</title>
      <link href="/2019/11/27/Nginx(%E4%BA%8C)/"/>
      <url>/2019/11/27/Nginx(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<p><font size=5 color=#00ced1 size=5 face="黑体">与众不同的生活方式很累人呢，因为找不到借口</font></p><p>&nbsp;&nbsp;&nbsp;&nbsp;在上一章节中，我们以及了解到正向、反向代理、负载均衡和动静分离的基本概念，安装教程，而在本节中将会了解到在</p><blockquote><p><font size=4 color=#FF0000>本文要点：</font><br>1.理清概念<br>2.Linux下Nginx的常用命令<br>3.Nginx的基本配置文件nginx.conf<br>4.Nginx 配置实例-反向代理实例 1 </p></blockquote><a id="more"></a><h3 id="1-理清概念"><a href="#1-理清概念" class="headerlink" title="1.理清概念"></a>1.理清概念</h3><p>docker创建Nginx容器很简单：共享数据卷，外部访问端口映射<br>window下运行nginx，只需简单式一直点击“NEXT”安装，然后添加到环境变量即可<br><font color=#00ced1 size=5 face="黑体">在Linux下启动nginx相对比较麻烦，如果你采用其它两种方式，可以跳过本节，本节主要是介绍Linux下的运行命令</font><br>无论哪种方式启动Nginx，其核心的配置文件以及接下来的几个配置实例都是通用的</p><h3 id="2-Linux下Nginx的常用命令"><a href="#2-Linux下Nginx的常用命令" class="headerlink" title="2.Linux下Nginx的常用命令"></a>2.Linux下Nginx的常用命令</h3><p><a href="http://ahrilove.top/2019/11/10/docker容器虚拟技术/">先关闭防火墙或者是开放目标端口</a></p><blockquote><p>进入nginx目录中 </p></blockquote><p>cd  /usr/local/nginx/sbin (前面路径有可能不同，主要是nginx内的nginx/sbin路径)</p><blockquote><p>1、查看nginx版本号  </p></blockquote><p>./nginx -v </p><blockquote><p>2、启动nginx </p></blockquote><p>./nginx </p><blockquote><p>3、停止nginx  </p></blockquote><p>./nginx  -s  stop </p><blockquote><p>4、重新加载nginx  </p></blockquote><p>./nginx -s reload </p><h3 id="3-ginx的基本配置文件nginx-conf"><a href="#3-ginx的基本配置文件nginx-conf" class="headerlink" title="3.ginx的基本配置文件nginx.conf"></a>3.ginx的基本配置文件nginx.conf</h3><h4 id="3-1、nginx-配置文件位置"><a href="#3-1、nginx-配置文件位置" class="headerlink" title="3.1、nginx 配置文件位置"></a>3.1、nginx 配置文件位置</h4><p>cd /usr/local/nginx/conf/nginx.conf </p><h4 id="3-2、配置文件中的内容-包含三部分内容"><a href="#3-2、配置文件中的内容-包含三部分内容" class="headerlink" title="3.2、配置文件中的内容 包含三部分内容"></a>3.2、配置文件中的内容 包含三部分内容</h4><p>（1）全局块：配置服务器整体运行的配置指令 比如 worker_processes  1;处理并发数的配置 </p><p>（2）events 块：影响 Nginx 服务器与用户的网络连接 比如 worker_connections  1024; 支持的最大连接数为 1024 </p><p>（3）http 块 还包含两部分： http 全局块 server 块</p><h4 id="3-3-默认的nginx-conf"><a href="#3-3-默认的nginx-conf" class="headerlink" title="3.3 默认的nginx.conf"></a>3.3 默认的nginx.conf</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line"><span class="string">worker_processes</span>  <span class="number">1</span><span class="string">;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"><span class="string">events</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">worker_connections</span>  <span class="number">1024</span><span class="string">;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">http</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">include</span>       <span class="string">mime.types;</span></span><br><span class="line">    <span class="string">default_type</span>  <span class="string">application/octet-stream;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">    <span class="comment">#                  '$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">    <span class="comment">#                  '"$http_user_agent" "$http_x_forwarded_for"';</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/access.log  main;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">sendfile</span>        <span class="string">on;</span></span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    <span class="string">keepalive_timeout</span>  <span class="number">65</span><span class="string">;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">server</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">listen</span>       <span class="number">80</span><span class="string">;</span></span><br><span class="line">        <span class="string">server_name</span>  <span class="string">localhost;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">        <span class="string">location</span> <span class="string">/</span> <span class="string">&#123;</span></span><br><span class="line">            <span class="string">root</span>   <span class="string">html;</span></span><br><span class="line">            <span class="string">index</span>  <span class="string">index.html</span> <span class="string">index.htm;</span></span><br><span class="line">        <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="number">404.</span><span class="string">md</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="string">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  <span class="string">/50x.html;</span></span><br><span class="line">        <span class="string">location</span> <span class="string">=</span> <span class="string">/50x.html</span> <span class="string">&#123;</span></span><br><span class="line">            <span class="string">root</span>   <span class="string">html;</span></span><br><span class="line">        <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    proxy_pass   http://127.0.0.1;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    root           html;</span></span><br><span class="line">        <span class="comment">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class="line">        <span class="comment">#    fastcgi_index  index.php;</span></span><br><span class="line">        <span class="comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class="line">        <span class="comment">#    include        fastcgi_params;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># deny access to .htaccess files, if Apache's document root</span></span><br><span class="line">        <span class="comment"># concurs with nginx's one</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ /\.ht &#123;</span></span><br><span class="line">        <span class="comment">#    deny  all;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># another virtual host using mix of IP-, name-, and port-based configuration</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       8000;</span></span><br><span class="line">    <span class="comment">#    listen       somename:8080;</span></span><br><span class="line">    <span class="comment">#    server_name  somename  alias  another.alias;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># HTTPS server</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       443 ssl;</span></span><br><span class="line">    <span class="comment">#    server_name  localhost;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_certificate      cert.pem;</span></span><br><span class="line">    <span class="comment">#    ssl_certificate_key  cert.key;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_session_cache    shared:SSL:1m;</span></span><br><span class="line">    <span class="comment">#    ssl_session_timeout  5m;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span><br><span class="line">    <span class="comment">#    ssl_prefer_server_ciphers  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="4-Nginx-配置实例-反向代理实例-1"><a href="#4-Nginx-配置实例-反向代理实例-1" class="headerlink" title="4.Nginx 配置实例-反向代理实例 1"></a>4.Nginx 配置实例-反向代理实例 1</h3><h4 id="4-1、实现效果"><a href="#4-1、实现效果" class="headerlink" title="4.1、实现效果"></a>4.1、实现效果</h4><p>（1）打开浏览器，在浏览器地址栏输入地址 <a href="http://www.123.com，跳转到" target="_blank" rel="noopener">www.123.com，跳转到</a> liunx 系统 tomcat 主页 面中 </p><h4 id="4-2、准备工作"><a href="#4-2、准备工作" class="headerlink" title="4.2、准备工作"></a>4.2、准备工作</h4><p>（1）在 liunx 系统安装 tomcat，使用默认端口 8080 * tomcat 安装文件放到 liunx 系统中，解压 * 进入 tomcat 的 bin 目录中，./startup.sh 启动 tomcat 服务器 </p><p>（2）对外开放访问的端口<br>firewall-cmd --add-port=8080/tcp --permanent<br>firewall-cmd --reload </p><p>（3）查看已经开放的端口号<br>firewall-cmd –list-all </p><p>（4）在 windows 系统中通过浏览器访问 tomcat 服务器(linux_IP + tomcat_Port)</p><h4 id="4-3、访问过程分析"><a href="#4-3、访问过程分析" class="headerlink" title="4.3、访问过程分析"></a>4.3、访问过程分析</h4><blockquote><p>映射IP</p></blockquote><p>假设域名<a href="http://www.123.com映射的IP为Linux上的nginx的ip地址（比如我的是192.168.17.129:80）,nginx也相当于一个分发器，将请求发送至tomcat服务器" target="_blank" rel="noopener">www.123.com映射的IP为Linux上的nginx的ip地址（比如我的是192.168.17.129:80）,nginx也相当于一个分发器，将请求发送至tomcat服务器</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">访问过程分析</span><br><span class="line">windows端   ----------&gt;Nginx（linux_IP：80）------&gt;tomcat(127.0.0.1:8080)</span><br><span class="line">（假设访问www.123.com）</span><br></pre></td></tr></table></figure><blockquote><p>在 nginx 进行请求转发的配置（反向代理配置）</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">server&#123;</span></span><br><span class="line">    <span class="string">listen</span> <span class="number">80</span><span class="string">;</span> <span class="comment"># 监听端口</span></span><br><span class="line">    <span class="string">server_name</span>   <span class="string">www.123.com;</span>  <span class="comment"># 配置域名</span></span><br><span class="line">    </span><br><span class="line">    <span class="string">location</span> <span class="string">/&#123;</span></span><br><span class="line">        <span class="string">proxy_pass</span> <span class="attr">http://127.0.0.1:8080;</span>  <span class="comment"># 跳转到127.0.0.1：8080路径</span></span><br><span class="line">        <span class="string">index</span> <span class="string">index.html</span> <span class="string">index.htm</span> <span class="string">index.jsp;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>如上配置，我们监听 80 端口，访问域名为 <a href="http://www.123.com，不加端口号时默认为" target="_blank" rel="noopener">www.123.com，不加端口号时默认为</a> 80 端口，故 访问该域名时会跳转到 127.0.0.1:8080 路径上。在浏览器端输入 <a href="http://www.123.com后，成功后直接跳转到tomcat主页" target="_blank" rel="noopener">www.123.com后，成功后直接跳转到tomcat主页</a></p>]]></content>
      
      
      <categories>
          
          <category> 服务器架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx（一）：基本概念</title>
      <link href="/2019/11/25/Nginx/"/>
      <url>/2019/11/25/Nginx/</url>
      
        <content type="html"><![CDATA[<p><font size=5 color=#00ced1 size=5 face="黑体">守住一方平安，尽力而为，问心无愧就好。</font></p><p>&nbsp;&nbsp;&nbsp;&nbsp;Nginx同Apache一样都是一种WEB服务器，Nginx是一款自由的、开源的、高性能的HTTP服务器和反向代理服务器；同时也是一个IMAP、POP3、SMTP代理服务器；Nginx可以作为一个HTTP服务器进行网站的发布处理，另外Nginx可以作为反向代理进行负载均衡的实现。</p><blockquote><p><font size=4 color=#FF0000>本文要点：</font><br>正向代理<br>反向代理<br>负载均衡<br>动静分离<br>Nginx安装教程</p></blockquote><a id="more"></a><h2 id="1-正向代理"><a href="#1-正向代理" class="headerlink" title="1.正向代理"></a>1.正向代理</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在如今的网络环境下，我们如果由于技术需要要去访问国外的某些网站，此时你会发现位于国外的某网站我们通过浏览器是没有办法访问的，此时大家可能都会用一个操作FQ进行访问，FQ的方式主要是找到一个可以访问国外网站的代理服务器，我们将请求发送给代理服务器，代理服务器去访问国外的网站，然后将访问到的数据传递给我们！<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上述这样的代理模式称为正向代理，正向代理最大的特点是<font size=#FF0000>客户端非常明确要访问的服务器地址；服务器只清楚请求来自哪个代理服务器，而不清楚来自哪个具体的客户端；正向代理模式屏蔽或者隐藏了真实客户端信息。</font>来看个示意图（我把客户端和正向代理框在一块，同属于一个环境，后面我有介绍）：<br><fancybox><img src="https://img2018.cnblogs.com/blog/1202586/201812/1202586-20181211123717325-1261206014.png" alt=""></fancybox><br><font size=#FF0000>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;客户端必须设置正向代理服务器，当然前提是要知道正向代理服务器的IP地址</font>，还有代理程序的端口。如图。<br><fancybox><img src="https://img2018.cnblogs.com/blog/1202586/201812/1202586-20181211121039404-1910765480.png" alt=""></fancybox><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;总结来说：正向代理，”它代理的是客户端，代客户端发出请求”，是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端必须要进行一些特别的设置才能使用正向代理<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;正向代理的用途：<br>（1）访问原来无法访问的资源，如Google<br>（2） 可以做缓存，加速访问资源<br>（3）对客户端访问授权，上网进行认证<br>（4）代理可以记录用户访问记录（上网行为管理），对外隐藏用户信息</p><h2 id="2-反向代理"><a href="#2-反向代理" class="headerlink" title="2.反向代理"></a>2.反向代理</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;明白了什么是正向代理，我们继续看关于反向代理的处理方式，举例如我大天朝的某宝网站，每天同时连接到网站的访问人数已经爆表，单个服务器远远不能满足人民日益增长的购买欲望了，此时就出现了一个大家耳熟能详的名词：分布式部署；也就是通过部署多台服务器来解决访问人数限制的问题；某宝网站中大部分功能也是直接使用Nginx进行反向代理实现的，并且通过封装Nginx和其他的组件之后起了个高大上的名字：Tengine，有兴趣的童鞋可以访问Tengine的官网查看具体的信息：<a href="http://tengine.taobao.org/。" target="_blank" rel="noopener">http://tengine.taobao.org/。</a><br><fancybox><img src="https://images2018.cnblogs.com/blog/1202586/201804/1202586-20180406175939873-925019958.png" alt="反向代理"></fancybox><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过上述的图解大家就可以看清楚了，多个客户端给服务器发送的请求，Nginx服务器接收到之后，按照一定的规则分发给了后端的业务处理服务器进行处理了。此时~请求的来源也就是客户端是明确的，但是请求具体由哪台服务器处理的并不明确了，Nginx扮演的就是一个反向代理角色。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;客户端是无感知代理的存在的，反向代理对外都是透明的，访问者并不知道自己访问的是一个代理。因为客户端不需要任何配置就可以访问。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;反向代理，”它代理的是服务端，代服务端接收请求”，主要用于服务器集群分布式部署的情况下，反向代理隐藏了服务器的信息。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;反向代理的作用：<br>（1）保证内网的安全，通常将反向代理作为公网访问地址，Web服务器是内网<br>（2）负载均衡，通过反向代理服务器来优化网站的负载</p><h2 id="3-项目场景以及两者区别"><a href="#3-项目场景以及两者区别" class="headerlink" title="3.项目场景以及两者区别"></a>3.项目场景以及两者区别</h2><p>通常情况下，我们在实际项目操作时，正向代理和反向代理很有可能会存在在一个应用场景中，正向代理代理客户端的请求去访问目标服务器，目标服务器是一个反向代理服务器，反向代理了多台真实的业务处理服务器。具体的拓扑图如下：<br><fancybox><img src="https://images2018.cnblogs.com/blog/1202586/201804/1202586-20180406180130452-1246060303.png" alt="反向代理"></fancybox><br>两者区别：<br><fancybox><img src="https://img2018.cnblogs.com/blog/1202586/201812/1202586-20181211122806997-940664368.png" alt="两者区别"></fancybox><br>图解：</p><p>在正向代理中，Proxy和Client同属于一个LAN（图中方框内），隐藏了客户端信息；</p><p>在反向代理中，Proxy和Server同属于一个LAN（图中方框内），隐藏了服务端信息；</p><p>实际上，Proxy在两种代理中做的事情都是替服务器代为收发请求和响应，不过从结构上看正好左右互换了一下，所以把后出现的那种代理方式称为反向代理了</p><h2 id="4-负载均衡"><a href="#4-负载均衡" class="headerlink" title="4.负载均衡"></a>4.负载均衡</h2><p>我们已经明确了所谓代理服务器的概念，那么接下来，Nginx扮演了反向代理服务器的角色，它是以依据什么样的规则进行请求分发的呢？不用的项目应用场景，分发的规则是否可以控制呢？</p><p>　　这里提到的客户端发送的、Nginx反向代理服务器接收到的请求数量，就是我们说的负载量。</p><p>　　请求数量按照一定的规则进行分发到不同的服务器处理的规则，就是一种均衡规则。</p><p>　　所以，将服务器接收到的请求按照规则分发的过程，称为负载均衡。</p><p>　　负载均衡在实际项目操作过程中，有硬件负载均衡和软件负载均衡两种，硬件负载均衡也称为硬负载，如F5负载均衡，相对造价昂贵成本较高，但是数据的稳定性安全性等等有非常好的保障，如中国移动中国联通这样的公司才会选择硬负载进行操作；更多的公司考虑到成本原因，会选择使用软件负载均衡，软件负载均衡是利用现有的技术结合主机硬件实现的一种消息队列分发机制。<br><fancybox><img src="https://images2018.cnblogs.com/blog/1202586/201804/1202586-20180406180405961-333776342.png" alt=""></fancybox><br>Nginx支持的负载均衡调度算法方式如下：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.weight轮询(默认，常用)：接收到的请求按照权重分配到不同的后端服务器，即使在使用过程中，某一台后端服务器宕机，Nginx会自动将该服务器剔除出队列，请求受理情况不会受到任何影响。 这种方式下，可以给不同的后端服务器设置一个权重值(weight)，用于调整不同的服务器上请求的分配率；权重数据越大，被分配到请求的几率越大；该权重值，主要是针对实际工作环境中不同的后端服务器硬件配置进行调整的。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.ip_hash（常用）：每个请求按照发起客户端的ip的hash结果进行匹配，这样的算法下一个固定ip地址的客户端总会访问到同一个后端服务器，这也在一定程度上解决了集群部署环境下session共享的问题。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.fair：智能调整调度算法，动态的根据后端服务器的请求处理到响应的时间进行均衡分配，响应时间短处理效率高的服务器分配到请求的概率高，响应时间长处理效率低的服务器分配到的请求少；结合了前两者的优点的一种调度算法。但是需要注意的是Nginx默认不支持fair算法，如果要使用这种调度算法，请安装upstream_fair模块。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.url_hash：按照访问的url的hash结果分配请求，每个请求的url会指向后端固定的某个服务器，可以在Nginx作为静态服务器的情况下提高缓存效率。同样要注意Nginx默认不支持这种调度算法，要使用的话需要安装Nginx的hash软件包。</p><h2 id="5-动静分离"><a href="#5-动静分离" class="headerlink" title="5.动静分离"></a>5.动静分离</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度。降低原来单个服务器的压力。 </p><h2 id="6-nginx安装"><a href="#6-nginx安装" class="headerlink" title="6.nginx安装"></a>6.nginx安装</h2><p><i class="fas fa-hand-point-right"></i><a href="https://www.cnblogs.com/wcwnina/p/8728430.html" target="_blank" rel="noopener">windows下安装与部署Nginx</a><br><i class="fas fa-hand-point-right"></i><a href="https://www.cnblogs.com/wcwnina/p/8728430.html" target="_blank" rel="noopener">Linux下安装与部署Nginx</a><br><i class="fas fa-hand-point-right"></i>以后都推荐再docker下安装各式各样的环境<a href="http://ahrilove.top/2019/11/10/docker容器虚拟技术/">Ubuntu+docker下安装与部署Nginx</a></p>]]></content>
      
      
      <categories>
          
          <category> 服务器架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> apache </tag>
            
            <tag> nginx </tag>
            
            <tag> 负载均衡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript篇章四：快速入门</title>
      <link href="/2019/11/23/Javascript%E7%AF%87%E7%AB%A0%E5%9B%9B/"/>
      <url>/2019/11/23/Javascript%E7%AF%87%E7%AB%A0%E5%9B%9B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>1.条件判断以及prompt() 方法<br>2.循环，比较运算以及逻辑运算<br>3.Map与Set数据结构<br>4.全局作用域与浏览器对象<br>5.高阶函数<br>6.操作表单<br>7.Timing事件</p></blockquote><a id="more"></a><h3 id="1-条件判断以及prompt-方法"><a href="#1-条件判断以及prompt-方法" class="headerlink" title="1.条件判断以及prompt() 方法"></a>1.条件判断以及prompt() 方法</h3><p>多条件判断：if…else if…else if…else<br>prompt(text,defaultText)方法用于显示可提示用户进行输入的对话框（即输入数据）,参数一表示提示文本，参数二表示默认值<br>let name=prompt(“Please enter your name”,”ritian zhao”)</p><h3 id="2-循环，比较运算以及逻辑运算"><a href="#2-循环，比较运算以及逻辑运算" class="headerlink" title="2.循环，比较运算以及逻辑运算"></a>2.循环，比较运算以及逻辑运算</h3><p>循环语句：</p><ol><li>for(i=1;i&lt;=1000;i++){}</li><li>for (item in items){ item是items对象的键名key } (<font color="#FF6347">for-in循环是为遍历对象而设计的，并不适用于遍历数组</font>)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个js对象</span></span><br><span class="line"><span class="keyword">let</span> b = &#123;<span class="attr">name</span>: <span class="string">"chd"</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">sex</span>: <span class="string">"man"</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">in</span> b)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(index+<span class="string">":"</span>+b[index])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 运行结果</span></span><br><span class="line"><span class="comment">name:chd</span></span><br><span class="line"><span class="comment">age:18</span></span><br><span class="line"><span class="comment">sex:man</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ol start="3"><li>while(){} </li></ol><p>比较运算符：</p><ul><li>= ：表示赋值运算</li><li>== ：判断是否值相等</li><li>=== ：判断值和类型是否相等</li><li>！= ：不等于</li><li>&gt; &lt; &gt;= &lt;= :基本判断</li></ul><p>逻辑运算符：</p><ul><li>&amp;&amp; ：逻辑与</li><li>|| ：逻辑或</li><li>！ ：逻辑非</li></ul><ol><li>JS中的||符号：</li></ol><p>运算方法：</p><pre><code>只要“||”前面为false,不管“||”后面是true还是false，都返回“||”后面的值。只要“||”前面为true,不管“||”后面是true还是false，都返回“||”前面的值。</code></pre><p>总结：<strong>||符号，真前假后</strong></p><ol start="2"><li>JS中的&amp;&amp;符号：</li></ol><p>运算方法：</p><pre><code>只要“&amp;&amp;”前面是false，无论“&amp;&amp;”后面是true还是false，结果都将返“&amp;&amp;”前面的值;只要“&amp;&amp;”前面是true，无论“&amp;&amp;”后面是true还是false，结果都将返“&amp;&amp;”后面的值;</code></pre><p>总结：<strong>&amp;&amp;符号，假前真后</strong></p><p>弄懂了以上说的还应该知道：</p><p><strong>在js逻辑运算中，0、&quot;&quot;、null、false、undefined、NaN都会判为false，其他都为true</strong></p><h3 id="3-return终止函数"><a href="#3-return终止函数" class="headerlink" title="3. return终止函数"></a>3. return终止函数</h3><p>1.return后面的语句不执行<br>2.JavaScript里的return只能返回一个数值（区别于python可以返回多个）</p><h3 id="4-Map与Set数据结构"><a href="#4-Map与Set数据结构" class="headerlink" title="4.Map与Set数据结构"></a>4.Map与Set数据结构</h3><h4 id="Map是一组键值对的结构"><a href="#Map是一组键值对的结构" class="headerlink" title="Map是一组键值对的结构"></a>Map是一组键值对的结构</h4><p>PS：这里的Map是一种数据结构，与map方法是完全不一样的，注意区分！！</p><p>举个例子，假设要根据同学的名字查找对应的成绩，如果用Array实现，需要两个Array：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> names = [<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>];</span><br><span class="line"><span class="keyword">let</span> scores = [<span class="number">95</span>, <span class="number">75</span>, <span class="number">85</span>];</span><br></pre></td></tr></table></figure><p>给定一个名字，要查找对应的成绩，就先要在names中找到对应的位置，再从scores取出对应的成绩，Array越长，耗时越长。</p><p>如果用Map实现，只需要一个“名字”-“成绩”的对照表，直接根据名字查找成绩，无论这个表有多大，查找速度都不会变慢。用JavaScript写一个Map如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'Michael'</span>, <span class="number">95</span>], [<span class="string">'Bob'</span>, <span class="number">75</span>], [<span class="string">'Tracy'</span>, <span class="number">85</span>]]);</span><br><span class="line">m.get(<span class="string">'Michael'</span>); <span class="comment">// 95</span></span><br></pre></td></tr></table></figure><blockquote><p>Map的方法（初始化Map需要一个二维数组，或者直接初始化一个空Map）</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>(); <span class="comment">// 空Map</span></span><br><span class="line">m.set(<span class="string">'Adam'</span>, <span class="number">67</span>); <span class="comment">// 添加新的key-value</span></span><br><span class="line">m.set(<span class="string">'Bob'</span>, <span class="number">59</span>);</span><br><span class="line">m.has(<span class="string">'Adam'</span>); <span class="comment">// 是否存在key 'Adam': true</span></span><br><span class="line">m.get(<span class="string">'Adam'</span>); <span class="comment">// 67,获取值</span></span><br><span class="line">m.delete(<span class="string">'Adam'</span>); <span class="comment">// 删除key 'Adam'</span></span><br><span class="line">m.get(<span class="string">'Adam'</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>由于一个key只能对应一个value，所以，多次对一个key放入value，map函数会把后面的值会把前面的值冲掉</p><blockquote><p>Map对象的排序</p></blockquote><p>由前面我们已经知道了如何创建一个Map对象，现在我们开始深入Map对象的排序<br>先创建一个Map对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="string">"b"</span>,<span class="number">8</span>);</span><br><span class="line">map.set(<span class="string">"c"</span>,<span class="number">10</span>);</span><br><span class="line">map.set(<span class="string">"a"</span>,<span class="number">1</span>);</span><br><span class="line">map.set(<span class="string">"d"</span>,<span class="number">7</span>);</span><br><span class="line">map.set(<span class="string">"e"</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p><strong>无论是按照key还是value排序，都必须先转换为数组对象</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayObj=<span class="built_in">Array</span>.from(map);</span><br></pre></td></tr></table></figure><p>得到的arrayObj中索引0为map中的key,索引1为map中的value,下面可以采用数组的排序方法（根据value值）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">arrayObj.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;<span class="keyword">return</span> a[<span class="number">1</span>]-b[<span class="number">1</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*结果为：</span></span><br><span class="line"><span class="comment">(5) [Array(2), Array(2), Array(2), Array(2), Array(2)]</span></span><br><span class="line"><span class="comment">0: (2) ["a", "1"]</span></span><br><span class="line"><span class="comment">1: (2) ["e", "3"]</span></span><br><span class="line"><span class="comment">2: (2) ["d", "7"]</span></span><br><span class="line"><span class="comment">3: (2) ["b", "8"]</span></span><br><span class="line"><span class="comment">4: (2) ["c", "10"]</span></span><br><span class="line"><span class="comment">length: 5</span></span><br><span class="line"><span class="comment">__proto__: Array(0)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>如果是想按key排序，只需要更改一下sort方法为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayObj.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;<span class="keyword">return</span> a[<span class="number">0</span>].localeCompare(b[<span class="number">0</span>])&#125;)</span><br></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(5) [Array(2), Array(2), Array(2), Array(2), Array(2)]</span><br><span class="line">0: (2) [&quot;a&quot;, &quot;1&quot;]</span><br><span class="line">1: (2) [&quot;b&quot;, &quot;8&quot;]</span><br><span class="line">2: (2) [&quot;c&quot;, &quot;10&quot;]</span><br><span class="line">3: (2) [&quot;d&quot;, &quot;7&quot;]</span><br><span class="line">4: (2) [&quot;e&quot;, &quot;3&quot;]</span><br><span class="line">length: 5</span><br><span class="line">__proto__: Array(0)</span><br></pre></td></tr></table></figure><p><strong>接下来可以这样将数组对象还原为Map对象</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="keyword">new</span> <span class="built_in">Map</span>(arrayObj.map(<span class="function"><span class="params">i</span> =&gt;</span> [i[<span class="number">0</span>], i[<span class="number">1</span>]]));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*结果为：</span></span><br><span class="line"><span class="comment">Map(5) &#123;"a" =&gt; "1", "e" =&gt; "3", "d" =&gt; "7", "b" =&gt; "8", "c" =&gt; "10"&#125;</span></span><br><span class="line"><span class="comment">size: (...)</span></span><br><span class="line"><span class="comment">__proto__: Map</span></span><br><span class="line"><span class="comment">[[Entries]]: Array(5)</span></span><br><span class="line"><span class="comment">0: &#123;"a" =&gt; "1"&#125;</span></span><br><span class="line"><span class="comment">1: &#123;"e" =&gt; "3"&#125;</span></span><br><span class="line"><span class="comment">2: &#123;"d" =&gt; "7"&#125;</span></span><br><span class="line"><span class="comment">3: &#123;"b" =&gt; "8"&#125;</span></span><br><span class="line"><span class="comment">4: &#123;"c" =&gt; "10"&#125;</span></span><br><span class="line"><span class="comment">length: 5*/</span></span><br></pre></td></tr></table></figure><h4 id="Set"><a href="#Set" class="headerlink" title="Set()"></a>Set()</h4><blockquote><p>Set和Map类似，也是一组key的集合，但不存储value。</p></blockquote><p>由于key不能重复，所以，在Set中，没有重复的key。要创建一个Set，需要提供一个Array作为输入，或者直接创建一个空Set</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="keyword">new</span> <span class="built_in">Set</span>(); <span class="comment">// 空Set</span></span><br><span class="line"><span class="keyword">let</span> s2 = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">//一个Array含1, 2, 3</span></span><br></pre></td></tr></table></figure><blockquote><p>重复元素在Set中自动被过滤：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="string">'3'</span>]);</span><br><span class="line">s; <span class="comment">// Set &#123;1, 2, 3, "3"&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>通过add(key)方法可以添加元素到Set中，可以重复添加，但不会有效果：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s.add(<span class="number">4</span>);</span><br><span class="line">s; <span class="comment">// Set &#123;1, 2, 3, 4&#125;</span></span><br><span class="line">s.add(<span class="number">4</span>);</span><br><span class="line">s; <span class="comment">// 仍然是 Set &#123;1, 2, 3, 4&#125;</span></span><br></pre></td></tr></table></figure><h3 id="5-window全局作用域"><a href="#5-window全局作用域" class="headerlink" title="5.window全局作用域"></a>5.window全局作用域</h3><p>1.不在任何函数内定义的变量就具有全局作用域，实际上，JavaScript默认有一个全局对象window，全局作用域的变量实际上被绑定到window的一个属性。<br>window.属性/window.方法<br>2.ES6引入了新的关键字let，用let替代let可以申明一个块级作用域的变量<br>3.ES6标准引入了新的关键字const来定义常量，const与let都具有块级作用域</p><p>浏览器对象：window,navigator,screen,Location，document</p><h4 id="5-1-window对象"><a href="#5-1-window对象" class="headerlink" title="5.1 window对象"></a>5.1 window对象</h4><p>window对象不仅充当全局作用域，而且表示浏览器的窗口</p><ul><li><p>window.innerWidth和window.innerHeight:可以获取浏览器窗口的内部宽度和高度。内部宽高是指除去菜单栏、工具栏、边框等占位元素后，用于显示网页的净宽高</p></li><li><p>windows.outerWidth和outerHeight属性，可以获取浏览器窗口的整个宽高</p></li><li><p>拓：<strong>window.onresize()监听浏览器窗口高宽变化，注意要使用<a href="https://www.cnblogs.com/cheyunhua/p/11124835.html" target="_blank" rel="noopener">箭头函数</a></strong>：</p></li></ul><p>window.onresize()官方定义为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">window.onresize=function()&#123;</span><br><span class="line">    SomeJavaScriptCode</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>但是最近的一个项目（Vue+ThinkPHP）中，监听浏览器窗口变化时，不适用箭头函数就会报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    //重设图表高宽</span><br><span class="line">    resizeChart()&#123;</span><br><span class="line">        //监听窗口高宽变化，注意要使用箭头函数</span><br><span class="line">        window.onresize = () =&gt; &#123;</span><br><span class="line">            this.formTableMain2Chart.resize();     //重设费用报销单图表的高宽</span><br><span class="line">            this.formTableMain147Chart.resize();     //重设147招待费用报销单图表的高宽</span><br><span class="line">            this.formTableMain58Chart.resize();     //重设58差旅费用报销单图表的高宽</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br><p>2020-5-7:关于箭头函数的补充： <strong>包含多条语句，这时候就不能省略{ … }和return</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 箭头函数最标准的写法，不要搞一些花里胡哨的</span></span><br><span class="line"><span class="keyword">let</span> funcName = <span class="function">(<span class="params">a,b</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b?a:b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>window.print():打印当前页面</li><li><strong>重要：</strong> <a href="https://www.cnblogs.com/beijingstruggle/p/5845781.html" target="_blank" rel="noopener">window.event</a>：获取事件对象</li></ul><p>event代表事件的状态，例如触发event对象的元素、鼠标的位置及状态、按下的键等等。event对象只在事件发生的过程中才有效。event的某些属性只对特定的事件有意义</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通常写法</span></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> e = el || <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="built_in">console</span>.log(e.keyCode);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-navigator对象表示浏览器信息"><a href="#2-navigator对象表示浏览器信息" class="headerlink" title="2.navigator对象表示浏览器信息"></a>2.navigator对象表示浏览器信息</h4><p>navigator.appName：浏览器名称；<br>navigator.appVersion：浏览器版本；<br>navigator.language：浏览器设置的语言；<br>navigator.platform：操作系统类型；<br>navigator.userAgent：浏览器设定的User-Agent字符串<br>navigator.webdriver:返回浏览器是否被WebDriver驱动的布尔值（即判断是否是selenium控制爬虫程序）</p><h4 id="3-screen表示屏幕信息"><a href="#3-screen表示屏幕信息" class="headerlink" title="3.screen表示屏幕信息"></a>3.screen表示屏幕信息</h4><p>screen.width：屏幕宽度，以像素为单位；<br>screen.height：屏幕高度，以像素为单位；<br>screen.colorDepth：返回颜色位数，如8、16、24。</p><h4 id="4-Location对象表示当前页面的URL"><a href="#4-Location对象表示当前页面的URL" class="headerlink" title="4.Location对象表示当前页面的URL"></a>4.Location对象表示当前页面的URL</h4><p>Location对象表示当前页面的URL信息，即地址栏</p><p>location.protocol; // ‘http’<br>location.host; // ‘<a href="http://www.example.com&#39;" target="_blank" rel="noopener">www.example.com&#39;</a><br>location.port; // ‘8080’<br>location.pathname; // ‘/path/index.html’<br>location.search; // ‘?a=1&amp;b=2’（<strong>查询字符串，携带参数向浏览器发送数据，必须带有‘？’</strong>）<br>location.hash; // ‘TOP’（<strong>锚点，url中的‘#’后面的数据</strong>）<br>location.href 获取完整url<br>window.location.href=&quot;新的跳转url”：跳转到指定的页面<br>location.assign(url)：加载一个新页面，在当前窗口跳转带这个url<br>location.replace(url)：原页面替换成新页面，在当前窗口替换带这个url，但不会产生历史记录，即无法后退<br>location.reload()：刷新当前窗口</p><h4 id="5-document对象表示当前页面"><a href="#5-document对象表示当前页面" class="headerlink" title="5.document对象表示当前页面"></a>5.document对象表示当前页面</h4><p>当浏览器载入 HTML 文档, 它就会成为 Document 对象(<strong>Document 对象是 Window 对象的一部分，可通过 window.document 属性对其进行访问</strong>)</p><p>Document 对象是 HTML 文档的根节点。</p><p>Document 对象使我们可以从脚本中对 HTML 页面中的所有元素进行访问。</p><p>Document对象的属性与方法：</p><ul><li><strong>document.addEventListener(type, handle, false)</strong> 在文档中添加事件监听对象。当用户在文档任何地方触发时，都会触发</li></ul><p>type: 事件触发类型，如click,keypress，mouseover等等</p><p>handle:事件处理函数，事件出发后，定义可能发生的变化！！</p><p>false: 表示事件冒泡模型，一般来说都是false(默认可以不写)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"click"</span>, draw, <span class="literal">false</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"spider案例"</span>).innerHTML = <span class="string">"Hello World!"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>document.getElementById() ：获取指定id的节点元素</li><li>document.getElementByClassName()：获取指定类名的节点元素</li><li>document.getElementByTagName()：获取指定标签名的节点元素</li></ul><p>举例说明：判断是否是mobile还是PC</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">IsPC</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">     <span class="keyword">let</span> userAgentInfo = navigator.userAgent;</span><br><span class="line">     <span class="keyword">let</span> Agents = [<span class="string">"Android"</span>, <span class="string">"iPhone"</span>, <span class="string">"SymbianOS"</span>, <span class="string">"Windows Phone"</span>, <span class="string">"iPad"</span>, <span class="string">"iPod"</span>];  </span><br><span class="line">     <span class="keyword">let</span> flag = <span class="literal">true</span>;  </span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">let</span> v = <span class="number">0</span>; v &lt; Agents.length; v++) &#123;  </span><br><span class="line">         <span class="keyword">if</span> (userAgentInfo.indexOf(Agents[v]) &gt; <span class="number">0</span>) &#123; flag = <span class="literal">false</span>; <span class="keyword">break</span>; &#125;  </span><br><span class="line">     &#125;  </span><br><span class="line">     <span class="keyword">return</span> flag;  </span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="regexp">/(iPhone|iPad|iPod|iOS)/i</span>.test(navigator.userAgent)) &#123;</span><br><span class="line">    <span class="comment">//alert(navigator.userAgent);  </span></span><br><span class="line">    <span class="built_in">window</span>.location.href =<span class="string">"iPhone.html"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/(Android)/i</span>.test(navigator.userAgent)) &#123;</span><br><span class="line">    <span class="comment">//alert(navigator.userAgent); </span></span><br><span class="line">    <span class="built_in">window</span>.location.href =<span class="string">"Android.html"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.location.href =<span class="string">"pc.html"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-高阶函数"><a href="#6-高阶函数" class="headerlink" title="6.高阶函数"></a>6.高阶函数</h3><blockquote><p>map/reduce函数，与python的map，reduce作用相同</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">let</span> results = arr.map(pow); <span class="comment">// [1, 4, 9, 16, 25, 36, 49, 64, 81]</span></span><br><span class="line"><span class="comment">// 对于reduce函数：函数必须接收两个参数，reduce()把结果继续和序列的下一个元素做累积计算</span></span><br><span class="line">[x1, x2, x3, x4].reduce(f) = f(f(f(x1, x2), x3), x4)</span><br></pre></td></tr></table></figure><blockquote><p>instanceof关键字</p></blockquote><p>这个关键字的用法是：A instanceof B ，返回值为boolean类型。用来判断A是否是B的实例对象或者B子类的实例对象。如果是则返回true,否则返回false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Man是Person的子类</span></span><br><span class="line">p = <span class="keyword">new</span> Person() ; <span class="comment">//</span></span><br><span class="line">m = <span class="keyword">new</span> Man() ; </span><br><span class="line">a = <span class="keyword">new</span> Animal() ;</span><br><span class="line">m <span class="keyword">instanceof</span> Man; <span class="comment">//返回true</span></span><br><span class="line">m <span class="keyword">instanceof</span> Animal;<span class="comment">//返回false</span></span><br><span class="line">m <span class="keyword">instanceof</span> Person;<span class="comment">//返回true</span></span><br></pre></td></tr></table></figure><h3 id="7-操作表单"><a href="#7-操作表单" class="headerlink" title="7.操作表单"></a>7.操作表单</h3><p>文本框，对应的&lt;input type=”text”&gt;，用于输入文本；</p><p>口令框，对应的&lt;input type=”password”&gt;，用于输入口令；</p><p>单选框，对应的&lt;input type=”radio”&gt;，用于选择一项；</p><p>复选框，对应的&lt;input type=”checkbox”&gt;，用于选择多项；</p><p>下拉框，对应的&lt;select&gt;，用于选择一项；</p><p>隐藏文本，对应的&lt;input type=”hidden”&gt;，用户不可见，但表单提交时会把隐藏文本发送到服务器。</p><blockquote><p>获取值</p></blockquote><p>如果我们获得了一个&lt;input&gt;节点的引用，就可以直接调用value获得对应的用户输入值，使用样例：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;变量名.value可以应用于text、password、hidden以及select。但是，对于单选框和复选框，value属性返回的永远是HTML预设的值，而我们需要获得的实际是用户是否“勾上了”选项，所以应该用checked判断：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;label&gt;&lt;input type="radio" name="weekday" id="monday" value="1"&gt; Monday&lt;/label&gt;</span></span><br><span class="line"><span class="comment">// &lt;label&gt;&lt;input type="radio" name="weekday" id="tuesday" value="2"&gt; Tuesday&lt;/label&gt;</span></span><br><span class="line"><span class="keyword">let</span> mon = <span class="built_in">document</span>.getElementById(<span class="string">'monday'</span>);</span><br><span class="line"><span class="keyword">let</span> tue = <span class="built_in">document</span>.getElementById(<span class="string">'tuesday'</span>);</span><br><span class="line">mon.value; <span class="comment">// '1'</span></span><br><span class="line">tue.value; <span class="comment">// '2'</span></span><br><span class="line">mon.checked; <span class="comment">// true或者false</span></span><br><span class="line">tue.checked; <span class="comment">// true或者false</span></span><br></pre></td></tr></table></figure><h3 id="8-面向对象编程"><a href="#8-面向对象编程" class="headerlink" title="8.面向对象编程"></a>8.面向对象编程</h3><blockquote><p>构造函数</p></blockquote><p>构造函数与普通函数的区别就是调用方式不同：普通函数是直接调用，而构造函数需要使用new关键字来调用<br>PS:构造函数的函数名一般默认首字母大写；构造函数里可以使用this;<a href="http://ahrilove.top/2019/12/03/python的executemany方法/">参考：本质与python的构造函数相同</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name)  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建一个对象per</span></span><br><span class="line"><span class="keyword">let</span> per = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(per);</span><br></pre></td></tr></table></figure><blockquote><p>indexOf()方法</p></blockquote><p>strings.indexOf(“目标字符串”):可返回某个指定的字符串值在字符串中首次出现的位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str=<span class="string">"Hello world!"</span>;</span><br><span class="line"><span class="built_in">document</span>.write(str.indexOf(<span class="string">"Hello"</span>) + <span class="string">"&lt;br /&gt;"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(str.indexOf(<span class="string">"World"</span>) + <span class="string">"&lt;br /&gt;"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(str.indexOf(<span class="string">"world"</span>));</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 0</span></span><br><span class="line"><span class="comment">*-1</span></span><br><span class="line"><span class="comment">*6</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>indexOf() 方法对大小写敏感！:如果要检索的字符串值没有出现，则该方法返回 -1,而且索引值默认起始值为0</p><h3 id="9-Timing事件"><a href="#9-Timing事件" class="headerlink" title="9.Timing事件"></a>9.Timing事件</h3><p>setTimeout(function,milliseconds):等待指定的毫秒数后执行函数<br>setInterval(function,milliseconds):等同于setTimeout()，但在每个给定的时间间隔内重复执行该函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTimer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="built_in">console</span>.log(d.getFullYear())</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// setInterval在每隔3秒就打印一次当前的月份</span></span><br><span class="line">setInterval(myTimer, <span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>clearTimeout(变量名) 方法停止执行 setTimeout() 中规定的函数。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用setTimeout等待执行函数，clearTimeout停止执行函数---&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"myVar = setTimeout(myFunction, 3000)"</span>&gt;</span>试一试<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"clearTimeout(myVar)"</span>&gt;</span>停止执行<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>举例说明：图片切换功能</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    img&#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 30vh;</span><br><span class="line">        object-fit: cover;</span><br><span class="line"><span class="css">        <span class="selector-tag">object-position</span>: <span class="selector-tag">left</span>;<span class="comment">/*可能有时候图片不是从头部开始截图的 所以需要定位一下*/</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/5a2e23a22908f.jpg"</span> <span class="attr">alt</span>=<span class="string">"content"</span> <span class="attr">width</span>=<span class="string">"50%"</span> <span class="attr">class</span>=<span class="string">"img-slide"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/5bbd6377a63ee.jpg"</span> <span class="attr">alt</span>=<span class="string">"content"</span> <span class="attr">width</span>=<span class="string">"50%"</span> <span class="attr">class</span>=<span class="string">"img-slide"</span> <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/5bbd6377a63ee.jpg"</span> <span class="attr">alt</span>=<span class="string">"content"</span> <span class="attr">width</span>=<span class="string">"50%"</span> <span class="attr">class</span>=<span class="string">"img-slide"</span> <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/5bbd6377a63ee.jpg"</span> <span class="attr">alt</span>=<span class="string">"content"</span> <span class="attr">width</span>=<span class="string">"50%"</span> <span class="attr">class</span>=<span class="string">"img-slide"</span> <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> index = <span class="number">1</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">photo_setting</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 获取元素节点集</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> a=<span class="built_in">document</span>.getElementsByClassName(<span class="string">"img-slide"</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span>(index&gt;=a.length) index=<span class="number">0</span>; <span class="comment">// 设置一个周期，当超过图片集数量，index就重新设置为0</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span></span><br><span class="line"><span class="actionscript">            a[i].style.display=<span class="string">'none'</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        a[index].style.display=<span class="string">'block'</span>;</span></span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line">    setInterval(photo_setting, 3000);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="经典案例"><a href="#经典案例" class="headerlink" title="经典案例"></a>经典案例</h3><h4 id="1-事件对象window-event：跟随鼠标移动提示框"><a href="#1-事件对象window-event：跟随鼠标移动提示框" class="headerlink" title="1.事件对象window.event：跟随鼠标移动提示框"></a>1.事件对象window.event：跟随鼠标移动提示框</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        a&#123;</span><br><span class="line">            display: block;</span><br><span class="line">            font-size: 40px;</span><br><span class="line">            margin: 100px;</span><br><span class="line">            width: 130px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#msg</span>&#123;</span></span><br><span class="line">            width: 300px;</span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:150px</span>;</span></span><br><span class="line">            background-color: aquamarine;</span><br><span class="line">            color: black;</span><br><span class="line">            display: none;</span><br><span class="line">            position: absolute;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">"height: 3000px; background-color:coral;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello world!!!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>唐太宗<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>唐高宗<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>武则天<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>唐玄宗<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> arr =  [<span class="string">"唐太宗，就是都能接受的妇女就是你附件是哪家"</span>,<span class="string">"唐高宗，嗲是打开的那就是的亲吻你的三打卡是你的"</span>,<span class="string">"武则天，多久啊圣诞节可能多久我都会阿斯顿你"</span>,<span class="string">"唐玄宗，段时达到八十段的那就是的哪家快递哈打赏"</span>];</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> aAs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"a"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> oMsg = <span class="built_in">document</span>.getElementById(<span class="string">"msg"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 循环遍历每一个a标签</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span></span><br><span class="line">                aAs[i].index = i;</span><br><span class="line"><span class="actionscript">                aAs[i].onmouseover = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                    oMsg.innerHTML = arr[<span class="keyword">this</span>.index];</span></span><br><span class="line"><span class="actionscript">                    oMsg.style.display = <span class="string">"block"</span>;</span></span><br><span class="line">                &#125;;</span><br><span class="line"><span class="actionscript">                aAs[i].onmouseout = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                    oMsg.style.display = <span class="string">"none"</span>;</span></span><br><span class="line">                &#125;;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 添加鼠标运动事件监听</span></span></span><br><span class="line"><span class="actionscript">                aAs[i].onmousemove = <span class="function"><span class="keyword">function</span><span class="params">(el)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> e = el || <span class="built_in">window</span>.event;</span></span><br><span class="line"><span class="vbscript">                    oMsg.style.<span class="built_in">left</span> = e.clientX +<span class="number">5</span>+ <span class="string">"px"</span>;</span></span><br><span class="line"><span class="actionscript">                    oMsg.style.top = e.clientY + <span class="number">5</span>+ <span class="string">"px"</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-js的window-event事件对象拓展-定时器"><a href="#2-js的window-event事件对象拓展-定时器" class="headerlink" title="2.js的window.event事件对象拓展~定时器"></a>2.js的window.event事件对象拓展~定时器</h4><p>秒表这个案例，展示了window.event事件对象的使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#div1</span>&#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            padding: 50px;</span><br><span class="line">            background-color: orange;</span><br><span class="line">            border: 1px solid black;</span><br><span class="line">            margin: auto;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#div1</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line">            font-size: 20px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#div1</span> <span class="selector-tag">button</span>&#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:30px</span>;</span></span><br><span class="line">            font-size: 16px;</span><br><span class="line">            margin-top: 3px;</span><br><span class="line">            color: black;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"hour"</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"min"</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"sec"</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn1"</span>&gt;</span>开始<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"reset"</span>&gt;</span>复位<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 通过id获取标签的方法进行简化</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">id</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(id);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 判断数值位数</span></span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">doubleNum</span><span class="params">(n)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span>(n&lt;<span class="number">10</span>)&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="string">"0"</span>+n;</span></span><br><span class="line"><span class="actionscript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> n;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 总秒数</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> i = <span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 记录定时器的返回值</span></span></span><br><span class="line"><span class="vbscript">        <span class="keyword">let</span> <span class="built_in">timer</span> = <span class="literal">null</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 代表当前的定时器是否运行</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> isRunning = <span class="literal">false</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 页面完全加载完后运行的代码块</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 设置开始函数功能</span></span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">startFunc</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line">                    i++;</span><br><span class="line"><span class="javascript">                    $(<span class="string">"sec"</span>).innerHTML =doubleNum(i%<span class="number">60</span>) ;</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">"min"</span>).innerHTML =doubleNum(<span class="built_in">parseInt</span>(i/<span class="number">60</span>)%<span class="number">60</span>) ;</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">"hour"</span>).innerHTML =doubleNum(<span class="built_in">parseInt</span>(i/<span class="number">3600</span>));</span></span><br><span class="line">                &#125;, 1000);</span><br><span class="line">            &#125;</span><br><span class="line">               </span><br><span class="line"><span class="actionscript">            <span class="comment">// 设置暂停功能</span></span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">pauseFunc</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="vbscript">                clearInterval(<span class="built_in">timer</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">//给按钮添加点击事件</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"btn1"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span> (!isRunning) &#123;</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">"btn1"</span>).innerHTML = <span class="string">"暂停"</span>;</span></span><br><span class="line"><span class="actionscript">                    isRunning = <span class="literal">true</span>;</span></span><br><span class="line">                    startFunc();</span><br><span class="line"><span class="actionscript">                &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">"btn1"</span>).innerHTML = <span class="string">"开始"</span>;</span></span><br><span class="line"><span class="actionscript">                    isRunning = <span class="literal">false</span>;</span></span><br><span class="line">                    pauseFunc();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            </span><br><span class="line"><span class="actionscript">            <span class="comment">// 设置复位功能</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"reset"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="vbscript">                clearInterval(<span class="built_in">timer</span>);</span></span><br><span class="line"><span class="javascript">                $(<span class="string">"sec"</span>).innerHTML =<span class="string">"00"</span> ;</span></span><br><span class="line"><span class="javascript">                $(<span class="string">"min"</span>).innerHTML =<span class="string">"00"</span> ;</span></span><br><span class="line"><span class="javascript">                $(<span class="string">"hour"</span>).innerHTML =<span class="string">"00"</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://blog.csdn.net/xuxiaoyinliu/article/details/89166234" target="_blank" rel="noopener">JS Map对象排序</a></li><li><a href="https://blog.csdn.net/example440982/article/details/90905730?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">js判断客户端是PC端还是移动端访问</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Javascript篇章三：js数字，数组与日期</title>
      <link href="/2019/11/22/Javascript%E7%AF%87%E7%AB%A0%E4%B8%89/"/>
      <url>/2019/11/22/Javascript%E7%AF%87%E7%AB%A0%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<p><font size=5 color=#00ced1 size=5 face="黑体">关关雎鸠，在河之洲。窈窕淑女，君子好逑</font></p><blockquote><p><font size=4 color=#FF0000>本文要点：</font><br>1.数值方法<br>2.数组以及数组属性和方法<br>3.日期<br>4.js数据类型转换大全<br>5.js的休眠函数<br>6.js正则表达式（RegExp）<br>7.js进制转换<br><fancybox><img src="http://hd.wallpaperswide.com/thumbs/shhh_woman-t2.jpg" alt="一日不读书，我浑身难受"></fancybox></p></blockquote><a id="more"></a><h2 id="1-数值方法"><a href="#1-数值方法" class="headerlink" title="1.数值方法"></a>1.数值方法</h2><blockquote><p>number.toString():将数值型转化为字符串型</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">15</span>; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(n));  <span class="comment">// 为字数值类型number</span></span><br><span class="line">a = n.toString();  <span class="comment">// a为字符串类型</span></span><br></pre></td></tr></table></figure><blockquote><p>toFixed(number) 将数值保留为指定的小数位数，并再转化为String类型</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">9.656</span>;</span><br><span class="line">x.toFixed(<span class="number">0</span>);           <span class="comment">// 返回 10</span></span><br><span class="line">x.toFixed(<span class="number">2</span>);           <span class="comment">// 返回 9.66</span></span><br><span class="line">x.toFixed(<span class="number">4</span>);           <span class="comment">// 返回 9.6560</span></span><br><span class="line">x.toFixed(<span class="number">6</span>);           <span class="comment">// 返回 9.656000</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(x.toFixed(<span class="number">2</span>))) <span class="comment">// 返回"String"</span></span><br></pre></td></tr></table></figure><blockquote><p>把变量转换为数值</p></blockquote><p>这三种 JavaScript 方法可用于将变量转换为数字：</p><ul><li>Number() 方法</li><li>parseFloat(string) 方法:指定字符串的首个字符是否是数字。如果首字符为数字，则对其进行解析直到完整取出第一个数值，并返回首个数值，如果首字符不是数字则直接返回NaN</li><li>parseInt(string，radix) 方法:指定字符串的首个字符是否是数字。如果首字符为数字，将字符串取出首个完整数值，并转化为指定radix进制，如果首字符不是数字，就直接返回NaN</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">"10.008"</span>);      <span class="comment">// 返回 10</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"10.33"</span>);      <span class="comment">// 返回 10</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"10 20 30"</span>);   <span class="comment">// 返回 10</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"10 years"</span>);   <span class="comment">// 返回 10</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"years 10"</span>);   <span class="comment">// 返回 NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"30"</span>,<span class="number">8</span>);       <span class="comment">// 返回24，将30转化为8进制</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">"10"</span>);         <span class="comment">// 返回 10</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">"10.33"</span>);      <span class="comment">// 返回 10.33</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">"10 20 30"</span>);   <span class="comment">// 返回 10</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">"10 years"</span>);   <span class="comment">// 返回 10</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">"years 10"</span>);   <span class="comment">// 返回 NaN</span></span><br></pre></td></tr></table></figure><h2 id="2-数组"><a href="#2-数组" class="headerlink" title="2.数组"></a>2.数组</h2><p>创建方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种(推荐)</span></span><br><span class="line"><span class="keyword">let</span> A=[<span class="number">12</span>,<span class="number">78</span>,<span class="number">78</span>,<span class="number">78</span>,<span class="number">89</span>];</span><br><span class="line"><span class="built_in">console</span>.log(A);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line"><span class="keyword">let</span> B=<span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">B[<span class="number">0</span>]=<span class="number">12</span>;</span><br><span class="line">B[<span class="number">1</span>]=<span class="number">34</span>;</span><br><span class="line">B[<span class="number">2</span>]=<span class="number">56</span>;</span><br><span class="line"><span class="built_in">console</span>.log(B);</span><br><span class="line">  </span><br><span class="line"><span class="comment">//第三种</span></span><br><span class="line"><span class="keyword">let</span> C=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>);</span><br><span class="line">C[<span class="number">0</span>]=<span class="number">12</span>;</span><br><span class="line">C[<span class="number">1</span>]=<span class="number">34</span>;</span><br><span class="line">C[<span class="number">2</span>]=<span class="number">56</span>;</span><br><span class="line"><span class="built_in">console</span>.log(C);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//第四种</span></span><br><span class="line"><span class="keyword">let</span> D=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">45</span>,<span class="number">78</span>,<span class="number">89</span>,<span class="number">45</span>);</span><br><span class="line"><span class="built_in">console</span>.log(D);</span><br></pre></td></tr></table></figure><blockquote><p>数组是一种特殊的变量，它能够一次存放一个以上的值。</p></blockquote><p>var cars=[“Saab”,”Volov”,”BMW”];</p><blockquote><p>访问数组元素：通过索引（从0开始，下标号）来引用某个数组元素</p></blockquote><p>var name=car[0]  访问数组值<br>var car[0] = “Benz”  修改数组值，即新数组为[“Benz”,”Volvo”,”BMW”]</p><h3 id="数组属性和方法"><a href="#数组属性和方法" class="headerlink" title="数组属性和方法"></a>数组属性和方法</h3><ol><li><p>length:返回数组元素的数目</p></li><li><p>遍历数组元素：最安全是使用for循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits;</span><br><span class="line">fruits = [<span class="string">"Banana"</span>, <span class="string">"Orange"</span>, <span class="string">"Apple"</span>, <span class="string">"Mango"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; fruits.length; i++) &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(fruits[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>向数组添加新元素的最佳方法是使用 push() 方法，并返回新数组的元素个数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fruits = [<span class="string">"Banana"</span>, <span class="string">"Orange"</span>, <span class="string">"Apple"</span>, <span class="string">"Mango"</span>];</span><br><span class="line">fruits.push(<span class="string">"Lemon"</span>);   <span class="comment">// 向 fruits 添加一个新元素 (Lemon),并返回数组元素个数</span></span><br></pre></td></tr></table></figure></li><li><p>join() 方法也可将所有数组元素结合为一个字符串</p></li></ol><p>格式：数组名.join(“指定拼接符”)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">"Banana"</span>, <span class="string">"Orange"</span>,<span class="string">"Apple"</span>, <span class="string">"Mango"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(fruits.join(<span class="string">" * "</span>));</span><br><span class="line"><span class="comment">// Banana * Orange * Apple * Mango</span></span><br></pre></td></tr></table></figure><ol start="5"><li><p>pop()从数组中删除最后一个元素,并返回该值（shift()从数组中删除第一个元素,并返回该值）<br>var fruits = [“Banana”, “Orange”, “Apple”, “Mango”];<br>var x = fruits.pop();       // x 的值是 “Mango”</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">拓：</span><br><span class="line">push()+pop():可以构成栈方法，先进后出</span><br><span class="line">push()+shift()：可以构成队列方法，先进先出</span><br></pre></td></tr></table></figure></li><li><p>sort()方法以字母或数值对数组进行排序</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fruits = [<span class="string">"Banana"</span>, <span class="string">"Orange"</span>, <span class="string">"Apple"</span>, <span class="string">"Mango"</span>];</span><br><span class="line">fruits.sort();  <span class="comment">// 字母默认升序排序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> points = [<span class="number">40</span>,<span class="number">100</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">25</span>,<span class="number">10</span>];</span><br><span class="line">points.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a-b;</span><br><span class="line">&#125;);  <span class="comment">// 按数值升序排列</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> grades = [<span class="number">40</span>,<span class="number">100</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">25</span>,<span class="number">10</span>];</span><br><span class="line">grades.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> b-a;</span><br><span class="line">&#125;);     <span class="comment">// 按数值降序排列</span></span><br></pre></td></tr></table></figure><ol start="7"><li><p>reverse()反转数组中的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">"Banana"</span>, <span class="string">"Orange"</span>, <span class="string">"Apple"</span>, <span class="string">"Mango"</span>];</span><br><span class="line">fruits.sort();            <span class="comment">// 对 fruits 中的元素进行排序</span></span><br><span class="line">fruitS.reverse();         <span class="comment">// 对数组元素进行反转</span></span><br></pre></td></tr></table></figure></li><li><p>JavaScript的数组可以包含任意数据类型<br>创建方式一(推荐使用)：[1, 2, 3.14, ‘Hello’, null, true];<br>创建方式二：通过Array()函数实现b = new Array(1, 2, 3);<br><fancybox><img src="http://img.mukewang.com/533295ab0001dead05190599.jpg" alt=""></fancybox></p></li><li><p>js的栈与队列<br>栈：先进后出，利用push+pop<br>队列：先进先出，利用push+shift</p></li><li><p>isNaN()全局函数来判断一个值是否是NaN值<br>isNaN(1000/“apple”) true<br>isNaN(1000) false</p></li></ol><h2 id="3-日期"><a href="#3-日期" class="headerlink" title="3.日期"></a>3.日期</h2><p>使用方法：<br>var d = new Date(); 获取系统时间<br>d.getDate()/d.getFullYear()…</p><table><thead><tr><th align="right">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="right">getDate()</td><td align="left">以数值返回天数（1-31）</td></tr><tr><td align="right">getDay()</td><td align="left">以数值获取周几（0-6）</td></tr><tr><td align="right">getFullYear()</td><td align="left">获取四位的年（yyyy）</td></tr><tr><td align="right">getHours()</td><td align="left">获取小时（0-23）</td></tr><tr><td align="right">getMilliseconds()</td><td align="left">获取毫秒（0-999）</td></tr><tr><td align="right">getMinutes()</td><td align="left">获取分（0-59）</td></tr><tr><td align="right">getMonth()</td><td align="left">获取月（0-11）</td></tr><tr><td align="right">getSeconds()</td><td align="left">获取秒（0-59）</td></tr><tr><td align="right">getTime()</td><td align="left">获取时间戳（从 1970 年 1 月 1 日至今）</td></tr></tbody></table><h2 id="4-js数据类型转换大全"><a href="#4-js数据类型转换大全" class="headerlink" title="4.js数据类型转换大全"></a>4.js数据类型转换大全</h2><p>【转载】<a href="https://blog.csdn.net/weixin_41218855/article/details/89408233" target="_blank" rel="noopener">js数据类型转换</a></p><h2 id="5-js的休眠函数"><a href="#5-js的休眠函数" class="headerlink" title="5.js的休眠函数"></a>5.js的休眠函数</h2><p><font color=#FF0000>获取的时间戳是秒级还是毫秒级：js里面获取到的是毫秒级（十三位），而像python，php的时间戳是秒级的（十位数字）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">n</span>) </span>&#123; <span class="comment">//n表示的毫秒数</span></span><br><span class="line">     <span class="keyword">var</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">     <span class="keyword">while</span> (<span class="literal">true</span>) <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() - start &gt; n) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-js的正则表达式"><a href="#6-js的正则表达式" class="headerlink" title="6.js的正则表达式"></a>6.js的正则表达式</h2><p>【转载】<a href="https://blog.csdn.net/Bombas/article/details/80790274" target="_blank" rel="noopener">js正则表达式（RegExp）</a></p><h2 id="7-js进制转换"><a href="#7-js进制转换" class="headerlink" title="7.js进制转换"></a>7.js进制转换</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//十进制转其他  </span></span><br><span class="line"><span class="keyword">let</span> x=<span class="number">110</span>;  </span><br><span class="line">alert(x.toString()); <span class="comment">// 转换为字符串</span></span><br><span class="line">alert(x.toString(<span class="number">2</span>));</span><br><span class="line">alert(x.toString(<span class="number">8</span>));  </span><br><span class="line">alert(x.toString(<span class="number">32</span>));  </span><br><span class="line">alert(x.toString(<span class="number">16</span>));  </span><br><span class="line"><span class="comment">//其他转十进制  </span></span><br><span class="line">x=<span class="string">'110'</span>;  </span><br><span class="line">alert(<span class="built_in">parseInt</span>(x,<span class="number">2</span>));  </span><br><span class="line">alert(<span class="built_in">parseInt</span>(x,<span class="number">8</span>));  </span><br><span class="line">alert(<span class="built_in">parseInt</span>(x,<span class="number">16</span>));  </span><br><span class="line"><span class="comment">//其他转其他  </span></span><br><span class="line"><span class="comment">//先用parseInt转成十进制再用toString转到目标进制  </span></span><br><span class="line">alert(<span class="built_in">String</span>.fromCharCode(<span class="built_in">parseInt</span>(<span class="number">141</span>,<span class="number">8</span>)))  </span><br><span class="line">alert(<span class="built_in">parseInt</span>(<span class="string">'ff'</span>,<span class="number">16</span>).toString(<span class="number">2</span>));</span><br></pre></td></tr></table></figure><h2 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a>未完待续…</h2>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 对象 </tag>
            
            <tag> 属性与方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript篇章二：js计算精度丢失</title>
      <link href="/2019/11/21/Javascript%E7%AF%87%E7%AB%A0%E4%BA%8C/"/>
      <url>/2019/11/21/Javascript%E7%AF%87%E7%AB%A0%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<p><font color=#00ced1 size=5 face="黑体">若教眼底无离恨，不信人间有白头</font></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于计算机是用二进制来存储和处理数字，不能精确表示浮点数，而JavaScript中没有相应的封装类来处理浮点数运算，直接计算会导致运算精度丢失。</p><blockquote><p><font size=4 color=#FF0000>本文要点：</font><br>1.js精确度丢失缘由<br>2.精确度丢失解决方案<br><fancybox><img src="http://hd.wallpaperswide.com/thumbs/tifa_lockhart_ff7-t2.jpg" alt="一日不读书，我浑身难受！！"></fancybox></p></blockquote><a id="more"></a><h2 id="js精确度丢失出现缘由"><a href="#js精确度丢失出现缘由" class="headerlink" title="js精确度丢失出现缘由"></a>js精确度丢失出现缘由</h2><blockquote><p>1.我们先看几个四舍五入的实例</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="built_in">Number</span>(<span class="number">0.009</span>).toFixed(<span class="number">2</span>));  </span><br><span class="line">alert(<span class="built_in">Number</span>(<span class="number">162.295</span>).toFixed(<span class="number">2</span>));</span><br></pre></td></tr></table></figure><p>按正常结果，应该分别弹出0.01和162.30。但实际测试结果却是在不同浏览器中得到的是不同的结果：<br>在ie6、7、8下得到0.00和162.30，第一个数截取不正确；<br>在firefox中得到0.01和162.29，第二个数截取不正确；<br>在opera下得到0.01和162.29，第二个数截取不正确</p><blockquote><p>2.再看有关于四则运算的实例</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="number">1</span>/<span class="number">3</span>);<span class="comment">//弹出: 0.3333333333333333  </span></span><br><span class="line">alert(<span class="number">0.1</span> + <span class="number">0.2</span>);<span class="comment">//弹出: 0.30000000000000004   </span></span><br><span class="line">alert(<span class="number">-0.09</span> - <span class="number">0.01</span>);<span class="comment">//弹出: -0.09999999999999999  </span></span><br><span class="line">alert(<span class="number">0.012345</span> * <span class="number">0.000001</span>);<span class="comment">//弹出: 1.2344999999999999e-8  </span></span><br><span class="line">alert(<span class="number">0.000001</span> / <span class="number">0.0001</span>);<span class="comment">//弹出: 0.009999999999999998</span></span><br></pre></td></tr></table></figure><p>按正常结果，除第一行外(因为其本身就不能除尽)，其他都应该要得到精确的结果，从弹出的结果我们却发现不是我们想要的正确结果。是因为没有转换成Number类型吗？我们转换成Number后再计算看看：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="built_in">Number</span>(<span class="number">1</span>)/<span class="built_in">Number</span>(<span class="number">3</span>));<span class="comment">//弹出: 0.3333333333333333       </span></span><br><span class="line">alert(<span class="built_in">Number</span>(<span class="number">0.1</span>) + <span class="built_in">Number</span>(<span class="number">0.2</span>));<span class="comment">//弹出: 0.30000000000000004      </span></span><br><span class="line">alert(<span class="built_in">Number</span>(<span class="number">-0.09</span>) - <span class="built_in">Number</span>(<span class="number">0.01</span>));<span class="comment">//弹出: -0.09999999999999999     </span></span><br><span class="line">alert(<span class="built_in">Number</span>(<span class="number">0.012345</span>) * <span class="built_in">Number</span>(<span class="number">0.000001</span>));<span class="comment">//弹出: 1.2344999999999999e-8     </span></span><br><span class="line">alert(<span class="built_in">Number</span>(<span class="number">0.000001</span>) / <span class="built_in">Number</span>(<span class="number">0.0001</span>));<span class="comment">//弹出: 0.009999999999999998</span></span><br></pre></td></tr></table></figure><p>还是一样的结果，看来javascript默认把数字识别为number类型。为了验证这一点，我们用typeof弹出类型看看：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="keyword">typeof</span>(<span class="number">1</span>));<span class="comment">//弹出: number  </span></span><br><span class="line">alert(<span class="keyword">typeof</span>(<span class="number">1</span>/<span class="number">3</span>));<span class="comment">//弹出: number  </span></span><br><span class="line">alert(<span class="keyword">typeof</span>(<span class="number">-0.09999999</span>));<span class="comment">//弹出: number</span></span><br></pre></td></tr></table></figure><blockquote><p>3.计算机原理</p></blockquote><p>回忆一下大学时学过的计算机原理，计算机执行的是二进制算术，当十进制数不能准确转换为二进制数时，这种精度误差就在所难免。从上述的推演过程我们知道，这种误差是难免的，c#的decimal和Java的BigDecimal之所以没有出现精度差异，只是因为在其内部作了相应处理，把这种精度差异给屏蔽掉了，而javascript是一种弱类型的脚本语言，本身并没有对计算精度做相应的处理，这就需要我们另外想办法处理了</p><h2 id="解决JS计算精确度丢失"><a href="#解决JS计算精确度丢失" class="headerlink" title="解决JS计算精确度丢失"></a>解决JS计算精确度丢失</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;创建calc.js文件，其调用方法参考&nbsp;&nbsp;<i class="far fa-hand-point-right"></i><a href="https://fioralove.github.io/2019/11/15/ThinkPHP/" target="_blank" rel="noopener">thinkphp项目调用Vue扩展函数方式</a></p><p><a href="https://www.cnblogs.com/wzl-learn/p/9790443.html" target="_blank" rel="noopener">参考文章</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.calc = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 千分位格式化函数</span></span><br><span class="line"><span class="comment">     * @param &#123;*&#125; number         要格式化的数字</span></span><br><span class="line"><span class="comment">     * @param &#123;*&#125; decimals       保留几位小数</span></span><br><span class="line"><span class="comment">     * @param &#123;*&#125; dec_point      小数点符号</span></span><br><span class="line"><span class="comment">     * @param &#123;*&#125; thousands_sep  千分位符号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    number_format(number, decimals, dec_point, thousands_sep) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">parseFloat</span>(number) == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">" - "</span>;</span><br><span class="line">        number = (number + <span class="string">''</span>).replace(<span class="regexp">/[^0-9+-Ee.]/g</span>, <span class="string">''</span>);</span><br><span class="line">        <span class="keyword">var</span> n = !<span class="built_in">isFinite</span>(+number) ? <span class="number">0</span> : +number,</span><br><span class="line">            decimals = (<span class="keyword">typeof</span> decimals === <span class="string">'undefined'</span>) ? <span class="number">2</span> : decimals,</span><br><span class="line">            prec = !<span class="built_in">isFinite</span>(+decimals) ? <span class="number">0</span> : <span class="built_in">Math</span>.abs(decimals),</span><br><span class="line">            sep = (<span class="keyword">typeof</span> thousands_sep === <span class="string">'undefined'</span>) ? <span class="string">','</span> : thousands_sep,</span><br><span class="line">            dec = (<span class="keyword">typeof</span> dec_point === <span class="string">'undefined'</span>) ? <span class="string">'.'</span> : dec_point,</span><br><span class="line">            s = <span class="string">''</span>,</span><br><span class="line">            toFixedFix = <span class="function"><span class="keyword">function</span> (<span class="params">n, prec</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> k = <span class="built_in">Math</span>.pow(<span class="number">10</span>, prec);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">''</span> + <span class="built_in">Math</span>.ceil(n * k) / k;</span><br><span class="line">            &#125;;</span><br><span class="line">     </span><br><span class="line">        s = (prec ? toFixedFix(n, prec) : <span class="string">''</span> + <span class="built_in">Math</span>.round(n)).split(<span class="string">'.'</span>);</span><br><span class="line">        <span class="keyword">var</span> re = <span class="regexp">/(-?\d+)(\d&#123;3&#125;)/</span>;</span><br><span class="line">        <span class="keyword">while</span> (re.test(s[<span class="number">0</span>])) &#123;</span><br><span class="line">            s[<span class="number">0</span>] = s[<span class="number">0</span>].replace(re, <span class="string">"$1"</span> + sep + <span class="string">"$2"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="keyword">if</span> ((s[<span class="number">1</span>] || <span class="string">''</span>).length &lt; prec) &#123;</span><br><span class="line">            s[<span class="number">1</span>] = s[<span class="number">1</span>] || <span class="string">''</span>;</span><br><span class="line">            s[<span class="number">1</span>] += <span class="keyword">new</span> <span class="built_in">Array</span>(prec - s[<span class="number">1</span>].length + <span class="number">1</span>).join(<span class="string">'0'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.join(dec);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加法函数，用来得到精确的加法结果</span></span><br><span class="line"><span class="comment">     * 说明：javascript的加法结果会有误差，在两个浮点数相加的时候会比较明显。这个函数返回较为精确的加法结果。</span></span><br><span class="line"><span class="comment">     * 调用：accAdd(arg1,arg2)</span></span><br><span class="line"><span class="comment">     * 返回值：arg1加上arg2的精确结果</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    accAdd: <span class="function"><span class="keyword">function</span>(<span class="params">arg1, arg2</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> r1, r2, m, c;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            r1 = arg1.toString().split(<span class="string">"."</span>)[<span class="number">1</span>].length;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            r1 = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            r2 = arg2.toString().split(<span class="string">"."</span>)[<span class="number">1</span>].length;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            r2 = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">Math</span>.abs(r1 - r2);</span><br><span class="line">        m = <span class="built_in">Math</span>.pow(<span class="number">10</span>, <span class="built_in">Math</span>.max(r1, r2));</span><br><span class="line">        <span class="keyword">if</span> (c &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> cm = <span class="built_in">Math</span>.pow(<span class="number">10</span>, c);</span><br><span class="line">            <span class="keyword">if</span> (r1 &gt; r2) &#123;</span><br><span class="line">                arg1 = <span class="built_in">Number</span>(arg1.toString().replace(<span class="string">"."</span>, <span class="string">""</span>));</span><br><span class="line">                arg2 = <span class="built_in">Number</span>(arg2.toString().replace(<span class="string">"."</span>, <span class="string">""</span>)) * cm;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                arg1 = <span class="built_in">Number</span>(arg1.toString().replace(<span class="string">"."</span>, <span class="string">""</span>)) * cm;</span><br><span class="line">                arg2 = <span class="built_in">Number</span>(arg2.toString().replace(<span class="string">"."</span>, <span class="string">""</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            arg1 = <span class="built_in">Number</span>(arg1.toString().replace(<span class="string">"."</span>, <span class="string">""</span>));</span><br><span class="line">            arg2 = <span class="built_in">Number</span>(arg2.toString().replace(<span class="string">"."</span>, <span class="string">""</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (arg1 + arg2) / m;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 减法函数，用来得到精确的减法结果</span></span><br><span class="line"><span class="comment">     * 说明：javascript的减法结果会有误差，在两个浮点数相减的时候会比较明显。这个函数返回较为精确的减法结果。</span></span><br><span class="line"><span class="comment">     * 调用：accSub(arg1,arg2)</span></span><br><span class="line"><span class="comment">     * 返回值：arg1加上arg2的精确结果</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    accSub: <span class="function"><span class="keyword">function</span>(<span class="params">arg1, arg2</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> r1, r2, m, n;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            r1 = arg1.toString().split(<span class="string">"."</span>)[<span class="number">1</span>].length;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            r1 = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            r2 = arg2.toString().split(<span class="string">"."</span>)[<span class="number">1</span>].length;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            r2 = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        m = <span class="built_in">Math</span>.pow(<span class="number">10</span>, <span class="built_in">Math</span>.max(r1, r2)); <span class="comment">//last modify by deeka //动态控制精度长度</span></span><br><span class="line">        n = (r1 &gt;= r2) ? r1 : r2;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">parseFloat</span>(((arg1 * m - arg2 * m) / m).toFixed(n));</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//乘法函数，用来得到精确的乘法结果 </span></span><br><span class="line">    <span class="comment">//说明：javascript的乘法结果会有误差，在两个浮点数相乘的时候会比较明显。这个函数返回较为精确的乘法结果。 </span></span><br><span class="line">    <span class="comment">//调用：accMul(arg1,arg2) </span></span><br><span class="line">    <span class="comment">//返回值：arg1乘以arg2的精确结果 </span></span><br><span class="line">    accMul: <span class="function"><span class="keyword">function</span>(<span class="params">arg1,arg2</span>) </span>&#123; </span><br><span class="line">        <span class="keyword">var</span> m = <span class="number">0</span>,</span><br><span class="line">            s1 = arg1.toString(),</span><br><span class="line">            s2 = arg2.toString();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m += s1.split(<span class="string">"."</span>)[<span class="number">1</span>].length</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m += s2.split(<span class="string">"."</span>)[<span class="number">1</span>].length</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Number</span>(s1.replace(<span class="string">"."</span>, <span class="string">""</span>)) * <span class="built_in">Number</span>(s2.replace(<span class="string">"."</span>, <span class="string">""</span>)) / <span class="built_in">Math</span>.pow(<span class="number">10</span>, m);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//除法函数，用来得到精确的除法结果 </span></span><br><span class="line">    <span class="comment">//说明：javascript的除法结果会有误差，在两个浮点数相除的时候会比较明显。这个函数返回较为精确的除法结果。 </span></span><br><span class="line">    <span class="comment">//调用：accDiv(arg1,arg2) </span></span><br><span class="line">    <span class="comment">//返回值：arg1除以arg2的精确结果 </span></span><br><span class="line">    accDiv: <span class="function"><span class="keyword">function</span>(<span class="params">arg1, arg2</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> t1 = <span class="number">0</span>,</span><br><span class="line">            t2 = <span class="number">0</span>,</span><br><span class="line">            r1, r2;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t1 = arg1.toString().split(<span class="string">"."</span>)[<span class="number">1</span>].length</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t2 = arg2.toString().split(<span class="string">"."</span>)[<span class="number">1</span>].length</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">        <span class="keyword">with</span>(<span class="built_in">Math</span>) &#123;</span><br><span class="line">            r1 = <span class="built_in">Number</span>(arg1.toString().replace(<span class="string">"."</span>, <span class="string">""</span>));</span><br><span class="line">            r2 = <span class="built_in">Number</span>(arg2.toString().replace(<span class="string">"."</span>, <span class="string">""</span>));</span><br><span class="line">            <span class="keyword">return</span> (r1 / r2) * pow(<span class="number">10</span>, t2 - t1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js精确度丢失 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript篇章一：JavaScript基本知识</title>
      <link href="/2019/11/20/Javascript%E7%AF%87%E7%AB%A0%E4%B8%80/"/>
      <url>/2019/11/20/Javascript%E7%AF%87%E7%AB%A0%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JavaScript是一种属于网络的脚本语言,已经被广泛用于Web应用开发,常用来为网页添加各式各样的动态功能,为用户提供更流畅美观的浏览效果。通常JavaScript脚本是通过嵌入在HTML中来实现自身的功能的，一个前端项目必离不开HTML+CSS+JavaScript。</p><blockquote><p><font size=4 color=#FF0000>本文要点：</font><br>1.声明变量以及变量规范<br>2. js基本数据类型<br>3.对象<br>4.javascript的字符串<br>5.js对url进行编码和解码<br><fancybox><img src="http://hd.wallpaperswide.com/thumbs/pin_up_001-t2.jpg" alt="一日不读书，我浑身难受"></fancybox></p></blockquote><a id="more"></a><h3 id="1-变量及数据类型：JavaScript变量是数据值的容器"><a href="#1-变量及数据类型：JavaScript变量是数据值的容器" class="headerlink" title="1. 变量及数据类型：JavaScript变量是数据值的容器"></a>1. 变量及数据类型：JavaScript变量是数据值的容器</h3><h4 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h4><p><strong>js在创建变量或对象时，一定要声明其数据类型，否者会默认设置为全局变量，这是我们导入其它js等文件时就会造成污染数据</strong></p><p><font color=#ed1941>2020-01-22 修改：js的变量作用域</font><br>（1）局部变量：在函数中通过var声明的变量。</p><p>　　全局变量：在函数外通过var声明的变量。</p><p>　　没有声明就使用的变量，默认为全局变量，不论这个变量在哪被使用。</p><p>（2）var 可以先使用再定义。如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">5</span>; <span class="comment">// 变量 x 设置为 5</span></span><br><span class="line">elem = <span class="built_in">document</span>.getElementById(<span class="string">"spider案例"</span>); <span class="comment">// 查找元素 </span></span><br><span class="line">elem.innerHTML = x;                     <span class="comment">// 在元素中显示 x</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x; <span class="comment">// 声明 x</span></span><br></pre></td></tr></table></figure><p>(3)  let和const</p><p>　　let 声明的变量只在 let 命令所在的代码块内有效。</p><p>　　const 声明一个只读的常量，一旦声明，常量的值就不能改变。</p><blockquote><p>JavaScript数据类型分为：数值、字符串值、数组、对象等等</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> length = <span class="number">7</span>;                             <span class="comment">// 数字</span></span><br><span class="line"><span class="keyword">let</span> lastName = <span class="string">"Gates"</span>;                      <span class="comment">// 字符串</span></span><br><span class="line"><span class="keyword">let</span> cars = [<span class="string">"Porsche"</span>, <span class="string">"Volvo"</span>, <span class="string">"BMW"</span>];         <span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">let</span> x = &#123;<span class="attr">firstName</span>:<span class="string">"Bill"</span>, <span class="attr">lastName</span>:<span class="string">"Gates"</span>&#125;;    <span class="comment">// 对象</span></span><br></pre></td></tr></table></figure><h4 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h4><p>一般很多代码语言的命名规则都是类似的，例如:</p><ul><li>变量和函数为小驼峰法标识, 即除第一个单词之外，其他单词首字母大写（ lowerCamelCase）</li><li>全局变量为大写 (UPPERCASE )</li><li>常量 (如 PI) 为大写 (UPPERCASE )</li><li>构造函数名与class名均使用大驼峰标识</li></ul><h3 id="2-js数据类型"><a href="#2-js数据类型" class="headerlink" title="2.js数据类型"></a>2.js数据类型</h3><p>在 JavaScript 中有 6 种不同的数据类型：</p><ul><li>string</li><li>number</li><li>boolean</li><li>object</li><li>function</li><li>symbol</li></ul><p>3 种对象类型：</p><ul><li>Object</li><li>Date</li><li>Array</li></ul><p>2 个不包含任何值的数据类型：</p><ul><li>null</li><li>undefined</li></ul><h3 id="3-对象"><a href="#3-对象" class="headerlink" title="3.对象"></a>3.对象</h3><p>对象的值以名称:值对的方式来书写（名称和值由冒号分隔）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;  <span class="comment">//这里的person称为对象</span></span><br><span class="line">    firstName:<span class="string">"Bill"</span>,  <span class="comment">//  这是属性</span></span><br><span class="line">    lastName:<span class="string">"Gates"</span>, </span><br><span class="line">    age:<span class="number">62</span>, </span><br><span class="line">    eyeColor:<span class="string">"blue"</span>,</span><br><span class="line">    fullName : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  <span class="comment">// 这就是方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">" "</span> + <span class="keyword">this</span>.lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 对person对象中进行新增实例</span></span><br><span class="line">person.sex = <span class="string">"man"</span>;</span><br><span class="line">person.fullName();</span><br></pre></td></tr></table></figure><p>JavaScript中的this关键词</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在函数定义中，this 引用该函数的“拥有者”。</span><br><span class="line"></span><br><span class="line">在上面的例子中，this 指的是“拥有” fullName 函数的 person 对象。</span><br><span class="line"></span><br><span class="line">换言之，this.firstName 的意思是 this 对象的 firstName 属性。</span><br></pre></td></tr></table></figure><blockquote><p>对象的访问方式：</p></blockquote><p>对象名.属性名 或者<br>对象名[&quot;属性名&quot;]</p><h4 id="案例：数据集构造"><a href="#案例：数据集构造" class="headerlink" title="案例：数据集构造"></a>案例：数据集构造</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> dimensions = [];  <span class="comment">//维度</span></span><br><span class="line"><span class="keyword">let</span> source = [];      <span class="comment">//数据集</span></span><br><span class="line"><span class="keyword">let</span> series = [];        <span class="comment">//图系列</span></span><br><span class="line"></span><br><span class="line">dimensions.push(<span class="string">"groupcus_name"</span>);</span><br><span class="line">dimensions.push(<span class="string">"剩余发出商品"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;response.Rows.length;i++)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">    obj[<span class="string">"groupcus_name"</span>] = response.Rows[i].groupcus_name;  <span class="comment">// 对象的调用方式obj["key_name"]或obj.key_name</span></span><br><span class="line">    obj[<span class="string">"剩余发出商品"</span>] = response.Rows[i].surplusp;</span><br><span class="line"></span><br><span class="line">    source.push(obj);   <span class="comment">// 记住push只适用于数组的元素添加，并返回数组元素个数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-js字符串"><a href="#4-js字符串" class="headerlink" title="4.js字符串"></a>4.js字符串</h3><blockquote><p>函数语法</p></blockquote><p>function function_name(param1,param2,…){code}<br>PS:不使用 () 访问函数将返回函数声明而不是函数结果</p><blockquote><p>3.1 js字符串长度</p></blockquote><p>易混点：<br>JavaScript字符串长度：str.length<br>php的字符串长度：count(string)<br>Java的字符串的长度：str.length()<br>python的字符串长度：len(string)<br>jQuery中的length：表示query对象中元素个数 $(“div”).siblings().length=&gt;表示div标签的兄弟节点元素个数</p><blockquote><p>3.2 使用\ 转义字符</p></blockquote><p>\n表示换行</p><blockquote><p>3.3 比较运算符与逻辑运算符</p></blockquote><p>&quot;==&quot;:表示值相等<br>&quot;===&quot;:表示值相等基础上，数据类型也相同<br>&amp;&amp; :表示与运算<br>|| :表示或运算<br>! : 表示非运算 </p><blockquote><p>3.4 字符串的截取和替换</p></blockquote><ul><li><p>str.slice(start，end)方法：提取字符串的某个部分并在新字符串中返回被提取的部分(起始索引值为0，且满足左闭右开)。该方法设置两个参数：起始索引（开始位置），终止索引（结束位置）。</p></li><li><p>str.substring()方法：类似于 slice()，不同之处在于 substring() 无法接受负的索引</p></li><li><p>str.substr(start,length)：start表示起始的索引值，默认为0。第二个参数规定被提取部分的长度，如果省略第二个参数，则该 substr() 将裁剪字符串的剩余部分。</p></li><li><p>str.replace(a,b) 在字符串str中用b替换a</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">"this girl that i fall in love with her sister is about 18 years old"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span>(name);   <span class="comment">// 判断数据类型："string"</span></span><br><span class="line">name.length;    <span class="comment">// 判断字符长度：67</span></span><br><span class="line">name.slice(<span class="number">0</span>,<span class="number">4</span>);    <span class="comment">// 满足左闭右开，索引值默认从0开始："this"</span></span><br><span class="line">name.slice(<span class="number">-3</span>,<span class="number">-1</span>);  <span class="comment">// 从右至左，索引值默认为-1开始："ol"</span></span><br><span class="line">name.substring(<span class="number">-8</span>,<span class="number">2</span>);   <span class="comment">//  不接受负索引值："th"</span></span><br><span class="line">name.substring(<span class="number">-8</span>,<span class="number">-2</span>);  <span class="comment">// ""</span></span><br><span class="line">name.substr(<span class="number">2</span>,<span class="number">5</span>);       <span class="comment">// "is gi"</span></span><br><span class="line">name.replace(<span class="string">"sister"</span>,<span class="string">"young sister"</span>);  <span class="comment">// 替换："this girl that i fall in love with her young sister ..."</span></span><br></pre></td></tr></table></figure><blockquote><p>3.5 转换为大小写</p></blockquote><p>str.toUpperCase()<br>str.toLowerCase()</p><blockquote><p>3.6 str.trim()</p></blockquote><p>str.trim() 方法仅能删除字符串两端的空白符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">" i love you"</span>;</span><br><span class="line">name.trim(<span class="string">"you"</span>) <span class="comment">// 返回结果"i love you"去除了首位的空格</span></span><br></pre></td></tr></table></figure><blockquote><p>3.7 str.split()：切割字符串，返回数组的形式</p></blockquote><p>这里有一个小知识点，<font color=#FF0000>当split()里面什么都不加时，会把整个字符串当作一个数组；当写法为split(“”)时，表示将原字符串的每一个字符进行切割；当写法为split(“指定字符串”)时，将原字符串按照指定字符串进行切割</font><br>举例说明：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> quote = <span class="string">"i love you because of you"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(quote.split());   <span class="comment">// ["i love you because of you"]</span></span><br><span class="line"><span class="built_in">console</span>.log(quote.split(<span class="string">""</span>));   </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">["i", " ", "l", "o", "v", "e", " ", "y", "o", "u", " ", "b", "e", </span></span><br><span class="line"><span class="comment">"c", "a", "u", "s", "e", " ", "o", "f", " ", "y", "o", "u"]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(quote.split(<span class="string">"you"</span>));    <span class="comment">//["i love ", " because of ", ""]</span></span><br></pre></td></tr></table></figure><blockquote><p>3.8 转换为字符串</p></blockquote><ul><li>Numbers.toFixed(number):保留小数点位数，并将数值型转换为字符串型</li><li>Numbers.toString():将数值型转换为字符串型</li><li>String(Number):将数值型转换为字符串类型</li></ul><blockquote><p>3.9 目标字符串索引</p></blockquote><p>indexOf() 方法可以检索<strong>指定子字符串在源字符串中首次出现的位置</strong>。如果没有在源字符串中检索到指定字符或者子字符串，则返回 -1 。</p><p>字符串与数组类似，字符位置是从 0 开始计算。特别说明：此方法对大小写敏感。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">"hello world"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.indexOf(<span class="string">"h"</span>)); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(a.indexOf(<span class="string">"cg"</span>)); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><blockquote><p>3.10 字符串判断开头或结尾是否是指定的字符</p></blockquote><ul><li>str.startsWith(“”):判定一个字符串是否以另一个字符串开头</li><li>str.endsWith(“”):判定一个字符串是否以另一个字符串结尾</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"hello world"</span>;</span><br><span class="line"><span class="keyword">let</span> result = str.startsWith(<span class="string">"he"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//true</span></span><br><span class="line"><span class="comment">//当为两个参数时，第二个表示开始位数。</span></span><br><span class="line">result = str.startsWith(<span class="string">"he"</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);<span class="comment">//flase</span></span><br></pre></td></tr></table></figure><h3 id="5-js对url进行编码和解码"><a href="#5-js对url进行编码和解码" class="headerlink" title="5.js对url进行编码和解码"></a>5.js对url进行编码和解码</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;现在的信息网络都是数字的，很多东西要保存传输就得编码，比如你要保存一篇文章，里面的字就是一些二进制编码。编码就是如何把信息转换成数字序列，解码则是把数字序列转换成信息。<br>简单理解为：1. 编码（encode）是将人能够认识的信息转换为看不懂的。 2. 解码（decode）是将经过加密的对象转换为我们能够认识的信息</p><blockquote><p>1.encodeURI 和 decodeURI</p></blockquote><p>原理：返回编码为有效的统一资源标识符 (URI) 的字符串，不会被编码的字符：! @ # $ &amp; * ( ) = : / ; ? + ‘</p><p>　　   encodeURI()是Javascript中真正用来对URL编码的函数。</p><p>编码：encodeURI(‘<a href="http://www.baidu.com?name=zhang@xiao@jie&amp;order=1&#39;" target="_blank" rel="noopener">http://www.baidu.com?name=zhang@xiao@jie&amp;order=1&#39;</a>)</p><p>　　　结果：”<a href="http://www.baidu.com?name=zhang@xiao@jie&amp;order=1&quot;" target="_blank" rel="noopener">http://www.baidu.com?name=zhang@xiao@jie&amp;order=1&quot;</a></p><p>解码：decodeURI(“http%3A//<a href="http://www.baidu.com%3Fname%3Dzhang@xiao@jie%26order%3D1&quot;" target="_blank" rel="noopener">www.baidu.com%3Fname%3Dzhang@xiao@jie%26order%3D1&quot;</a>)</p><p>　　　结果：”http%3A//<a href="http://www.baidu.com%3Fname%3Dzhang@xiao@jie%26order%3D1&quot;" target="_blank" rel="noopener">www.baidu.com%3Fname%3Dzhang@xiao@jie%26order%3D1&quot;</a></p><blockquote><p>2.encodeURIComponent 和 decodeURIComponent（推荐）</p></blockquote><p>原理：对URL的组成部分进行个别编码，而不用于对整个URL进行编码</p><p>编码：encodeURIComponent(‘<a href="http://www.baidu.com?name=zhang@xiao@jie&amp;order=1&#39;" target="_blank" rel="noopener">http://www.baidu.com?name=zhang@xiao@jie&amp;order=1&#39;</a>)<br>　　　结果：”http%3A%2F%2F<a href="http://www.baidu.com%3Fname%3Dzhang%40xiao%40jie%26order%3D1&quot;" target="_blank" rel="noopener">www.baidu.com%3Fname%3Dzhang%40xiao%40jie%26order%3D1&quot;</a></p><p>解码：decodeURIComponent(“http%3A%2F%2F<a href="http://www.baidu.com%3Fname%3Dzhang%40xiao%40jie%26order%3D1&quot;" target="_blank" rel="noopener">www.baidu.com%3Fname%3Dzhang%40xiao%40jie%26order%3D1&quot;</a>)</p><p>　　　结果：”<a href="http://www.baidu.com?name=zhang@xiao@jie&amp;order=1&quot;" target="_blank" rel="noopener">http://www.baidu.com?name=zhang@xiao@jie&amp;order=1&quot;</a></p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://www.runoob.com/js/js-type-conversion.html" target="_blank" rel="noopener">JavaScript基本数据类型以及详细使用</a></li><li><a href="https://blog.csdn.net/xiongzaiabc/article/details/105012903" target="_blank" rel="noopener">python中demjson的详细使用教程，专治json解码、json编码</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> clone </tag>
            
            <tag> push </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Memcached</title>
      <link href="/2019/11/20/Memcache/"/>
      <url>/2019/11/20/Memcache/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Memcached是一个高性能的分布式的内存对象缓存系统，全世界有不少公司采用这个缓存项目来构建大负载的网站，来分担数据库的压力。<font color=#FF4500>适合使用Memcached：存储验证码（图形验证码、短信验证码）、登录session</font>等所有不是至关重要的数据(保存于内存中，关机后数据就会消失)</p><blockquote><p><font size=4 color=#FF0000>本文要点：</font><br>1.win，Linux安装memcached<br>2.docker创建memcached<br>3.测试并进入容器<br>4.telnet操作memcached<br>……<br><fancybox><img src="http://hd.wallpaperswide.com/thumbs/japanese_woman-t2.jpg" alt="浙江大学，冲！"></fancybox></p></blockquote><a id="more"></a><h2 id="1-安装memcached"><a href="#1-安装memcached" class="headerlink" title="1.安装memcached"></a>1.安装memcached</h2><p>&nbsp;&nbsp;&nbsp;Memcached是通过在内存里维护一个统一的巨大的hash表，memcached能存储各种各样的数据，包括图像、视频<font color=#FF4500>(但是极不推荐来保存二进制文件)</font>、文件、以及数据库检索的结果等。简单的说就是将数据调用到内存中，然后从内存中读取，从而大大提高读取速度。<br><a href="https://blog.csdn.net/qq_41717874/article/details/89472198" target="_blank" rel="noopener">参考docker创建memecached容器</a><br><a href="https://www.cnblogs.com/b-ruce/p/5639223.html" target="_blank" rel="noopener">windows下ThinkPHP3.2.3使用memcache缓存</a></p><h2 id="2-创建memcached镜像"><a href="#2-创建memcached镜像" class="headerlink" title="2.创建memcached镜像"></a>2.创建memcached镜像</h2><p>docker run -di –name=”memcached” -m 256m -p 11211:11211 memcached:[tag]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-d是启动一个守护进程；</span><br><span class="line">-m是分配给Memcache使用的内存数量，单位是MB；</span><br><span class="line">-u是运行Memcache的用户；</span><br><span class="line">-l是监听的服务器IP地址，可以有多个地址；</span><br><span class="line">-p是设置Memcache监听的端口，，最好是1024以上的端口；</span><br><span class="line">-c是最大运行的并发连接数，默认是1024；</span><br></pre></td></tr></table></figure><h2 id="3-测试并进入docker容器"><a href="#3-测试并进入docker容器" class="headerlink" title="3.测试并进入docker容器"></a>3.测试并进入docker容器</h2><blockquote><p>测试是否启动成功</p></blockquote><p>netstat -luntp|grep 11211或者docker ps</p><blockquote><p>安装telnet</p></blockquote><p>yum install -y telnet 或 sudo apt-get install telnet</p><blockquote><p>通过telnet方式连接memcached</p></blockquote><p>telnet 127.0.0.1 11211 或者使用 telnet ubuntu_ip docker_memcached_port</p><blockquote><p>设置值，age是key，0是标志位，900是生命周期，8代表所占字节数，回车之后的10是value</p></blockquote><p>set age 0 900 8<br>10</p><blockquote><p>获取值 </p></blockquote><p>get age</p><blockquote><p>退出</p></blockquote><p><del>exit</del><br>quit</p><h2 id="4-telnet操作memcached："><a href="#4-telnet操作memcached：" class="headerlink" title="4.telnet操作memcached："></a>4.telnet操作memcached：</h2><p>1.添加数据</p><ul><li>set语法：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> set key flas(是否压缩,默认为0，不压缩) timeout value_length</span><br><span class="line">  value</span><br><span class="line">示例：</span><br><span class="line">  set username 0 60 7</span><br><span class="line">  zhiliao</span><br><span class="line">``` </span><br><span class="line">  </span><br><span class="line">+ add语法：</span><br></pre></td></tr></table></figure>add key flas(0) timeout value_length<br>value<br>示例：<br>add username 0 60 7<br>xiaotuo<pre><code>set和add的区别：add是只负责添加数据，不会去修改数据。如果添加的数据的key已经存在了，则添加失败，如果添加的key不存在，则添加成功。而set不同，如果memcached中不存在相同的key，则进行添加，如果存在，则替换。</code></pre></li></ul><p>2.获取数据：get key_name</p><p>3.删除数据：delete key_name</p><p>4.删除memcached所有数据：flush_all</p><h2 id="5-memcached安全性"><a href="#5-memcached安全性" class="headerlink" title="5. memcached安全性"></a>5. memcached安全性</h2><p>memcached的操作不需要任何用户名和密码，只需要知道memcached服务器的ip地址和端口号即可。因此memcached使用的时候尤其要注意他的安全性。这里提供两种安全的解决方案。分别来进行讲解：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;1.使用-l参数设置为只有本地可以连接：这种方式，就只能通过本机才能连接，别的机器都不能访问，可以达到最好的安全性。<br>&nbsp;&nbsp;&nbsp;&nbsp;2.使用防火墙，关闭11211端口，外面也不能访问</p><h2 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a>未完待续…</h2>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Memcached </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker开发环境系列部署</title>
      <link href="/2019/11/19/docker%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
      <url>/2019/11/19/docker%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<p><font color=#00CD00>docker系列章节更新（二），这一章节主要收集并亲测docker部署各种各样的生产，开发环境。比如Nginx+Tomcat实现负载均衡，tomcat集群</font></p><ul><li>搭建python3+django+mysql开发环境</li><li>Docker实现Nginx和Tomcat负载均衡<a id="more"></a></li></ul><h2 id="1-python3-Django-MySQL部署Django项目集群"><a href="#1-python3-Django-MySQL部署Django项目集群" class="headerlink" title="1.python3+Django+MySQL部署Django项目集群"></a>1.<a href="https://blog.csdn.net/geek_xiong/article/details/92721957" target="_blank" rel="noopener">python3+Django+MySQL部署Django项目集群</a></h2><h4 id="1-1-宿主机上创建工程目录site，并进入该目录"><a href="#1-1-宿主机上创建工程目录site，并进入该目录" class="headerlink" title="1.1 宿主机上创建工程目录site，并进入该目录"></a>1.1 宿主机上创建工程目录site，并进入该目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">项目目录结构：</span><br><span class="line">site</span><br><span class="line">    |__achievements</span><br><span class="line">    |__db</span><br><span class="line">    |__Dockerfile</span><br><span class="line">    |__doocker-compose.yml</span><br><span class="line">    |__requirements.txt</span><br></pre></td></tr></table></figure><h4 id="1-2-参考两篇优秀博文"><a href="#1-2-参考两篇优秀博文" class="headerlink" title="1.2 参考两篇优秀博文"></a>1.2 参考两篇优秀博文</h4><p><a href="https://blog.csdn.net/geek_xiong/article/details/92721957" target="_blank" rel="noopener">离未罔两|Docker—-搭建python3+django+mysql开发环境</a><br><a href="https://blog.csdn.net/qq_25639809/article/details/78958647" target="_blank" rel="noopener">冰凉的枷锁lax|Docker搭建Python+Django+mysql开发环境</a></p><h2 id="2-Docker实现Nginx和Tomcat负载均衡"><a href="#2-Docker实现Nginx和Tomcat负载均衡" class="headerlink" title="2. Docker实现Nginx和Tomcat负载均衡"></a>2. Docker实现Nginx和Tomcat负载均衡</h2><p><a href="https://blog.csdn.net/u014106644/article/details/83152366" target="_blank" rel="noopener">暗夜猎手-大魔王|使用docker搭建高并发网站架构实践2–Docker实现Nginx和Tomcat负载均衡</a><br><fancybox><img src="https://img-blog.csdn.net/20181018202515672?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQxMDY2NDQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></fancybox></p><p><a href="https://blog.csdn.net/bbwangj/article/details/81005982" target="_blank" rel="noopener">菲宇|Docker下Nginx+Tomcat实现负载均衡</a><br><fancybox><img src="https://img-blog.csdn.net/20181012094800471?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Jid2FuZ2o=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></fancybox></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> python+Django+MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python模拟登录淘宝(Ⅰ)</title>
      <link href="/2019/11/18/requests%E5%BA%93%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95%E6%B7%98%E5%AE%9D(%E2%85%A0)/"/>
      <url>/2019/11/18/requests%E5%BA%93%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95%E6%B7%98%E5%AE%9D(%E2%85%A0)/</url>
      
        <content type="html"><![CDATA[<p>讲模拟登录淘宝之前，我们来回顾一下之前用requests库模拟登录GitHub和新浪微博的过程:<font color=#00CD00>这一类模拟登录是比较简单的登录，只需要在请求登录时将用户名和密码上传验证通过就成功了</font>，也就是说一步到位！而淘宝登录就比较复杂，为什么说复杂呢？因为淘宝登录涉及参数多且请求不止一次！</p><a id="more"></a><p><a href="https://blog.csdn.net/u014044812/article/details/99584382" target="_blank" rel="noopener">参考文章~裸睡的猪</a></p><pre>淘宝系列欲更新文章内容：    第一篇：Python模拟登录淘宝，详细讲解如何使用requests库登录淘宝pc端。    第二篇：淘宝自动登录2.0，新增Cookies序列化，教大家如何将cookies保存起来。    第三篇：Python爬取淘宝商品避孕套，教大家如何爬取淘宝pc端商品信息。    第四篇：Python分析2000款避孕套，教大家如何做数据分析得出结论。    ————————————————</pre><p>打算偷一下懒，直接使用selenium来模拟登录淘宝，因为使用账号密码实在是太容易被检测到了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">爬取淘宝商品步骤：</span></span><br><span class="line"><span class="string">1、打开谷歌浏览器，访问淘宝网站：找到淘宝的 url</span></span><br><span class="line"><span class="string">2、定位搜索框和搜索按钮（F12，使用元素选择器进行定位，复制 XPath），要完成的动作→输入要搜索的商品，然后点击搜索按钮</span></span><br><span class="line"><span class="string">3、在登陆界面停留 10 秒，手机扫码登陆（需手动），高级一点的方法可以自送输入账号密码登陆</span></span><br><span class="line"><span class="string">4、进入搜索结果页面，模仿人浏览商品时的动作→下拉滑动条到页面的最后，拉5次，拉的过程有暂停</span></span><br><span class="line"><span class="string">5、记住这里里面的所有元素节点的DOM结构都有可能变化，请随时注意</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到 输入框 找到 按钮</span></span><br><span class="line"><span class="comment"># 元素（输入框、按钮等） 定位</span></span><br><span class="line"><span class="comment"># 需要一款浏览器，访问淘宝网址,声明全局变量</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search_product</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 设置元素显式等待</span></span><br><span class="line">    wait = WebDriverWait(driver, <span class="number">10</span>)</span><br><span class="line">    element = wait.until(</span><br><span class="line">        EC.presence_of_element_located((By.XPATH, <span class="string">'//*[@id="q"]'</span>))</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 模拟按键输入</span></span><br><span class="line">    element.send_keys(kw)</span><br><span class="line">    <span class="comment"># 获取搜索按钮的元素节点</span></span><br><span class="line">    node = wait.until(</span><br><span class="line">        EC.presence_of_element_located((By.XPATH, <span class="string">'.//form[@id="J_TSearchForm"]//div[1]//button'</span>))</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 模拟按钮点击事件</span></span><br><span class="line">    node.click()</span><br><span class="line">    <span class="comment"># # 强行阻止程序运行 10s的时间，用于给用户扫码登录</span></span><br><span class="line">    time.sleep(<span class="number">10</span>)</span><br><span class="line">    <span class="comment"># 获取搜索结果页面的总页码</span></span><br><span class="line">    token = driver.find_element_by_xpath(<span class="string">'.//div[@id="mainsrp-pager"]//div[1]//div[@class="total"]'</span>).text</span><br><span class="line">    token = int(re.compile(<span class="string">'(\d+)'</span>).search(token).group(<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> token</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 元素定位 他没有前提吗？你的网速比较慢，如果元素没有加载完毕，那么你能够去定位没有加载的数据吗？没有加载出来</span></span><br><span class="line"><span class="comment"># 也就是说，这个加载的过程 是因为我拉动了下滑条！</span></span><br><span class="line"><span class="comment"># 步骤：登录 拉动下滑条 采集数据 下一页 拉动下滑条 再采集数据，按这个循环！</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drop_down</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 一次拉一部分，拉的时候有暂停 range 得出 1 3 5 7 9 五个数</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>, <span class="number">2</span>):</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line">        <span class="comment"># j 代表滑动条的五个位置：1/10、3/10、5/10、7/10、9/10</span></span><br><span class="line">        j = x / <span class="number">10</span></span><br><span class="line">        <span class="comment"># 下面的 static 是 JavaScript 的语法，可以当作万能公式解决大部分网站问题</span></span><br><span class="line">        js = <span class="string">'document.documentElement.scrollTop = document.documentElement.scrollHeight * %f'</span> % j</span><br><span class="line">        driver.execute_script(js)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_product</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 首先获取所有的 div ，然后遍历所有的 div ，得到一个div 再去一个 div 里面寻找需要的数据</span></span><br><span class="line">    <span class="comment"># // 代表任意位置（任意一个位置的属性属于 class="items" 的 div）</span></span><br><span class="line">    <span class="comment"># //div[@]/div[@] 代表要获取的 div 的路径</span></span><br><span class="line">    divs = driver.find_elements_by_xpath(<span class="string">'//div[@class="items"]/div[@class="item J_MouserOnverReq item-ad  "]'</span>)</span><br><span class="line">    <span class="keyword">for</span> div <span class="keyword">in</span> divs:</span><br><span class="line">        <span class="comment"># . 代表当前目录, .// 当前目录下的任意 div标签 下的 a标签 下的 img标签 下的 src</span></span><br><span class="line">        info = div.find_element_by_xpath(<span class="string">'.//div[@class="row row-2 title"]'</span>).text</span><br><span class="line">        price = div.find_element_by_xpath(<span class="string">'.//div[@class="price g_price '</span></span><br><span class="line">                                          <span class="string">'g_price-highlight"]/赞'</span>).text + <span class="string">'元'</span></span><br><span class="line">        deal = div.find_element_by_xpath(<span class="string">'.//div[@class="deal-cnt"]'</span>).text</span><br><span class="line">        image = div.find_element_by_xpath(<span class="string">'.//div[@class="pic"]/a/img'</span>).get_attribute(<span class="string">'src'</span>)</span><br><span class="line">        <span class="comment"># name = div.find_element_by_xpath('.//div[@class="shop"/a/span[1]').text</span></span><br><span class="line">        address = div.find_element_by_xpath(<span class="string">'.//div[@class="row row-3 g-clearfix"]/div[@class="location"]'</span>).text</span><br><span class="line">        <span class="comment"># 定义一个字典</span></span><br><span class="line">        product = &#123;<span class="string">'标题'</span>: info, <span class="string">'价格'</span>: price, <span class="string">'订单量'</span>: deal, <span class="string">'图片'</span>: image, <span class="string">'地址'</span>: address&#125;</span><br><span class="line">        print(product)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 淘宝的反爬很严重，所以尽量不要模拟多次点击下一页</span></span><br><span class="line"><span class="comment"># 采用改 url 的方法可以避免反爬：通过分析淘宝页面的 url→https://s.taobao.com/search?q=Python&amp;s=88</span></span><br><span class="line"><span class="comment"># 可以得知下一页就是在 url 后面的值 +44。即第4页的 url 为 https://s.taobao.com/search?q=Python&amp;s=132</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">next_page</span><span class="params">()</span>:</span></span><br><span class="line">    token = search_product()</span><br><span class="line">    drop_down()</span><br><span class="line">    get_product()</span><br><span class="line">    num = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> num != token:</span><br><span class="line">        driver.get(<span class="string">'https://s.taobao.com/search?q=&#123;&#125;&amp;s=&#123;&#125;'</span>.format(kw, <span class="number">44</span> * num))</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">        <span class="comment"># time.sleep(4) 。这个方法延迟太慢了，改用下面的只能等待方法</span></span><br><span class="line">        <span class="comment"># 隐视等待，智能等待，最高等待时间为10s，如果超过10s，抛出异常(与显示等待同理，但是我们还是推荐使用显示等待)</span></span><br><span class="line">        driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">        <span class="comment"># 无限循环进入网页，可能造成网页卡顿！导致数据加载不出来，解决方法是加一个延迟，等数据先加载出来再操作</span></span><br><span class="line">        drop_down()</span><br><span class="line">        get_product()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    kw = input(<span class="string">'请输入你想查询的商品：'</span>)</span><br><span class="line"></span><br><span class="line">    driver.get(<span class="string">'https://www.taobao.com/'</span>)</span><br><span class="line">    next_page()</span><br><span class="line"><span class="comment"># 这个程序可以无限制地爬取内容，淘宝无法检测出来而反爬</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Requests </tag>
            
            <tag> POST请求 </tag>
            
            <tag> token </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git命令总结</title>
      <link href="/2019/11/18/git%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
      <url>/2019/11/18/git%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="1-git命令大全"><a href="#1-git命令大全" class="headerlink" title="1.git命令大全"></a>1.git命令大全</h3><p>总结一下自己常用的git命令<br><fancybox><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=1192836097,3318398259&fm=26&gp=0.jpg"></fancybox></p><a id="more"></a><ol><li><p>安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”</p></li><li><p>git config –global user.name “Your Name”<br>git config –global user.email “<a href="mailto:email@example.com" target="_blank" rel="noopener">email@example.com</a>“</p></li><li><p>cd F: (打开F盘)<br>mkdir <name> (创建子目录)<br>pwd (显示当前目录)</p></li><li><p>git init (把这个目录变成Git可以管理的仓库)</p></li><li><p><strong>git add :改动文件添加到本地仓库中的暂存区</strong></p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">关于git add的一点说明：</span><br><span class="line">git add .          # 把新增的、修改的都加到缓存</span><br><span class="line">git add &lt;file&gt;     # 提交文件，可多次提交 </span><br><span class="line">git add -A         # 把新增、和修改的、和删除的都加到缓存，即提交所有的更改</span><br></pre></td></tr></table></figure><ol start="6"><li><p>git commit -m “说明”</p></li><li><p>git status (仓库当前的状态)</p></li><li><p>git diff (查看不同)</p></li><li><p>git log [–pretty=oneline  {缩略版,可选}] (查看历史记录)</p></li><li><p>git reset –hard HEAD^ (回退到上一个版本,HEAD后可以是 commit_id)</p></li><li><p>git reflog (用来记录你的每一次命令,找到commit_id回到未来某个版本)</p></li><li><p>git diff HEAD – <file> (查看工作区和版本库里面最新版本的区别)</p></li><li><p>git checkout – <file> (用版本库里的版本替换工作区的版本，无论工作区是修改还是删除)</p></li><li><p>git reset HEAD <file> (把暂存区的修改撤销掉（unstage），重新放回工作区. 用HEAD时，表示最新的版本)</p></li><li><p>git rm (用于删除一个文件)</p></li><li><p>ssh-keygen -t rsa -C “<a href="mailto:youremail@example.com" target="_blank" rel="noopener">youremail@example.com</a>“ (创建SSH Key)</p></li><li><p>git remote add origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:Bruce333/other.git (关联github远程库)</p></li><li><p><strong>git push -u origin master/git push origin master</strong>：提交到远程仓库</p><p>(推送到远程库,第一次用含有 -u 的命令,推送master分支的所有内容,此后用后面的命令推送最新修改)</p></li><li><p><strong>git clone <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:Bruce333/other.git (克隆远程仓库到本地库)</strong></p><p><font color="#d93a49">ps:比如GitHub，gitlab克隆仓库时就有显著性不同<br>GitHub克隆时，各个分支都可以直接clone；而gitlab克隆时，只能clone主分支的仓库，切换到目标分支后，使用git pull拉取目标分支更新到本地仓库</font></p></li><li><p>git checkout -b dev: 创建并切换目标分支</p><p>创建dev分支，然后切换到dev分支,相当于以下两条命令:git branch dev[创建分支]/git checkout dev[切换分支]</p></li><li><p>git merge dev (合并指定分支到当前分支)</p></li><li><p>git checkout master (切换到master分支)</p></li><li><p>git branch ：列出本地所有分支，当前分支前面会标一个*号</p></li><li><p><strong>git branch -d 分支名 ：删除本地分支</strong></p></li><li><p><strong>git push origin –delete 分支名：git删除远程仓库分支</strong></p></li><li><p>git merge –no-ff -m “merge with no-ff” dev</p><p>(通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息;–no-ff表示禁用Fast forward,用普通模式合并，合并后的历史有分支，能看出来曾经做过合并;-m参数，把commit描述写进去)</p></li><li><p>git stash (把当前工作现场“储藏”起来，等以后恢复现场后继续工作)</p></li><li><p>git stash list (查看工作现场) / git stash apply stash@{0} ()</p></li><li><p>git stash pop (恢复的同时把stash内容也删了,相当于:git stash apply[恢复]/git stash drop[删除])</p></li><li><p>git branch -D <name> (强行删除一个没有被合并过的分支)</p></li><li><p>git remote (查看远程库的信息) / git remote -v (显示更详细的信息)</p></li><li><p>git checkout -b branch-name origin/branch-name (在本地创建和远程分支对应的分支,本地和远程分支的名称最好一致)</p></li><li><p>从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交</p></li><li><p><strong>git pull：抓取远程仓库下某个分支的更新，再与本地的指定分支合并（更新本地分支代码）</strong></p><p><font color="#d93a49">把最新的提交抓下来;如果提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建.用命令git branch –set-upstream branch-name origin/branch-name)</font></p></li><li><p>git tag <name> &lt;commit id 可无&gt;</p><p>打一个新标签,默认标签是打在最新提交的commit上的;找到历史提交的commit id,可以给历史版本打标签</p></li><li><p>git show <tagname> (查看标签信息)</p></li><li><p>git tag (查看所有标签)</p></li><li><p>git tag -a <tagname> -m “blablabla…” (指定标签信息)</p></li><li><p>git tag -s <tagname> -m “blablabla…” (用PGP签名标签)</p></li><li><p>git tag -d <name> (删除标签)</p></li><li><p>git push origin <tagname> (推送某个标签到远程)</p></li><li><p>git push origin –tags (一次性推送全部尚未推送到远程的本地标签)</p></li><li><p>git tag -d <tagname> (删除一个本地标签)</p></li><li><p>git push origin :refs/tags/<tagname> (删除一个远程标签)</p></li><li><p>git config –global color.ui true (让Git适当地显示不同的颜色)</p></li><li><p>忽略某些文件时，需要编写.gitignore；.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理</p></li><li><p>git config –global alias.st status</p><p>告诉Git，以后st就表示status,配置别名;加上–global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用;每个仓库的Git配置文件都放在.git/config文件中,别名就在[alias]后面，要删除别名，直接把对应的行删掉即可;而当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中)</p></li><li><p>git log –graph (查看分支合并图)</p></li></ol><br><p><font size=4 color=#FF0000>2019-12-16 新增：</font><br>当自己的账户有私人的GitHub和企业的gitlab时，不经意间就会将不同的用户名，邮箱搞混，幸得建彬哥真传，终于搞懂了。<br>1.在自己的项目文件下直接”git bash here”<br>2.查看当前项目所属的用户名与邮箱</p><p>git remote show origin查看当前仓库基本信息<br>git remote -v 查看当前项目远程地址<br>git branch -a 查看远程项目所有分支，红颜色分支代表当前所在分支<br>git config user.name 查看当前项目的用户名<br>git config user.email 查看当前项目的邮箱</p><p>3.设置用户名和邮件<br>git config [–global] user.name “用户名”<br>git config [–global] user.email “邮箱”<br><font color=#FF0000>git config命令的-- global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</font></p><ol start="4"><li>删除远程仓库目标分支</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git branch -a : 查看所有的分支</span><br><span class="line">git checkout 其它分支： 切换到其它分支才能删除目标分支</span><br><span class="line">git push origin --delete 删除的远程仓库名</span><br><span class="line">git branch -a : 再次查看所有的分支，确认是否已经删除了</span><br></pre></td></tr></table></figure><h3 id="2-git-clone的说明"><a href="#2-git-clone的说明" class="headerlink" title="2.git clone的说明"></a>2.git clone的说明</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;git一般有很多分支，我们clone到本地的时候一般都是master分支，那么如何切换到其他分支呢？</p><ol><li>查看所有远程分支：git branch -a</li><li>切换分支：git checkout 目标分支</li><li>同步分支：git pull</li></ol><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;再思考一会：首先，你需要使用 <code>git clone</code> 这个命令克隆一个本地库。之后它会自动克隆一个master分支（这个貌似是必须的）。之后不会克隆任何一个分支下来的。<br>假定你需要一个dev（此处假定远程库中已经存在此分支，也就是你需要克隆的）分支用于开发的话，你需要在dev分支上开发，就必须创建远程origin的dev分支到本地，于是用这个命令创建本地dev分支：<br>$ git checkout -b dev origin/dev</p><p>再同步下：<br>$ git pull</p><p>这样就实现了克隆dev分支。</p><h3 id="3-git-pull与push"><a href="#3-git-pull与push" class="headerlink" title="3.git pull与push"></a>3.git pull与push</h3><p>git 为什么要先commit，然后pull，最后再push？而不是commit然后直接push？<br>情况是这样的，现在远程有一个仓库，分支就一个，是master。然后我本地的仓库是从远程的master上clone下来的。大家都是clone下来，再在自己本地改好，再commit然后pull然后push，大家都是这么做的。那么现在问题来了：<br><font  color=#FF0000></p><ol><li><p>那我本地这个也算是个分支？还是就是一个本地仓库？</p><p>答：本地和远程的关系相当于两个分支,你感觉一样是因为你git pull 的时候已经自动给绑定好对应关系了, set-upstream..balbala</p></li><li><p>如果我在远程新建了个分支，然后我pull了下来，那我本地到底有分支这个说法吗？我本地的分支是不是就是那个远程新建的分支？</p><p>答：你远程新建了一个分支拉到本地的道理是一样的,属于复制了一份,但是本地分支和远程分支已经是两个东西了</p></li><li><p>本地仓库和本地分支有什么区别？</p><p>答：本地分支属于本地仓库里,是包含关系,一个仓库里可以有很多分支</p></li><li><p>commit是提交到本地仓库，然后push，这个push是把所有代码推到远程仓库，还是只是把commit的地方推到远程仓库？</p><p>答：肯定不会全量推送到远程的,是通过对比 commit 的记录,如果本地高于远程就直接把多出来的commit 给怼上去,如果本地分支的最新版本和远程的 commit 有冲突，就需要解决冲突。</p></li><li><p>那为什么要先commit，然后pull，然后再push，我pull了，岂不是把自己改的代码都给覆盖掉了嘛，因为远程没有我改的代码，我pull，岂不是覆盖了我本地的改动好的地方了？那我还怎么push？</p><p>答：这个先 commit 再 pull 最后再push 的情况就是为了应对多人合并开发的情况,</p><ul><li><p>commit 是为了告诉 git 我这次提交改了哪些东西,不然你只是改了但是 git 不知道你改了,也就无从判断比较;</p></li><li><p>pull是为了本地 commit 和远程commit 的对比记录,git 是按照文件的行数操作进行对比的,如果同时操作了某文件的同一行那么就会产生冲突,git 也会把这个冲突给标记出来,这个时候就需要先把和你冲突的那个人拉过来问问保留谁的代码,然后在 git add &amp;&amp; git commit &amp;&amp; git pull 这三连,再次 pull 一次是为了防止再你们协商的时候另一个人给又提交了一版东西,如果真发生了那流程重复一遍,通常没有冲突的时候就直接给你合并了,不会把你的代码给覆盖掉</p></li><li><p>出现代码覆盖或者丢失的情况:比如A B两人的代码pull 时候的版本都是1,A在本地提交了2,3并且推送到远程了,B 进行修改的时候没有commit 操作,他先自己写了东西,然后 git pull 这个时候 B 本地版本已经到3了,B 在本地版本3的时候改了 A 写过的代码,再进行了git commit &amp;&amp; git push 那么在远程版本中就是4,而且 A 的代码被覆盖了,所以说所有人都要先 commit 再 pull,不然真的会覆盖代码的</p></li></ul></li><li><p>两个分支A和B，A合并B和B合并A，有区别吗？</p></li></ol><p>答：两个互相合并的唯一区别就是 A-&gt;B 的时候 B 分支上会产生一个 merge_commit ，被改变的分支是 B ；如果现在没有发生任何改动执行 B-&gt;A ，则A和B两分支才会完全相同。</font></p><h3 id="4-git的整个执行流程★★★"><a href="#4-git的整个执行流程★★★" class="headerlink" title="4.git的整个执行流程★★★"></a>4.git的整个执行流程★★★</h3><ol><li><p>有时候我们开发需要开一个分支,这样可以有效的并行开发，开分支有两种方式:</p><ul><li>一种是在远程开好分支,本地直接拉下来（推荐：根据具体issue，创建相应的分支）</li><li>一种是本地开好分支,推送到远程</li></ul></li><li><p>git clone目标仓库</p></li><li><p>git checkout -b feature-branch origin/feature-branch    </p><p>检出远程的feature-branch分支到本地，创建与远程仓库同名的本地仓库</p></li><li><p>git branch </p><p>检查当前分支是否切换的目标分支</p></li><li><p>轻微修改代码提交测试一下</p><p>看是否能够提交成功，以免白做了</p></li><li><p>提交测试通过后，正式开始写代码</p></li><li><p>git status 检查当前仓库状态</p></li><li><p>先commit，然后pull，最后再push</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 服务器架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> git pull/push </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThinkPHP</title>
      <link href="/2019/11/15/ThinkPHP/"/>
      <url>/2019/11/15/ThinkPHP/</url>
      
        <content type="html"><![CDATA[<p>最近一直在做一个有关于ThinkPHP的前后分离的移动报表项目。记录从建彬师傅那里学到的知识以及自己遇到的一些问题</p><p>涉及到的知识点包含：jQuery、Vue、PHP、Echarts、Bootstrap、HTML+CSS+JavaScript。。。</p><blockquote><p>js的push(),clone()<br>ThinkPHP的变量输出<br>memcached缓存机制<br>ThinkPHP通用项目结构</p></blockquote><a id="more"></a><p><a href="https://github.com/FioraLove/HTML-CSS-JavaScript/tree/master/ThinkPHP%203.2" target="_blank" rel="noopener">ThinkPHP3.2 笔记</a></p><h3 id="1-js的clone-与push函数的一些生活纠纷"><a href="#1-js的clone-与push函数的一些生活纠纷" class="headerlink" title="1.js的clone()与push函数的一些生活纠纷"></a>1.js的clone()与push函数的一些生活纠纷</h3><blockquote><p>push()函数：向数组的末尾添加一个或多个元素，并返回新的长度。返回值是把指定的值添加到数组后的新长度<br>语法：arrayObject.push(newelement1,newelement2,….)</p></blockquote><p>push() 方法可把它的参数顺序添加到 arrayObject（数组对象）的尾部。它直接修改 arrayObject，而不是创建一个新的数组，而是在原数组基础上修改。push() 方法和 pop() 方法使用数组提供的先进后出栈的功能，该方法会改变数组的长度。</p><p>案例1：push()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>);</span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">"chd"</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">"sjb"</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="string">"sgx"</span>;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//输出原素组 ['chd','sjb','sgx']</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.push(<span class="string">"badwoman"</span>));  <span class="comment">// 输出 4</span></span><br></pre></td></tr></table></figure><p>PS:来了，push添加元素之后没有直接输出添加元素之后的数组，只显示了数组的个数（长度）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 展示push后的新数组</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>);</span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">"chd"</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">"sjb"</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="string">"sgx"</span>;</span><br><span class="line">arr.push(<span class="string">'badwoman'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">//输出结果为：['chd','sjb','sgx','badwoman']</span></span><br></pre></td></tr></table></figure><blockquote><p>js的clone()函数</p></blockquote><p>js对象之间的赋值，如果直接用”=”会发现来两个对象还是同一个对象，改变其中一个另外的一个也会做出对应的改变。为了解决这个问题，可以利用java里面的clone的原理。<br>假设有这样一个场景：当存在一个公共数组(对象型)时，一个需要加{“name”:”chd”,”age”:18}另一个需要在数组尾加上{“name”:”sgx”,”age”:108}</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> commonCondition=[&#123;<span class="string">"id"</span>:<span class="number">15</span>&#125;];</span><br><span class="line"><span class="keyword">let</span> a=&#123;<span class="string">"name"</span>:<span class="string">"chd"</span>,<span class="string">"age"</span>:<span class="number">18</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> b=&#123;<span class="string">"name"</span>:<span class="string">"sgx"</span>,<span class="string">"age"</span>:<span class="number">108</span>&#125;;</span><br><span class="line"><span class="comment">// 当我们利用a = commonCondition.push(a)时，此时原来的commonCondition也会跟着改变</span></span><br><span class="line"><span class="comment">// 赋值b = commonCondition.push(b)。此时，b中也会包含a的数据，此刻js的clone函数就出现了</span></span><br></pre></td></tr></table></figure><p>js的clone()函数源代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">Obj</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> o;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> obj == <span class="string">"object"</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (obj === <span class="literal">null</span>) &#123;</span><br><span class="line">                o = <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">                    o = [];</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = obj.length; i &lt; len; i++) &#123;</span><br><span class="line">                        o.push(<span class="keyword">this</span>.clone(obj[i])); <span class="comment">// 有可能不要this</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    o = &#123;&#125;;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> j <span class="keyword">in</span> obj) &#123;</span><br><span class="line">                        o[j] = <span class="keyword">this</span>.clone(obj[j]);  <span class="comment">// 有可能不要this</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            o = obj;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>即此刻，我们才有如下最正确的式子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> new_a = clone(commonCondition);</span><br><span class="line">a = new_a.push(a);</span><br><span class="line"><span class="keyword">let</span> new_b = clone(commonCondition);</span><br><span class="line">b = new_b.push(b);</span><br></pre></td></tr></table></figure><h3 id="2-thinkphp项目调用Vue扩展函数方式"><a href="#2-thinkphp项目调用Vue扩展函数方式" class="headerlink" title="2. thinkphp项目调用Vue扩展函数方式"></a>2. thinkphp项目调用Vue扩展函数方式</h3><p>2.1 导入vue扩展包.js文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./cf.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.2 声明方法：新建一个与项目名同名的js文件，新增如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Vue.prototype.项目名 = &#123;</span><br><span class="line">    // 这里表示扩展函数</span><br><span class="line">    函数名一:function(obj)&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;,</span><br><span class="line">    函数名二:function(obj)&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.3 调用方法：<del>Vue实例化名.</del>  项目名.函数名()<br><del>Vue实力化名即：let app = new Vue({})中的app</del>,经过测试后，调用方法为 项目名.函数名（）</p><h3 id="3-thinkPHP的变量输出知识-lt-函数名-变量名-gt-中的冒号-quot-quot-表示引用调用函数，获取变量值"><a href="#3-thinkPHP的变量输出知识-lt-函数名-变量名-gt-中的冒号-quot-quot-表示引用调用函数，获取变量值" class="headerlink" title="3.thinkPHP的变量输出知识&lt;{:函数名/变量名}&gt; 中的冒号&quot;:&quot;表示引用调用函数，获取变量值"></a>3.thinkPHP的变量输出知识&lt;{:函数名/变量名}&gt; 中的冒号&quot;:&quot;表示引用调用函数，获取变量值</h3><blockquote><p>&lt;{:U(query)}&gt;:URL生成<a href="http://serverName/projectName/当前模块/当前控制器/声明的方法" target="_blank" rel="noopener">http://serverName/projectName/当前模块/当前控制器/声明的方法</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">默认的模板标签为：在config.php文件下更改设置</span><br><span class="line">&apos;TMPL_L_DELIM&apos;=&gt;&apos;&lt;&#123;&apos;,</span><br><span class="line">&apos;TMPL_R_DELIM&apos;=&gt;&apos;&#125;&gt;&apos;,</span><br></pre></td></tr></table></figure><blockquote><p>&lt;{:I(‘name’,’chd’)}&gt;中的I方法获取自定义参数值，不存在时，自定义默认值</p></blockquote><p>I(‘get.name’); // 相当于 $_GET[‘name’]支持默认值：</p><p><font color=#f05b72>2019-12-8 新增：<br>查看thinkphp3.2手册存在变量输出方式二：<br>在模板（即HTML文件）中输出变量的方式很简单，只需要我们在控制器给模板变量赋值：<br></font></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$name = <span class="string">"ThinkPHP"</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"><span class="doctag">@param</span> $this-&gt;assign() 绑定，分配数据</span></span><br><span class="line"><span class="comment"><span class="doctag">@param</span> （'name',$name）参数一：表示要在模板中引用的变量名，在不加$符号时，也要使用引号括起来</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">$this</span>-&gt;assign(<span class="string">'name'</span>,$name); </span><br><span class="line"><span class="keyword">$this</span>-&gt;display();  <span class="comment">// 将分配的数据在HTML页面展示</span></span><br></pre></td></tr></table></figure><p>然后再模板中使用（注意模板标签的{和$之间不能有任何的空格，否则标签无效,普通标签默认开始标记是{，结束标记是 }。也可以通过设置TMPL_L_DELIM和TMPL_R_DELIM进行更）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hello,<span class="tag">&lt;<span class="name">&#123;$name&#125;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在模板编译后结果为：--&gt;</span></span><br><span class="line">Hello,<span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span>($name);<span class="meta">?&gt;</span></span></span><br><span class="line"><span class="comment">&lt;!--这样就在HTML页面显示为：--&gt;</span></span><br><span class="line">hello,ThinkPHP</span><br></pre></td></tr></table></figure><h3 id="4-ThinkPHP的memcached缓存机制"><a href="#4-ThinkPHP的memcached缓存机制" class="headerlink" title="4. ThinkPHP的memcached缓存机制"></a>4. ThinkPHP的memcached缓存机制</h3><blockquote><p>4.1 下载安装memcached，并启动其服务</p></blockquote><p> <a href="https://blog.csdn.net/qq_41717874/article/details/89472198" target="_blank" rel="noopener">参考docker创建memecached容器</a><br> <a href="https://www.cnblogs.com/b-ruce/p/5639223.html" target="_blank" rel="noopener">windows下ThinkPHP3.2.3使用memcache缓存</a></p><blockquote><p>4.2thinkphp3.2中其实已经加入了memcached缓存机制，只需要在Conf/config.php配置数据缓存类型即可使用Memcache:</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span> php </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'DATA_CACHE_TYPE'</span> =&gt; <span class="string">'Memcache'</span>,  <span class="comment">// 数据缓存类型 </span></span><br><span class="line">    <span class="string">'MEMCACHE_HOST'</span>   =&gt; <span class="string">'tcp://127.0.0.1:11211'</span>, </span><br><span class="line">    <span class="string">'DATA_CACHE_TIME'</span> =&gt; <span class="string">'3600'</span></span><br><span class="line">    )</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-ThinkPHP项目模块结构，参考此文章"><a href="#5-ThinkPHP项目模块结构，参考此文章" class="headerlink" title="5.ThinkPHP项目模块结构，参考此文章"></a>5.ThinkPHP项目模块结构，<a href="https://www.cnblogs.com/xiaoliwang/p/7996540.html" target="_blank" rel="noopener">参考此文章</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">project项目名:</span><br><span class="line">    |---Application:应用模块</span><br><span class="line">        |Admin后台模块</span><br><span class="line">        |Home前台模块</span><br><span class="line">            |---Controller控制器</span><br><span class="line">                |---IndexController.class.php</span><br><span class="line">            |---Model模型</span><br><span class="line">                |---IndexModel.class.php</span><br><span class="line">            |---View视图</span><br><span class="line">                |---index.html</span><br><span class="line">        |Common公共配置模块（不能直接访问）</span><br><span class="line">        |Runtime缓存模块</span><br><span class="line">    |---Public静态资源文件</span><br><span class="line">    |---ThinkPHP框架</span><br><span class="line">    |---index.php：入口文件</span><br><span class="line">    |---favicon.ico：网站图标</span><br><span class="line">    |---.htaccess:Apache配置文件（重写URL，修改访问权限）</span><br></pre></td></tr></table></figure><h3 id="未完待续。。。"><a href="#未完待续。。。" class="headerlink" title="未完待续。。。"></a>未完待续。。。</h3>]]></content>
      
      
      <categories>
          
          <category> ThinkPHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> thinkPHP </tag>
            
            <tag> $.post() </tag>
            
            <tag> API </tag>
            
            <tag> Ajax </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSON通常用于与服务端交换数据,在向服务器发送数据时一般是字符串</title>
      <link href="/2019/11/14/json/"/>
      <url>/2019/11/14/json/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;json语法规则(PS:json键值对一定要用双引号包裹起来)</p><ul><li>数据在名称/值对中</li><li>数据由逗号分隔</li><li>大括号保存对象</li><li>中括号保存数组<br>本文内容：<blockquote><p>1.Python的json规则<br>2.js中的json规则<br>3.Python一般脚本文件编写规则</p></blockquote><a id="more"></a></li></ul><h3 id="1-Python的json规则"><a href="#1-Python的json规则" class="headerlink" title="1.Python的json规则"></a>1.Python的json规则</h3><p>python程序中的json有一点点区别于JavaScript中的json，它是通过对象和数组的组合来表示数据</p><blockquote><p>1.1 对象型数组</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;它在JavaScript是使用花括号{}包裹起来的内容，数据结构为{key1:value1,key2:value2…}的键值对结构，key为对象的属性，value为对应的值。键名可以使用整数和字符串来表示，<br>所以，一个json对象跨用写作如下格式(对象型数组)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"chd"</span>,</span><br><span class="line">  <span class="attr">"age"</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">"sex"</span>: <span class="string">"man"</span></span><br><span class="line">  &#125;,&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"Monica"</span>,</span><br><span class="line">  <span class="attr">"gender"</span>: <span class="string">"woman"</span>,</span><br><span class="line">  <span class="attr">"birthday"</span>: <span class="string">"1997-1-25"</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><blockquote><p>调用方式:通过中括号加0索引，可以得到第一个字典元素，然后调用其键名即可得到相应的键值</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;调用方式一：中括号加键名<br>data[index][“键名”] =&gt; data[0][‘name’]，结果为‘chd’<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;调用方式二：get()方法传入键名，如果键名不存在，不会报错，会返回none（python中推荐使用）<br>data[index].get(‘键名’) =&gt; data[1].get(“birthday”),结果为”1997-1-25”</p><blockquote><p>1.2 键值对形式（类似于字典）</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"code"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"msg"</span>: <span class="string">"success"</span>,</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"pig"</span>,</span><br><span class="line">    <span class="attr">"age"</span>: <span class="string">"18"</span>,</span><br><span class="line">    <span class="attr">"sex"</span>: <span class="string">"man"</span>,</span><br><span class="line">    <span class="attr">"hometown"</span>: &#123;</span><br><span class="line">      <span class="attr">"province"</span>: <span class="string">"江西省"</span>,</span><br><span class="line">      <span class="attr">"city"</span>: <span class="string">"抚州市"</span>,</span><br><span class="line">      <span class="attr">"county"</span>: <span class="string">"崇仁县"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>1.3 需要注意到点</p></blockquote><p>JSON的键名和字符串都必须使用双引号引起来，而Python中单引号也可以表示为字符串，所以这是个比较容易犯的错误！<br>Python类型与JSON相互转换的时候到底是用load//dump还是用loads\dumps？<br>他们之间有什么区别？什么时候该加s什么时候不该加s？<br>这个我们可以通过查看源码找到答案：<br>不加s的方法入参多了一个fp表示filepath，最后多了一个写入文件的操作。<br>所以我们在记忆的时候可以这样记忆：<br><font color=#f05b72>加s表示转成字符串(str)，不加s表示转成文件。</font></p><p><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/20200408081958.png" alt=""></fancybox></p><h3 id="2-javascript中的json"><a href="#2-javascript中的json" class="headerlink" title="2.javascript中的json"></a>2.javascript中的json</h3><p>javascript的访问方式与python大同小异，但也有细分之处<br>访问方式一：变量名[“键名”]<br>访问方式二：变量名.键名</p><p><strong>json是js的原生内容，也就意味着js可以直接读取出json对象中的数据</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let stu = &#123;&quot;student&quot;:           //stu 对象包含student的key,值为一个数组</span><br><span class="line">    [                  //数组的每一个值为一个具体的学生对象</span><br><span class="line">        &#123;&quot;name&quot;: &quot;Tom&quot;,&quot;Grade&quot;:1, &quot;age&quot;:11, &quot;gender&quot;: &quot;M&quot;&#125;,     //学生对象的键为名字,值为对应属性</span><br><span class="line">        &#123;&quot;name&quot;: &quot;Jerry&quot;, &quot;Grade&quot;:1, &quot;age&quot;:10, &quot;gender&quot;: &quot;M&quot;&#125;       //每个属性对应的是一个key,value对</span><br><span class="line">    ],</span><br><span class="line">    &quot;classroom&quot;: &#123;&quot;class1&quot;: &quot;room1&quot;, &quot;class2&quot;: &quot;room2&quot;&#125;         //对象的值,嵌套对象</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">stu[&quot;classroom&quot;][&quot;class1&quot;]:&quot;room1&quot;</span><br><span class="line">stu.classroom.class1 : &quot;room1&quot;</span><br></pre></td></tr></table></figure><blockquote><p>json.parse()：是从一个字符串中解析出 json 对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个字符串</span></span><br><span class="line"><span class="keyword">let</span> data=<span class="string">'&#123;"name":"goatling"&#125;'</span>;</span><br><span class="line"><span class="comment">//解析对象​</span></span><br><span class="line">​<span class="keyword">var</span> a = <span class="built_in">JSON</span>.parse(data);</span><br><span class="line"><span class="keyword">typeof</span>(a) <span class="comment">// 对象类型</span></span><br><span class="line"><span class="comment">/*结果是：</span></span><br><span class="line"><span class="comment">*Object</span></span><br><span class="line"><span class="comment">* &#123;name:"goatling"&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p>json.stringify() 是从一个对象中解析出字符串</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data=&#123;<span class="attr">name</span>:<span class="string">'goatling'</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="built_in">JSON</span>.stringify(data);</span><br><span class="line"><span class="keyword">typeof</span>(a) <span class="comment">// 对象类型</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 结果是：</span></span><br><span class="line"><span class="comment">* '&#123;"name":"goatling"&#125;'</span></span><br><span class="line"><span class="comment">* 字符串类型</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure><h3 id="3-Python一般脚本文件编写流程"><a href="#3-Python一般脚本文件编写流程" class="headerlink" title="3.Python一般脚本文件编写流程"></a>3.Python一般脚本文件编写流程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">1.文件配置一般在config.json中，比如：用户名，账号，密码，人员信息等等</span><br><span class="line">2.在settings.py 文件中导入.json文件中的配置</span><br><span class="line">    # 载入配置文件</span><br><span class="line">    BASE_DIR = os.path.dirname(os.path.abspath(__file__)) # 返回当前path文件的上一级目录</span><br><span class="line">    with open(os.path.join(BASE_DIR,&quot;settings.json&quot;),&quot;r&quot;) as f:</span><br><span class="line">    SETTINGS = json.load(f)</span><br><span class="line"></span><br><span class="line">    #  配置文件的内容获取</span><br><span class="line">    SERVER = SETTINGS[&quot;DB_CONFIG&quot;][&quot;DB_SERVER&quot;]</span><br><span class="line">    # json格式新的调用方法：json.load(f)的变量名[&quot;对象名&quot;][&quot;键名&quot;]</span><br><span class="line"></span><br><span class="line">3.在主文件.py 中导入文件import settings</span><br><span class="line">    文本格式内容为：settings.SERVER，settings.PASSWORD等等</span><br><span class="line"></span><br><span class="line">脚本目录：</span><br><span class="line">    |</span><br><span class="line">    |--core.py</span><br><span class="line">    |</span><br><span class="line">    |--settings.py</span><br><span class="line">    |</span><br><span class="line">    |--config.json</span><br><span class="line">    |</span><br><span class="line">    |--a.py</span><br><span class="line">    |--b.py</span><br><span class="line">    |</span><br><span class="line">    |--.gitignore</span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://www.cnblogs.com/zishengY/p/10994621.html" target="_blank" rel="noopener">10分钟学分js处理json常用方法</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> json </category>
          
      </categories>
      
      
        <tags>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库存储引擎与索引,视图</title>
      <link href="/2019/11/12/sql%E7%B3%BB%E5%88%97%E6%9B%B4%E6%96%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2019/11/12/sql%E7%B3%BB%E5%88%97%E6%9B%B4%E6%96%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;MySQL支持多种存储引擎，以适用于不同领域的数据库应用需要，用户可以根据需要进行选择甚至是定制自己的引擎以提高应用效率。</p><ul><li>索引概述</li><li>索引作用</li><li>视图</li><li>事务</li><li>视图的操作</li></ul><a id="more"></a><h3 id="1-索引概述"><a href="#1-索引概述" class="headerlink" title="1.索引概述"></a>1.索引概述</h3><p>索引在创建表的时候可以同时创建，也可以随时增加新的索引<br>创建新索引的语法为:<br>create [unique|fulltext|spatial] index index_name [using index_type] on table_name( col_name [(length)] [asc|desc])<br>删除索引： DROP INDEX index_name on table_name</p><h3 id="2-索引作用"><a href="#2-索引作用" class="headerlink" title="2.索引作用"></a>2.索引作用</h3><p>合理的创建索引是提高查询速度最有效的方式之一。<br>&nbsp;&nbsp;&nbsp;&nbsp;在没有建立索引的情况下，查询一条数据的过程是这样：<br>MySQL是从第一条记录开始查表，在某一个地方查到了匹配的数据，停止？NO，继续查询剩下的数据，直到查完整张表。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;在建立合适索引的情况下，查询一条数据的过程又是这样：<br>MySQL先根据索引快速到达一个位置去搜索数据文件，然后查出数据，而不必查看整张表的数据。<br>tips:<br><font color=#FF3030><br>1、索引的效率取决于索引列的值是否散列，即该列的值如果越互不相同，那么索引效率越高。<br>2、索引的优点是提高了查询效率，缺点是在插入、更新和删除记录时，需要同时修改索引，因此，索引越多，插入、更新和删除记录的速度就越慢。<br>3、通过创建唯一索引，可以保证某一列的值具有唯一性。</font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*添加唯一索引：*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students</span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> unique_name(<span class="keyword">name</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*只添加唯一约束而不添加唯一索引：*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students</span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> unique_name <span class="keyword">UNIQUE</span>(<span class="keyword">name</span>);</span><br></pre></td></tr></table></figure><p>因此，为了提高查询速度，合理建立索引是非常有必要的。</p><hr><table><thead><tr><th>类型</th><th align="center">描述</th></tr></thead><tbody><tr><td>普通索引</td><td align="center">基本的索引类型，允许定义索引的列中插入重复值和空值</td></tr><tr><td>唯一索引</td><td align="center">索引列值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一</td></tr><tr><td>主键索引</td><td align="center">特殊的唯一索引，不允许有空值</td></tr><tr><td>全文索引</td><td align="center">类型为FULLTEXT,支持值的全文查找，允许在索引列中插入重复值和空值</td></tr><tr><td>组合索引</td><td align="center">在表的多个字段组合上创建的索引</td></tr></tbody></table><h3 id="3-视图（5-0-1提供视图功能）"><a href="#3-视图（5-0-1提供视图功能）" class="headerlink" title="3.视图（5.0.1提供视图功能）"></a>3.视图（5.0.1提供视图功能）</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;视图是一种虚拟存在的表，它存储的是查询语句，显示出来的是查询的结果；更直白的说就是当我们需要从表中查询一些信息时需要编写相关SQL语句，将这些SQL语句存储为视图，那么我们调用这些视图的时候就相当于执行了SQL语句，从而可以得到想要的结果<br>eg:创建视图并执行查询操作<br> create view view_name as select qty,price,qty*price as value from temp;</p><h4 id="视图有什么作用"><a href="#视图有什么作用" class="headerlink" title="视图有什么作用"></a>视图有什么作用</h4><blockquote><p>1.视图就像是一个封装了很多功能的函数，我们把一系列复杂的查询语句存储为一个视图，这样在需要频繁使用这些语句时不必反复编写，直接使用视图代替即可</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">如果要频繁获取表user的name和表goods的name。就应该使用以下sql语句：</span><br><span class="line">select a.name as username, b.name as goodsname from user as a, goods as b, ug as c where a.id=c.userid and c.goodsid=b.id;</span><br><span class="line"></span><br><span class="line">但有了视图就不一样了，创建视图other。示例</span><br><span class="line">create view other as select a.name as username, b.name as goodsname from user as a, goods as b, ug as c where a.id=c.userid and c.goodsid=b.id;</span><br><span class="line"></span><br><span class="line">创建好视图后，就可以这样获取user的name和goods的name：</span><br><span class="line"> select * from other;</span><br></pre></td></tr></table></figure><blockquote><p>2.对数据库进行重构但仍不会影响程序运行</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">假如因为某种需求，需要将user表拆成表usera和表userb，该两张表的结构如下：</span><br><span class="line">        测试表:usera有id，name，age字段</span><br><span class="line">        测试表:userb有id，name，sex字段</span><br><span class="line">这时如果程序端一直使用的sql语句是：select * from user;那就会报错提示该表不存在，这时要么去更改程序的查询语句要么就创建视图。显然，创建视图更简单，成本更低。</span><br><span class="line">以下sql语句创建视图：</span><br><span class="line">create view user as select a.name,a.age,b.sex from usera as a, userb as b where a.name=b.name;</span><br><span class="line">以上假设name都是唯一的。</span><br><span class="line">这时程序端端使用的sql语句：select * from user;就不会报错。这就实现了更改数据库结构，而不用更改脚本程序的功能。</span><br></pre></td></tr></table></figure><h3 id="4-视图的操作"><a href="#4-视图的操作" class="headerlink" title="4.视图的操作"></a>4.视图的操作</h3><blockquote><p>4.1 创建或修改视图</p></blockquote><p>create [ or replace ] [ algorithm = { undefined | merge | temptable } ] view view_name [ (column_list) ] as select_statement [ with [ cascaded | local ] check option ]</p><ul><li>使用了OR REPLACE可以修改视图，或者直接就CREATE OR REPLACE 替换为ALTER 即变成修改语法；</li><li>UNDEFINED：未定义指定算法；MERGE：更新视图表数据的同时会更新真实表的数据（默认）；TEMPTABLE：只能查询不能更新；</li><li>CASCADED(默认)：必须满足所有针对该视图的所有视图的条件才可以更新；LOCAL：只需满足本视图的条件就可以更新；</li><li>WITH CHECK OPTION：需要满足相关的检查条件才能进行更新<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--常量视图</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">view</span> <span class="keyword">pi</span> <span class="keyword">as</span> <span class="keyword">select</span> <span class="number">3.1415926</span> <span class="keyword">as</span> <span class="keyword">pi</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">--select中包含子查询</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">view</span> city_view <span class="keyword">as</span> <span class="keyword">select</span> (<span class="keyword">select</span> city <span class="keyword">from</span> city <span class="keyword">where</span> city_id=<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>4.2 查看当前数据库下所有视图 show full tables where table_type like ‘view’;</p></blockquote><h3 id="5-优化SQL语句一般步骤"><a href="#5-优化SQL语句一般步骤" class="headerlink" title="5.优化SQL语句一般步骤"></a>5.优化SQL语句一般步骤</h3><blockquote><p>5.1 通过show status 查看各语句的频率</p></blockquote><h3 id="6-数据库Leetcode"><a href="#6-数据库Leetcode" class="headerlink" title="6.数据库Leetcode"></a>6.数据库Leetcode</h3><p>1.求薪水第二高，不存在就返回null</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">ifnull</span>((<span class="keyword">select</span> <span class="keyword">distinct</span>(Salary) </span><br><span class="line"><span class="keyword">from</span> Employee </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> Salary <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">1</span>,<span class="number">1</span>),<span class="literal">null</span>) <span class="keyword">as</span> SecondHighestSalary;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>超过5名学生的课(having用法)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">class</span></span><br><span class="line"><span class="keyword">from</span> courses</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">class</span></span><br><span class="line"><span class="keyword">having</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> student) &gt;= <span class="number">5</span></span><br></pre></td></tr></table></figure></li><li><p>DATEDIFF是两个日期的天数差集</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.Id <span class="keyword">as</span> newId</span><br><span class="line"><span class="keyword">from</span> Weather a <span class="keyword">left</span> <span class="keyword">join</span> Weather b </span><br><span class="line"><span class="keyword">on</span> <span class="keyword">datediff</span>(a.RecordDate,b.RecordDate)=<span class="number">1</span> <span class="keyword">where</span> a.Temperature&gt;b.Temperature</span><br></pre></td></tr></table></figure></li></ol><h3 id="5-事务"><a href="#5-事务" class="headerlink" title="5.事务"></a>5.事务</h3><p>事务：<strong>一个事务是由一条或多条sql语句构成，这一条或者多条sql语句要么全部执行成功，要么全部执行失败</strong></p><p>默认情况下，每条单独的sql语句就是一个单独的事务。<br>例：银行转账，A要向B转账1000元，这需要两条sql语句：①A的账户减去1000元 ②B的账户加上1000元。<br>设想如果在第一条sql语句执行成功后，在执行第二条sql语句之前程序被中断了，那么B的账户没有增加而A的账户却减少了1000，这肯定不是我们想要的结果。<br>因此我们需要事务来解决此类问题。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 转账案例</span></span><br><span class="line"><span class="keyword">SET</span> autocommit = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">START</span> <span class="keyword">TRANSACTION</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">account</span> <span class="keyword">SET</span> money=money<span class="number">-1000</span> <span class="keyword">WHERE</span> <span class="keyword">NAME</span> = <span class="string">'A'</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">account</span> <span class="keyword">SET</span> money=money+<span class="number">1000</span> <span class="keyword">WHERE</span> <span class="keyword">NAME</span> = <span class="string">'B'</span>;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><blockquote><p>查看MySQL的隔离级别</p></blockquote><p>查看MySQL隔离级别</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @@global.tx_isolation; </span><br><span class="line"><span class="keyword">SELECT</span> @@session.tx_isolation; </span><br><span class="line"><span class="keyword">SELECT</span> @@tx_isolation;</span><br></pre></td></tr></table></figure><p>修改MySQL隔离级别</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> [<span class="keyword">SESSION</span> | <span class="keyword">GLOBAL</span>] <span class="keyword">TRANSACTION</span> <span class="keyword">ISOLATION</span> <span class="keyword">LEVEL</span> </span><br><span class="line">&#123;<span class="keyword">READ</span> UNCOMMITTED | <span class="keyword">READ</span> COMMITTED | REPEATABLE <span class="keyword">READ</span> | <span class="keyword">SERIALIZABLE</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>事务的特性ACID</p></blockquote><ul><li>原子性：事务中所有操作是不可分割的原子单位，事务中的所有操作要么全部执行成功，要么全部执行失败</li><li>一致性：事务执行后，数据库状态与其他业务规则保持一致。如转账案例中，无论事务成功与否，参与转账的两个账户的金额之和应保持不变。</li><li>隔离性：在并发操作中，不同事务之间是互相隔离的，不会互相干扰。</li><li>持久性：一旦事务提交成功，事务中所有的数据都必须被持久化到数据库中，即使提交数据后数据库崩溃，在数据库重启时，也必须保证通过某种机制恢复数据。</li></ul><blockquote><p>MySQL中的事务</p></blockquote><ol><li>隐式事务:事务自动提交</li></ol><p>没有明显的开始和结束标记<br>例如DML语句的 INSERT,UPDATE,DELETE 语句本身就是一条事务（<strong>一条DML增删改语句会自动提交一次事务，即执行sql语句后会即刻生效</strong>）</p><ol start="2"><li>显式事务：事务手动提交</li></ol><p>具有明显的开始和结束标记,一般由多条sql语句组成，必须具有明显的开始和结束标记</p><ul><li>代码里使用事务的步骤：</li><li>前需要先关闭自动提交</li><li>然后开启事务，</li><li>执行操作数据的SQL</li><li>如果中间SQL语句抛异常了，就调rollback 回滚，将数据恢复到事务开始前的状态，事务结束</li><li>如果中间SQL语句没有抛异常，就commit 提交，事务结束</li></ul><p>显式事务用begin或start transaction开始事务后，若没有手动commit，或者遇错rollback回滚，执行后即使立马查询，所看见的数据都是临时的，并不是执行后真正写入磁盘里的数据。</p><p>PS：<strong>Oracle的事务默认是手动提交的，一定要注意</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看事务自动提交的模式</span></span><br><span class="line"><span class="keyword">show</span> [<span class="keyword">session</span>] <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'autocommit'</span>;  //会话级别</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'autocommit'</span>;// 全局级别</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭自动提交：</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> autocommit=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">set</span> [<span class="keyword">session</span>] autocommit=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启自动提交：</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> autocommit=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">set</span> [<span class="keyword">session</span>] autocommit=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置事务【可选】(这些事务是互斥的，不能同时设置两个以上选项)</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">transaction</span> <span class="keyword">read</span> <span class="keyword">only</span> </span><br><span class="line"><span class="keyword">set</span> <span class="keyword">transaction</span> <span class="keyword">read</span> write</span><br><span class="line"><span class="keyword">Set</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> <span class="keyword">read</span> committed</span><br><span class="line"><span class="keyword">Set</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> <span class="keyword">serializable</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启事务</span></span><br><span class="line"><span class="keyword">begin</span>; </span><br><span class="line">或：</span><br><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交</span></span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回滚</span></span><br><span class="line"><span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure><p><strong>set transaction只对当前事务有效,事务终止,事务当前的设置将会失效</strong></p><p><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/20200609194751.png" alt=""></fancybox></p><blockquote><p>MySQL的事务隔离级别</p></blockquote><ul><li>Read Uncommitted（读未提交）</li></ul><p>所有事务都可以看到其他未提交事务的执行结果，会产生脏读（读取未提交的数据），（存在脏读、不可重复读、幻读）</p><ul><li>Read Committed（读提交）</li></ul><p>一个事务只能看见已经提交事务所做的改变，会产生不可重复读问题，（解决脏读，存在不可重复读和幻读）</p><ul><li>Repeatable Read（可重读）</li></ul><p>这是MySQL的默认事务隔离级别，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。不过理论上，这会导致另一个棘手的问题：幻读 （Phantom Read），（默认，解决脏读，不可重复读，存在幻读）</p><ul><li>Serializable（串行化）</li></ul><p>这是最高的隔离级别，读加共享锁，写加排他锁，读写互斥，从而解决幻读问题。在这个级别，可能导致大量的超时现象和锁竞争，如果业务并发的特别少，同时又要求数据及时可靠的话，可以使用。（解决所有并发问题，但效率较低）</p><blockquote><p>隔离级别产生的问题</p></blockquote><ul><li>脏读(Dirty Read)：某个事务已更新一份数据，另一个事务在此时读取了同一份数据，由于某些原因，前一个RollBack了操作，则后一个事务所读取的数据不正确了</li><li>不可重复读(Non-repeatable read)：在一个事务的两次查询之中数据不一致，这可能是两次查询过程中间插入了一个事务更新的原有的数据。</li><li>幻读(Phantom Read)：在一个事务的两次查询中数据笔数不一致，例如有一个事务查询了几列(Row)数据，而另一个事务却在此时插入了新的几列数据，先前的事务在接下来的查询中，就会发现有几列数据是它先前所没有的。</li></ul><p><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/20200609201251.png" alt=""></fancybox></p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://www.cnblogs.com/lone5wolf/p/11520504.html" target="_blank" rel="noopener">oracle事务处理</a></li><li><a href="https://blog.csdn.net/qq_41112238/article/details/103952391" target="_blank" rel="noopener">MySQL基础入门总结笔记</a></li><li><a href="https://blog.csdn.net/tongdanping/article/details/79878302" target="_blank" rel="noopener">深入理解MySQL索引原理和实现——为什么索引可以加速查询？</a></li><li><a href="https://blog.csdn.net/qwerdfcv/article/details/89453583" target="_blank" rel="noopener">Oracle事务的提交（commit）与回滚（rollback）</a></li><li><a href="https://www.bilibili.com/video/BV1Lf4y1U7Cz?p=528" target="_blank" rel="noopener">关于事务，隔离级别讲的比较好的b站视频</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> InnoDB </tag>
            
            <tag> MyISAM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery学习</title>
      <link href="/2019/11/11/jquery/"/>
      <url>/2019/11/11/jquery/</url>
      
        <content type="html"><![CDATA[<p><font color=#00CD00>简单来说，jQuery是一个js库，却极大的简化了JavaScript编程。好记性不如烂笔头，mark一下自己遇到的问题</font><br><fancybox><img src="http://pic4.zhimg.com/v2-406e0657b46be0bb4b12ca3661c94397_b.jpg" width="60%"></fancybox></p><blockquote><p><font size=4 color=#FF0000>本文要点：</font><br>1.选择器<br>2.bootstrap的进度条功能添加<br>…</p></blockquote><a id="more"></a><h3 id="1-选择器"><a href="#1-选择器" class="headerlink" title="1. 选择器"></a>1. 选择器</h3><p>id选择器 $(“#div”)<br>    类选择器  $(“.div”)<br>    标签选择器 $(“div”)<br>    并集选择器 $(“selector1,selector2,…,selectN”)：使用逗号连接，以数组形式返回所有的合并元素<br>    后代选择器 $(“div p”):div标签下的p标签，包含子孙节点<br>    过滤选择器 $(“div:eq(n)”) :eq(index)获取给定索引值的元素  从0开始计数<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:gt(index) 匹配所有大于给定索引值的元素<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:lt(index) 匹配所有小于给定索引值的元素<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:even      匹配所有索引值为偶数的元素，从 0 开始计数<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:odd       匹配所有索引值为奇数的元素，从 0 开始计数<br>属性选择器 $(“div[attribute=”value”]”)   :匹配给定的属性是某个特定值的元素</p><p>表单的选择器:$(‘input:radio/checkbox/text/password/…’),即: type值为radio、checkbox、password等的input元素</p><p>筛选选择器 : $(‘div’).eq(n) 获取第n个元素 数值从0开始<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.first()获取第一个元素<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.last()获取最后一个元素<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.parent() 选择父亲元素<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.siblings()选择兄弟元素<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.find() 查找目标元素值 </p><p><font color=#00CD00>PS:注意筛选选择器与过滤选择器的函数位置</font></p><h3 id="2-bootstrap的进度条添加新功能"><a href="#2-bootstrap的进度条添加新功能" class="headerlink" title="2.bootstrap的进度条添加新功能"></a>2.bootstrap的进度条添加新功能</h3><p>bootstrap带动画效果的进度条的源代码为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--这里的class="one"是我自己添加到，方便找出一个div标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress-bar progress-bar-striped active one"</span> <span class="attr">role</span>=<span class="string">"progressbar"</span> <span class="attr">aria-valuenow</span>=<span class="string">"45"</span> <span class="attr">aria-valuemin</span>=<span class="string">"0"</span> <span class="attr">aria-valuemax</span>=<span class="string">"100"</span> <span class="attr">style</span>=<span class="string">"width: 45%"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>45% Complete<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为了使进度条能够“运动”起来，这里有几种方法：</p><blockquote><p>方法一：采用jQuery</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'.one'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 休眠函数，类似于python的time.sleep()</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">n</span>) </span>&#123; <span class="comment">//n表示的毫秒数</span></span><br><span class="line">            <span class="keyword">var</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() - start &gt; n) <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">        <span class="comment">// 获取当前的进度条长度，并转换为正整数  </span></span><br><span class="line">        <span class="keyword">let</span> len = <span class="built_in">parseInt</span>($(<span class="keyword">this</span>).attr(<span class="string">"aria-valuenow"</span>));</span><br><span class="line">        <span class="keyword">while</span>(len&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">            <span class="comment">// 进度条的长度其实就是style属性的width长度</span></span><br><span class="line">            $(<span class="keyword">this</span>).css(<span class="string">'width'</span>,<span class="built_in">String</span>(len)+<span class="string">"%"</span>);</span><br><span class="line">            len ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="string">``</span><span class="string">`   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;方法二：setInterval(function,milliseconds)，给定的时间间隔内重复执行该函数   </span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).css(<span class="string">'width'</span>,<span class="built_in">String</span>(len)+<span class="string">"%"</span>);</span><br><span class="line">    len ++;</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/QQ%E6%88%AA%E5%9B%BE20191224191729.jpg" alt=""></fancybox></p><h3 id="3-jQuery的事件"><a href="#3-jQuery的事件" class="headerlink" title="3.jQuery的事件"></a>3.jQuery的事件</h3><p><strong>常见的DOM事件:</strong></p><table><thead><tr><th>鼠标事件</th><th align="center">键盘事件</th><th align="center">表单事件</th><th align="right">文档/窗口事件</th></tr></thead><tbody><tr><td>click</td><td align="center">keypress</td><td align="center">submit</td><td align="right">load</td></tr><tr><td>dblclick</td><td align="center">keydown</td><td align="center">change</td><td align="right">resize</td></tr><tr><td>mouseenter</td><td align="center">keyup</td><td align="center">focus</td><td align="right">scroll</td></tr><tr><td>mouseleave</td><td align="center"></td><td align="center">blur</td><td align="right">unload</td></tr><tr><td>hover</td><td align="center"></td><td align="center"></td><td align="right"></td></tr></tbody></table><br>1.click鼠标点击事件:选择目标元素<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;p&quot;).click(function()&#123;</span><br><span class="line">    // 动作触发后执行的代码!!</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>2.dblclick(),当双击元素时，会发生 dblclick 事件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dblclick() 方法触发 dblclick 事件，或规定当发生 dblclick 事件时运行的函数：   </span><br><span class="line">实例</span><br><span class="line">$(&quot;p&quot;).dblclick(function()&#123;</span><br><span class="line">  $(this).hide();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>3.mouseenter():当鼠标指针穿过元素时，会发生 mouseenter 事件 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#p1&quot;).mouseenter(function()&#123;</span><br><span class="line">    alert(&apos;您的鼠标移到了 id=&quot;p1&quot; 的元素上!&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>4.mouseleave():当鼠标指针离开元素时，会发生 mouseleave 事件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mouseleave() 方法触发 mouseleave 事件，或规定当发生 mouseleave 事件时运行的函数：</span><br><span class="line">实例</span><br><span class="line">$(&quot;#p1&quot;).mouseleave(function()&#123;</span><br><span class="line">    alert(&quot;再见，您的鼠标离开了该段落。&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>5.mousedown():当鼠标指针移动到元素上方，并按下鼠标按键时，会发生 mousedown 事件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mousedown() 方法触发 mousedown 事件，或规定当发生 mousedown 事件时运行的函数：</span><br><span class="line">实例</span><br><span class="line">$(&quot;#p1&quot;).mousedown(function()&#123;</span><br><span class="line">    alert(&quot;鼠标在该段落上按下！&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>6.hover()方法用于模拟光标悬停事件。当鼠标移动到元素上时，会触发指定的第一个函数(mouseenter);当鼠标移出这个元素时，会触发指定的第二个函数(mouseleave)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;p&apos;).hover(</span><br><span class="line">function()&#123;</span><br><span class="line">    alert(&apos;你的鼠标在段落上&apos;);</span><br><span class="line">&#125;,</span><br><span class="line">function()&#123;</span><br><span class="line">    alert(&apos;你的鼠标已经离开了段落&apos;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="4-jQuery的Ajax-jQuery-get-和-post"><a href="#4-jQuery的Ajax-jQuery-get-和-post" class="headerlink" title="4.jQuery的Ajax:jQuery get() 和 post()"></a>4.jQuery的Ajax:jQuery get() 和 post()</h3><p><strong>4.1 jQuery $.get()方法，通过 HTTP GET 请求从服务器上请求数据。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">$.get(URL,callback);</span><br><span class="line">必需的 URL 参数规定您希望请求的 URL。</span><br><span class="line">可选的 callback 参数是请求成功后所执行的函数名。 </span><br><span class="line">下面的例子使用 $.get() 方法从服务器上的一个文件中取回数据：</span><br><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    $.get(&quot;demo_test.php&quot;,function(data,status)&#123;</span><br><span class="line">      alert(&quot;数据: &quot; + data + &quot;\n状态: &quot; + status);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>4.2 jQuery $.post() 方法,通过 HTTP POST 请求向服务器提交数据。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">语法:</span><br><span class="line">$.post(URL,data,callback,data_type);</span><br><span class="line">url (String) : 发送请求的URL地址.</span><br><span class="line"></span><br><span class="line">data (Map) : (可选) 要发送给服务器的数据，以 Key/value 的键值对形式表示。</span><br><span class="line"></span><br><span class="line">callback (Function) : (可选) 载入成功时回调函数(只有当Response的返回状态是success才是调用该方法)。</span><br><span class="line"></span><br><span class="line">type (String) : (可选)官方的说明是：Type of data to be sent。其实应该为客户端请求的类型(JSON,XML,等等)</span><br><span class="line">    </span><br><span class="line">下面的例子使用 $.post() 连同请求一起发送数据：</span><br><span class="line"></span><br><span class="line">    $(&quot;button&quot;).click(function()&#123;</span><br><span class="line">        $.post(&quot;/try/ajax/demo_test_post.php&quot;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;:&quot;菜鸟教程&quot;,</span><br><span class="line">            &quot;age&quot;:18,</span><br><span class="line">            &quot;url&quot;:&quot;http://www.runoob.com&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        function(data,status)&#123;</span><br><span class="line">            alert(&quot;数据: \n&quot; + data + &quot;\n状态: &quot; + status);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,&quot;json&quot;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> API </tag>
            
            <tag> Ajax </tag>
            
            <tag> CSS </tag>
            
            <tag> jQuery </tag>
            
            <tag> 选择器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python全栈系列章节更新（一）：基本数据类型</title>
      <link href="/2019/11/11/python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2019/11/11/python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>Python是一个“优雅”、“明确”、“简单”的编程语言,主要流行于网络爬虫、数据分析挖掘、机器学习、人工智能以及运维等等<br>python的六大基本数据类型：</p><blockquote><p>数字：数字数据类型用于存储数值<br>字符串：是 Python 中最常用的数据类型。我们可以使用引号( ‘ 或 “ )来创建字符串<br>列表：作为一个方括号内的逗号分隔值出现<br>元组：与列表类似，不同之处在于元组的元素不能修改<br>字典：是另一种可变容器模型，且可存储任意类型对象<br>集合：集合（set）是一个无序的不重复元素序列</p></blockquote><a id="more"></a><h3 id="1-字符串"><a href="#1-字符串" class="headerlink" title="1.字符串"></a>1.字符串</h3><blockquote><p>zip()函数：将可迭代对象所包含的元素是由原列表元素组成的元组</p></blockquote><p>a = [“a”,”b”,”c”]  b = [1, 2, 3]<br>c = [x for x in zip(a,b)]<br>c = [(“a”, 1), (“b”, 2), (“c”, 3)]<br>结果为元祖型列表</p><blockquote><p>format():位置参数，参数索引从0开始，format里填写{}对应的参数值</p></blockquote><p>msg = “my name is {}, and age is {}”.format(‘chd’,18)<br>渲染结果：my name is chd, and age is 18</p><blockquote><p>str.index()字符串索引: 索引值从0开始,不存在就会报错</p></blockquote><p>s=’index’ s[0]=i<br>s.index(‘i’) = 0  : 查找目标字符串索引值</p><blockquote><p>str.find(‘目标字符串’)查找目标字符串,不存在就返回数值-1(推荐使用find)</p></blockquote><p>“i am iron man”.find(“man”) =&gt; 1</p><blockquote><p>移除指定字符串 str.strip()</p></blockquote><p>s = ‘  hello,world!  ‘<br>s.strip()<br>s.lstrip()<br>s.rstrip()<br>s2 = &#39;hello,world!&#39;<br>s2.strip(&#39;\ &#39;)</p><blockquote><p>len(str)字符串长度</p></blockquote><p>len(‘hello,world’) =&gt; 11</p><blockquote><p>str.replace(a,b)替换：在字符串str中，用b来替换a</p></blockquote><p>‘hello,world’.replace(‘o’,’a’) =&gt; ‘hella,warld’</p><blockquote><p>str[a:b:c] 切片操作(左闭右开)</p></blockquote><p>[a:b:c]：a表示为索引起始位置（索引以0开始）；b表示为索引结束位置；c表示为跳跃间隔<br>案例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; test=&quot;1234hello-world56789&quot;</span><br><span class="line">&gt;&gt;&gt; type(test)</span><br><span class="line">&lt;class &apos;str&apos;&gt;</span><br><span class="line">&gt;&gt;&gt; test[:]</span><br><span class="line">&apos;1234hello-world56789&apos;</span><br><span class="line">&gt;&gt;&gt; test[0:1]</span><br><span class="line">&apos;1&apos;</span><br><span class="line">&gt;&gt;&gt; test[0:2]</span><br><span class="line">&apos;12&apos;</span><br><span class="line">&gt;&gt;&gt; test[0:5:2]</span><br><span class="line">&apos;13h&apos;</span><br><span class="line">&gt;&gt;&gt; test[0:5]</span><br><span class="line">&apos;1234h&apos;</span><br></pre></td></tr></table></figure><blockquote><p>string.capitalize()</p></blockquote><p>把字符串的第一个字符大写</p><blockquote><p>str.count(‘目标字符串’):</p></blockquote><p>返回 str 在 string 里面出现的次数</p><blockquote><p>“连接字符”.join(seq序列):返回 str 在 string 里面出现的次数</p></blockquote><p>以指定字符串作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串</p><blockquote><p>str.lower()/upper() 将字符串全部转换为小写/大写</p></blockquote><p>“hello world”.lower()/upper() =&gt;”hello world” / “HELLO WORLD”</p><blockquote><p>str.split(指定字符串) 以指定字符串来分割目标字符串，以列表形式返回</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">"http://www.baidu.com/python/image/123456.jpg"</span></span><br><span class="line"><span class="comment">#以“.” 进行分隔</span></span><br><span class="line">path =url.split(<span class="string">"."</span>)</span><br><span class="line">path1=[<span class="string">'http://www'</span>, <span class="string">'baidu'</span>, <span class="string">'com/python/image/123456'</span>, <span class="string">'jpg'</span>]</span><br></pre></td></tr></table></figure><p><font color=#ed1941>2019-11-28 新增：</font><br>当split的参数为空时，即string.split():表示以空格作为分割符，并将换行符也去掉</p><h3 id="2-列表"><a href="#2-列表" class="headerlink" title="2.列表"></a>2.列表</h3><blockquote><p>列表截取（索引从0开始，且满足左闭右开原则）与拼接:从右至左取值，则索引默认从-1开始</p></blockquote><p>L=[‘Google’, ‘Runoob’, ‘Taobao’]<br>L[2]=’Taobao’ L[-1]=’Taobao’</p><blockquote><p>列表函数和方法</p></blockquote><table><thead><tr><th>函数和方法</th><th align="center">描述</th></tr></thead><tbody><tr><td>len(list)</td><td align="center">列表元素个数</td></tr><tr><td>list(seq)</td><td align="center">将元组或字符串转换为列表</td></tr><tr><td>max/min(list)</td><td align="center">返回列表元素最大/最小值</td></tr><tr><td>list.append(obj)</td><td align="center">在列表末尾添加新的对象</td></tr><tr><td>list.count(obj)</td><td align="center">统计某个元素在列表中出现的次数</td></tr><tr><td>list.extend(seq)</td><td align="center">在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</td></tr><tr><td>list.index(obj)</td><td align="center">从列表中找出某个值第一个匹配项的索引位置</td></tr><tr><td>list.insert(index, obj)</td><td align="center">将对象插入列表</td></tr><tr><td>list.pop([index=n])</td><td align="center">移除指定索引的元素值（默认最后一个元素），并且返回该元素的值</td></tr><tr><td>list.remove(obj)</td><td align="center">移除列表中某个值的第一个匹配项</td></tr><tr><td>list.reverse()</td><td align="center">反向列表中元素</td></tr><tr><td>list.sort( key=None, reverse=False)</td><td align="center">对原列表进行排序</td></tr></tbody></table><hr><font color=#ed1941>2019-12-2 新增：数组拆分：将一个含有m个数目的数组拆分成每n个一组，剩下的构成一个新数组</font><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将obj数组分割成每100个一组</span></span><br><span class="line">numbers=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,...,<span class="number">10000</span>]</span><br><span class="line">number =[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(numbers), <span class="number">100</span>):</span><br><span class="line">    number.append(numbers[i:i + <span class="number">100</span>])</span><br></pre></td></tr></table></figure><p><strong>列表的list.remove(obj)使用说明：</strong><br>移除列表的指定的某一项（PS：不是索引，是具体的值）</p><pre>a = [1,2,3,8,10,56,110]c = a.remove(8) (c为None)    👇a = [1, 2, 3, 10, 56, 110]----------------------------a = [1,2,3,8,10,56,110]b = a.pop(3) (b为8，pop返回该元素的值)     👇a = [1, 2, 3, 10, 56, 110]</pre><h3 id="3-元组"><a href="#3-元组" class="headerlink" title="3.元组"></a>3.元组</h3><blockquote><p>3.1元组的创建</p></blockquote><p>元组使用小括号，而列表使用方括号，只需要在括号中添加元素，并使用逗号隔开即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tup1 = (<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="number">336</span>)</span><br></pre></td></tr></table></figure><blockquote><p>3.2 元组的访问使用下脚标索引来访问元组中的值，下标索引从0开始</p></blockquote><p>tup1[0] =&gt; &#39;a&#39; ,tup[1] =&gt; &#39;b&#39;</p><blockquote><p>3.3 元组的修改</p></blockquote><p>元组中的元素是不允许修改或删除的，但我们可以使用<code>+</code>对其进行拼接组合<br>tuple(seq)：将列表转换为元组。</p><h3 id="4-字典-可变模型，可存储任意类型对象"><a href="#4-字典-可变模型，可存储任意类型对象" class="headerlink" title="4.字典:可变模型，可存储任意类型对象"></a>4.字典:可变模型，可存储任意类型对象</h3><blockquote><p>4.1字典的创建</p></blockquote><p>字典的每个键值 key=&gt;value 对用冒号 : 分割，每个键值对之间用逗号&nbsp;&nbsp;,&nbsp;&nbsp;分割，整个字典包括在花括号 {}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;key1 : value1, key2 : value2 &#125;</span><br></pre></td></tr></table></figure><p><font color=#EE9A49>值可以取任何数据类型，但键必须是不可变的，如<em>字符串，数字或元组</em></font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;<span class="string">'Alice'</span>: <span class="string">'2341'</span>, <span class="string">'Beth'</span>: <span class="string">'9102'</span>, <span class="string">'Cecil'</span>: <span class="string">'3258'</span>,<span class="number">9527</span>:<span class="string">'badwoman'</span>,<span class="number">6394</span>:<span class="number">998</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>4.2 字典的访问</p></blockquote><p>访问方式：<br>字典名[&quot;键名&quot;] 或者<br>字典名.get(&quot;键名&quot;,自定义数据)：当目标键名不存在时，使用自定义数据值作为默认值，注意此刻不会修改原字典</p><blockquote><p>4.3 字典的更新</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;<span class="string">'Name'</span>: <span class="string">'Zara'</span>, <span class="string">'Age'</span>: <span class="number">7</span>, <span class="string">'Class'</span>: <span class="string">'First'</span>&#125;</span><br><span class="line"> </span><br><span class="line">dict[<span class="string">'Age'</span>] = <span class="number">8</span> <span class="comment"># 更新</span></span><br><span class="line">dict[<span class="string">'School'</span>] = <span class="string">"RUNOOB"</span> <span class="comment"># 添加 </span></span><br><span class="line"> </span><br><span class="line">print(<span class="string">"dict['Age']: "</span>, dict[<span class="string">'Age'</span>])</span><br><span class="line">print(<span class="string">"dict['School']: "</span>, dict[<span class="string">'School'</span>])</span><br></pre></td></tr></table></figure><blockquote><p>4.4 内置函数和方法</p></blockquote><table><thead><tr><th>函数和方法</th><th align="center">描述</th></tr></thead><tbody><tr><td>cmp(dict1, dict2)</td><td align="center">比较字典元素值：如果两个字典的元素相同返回0，如果字典dict1大于字典dict2返回1，如果字典dict1小于字典dict2返回-1</td></tr><tr><td>len()</td><td align="center">计算字典元素个数，即键的总数</td></tr><tr><td>dict.keys()</td><td align="center">获取包含字典所有的key的列表</td></tr><tr><td>dict.values()</td><td align="center">获取包含字典所有的value的列表</td></tr><tr><td>dict.items()</td><td align="center">将字典的键值一一对应组合成一个元组，以列表的形式返回值</td></tr><tr><td>dict.pop(key[,default])</td><td align="center">删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。否则，返回default值。</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">demo=&#123;<span class="string">'Name'</span>: <span class="string">'Zara'</span>, <span class="string">'Age'</span>: <span class="number">8</span>, <span class="string">'Class'</span>: <span class="string">'First'</span>, <span class="string">'School'</span>: <span class="string">'RUNOOB'</span>&#125;</span><br><span class="line">demo.items() </span><br><span class="line"><span class="comment"># dict_items([('Name', 'Zara'), ('Age', 8), ('Class', 'First'), ('School', 'RUNOOB')])</span></span><br><span class="line"></span><br><span class="line">a = [x <span class="keyword">for</span> x <span class="keyword">in</span> demo.items()]</span><br><span class="line">print(a)  <span class="comment"># a=[('Name', 'Zara'), ('Age', 8), ('Class', 'First'), ('School', 'RUNOOB')]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取到字典的每一个key，value</span></span><br><span class="line">dict = &#123;<span class="number">1</span>: <span class="number">1</span>, <span class="number">2</span>: <span class="string">'aa'</span>, <span class="string">'D'</span>: <span class="string">'ee'</span>, <span class="string">'Ty'</span>: <span class="number">45</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> dict.items():</span><br><span class="line">    print(key, value)</span><br></pre></td></tr></table></figure><h3 id="5-python的数字Number"><a href="#5-python的数字Number" class="headerlink" title="5.python的数字Number"></a>5.python的数字Number</h3><p>Python3 支持 int、float、bool、complex（复数）等数字类型。<br>对数字类型常见的操作为：</p><ul><li>数字类型转换：int(x),float(x),complex(x,y)表示将x转换为相应的数据类型</li><li>数学函数运算：abs,exp,log,sqrt,round</li><li>随机数函数：choice，randrange ([start,] stop [,step]),random,shuffle</li><li>三角函数：sin，cos，tan</li><li>数学常量：pi，e</li></ul><h3 id="6-python的集合"><a href="#6-python的集合" class="headerlink" title="6. python的集合"></a>6. python的集合</h3><p>集合set是一个无序的不重复的序列，可以使用大括号<code>{}</code>或者<code>set()</code>函数创建集合。<em>创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典</em></p><p>创建格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">param = &#123;&apos;apple&apos;,&apos;orange&apos;,&apos;pear&apos;&#125;</span><br><span class="line">或者</span><br><span class="line">set((&quot;Google&quot;, &quot;Runoob&quot;, &quot;Taobao&quot;))</span><br></pre></td></tr></table></figure><p>集合的基本操作：</p><ol><li>add():添加元素到集合中，如元素已存在，不进行任何操作</li><li>remove():将目标元素移出集合中</li><li>pop()：随机删除集合中的一个元素</li><li>len():计算集合的元素个数</li><li>in：判断元素是否在集合中存在</li></ol><h3 id="7-python的直接赋值，浅拷贝和深拷贝"><a href="#7-python的直接赋值，浅拷贝和深拷贝" class="headerlink" title="7.python的直接赋值，浅拷贝和深拷贝"></a>7.python的直接赋值，浅拷贝和深拷贝</h3><ul><li><p>直接赋值：其实就是对象的引用（别名）。</p></li><li><p>浅拷贝(copy)：拷贝父对象，不会拷贝对象的内部的子对象。</p></li><li><p>深拷贝(deepcopy)： copy 模块的 deepcopy 方法，完全拷贝了父对象及其子对象。</p></li></ul><p>解析：</p><ol><li>b = a 赋值引用，a与b都指向同一个对象，即共有同一块内存地址<br><fancybox><img src="https://www.runoob.com/wp-content/uploads/2017/03/1489720931-7116-4AQC6.png"></fancybox></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;</span><br><span class="line">b = a   <span class="comment"># b = &#123;1: [1, 2, 3]&#125;</span></span><br><span class="line"><span class="comment"># 更新a的值</span></span><br><span class="line">a[<span class="number">1</span>]=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">print(b)  <span class="comment"># b = &#123;1: [1, 2, 3, 4]&#125;</span></span><br><span class="line"><span class="comment"># 即直接赋值也属于浅拷贝，共用同样一块地址</span></span><br></pre></td></tr></table></figure><ol start="2"><li>b = a.copy():浅拷贝，a与b是一个独立的对象，但他们的子对象还是指向统一对象（是引用）<br><fancybox><img src="https://www.runoob.com/wp-content/uploads/2017/03/1489720930-6827-Vtk4m.png" title="浅拷贝"></fancybox></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]&#125;</span><br><span class="line">b = a.copy()</span><br><span class="line">print(a,b)  <span class="comment"># (&#123;1: [1, 2, 3]&#125;, &#123;1: [1, 2, 3]&#125;)</span></span><br><span class="line">a[<span class="number">1</span>].append(<span class="number">4</span>)  <span class="comment"># 字典更新</span></span><br><span class="line">print(a, b)  <span class="comment">#(&#123;1: [1, 2, 3, 4]&#125;, &#123;1: [1, 2, 3, 4]&#125;)</span></span><br></pre></td></tr></table></figure><ol start="3"><li>b = copy.deepcopy(a) 深拷贝：深度拷贝, a 和 b 完全拷贝了父对象及其子对象，两者是完全独立的,是两块独立的地址。<br><fancybox><img src="https://www.runoob.com/wp-content/uploads/2017/03/1489720930-5882-BO4qO.png"></fancybox></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import copy</span><br><span class="line">&gt;&gt;&gt; c = copy.deepcopy(a)</span><br><span class="line">&gt;&gt;&gt; a, c</span><br><span class="line">(&#123;1: [1, 2, 3, 4]&#125;, &#123;1: [1, 2, 3, 4]&#125;)</span><br><span class="line">&gt;&gt;&gt; a[1].append(5)</span><br><span class="line">&gt;&gt;&gt; a, c</span><br><span class="line">(&#123;1: [1, 2, 3, 4, 5]&#125;, &#123;1: [1, 2, 3, 4]&#125;)</span><br></pre></td></tr></table></figure><h3 id="8-map与reducde函数（python2与python3的区别）"><a href="#8-map与reducde函数（python2与python3的区别）" class="headerlink" title="8.map与reducde函数（python2与python3的区别）"></a>8.map与reducde函数（python2与python3的区别）</h3><p>map()函数接收两个参数，一个是函数，一个是Iterable（可迭代对象），map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator（迭代器）返回(可以使用list转换为数组)，而python2返回的是一个数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line">   <span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line">r = map(f, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line">list(r)  <span class="comment"># [1, 4, 9, 16, 25, 36, 49, 64, 81]</span></span><br></pre></td></tr></table></figure><p>使用map返回结果是迭代器，将数据转换为列表<br>reduce把一个函数作用在一个序列[x1, x2, x3, …]上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算，其效果就是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)</span><br></pre></td></tr></table></figure><p>比方说对一个序列求和，就可以用reduce实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from functools import reduce</span><br><span class="line">&gt;&gt;&gt; def add(x, y):</span><br><span class="line">...     return x + y</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; reduce(add, [1, 3, 5, 7, 9])</span><br><span class="line">25</span><br></pre></td></tr></table></figure><h3 id="9-Python的遍历技巧"><a href="#9-Python的遍历技巧" class="headerlink" title="9.Python的遍历技巧"></a>9.Python的遍历技巧</h3><ul><li>在字典中遍历时，关键字和对应的值使用item()方法同时解读出来</li></ul><p>knights = {‘name’: ‘chd’, ‘age’: 18 } for k, v in knights.items():</p><ul><li>枚举函数，在序列遍历时，索引值和对应值使用enumerate()函数得到</li></ul><p>for i, v in enumerate([‘tic’, ‘tac’, ‘toe’]):</p><ul><li>zip()函数：同时遍历两个或更多的序列</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 元组 </tag>
            
            <tag> 列表 </tag>
            
            <tag> 字典 </tag>
            
            <tag> 数值 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库(一)：DDL，DML，DCL</title>
      <link href="/2019/11/11/sql%E7%B3%BB%E5%88%97%E6%9B%B4%E6%96%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2019/11/11/sql%E7%B3%BB%E5%88%97%E6%9B%B4%E6%96%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;最近严重记忆力下降加上一直没有怎么用到数据库，好多命令都回忆不起来了，做个小笔记，mark。<br>今天建彬师傅（他不是厉不厉害的问题，他真的就是那种，很少见，很牛逼的存在…）给我讲了一个非常有用的小知识点，使我茅塞顿开，放在摘要页，很有用：<a href="https://blog.csdn.net/gaoshuying/article/details/53410137" target="_blank" rel="noopener">跨用户访问数据表的方式</a><br><font color=#5CACEE>1.两个用户在同一个应用服务器上:select * from &#39;user_name&#39;&nbsp;.&nbsp;&#39;table_name&#39;;<br>2.两个用户不在同一个应用服务器上。。。<br><fancybox><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1573658629292&di=ed394bb8e9aadd1d0f439c0a4018a796&imgtype=0&src=http%3A%2F%2Fs11.51cto.com%2Fimages%2F201901%2F20%2Fdec97881d1e4071c6e51c2a30105835d.jpg" alt=""></fancybox><br></font></p><a id="more"></a><h3 id="1-启动服务"><a href="#1-启动服务" class="headerlink" title="1.启动服务"></a>1.启动服务</h3><p>net start 服务器名（Windows）<br>service start 服务器名（linux）</p><h3 id="2-登录与修改密码"><a href="#2-登录与修改密码" class="headerlink" title="2.登录与修改密码"></a>2.登录与修改密码</h3><table><thead><tr><th>命令</th><th align="center">含义</th></tr></thead><tbody><tr><td>mysql -u root -p -h localhost</td><td align="center">登录MySQL（p表示密码；u表示用户名；h表示主机地址）</td></tr><tr><td>mysqladmin -u用户名 -p旧密码 password新密码</td><td align="center">修改用户名密码</td></tr></tbody></table><h3 id="3-基本使用"><a href="#3-基本使用" class="headerlink" title="3.基本使用"></a>3.基本使用</h3><table><thead><tr><th>命令</th><th align="center">含义</th></tr></thead><tbody><tr><td>show databases;</td><td align="center">用于显示所有的数据库</td></tr><tr><td>use 数据库名;</td><td align="center">使用目标数据库</td></tr><tr><td>select database()/version()/now()/user();</td><td align="center">显示当前连接的信息</td></tr><tr><td>show tables;</td><td align="center">用于显示选中数据库下的所有的表</td></tr><tr><td>desc table_Name;</td><td align="center">查看表结构</td></tr><tr><td>show create table table_name \G;</td><td align="center">查看到创建时的SQL语句及更多详细信息  \G使记录按照字段竖向排列，易于阅读</td></tr></tbody></table><p>创建数据库并指定编码格式:create database if not exists 数据库名 character set utf8;<br>删除数据库：drop database [if exists] 数据库名;</p><h3 id="4-DDL-amp-DML"><a href="#4-DDL-amp-DML" class="headerlink" title="4.DDL&amp;DML"></a>4.DDL&amp;DML</h3><p>DDL:数据定义语言仅对数据库，表，列，索引起作用（create、drop、alter）<br>DML:数据操纵语言仅对table中的具体数据起作用（select、insert、delete、update）</p><h3 id="5-DDL"><a href="#5-DDL" class="headerlink" title="5.DDL"></a>5.DDL</h3><blockquote><p>1.创建表</p></blockquote><pre>创建表    create table 表名(    ​  列名 数据类型  列级约束,    ​  列名 数据类型  列级约束    ​ )【表类型】【表字符集】【表注释】</pre>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#创建学生表，并设置表类型、字符集</span><br><span class="line">CREATE TABLE `student` (</span><br><span class="line">  `id` INT(4) NOT NULL AUTO_INCREMENT COMMENT &apos;主键、学号&apos;,</span><br><span class="line">  `psd` VARCHAR(20) COLLATE utf8_estonian_ci NOT NULL DEFAULT &apos;123456&apos; COMMENT &apos;密码&apos;,</span><br><span class="line">  `name` VARCHAR(30) COLLATE utf8_estonian_ci NOT NULL DEFAULT &apos;匿名&apos; COMMENT &apos;学生姓名&apos;,</span><br><span class="line">  `sex` VARCHAR(2) COLLATE utf8_estonian_ci NOT NULL DEFAULT &apos;男&apos; COMMENT &apos;性别&apos;,</span><br><span class="line">  `birsday` DATETIME DEFAULT NULL,</span><br><span class="line">  `email` VARCHAR(20) COLLATE utf8_estonian_ci DEFAULT NULL,</span><br><span class="line">   PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=INNODB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 COLLATE=utf8_estonian_ci</span><br></pre></td></tr></table></figure><ul><li><p><i class="fas fa-hand-point-right"></i> <a href="https://www.w3school.com.cn/sql/sql_datatypes.asp" target="_blank" rel="noopener">数据类型</a> </p></li><li><p>约束条件：<br>  not null<br>  unique<br>  primary key 主键名<br>  foreign key (Id_P) references  Persons(Id_P) :一个表中的 FOREIGN KEY 指向另一个表中的 PRIMARY KEY<br>  default 默认值<br>  auto increment:在每次插入新记录时，自动地创建主键字段的值</p></li></ul><h4 id="5-1主键"><a href="#5-1主键" class="headerlink" title="5.1主键"></a>5.1主键</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;对主键的要求，最关键的一点是：记录一旦插入到表中，主键最好不要再修改，因为主键是用来唯一定位记录的，修改了主键，会造成一系列的影响。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;由于主键的作用十分重要，如何选取主键会对业务开发产生重要影响。如果我们以学生的身份证号作为主键，似乎能唯一定位记录。然而，身份证号也是一种业务场景，如果身份证号升位了，或者需要变更，作为主键，不得不修改的时候，就会对业务产生严重影响。<br>&nbsp;&nbsp;&nbsp;&nbsp;使用BIGINT，会占用更大的磁盘和内存空间，内存空间毕竟有限，无效的占用会导致更多的数据换入换出，额外增加了IO的压力，对性能是不利的。<br><font color=#FF4040>因此推荐自增主键使用int unsigned类型，但不建议使用bigint。</font><br>&nbsp;&nbsp;&nbsp;&nbsp;所以，选取主键的一个基本原则是：<font color=#FF4040>不使用任何业务相关的字段作为主键,而应该使用INT UNSINGED自增或者GUID类型。主键也不应该允许NULL。可以使用多个列作为联合主键，但联合主键并不常用。</font><br>&nbsp;&nbsp;&nbsp;&nbsp;如果使用INT自增类型，那么当一张表的记录数超过2147483647（约21亿）时，会达到上限而出错。使用BIGINT自增类型则可以最多约922亿亿条记录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table user(</span><br><span class="line">    id INT UNSIGNED NOT NULL AUTO_INCREMENT primary key , /*数据类型 非空 自增 主码约束*/</span><br><span class="line">    name varchar(200)</span><br><span class="line">    /*主码，外码约束条件写法二：primary key(id) */           </span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>2.删除表：drop table table_name</p></blockquote><blockquote><p>3.修改表</p></blockquote><table><thead><tr><th>命令</th><th align="center">含义</th></tr></thead><tbody><tr><td>修改表中列的数据类型</td><td align="center">alter table table_name modify 列名 column_definition</td></tr><tr><td>增加表字段</td><td align="center">alter table table_name add [column] 列名 column_definition</td></tr><tr><td>删除表字段表字段</td><td align="center">alter table table_name drop [column] 列名</td></tr><tr><td>表的字段改名</td><td align="center">alter table table_name change [column] old_col_name new_col_name</td></tr><tr><td>表字段改名同时也可修改字段类型</td><td align="center">alter table table_name change [column] old_col_name new_col_name column_definition</td></tr><tr><td>更改表名</td><td align="center">alter table table_name rename [to] new_tablename</td></tr></tbody></table><h3 id="6-DML语句"><a href="#6-DML语句" class="headerlink" title="6.DML语句"></a>6.DML语句</h3><table><thead><tr><th>命令</th><th align="center">含义</th></tr></thead><tbody><tr><td>插入数据</td><td align="center">insert into table_name ( field1, field2,…) values (value1,value2,….);</td></tr><tr><td>一次性插入多条数据</td><td align="center">insert into table_name ( field1, field2,…) values (value1,value2,..),(value1,value2,..)…;</td></tr><tr><td>更新记录</td><td align="center">update table_name set field1=value1，field2=value2，… [ WHERE CONDITION ]</td></tr><tr><td>删除某一项记录</td><td align="center">delete from table_name [WHERE CONDITION ]</td></tr><tr><td>排序和限制</td><td align="center">select * from table_name [ WHERE CONDITION ] [ order by field1 [ DESC\ASC ], field2 [ DESC\ASC], ..]</td></tr><tr><td>表连接</td><td align="center">select ename,deptname from emp1 left join dept on emp1.deptno=dept.deptno;</td></tr><tr><td>子查询</td><td align="center">关键字主要有in、not in、=、!=、exists、not exists,between and等等</td></tr></tbody></table><p>1.可以不用指定字段名称，但此时后面的values应该与表的字段顺序保持一致<br>2.对于某些字段允许空值、非空但是有指定的默认值、自增长等，这些字段在insert时如果没有指定value，那么将会右系统自动配置</p><h3 id="7-DCL语句"><a href="#7-DCL语句" class="headerlink" title="7.DCL语句"></a>7.<a href="https://blog.csdn.net/ywk_hax/article/details/83351552" target="_blank" rel="noopener">DCL语句</a></h3><blockquote><ol><li>创建数据库用户，并声明权限</li></ol></blockquote><p>创建操作数据库的专用用户，格式：<br>grant 权限 on 数据库名.数据表名 to 用户名@主机IP IDENTIFIED BY 密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">说明：</span><br><span class="line">权限：ALL PRIVILEGES(所有权限),select,insert,update,delete,create,alter,drop</span><br><span class="line">主机IP： &apos;%&apos; 匹配所有主机，localhost</span><br><span class="line">表名： * 表示所有表</span><br></pre></td></tr></table></figure><br><blockquote><ol start="2"><li>刷新权限</li></ol></blockquote><p>flush privileges</p><p><font color=#FF6347>这里向大家拓展一个知识点，那就是主机IP指的是该用户只能在对应的主机IP上进行登录。例如：假如user用户设置的主机IP为localhost，那么其他人就将无法从本地以外的地方使用user用户进行登录。</font></p><h3 id="8-查询记录"><a href="#8-查询记录" class="headerlink" title="8.查询记录"></a>8.查询记录</h3><blockquote><p>8.1 distinct 查询不重复的记录</p></blockquote><p>select distinct id from emp1; 加distinct关键字使得查出的结果中去掉了重复记录<br><br></p><blockquote><p>8.2 条件查询</p></blockquote><p>判断条件可以使用=、&gt;、&lt;、&gt;=、&lt;=、!=等等，同时多个条件还可以使用and、or等进行连接<br><br></p><blockquote><p>8.3 聚合（它对其应用的每个行集返回一个值）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">select [ field1, field2,...,fieldn] fun_name from tablename [ where condition ] </span><br><span class="line"></span><br><span class="line">      [ group by field1, field2,..., fieldn  [ with rollup ] ]  [ having  condition ]</span><br><span class="line"></span><br><span class="line">参数说明：fun_name 聚合函数，表示要做的聚合操作，常用的有sum（求和）、count(*)（计数）、max、min等。</span><br><span class="line"></span><br><span class="line">        GROUP BY  表示对后面的字段进行分类聚合（也常叫分组）；</span><br><span class="line"></span><br><span class="line">        WITH ROLLUP 可选语法，在ORDER BY 语句内出现，表示是否对分类聚合后的结果进行再汇总；</span><br><span class="line"></span><br><span class="line">        HAVING 表示对分类后的结果再进行条件过滤；</span><br></pre></td></tr></table></figure><p><font color=#FF3030>同样是条件过滤，having和where的区别在于，having是对聚合后的结果进行条件过滤，而where是在聚合前就对记录进行过滤。因此，为了提高聚合效率，一般先用where过滤不相干的记录后，在进行聚合，最后再用having进行二次过滤</font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> gender，<span class="keyword">count</span>(gender) <span class="keyword">from</span> tab_teacher <span class="keyword">group</span> <span class="keyword">by</span> gender <span class="keyword">having</span> gender=<span class="string">"woman"</span>;</span><br><span class="line"><span class="comment">-- 含义为：按性别分组，查询出女老师人数的总数:先执行group by，再聚合函数，最后having筛选</span></span><br></pre></td></tr></table></figure><p>聚合函数：补充说明</p><ul><li><p>AVG(表达式) 返回表达式中所有的平均值。仅用于数字列并自动忽略NULL值。</p></li><li><p>COUNT(表达式) 返回表达式中非NULL值的数量。可用于数字和字符列。</p></li><li><p>COUNT(<em>) 返回表中的行数( *</em>包括有NULL值的列** )。</p></li><li><p>MAX(表达式) 返回表达式中的最大值,忽略NULL值。可用于数字、字符和日期时间列。</p></li><li><p>MIN(表达式) 返回表达式中的最小值,忽略NULL值。可用于数字、字符和日期时间列。</p></li><li><p>SUM(表达式) 返回表达式中所有的总和,忽略NULL值。仅用于数字列。<br>————————————————</p></li></ul><h3 id="9-sql知识点补充大全"><a href="#9-sql知识点补充大全" class="headerlink" title="9.sql知识点补充大全"></a>9.sql知识点补充大全</h3><blockquote><p>9.1 避免使用通配符“*”</p></blockquote><p>实际开发中，要避免使用通配符”*”（通配符代表所有字段），因为系统要先解析出所有的字段名，将其还原为真实的名字，然后再进行操作。如果记录数据库内容特别多，会影响效率。<br> <br></p><blockquote><p>9.2 查询表的总记录数(推荐使用主键的方式查询)</p></blockquote><p>因为主键唯一，且不能为空,此时id总数则代表总记录数<br>select count(id) from table_teacher;<br><br></p><blockquote><p>9.3 别名<code>as</code>的用法</p></blockquote><p>列的别名 select count(id) as new_number from table_teacher;</p><p>使用别名来代替表的名字(使用<code>as</code>作为表的别名时，通常情况下不要省略，方便代码的阅读性，但是<strong>在Oracle数据库中，一定要省略，不然会出现<code>ORA-00933: SQL command not properly ended</code>错误</strong>)<br>select t.name,t.age from tab_teacher t;</p><p>参考StackOverflow的问题回复：<br><font color = #694d9f><br>You can use <code>AS</code> for table aliasing on many SQL servers (at least MsSQL, MySQL, PostrgreSQL) but it’s always optional and on Oracle it’s illegal. so just remove the <code>as</code></font><br><br></p><blockquote><p>9.4 分页查询方式（limit与rownum）</p></blockquote><p>查询老师记录的前三条（从0位置开始找出3条）： limit后面有两个参数：第一个参数是起始位置，初始记录行的偏移量是 0(而不是 1)；第二个参数是偏移量（即数据个数）</p><pre>select * from tab_teacher limit 0,3;查询第1条到第10条数据的sql是：select * from table limit 0,10; 即索引值为[0,9],不同于其它编程语言左闭右开原则查询第10条到第20条数据的sql是：select * from table limit 10,20;</pre><p>分页查询计算公式：limit (page-1)*size,size<br><br></p><font color=#694d9f>oracle的sql语句中没有limit,limit是mysql中特有的,在oracle中可用rownum来表示,用于查询结果中的前N行数据。如要查询emp表中的前5行数据,可用如下语句: &nbsp;&nbsp;select * from emp where rownum<=5;</font><br><blockquote><p>9.5 Oracle 使用<code>||</code> 将多列合并成一列,字符串连接</p></blockquote><p>使用方法：<code>字段A || &#39;连接符&#39; || 字段B || &#39;连接符&#39; || 字段C</code> ：将多列拼接成一列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Oracle 将多列合并成一列,字符串连接,直接上查询语句</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    STU.XH,</span><br><span class="line">    STU.XM,</span><br><span class="line">    GRA. <span class="keyword">NAME</span> || <span class="string">'-'</span> || CLA.BJ <span class="keyword">AS</span> <span class="keyword">CLASS</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    CYT_BASE_STUDENT STU,</span><br><span class="line">    CYT_BASE_GRADE GRA,</span><br><span class="line">    CYT_BASE_CLASS CLA</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    STU.GRADE_ID = GRA. <span class="keyword">ID</span></span><br><span class="line"><span class="keyword">AND</span> STU.CLASS_ID = CLA. <span class="keyword">ID</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/20181017094408908?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3podWxpdWZ1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></p><blockquote><p>9.6 sql的select查询添加一个虚拟字段进去</p></blockquote><p>需求：<strong>像下面需要取多张表的数据存合并成一张表的时候，有时候为了区分哪些数据是出自于具体的哪张表，可以加一个表的标识字段进去，这样就方便明了多了</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> ( </span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">id</span>,title,uId,fabuTime,<span class="string">'招商'</span> <span class="keyword">AS</span> <span class="keyword">name</span>  <span class="keyword">from</span> zhaoshangInfo </span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">id</span>,title,userId <span class="keyword">AS</span> uId,createTime <span class="keyword">AS</span> fabuTime,<span class="string">'求职'</span> <span class="keyword">AS</span> <span class="keyword">name</span> <span class="keyword">from</span> <span class="keyword">resume</span> </span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">id</span>,title,uId,fabutime <span class="keyword">AS</span> fabuTime,<span class="string">'招聘'</span> <span class="keyword">AS</span> <span class="keyword">name</span> <span class="keyword">from</span> zhaopin</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">id</span>,title,uId,fabuTime,<span class="string">'加盟'</span> <span class="keyword">AS</span> <span class="keyword">name</span> <span class="keyword">from</span> jiamengInfo</span><br><span class="line">    )  </span><br><span class="line"><span class="keyword">WHERE</span> uId <span class="keyword">IN</span>(<span class="number">1</span>,<span class="number">349</span>) <span class="keyword">ORDER</span> <span class="keyword">BY</span> fabuTime <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure><p>即在zhangsanInfo表中添加name字段，赋初值为‘招商’<br>在resume表中添加name字段，赋初值为‘求职’<br>…<br>在jiamengInfo表添加name字段，赋初值为‘加盟’。</p><br><blockquote><p>9.7 sql实现替换功能</p></blockquote><ul><li>方式一：replace()字符串替换函数</li><li>方式二：case…when…then…end 函数</li></ul><p>replace函数定义：replace(original-string，str_a，str_b):查询在sql的字段，用b替换目标字段中的a</p><p>参数：</p><ol><li>original-string： 被搜索的字符串。可为任意长度。</li><li>search-string： 要搜索并被 replace-string 替换的字符串。该字符串的长度不应超过 255 个字节。如果 search-string 是空字符串，则按原样返回原始字符串。</li><li>replace-string： 该字符串用于替换 search-string。可为任意长度。如果 replacement-string 是空字符串，则删除出现的所有 search-string。</li></ol><p>说明：<br>用字符串表达式3替换字符串表达式1中出现的所有字符串表达式2的匹配项。返回新的字符串。如果有某个参数为 NULL，此函数返回 NULL</p><p>方式二：<a href="https://www.cnblogs.com/HDK2016/p/8134802.html" target="_blank" rel="noopener">Case…when..then…else…end</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--简单Case函数</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">(<span class="keyword">CASE</span> sex</span><br><span class="line"><span class="keyword">WHEN</span> <span class="string">'1'</span> <span class="keyword">THEN</span> <span class="string">'男'</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="string">'2'</span> <span class="keyword">THEN</span> <span class="string">'女'</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="string">'其他'</span> <span class="keyword">END</span>) <span class="keyword">as</span> gender</span><br><span class="line"></span><br><span class="line"><span class="comment">--Case搜索函数（推荐）</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> sex = <span class="string">'1'</span> <span class="keyword">THEN</span> <span class="string">'男'</span></span><br><span class="line"><span class="keyword">WHEN</span> sex = <span class="string">'2'</span> <span class="keyword">THEN</span> <span class="string">'女'</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="string">'其他'</span> <span class="keyword">END</span> ) <span class="keyword">as</span> gender</span><br><span class="line"></span><br><span class="line">两种方式，可以实现相同的功能。简单<span class="keyword">Case</span>函数的写法相对比较简洁，但是和<span class="keyword">Case</span>搜索函数相比，功能方面会有些限制，</span><br><span class="line">比如写判断式。还有一个需要注意的问题，<span class="keyword">Case</span>函数只返回第一个符合条件的值，剩下的<span class="keyword">Case</span>部分将会被自动忽略。</span><br></pre></td></tr></table></figure><br><blockquote><p>9.8 oracle 通配符匹配字符限制字符长度</p></blockquote><p><strong>length(字段)&lt;Number</strong> 限制字符串的长度，如果是数字型的，那么再to_char一下<br><br></p><blockquote><p>9.9 oracle截取字符串指定位数</p></blockquote><p>substr(field,start_index,[length]):select截取field字段，索引值从1或者0开始，截取指定length长度<br><br></p><blockquote><p>9.10 oracle怎样把查询的null转换为指定值</p></blockquote><p>oracle: nvl(field,Expr2)如果field字段为NULL，返回Expr2的值，否则返回Expr1的值<br>mysql: ifnull(field,Expr2)如果field字段为NULL，返回Expr2的值，否则返回Expr1的值<br><br></p><blockquote><p>9.11 多字段关联查询同一张字典表</p></blockquote><p>字典表（数据字典）：数据字典（Data dictionary）是一种用户可以访问的记录数据库和应用程序元数据的目录。</p><p>假设我们有一个学生表（姓名，学号，性别编号{0-1}，年纪{1-3}，成绩{A-F}）：我们已知了一个学生的基本信息，怎么从一个字典表（比如说性别编号0：男性，1:女性；年纪A：优，B:良，C:中，D:差，E:不合格）中来补全这个表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.name, a.id, a.sex_code, a.grade_cdoe, a.score_cdoe,b.sex_name,b.grade_name,b.score_name</span><br><span class="line"><span class="keyword">from</span> Student a</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> dictionary b</span><br><span class="line"><span class="keyword">on</span> a.sex_code = b.sex_code</span><br><span class="line"><span class="keyword">and</span> a.grade_code = b.grade_code</span><br><span class="line"><span class="keyword">and</span> a.score_code = b.score_code</span><br></pre></td></tr></table></figure><p>多个字段查询一张字段表时，就是在原来的<code>on</code>关键字上，多次使用<code>and</code>，多次关联字典表中的目标字段<br><br></p><blockquote><p>9.11 sql带字符的排序问题</p></blockquote><p>问题：月度字段有：1月，2月…11月，12月等。我们使用<code>order by</code>关键字后，并没有按照预期的1-11排序，而是：10月…12月，1月，…9月。</p><p>解决方法：order by case when then end 语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> syear <span class="keyword">as</span> syear ,speriod <span class="keyword">as</span> speriod,<span class="keyword">sum</span>(sdata) <span class="keyword">as</span> sdata</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> C1DATA.C1_DATAS  <span class="keyword">where</span> STYPE=<span class="string">'手机_财务销售'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 先按照syear分组，然后按照period分组</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> SYEAR,speriod</span><br><span class="line"><span class="comment">-- 先按照syear升序，然后按照period升序</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">by</span> syear <span class="keyword">asc</span> ,   </span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> </span><br><span class="line"><span class="keyword">when</span> speriod = <span class="string">'1月'</span> <span class="keyword">then</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">when</span> speriod = <span class="string">'2月'</span> <span class="keyword">then</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">when</span> speriod = <span class="string">'3月'</span> <span class="keyword">then</span> <span class="number">3</span></span><br><span class="line"><span class="keyword">when</span> speriod = <span class="string">'4月'</span> <span class="keyword">then</span> <span class="number">4</span></span><br><span class="line"><span class="keyword">when</span> speriod = <span class="string">'5月'</span> <span class="keyword">then</span> <span class="number">5</span></span><br><span class="line"><span class="keyword">when</span> speriod = <span class="string">'6月'</span> <span class="keyword">then</span> <span class="number">6</span></span><br><span class="line"><span class="keyword">when</span> speriod = <span class="string">'7月'</span> <span class="keyword">then</span> <span class="number">7</span></span><br><span class="line"><span class="keyword">when</span> speriod = <span class="string">'8月'</span> <span class="keyword">then</span> <span class="number">8</span></span><br><span class="line"><span class="keyword">when</span> speriod = <span class="string">'9月'</span> <span class="keyword">then</span> <span class="number">9</span></span><br><span class="line"><span class="keyword">when</span> speriod = <span class="string">'10月'</span> <span class="keyword">then</span> <span class="number">10</span></span><br><span class="line"><span class="keyword">when</span> speriod = <span class="string">'11月'</span> <span class="keyword">then</span> <span class="number">11</span></span><br><span class="line"><span class="keyword">when</span> speriod = <span class="string">'12月'</span> <span class="keyword">then</span> <span class="number">12</span></span><br><span class="line"><span class="keyword">end</span>  <span class="keyword">asc</span></span><br></pre></td></tr></table></figure><br><blockquote><p>9.12 with as 子查询部分</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--针对一个别名</span></span><br><span class="line"><span class="keyword">with</span> tmp <span class="keyword">as</span> (<span class="keyword">select</span> * <span class="keyword">from</span> tb_name)</span><br><span class="line"></span><br><span class="line"><span class="comment">--针对多个别名</span></span><br><span class="line"><span class="keyword">with</span></span><br><span class="line">tmp <span class="keyword">as</span> (<span class="keyword">select</span> * <span class="keyword">from</span> tb_name),</span><br><span class="line">tmp2 <span class="keyword">as</span> (<span class="keyword">select</span> * <span class="keyword">from</span> tb_name2),</span><br><span class="line">tmp3 <span class="keyword">as</span> (<span class="keyword">select</span> * <span class="keyword">from</span> tb_name3),</span><br><span class="line">…</span><br><span class="line"></span><br><span class="line"><span class="comment">--相当于建了个e临时表</span></span><br><span class="line"><span class="keyword">with</span> e <span class="keyword">as</span> (<span class="keyword">select</span> * <span class="keyword">from</span> scott.emp e <span class="keyword">where</span> e.empno=<span class="number">7499</span>)</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> e;</span><br><span class="line"></span><br><span class="line"><span class="comment">--相当于建了e、d临时表</span></span><br><span class="line"><span class="keyword">with</span></span><br><span class="line">e <span class="keyword">as</span> (<span class="keyword">select</span> * <span class="keyword">from</span> scott.emp),</span><br><span class="line">d <span class="keyword">as</span> (<span class="keyword">select</span> * <span class="keyword">from</span> scott.dept)</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> e, d <span class="keyword">where</span> e.deptno = d.deptno;</span><br></pre></td></tr></table></figure><p>就是把一大堆重复用到的sql语句放在with as里面，取一个别名，后面的查询就可以用它，这样对于大批量的sql语句起到一个优化的作用，而且清楚明了。<br>特别对于union all比较有用。因为union all的每个部分可能相同，但是如果每个部分都去执行一遍的话，则成本太高，所以可以使用with as短语，则只要执行一遍即可。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span></span><br><span class="line">sql1 <span class="keyword">as</span> (<span class="keyword">select</span> to_char(a) s_name <span class="keyword">from</span> test_tempa),</span><br><span class="line">sql2 <span class="keyword">as</span> (<span class="keyword">select</span> to_char(b) s_name <span class="keyword">from</span> test_tempb <span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span> (<span class="keyword">select</span> s_name <span class="keyword">from</span> sql1 <span class="keyword">where</span> <span class="keyword">rownum</span>=<span class="number">1</span>))</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> sql1</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> sql2</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> ‘<span class="keyword">no</span> <span class="keyword">records</span>’ <span class="keyword">from</span> dual</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span> (<span class="keyword">select</span> s_name <span class="keyword">from</span> sql1 <span class="keyword">where</span> <span class="keyword">rownum</span>=<span class="number">1</span>)</span><br><span class="line"><span class="keyword">and</span> <span class="keyword">not</span> <span class="keyword">exists</span> (<span class="keyword">select</span> s_name <span class="keyword">from</span> sql2 <span class="keyword">where</span> <span class="keyword">rownum</span>=<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--又比如创建一个临时表t（t的虚拟字段创建方法参考 9.6 sql的select查询添加一个虚拟字段进去）</span></span><br><span class="line"><span class="keyword">with</span> t</span><br><span class="line"><span class="keyword">as</span> (</span><br><span class="line"><span class="keyword">select</span> <span class="string">'201912'</span> <span class="keyword">as</span> m , <span class="string">'单价'</span> <span class="keyword">as</span> t, <span class="number">1</span> <span class="keyword">as</span> d <span class="keyword">from</span> dual</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">'201912'</span> <span class="keyword">as</span> m , <span class="string">'数量'</span> <span class="keyword">as</span> t, <span class="number">100</span> <span class="keyword">as</span> d <span class="keyword">from</span> dual</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">'201912'</span> <span class="keyword">as</span> m , <span class="string">'金额'</span> <span class="keyword">as</span> t, <span class="number">100</span> <span class="keyword">as</span> d <span class="keyword">from</span> dual</span><br><span class="line">)</span><br></pre></td></tr></table></figure><br><blockquote><p>9.13 Oracle的行列转换-行转列</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建一个虚拟表t</span></span><br><span class="line"><span class="keyword">with</span> t</span><br><span class="line"><span class="keyword">as</span> (</span><br><span class="line"><span class="keyword">select</span> <span class="string">'201912'</span> <span class="keyword">as</span> m , <span class="string">'单价'</span> <span class="keyword">as</span> t, <span class="string">'1'</span> <span class="keyword">as</span> d <span class="keyword">from</span> dual</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">'201912'</span> <span class="keyword">as</span> m , <span class="string">'数量'</span> <span class="keyword">as</span> t, <span class="string">'100'</span> <span class="keyword">as</span> d <span class="keyword">from</span> dual</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">'201912'</span> <span class="keyword">as</span> m , <span class="string">'金额'</span> <span class="keyword">as</span> t, <span class="string">'100'</span> <span class="keyword">as</span> d <span class="keyword">from</span> dual</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">'201912'</span> <span class="keyword">as</span> m , <span class="string">'收货日期'</span> <span class="keyword">as</span> t, <span class="string">'2019-12-25'</span> <span class="keyword">as</span> d <span class="keyword">from</span> dual</span><br><span class="line">) </span><br><span class="line"><span class="comment">-- Oracle的行转列</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">  t.m,</span><br><span class="line">  <span class="keyword">max</span>(<span class="keyword">case</span> <span class="keyword">when</span> t.t = <span class="string">'收货日期'</span> <span class="keyword">then</span> t.d <span class="keyword">else</span> <span class="string">''</span> <span class="keyword">end</span>) <span class="keyword">as</span> d,</span><br><span class="line">  <span class="keyword">sum</span>( <span class="keyword">case</span> <span class="keyword">when</span> t.t = <span class="string">'单价'</span> <span class="keyword">then</span> to_number(t.d) <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> p,</span><br><span class="line">  <span class="keyword">sum</span>( <span class="keyword">case</span> <span class="keyword">when</span> t.t = <span class="string">'数量'</span> <span class="keyword">then</span> to_number(t.d) <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> q,</span><br><span class="line">  <span class="keyword">sum</span>( <span class="keyword">case</span> <span class="keyword">when</span> t.t = <span class="string">'金额'</span> <span class="keyword">then</span> to_number(t.d) <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> m</span><br><span class="line"><span class="keyword">from</span> t</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> t.m;</span><br></pre></td></tr></table></figure><p>涉及文章：<a href="https://blog.csdn.net/luthreestone/article/details/86236367?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">oracle 列转行</a><br><br></p><blockquote><p>9.14 复制表结构和表中数据（慎用）</p></blockquote><p><strong>重量级操作、耗时操作、事务操作都得好好想想锁的问题、并发的问题</strong><br>select into from 与 insert into select用法详解：有可能两个表加锁规则不一样</p><ul><li>Insert into Table2(field1,field2,…) select value1,value2,… from Table1;</li><li>SELECT vale1,value2 into Table2 from Table1;</li></ul><h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><ul><li>Oracle中case when的用法：<a href="https://blog.csdn.net/weixin_40417658/article/details/82633834" target="_blank" rel="noopener">https://blog.csdn.net/weixin_40417658/article/details/82633834</a></li><li><a href="https://blog.csdn.net/qq_33866778/article/details/75258200" target="_blank" rel="noopener">https://blog.csdn.net/qq_33866778/article/details/75258200</a></li><li><a href="https://zhidao.baidu.com/question/464433814.html" target="_blank" rel="noopener">https://zhidao.baidu.com/question/464433814.html</a></li><li>sql的replace函数 <a href="https://www.cnblogs.com/1906859953Lucas/p/9244495.html" target="_blank" rel="noopener">https://www.cnblogs.com/1906859953Lucas/p/9244495.html</a></li><li>Oracle实现判断的三种方法： <a href="https://blog.csdn.net/yangzjchn/article/details/81019449" target="_blank" rel="noopener">https://blog.csdn.net/yangzjchn/article/details/81019449</a></li><li>Oracle中字符串截取常用方法总结： <a href="https://blog.csdn.net/rongtaoup/article/details/82217740" target="_blank" rel="noopener">https://blog.csdn.net/rongtaoup/article/details/82217740</a></li><li><a href="https://stackoverflow.com/questions/21145028/how-to-use-the-as-keyword-to-alias-a-table-in-oracle" target="_blank" rel="noopener">How to use the ‘as’ keyword to alias a table in Oracle?</a></li><li><a href="https://blog.csdn.net/qinsijun123/article/details/88824735" target="_blank" rel="noopener">多个字段关联同一张字典表-查询SQL</a></li><li><a href="https://zhidao.baidu.com/question/1796141861415293467.html" target="_blank" rel="noopener">SQL按1月2月3月Q1 4月5月6月Q2…排序问题</a></li><li><a href="https://blog.csdn.net/jia718/article/details/88253918" target="_blank" rel="noopener">sql语句的with as 用法</a></li><li><a href="https://blog.csdn.net/insis_mo/article/details/84936753" target="_blank" rel="noopener">select into from 和 insert into select 的用法和区别</a></li><li>MySQL函数大全： <a href="http://c.biancheng.net/mysql/function/" target="_blank" rel="noopener">http://c.biancheng.net/mysql/function/</a></li><li>Oracle函数大全： <a href="https://www.cnblogs.com/min-yu/p/11137902.html" target="_blank" rel="noopener">https://www.cnblogs.com/min-yu/p/11137902.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> database </tag>
            
            <tag> mysql </tag>
            
            <tag> DDL </tag>
            
            <tag> DML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker容器虚拟化技术</title>
      <link href="/2019/11/10/docker%E5%AE%B9%E5%99%A8%E8%99%9A%E6%8B%9F%E6%8A%80%E6%9C%AF/"/>
      <url>/2019/11/10/docker%E5%AE%B9%E5%99%A8%E8%99%9A%E6%8B%9F%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<p><font color=#00CD00>简单来说，在Windows系统下安装各种运行环境的坑简直不要太多了(●￣(ｴ)￣●)，并不仅限于docker、Nginx、PHP、Python等等</font>，我会尽详细写出实际过程中遇到的各种各样的奇葩问题<br><fancybox><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1573382566146&di=7b10832832e7d3c37d3f4e2e84d45d5d&imgtype=jpg&src=http%3A%2F%2Fimg3.imgtn.bdimg.com%2Fit%2Fu%3D859959778%2C1194286727%26fm%3D214%26gp%3D0.jpg" alt=""></fancybox></p><a id="more"></a><h3 id="1-docker适用环境"><a href="#1-docker适用环境" class="headerlink" title="1.docker适用环境"></a>1.docker适用环境</h3><p>其实docker本身也没有太多在Windows下花功夫。<font color=#00CD00>目前，docker仅支持Linux与Windows企业版、专业版、教育版。ps：家庭版不支持docker</font>,并且win10下可以安装<a href="https://hub.docker.com/editions/community/docker-ce-desktop-windows?tab=description" target="_blank" rel="noopener">docker-for-windows</a>,这个安装包是<br>专门适用于win10，安装简单，而对于win7/8则可以使用<a href="https://github.com/docker/toolbox/releases" target="_blank" rel="noopener">Docker Toolbox下载地址</a></p><h3 id="2-Windows下无法对docker容器进行端口访问（端口映射的问题）"><a href="#2-Windows下无法对docker容器进行端口访问（端口映射的问题）" class="headerlink" title="2.Windows下无法对docker容器进行端口访问（端口映射的问题）"></a>2.Windows下无法对docker容器进行端口访问（端口映射的问题）</h3><p>1.问题详情<br><br>&nbsp;&nbsp;&nbsp;在Windows10系统服务器中安装了docker和docker-compose<br><br>&nbsp;&nbsp;&nbsp;并尝试在其中运行Nginx服务，映射也做好<br><br>&nbsp;&nbsp;&nbsp;问题：在主机的浏览器中，打开localhost:port无法访问对应的Web服务。<br><br>2.问题解析<br><br>&nbsp;&nbsp;&nbsp;原因：docker是运行在Linux上的，在Windows中运行docker，实际上还是在Windows下先安装了一个Linux环境，然后在这个系统中运行的docker。也就是说，服务中使用的localhost指的是这个Linux环境的地址，而不是我们的宿主环境Windows10。<br><br>3.解决办法<br><br>&nbsp;&nbsp;&nbsp;启动docker命令行窗口<br><br>&nbsp;&nbsp;&nbsp;输入命令:docker-machine ip default<br><br>&nbsp;&nbsp;&nbsp;Linux的ip地址，一般情况下这个地址是192.168.99.100<br><br>&nbsp;&nbsp;&nbsp;然后在Windows的浏览器中，输入 <a href="http://IP:port" target="_blank" rel="noopener">http://IP:port</a> 即可启用（<a href="http://192.168.99.100：8069）" target="_blank" rel="noopener">http://192.168.99.100：8069）</a><br></p><h3 id="3-docker与VMware不可兼容"><a href="#3-docker与VMware不可兼容" class="headerlink" title="3.docker与VMware不可兼容"></a>3.docker与VMware不可兼容</h3><p>&nbsp;&nbsp;&nbsp;在Windows下安装docker，第一步就是要打开Hyper-V(打开控制面板 - 程序和功能 - 启用或关闭Windows功能，勾选Hyper-V),开启win自带的虚拟管理技术。但是若想要使用VMware，则必须关闭Hyper-V，鱼和熊掌不可兼得呀！(′д｀ )…彡…彡</p><h3 id="4-Windows：vmware与hyper-v不兼容-请移除hyper-v角色"><a href="#4-Windows：vmware与hyper-v不兼容-请移除hyper-v角色" class="headerlink" title="4.Windows：vmware与hyper-v不兼容,请移除hyper-v角色"></a>4.Windows：vmware与hyper-v不兼容,请移除hyper-v角色</h3><p>1、请移除hyper-v角色。<br>（1）以管理员身份（win + x）运行命令提示符；<br>（2）执行命令：bcdedit /set hypervisorlaunchtype off<br>（3）重启系统，运行vm即可。<br>2、如果想要恢复hyper启动：<br>&nbsp;&nbsp;&nbsp;bcdedit / set hypervisorlaunchtype auto</p><h3 id="5-docker-run后接-bin-sh和接-bin-bash的区别是什么："><a href="#5-docker-run后接-bin-sh和接-bin-bash的区别是什么：" class="headerlink" title="5.docker run后接/bin/sh和接/bin/bash的区别是什么："></a>5.docker run后接/bin/sh和接/bin/bash的区别是什么：</h3><p>比如我们要获取一个nginx镜像，同一镜像存在有不同的tags<br>&nbsp;&nbsp;&nbsp;/bin/sh命令仅适用于tags带alpine标签的： nginx:1.17-alpine；<br>&nbsp;&nbsp;&nbsp;/bin/bash命令仅适用于tags不带alpine标识的：nginx：laster，nginx:1.8…</p><h3 id="6-docker运行MySQL服务"><a href="#6-docker运行MySQL服务" class="headerlink" title="6.docker运行MySQL服务"></a>6.<a href="https://blog.csdn.net/siying8419/article/details/79670246" target="_blank" rel="noopener">docker运行MySQL服务</a></h3><blockquote><ol><li>拉取镜像<br>docker pull mysql:[tag]</li><li>创建并运行容器<br>docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql：5.6</li></ol></blockquote><p>ps: -p 表示指定访问端口<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-e 设置环境变量，或者覆盖已存在的环境变量<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-d 表示以守护式方式来运行容器<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MYSQL_ROOT_PASSWORD=123456 声明MySQL的用户名为ROOT，密码为123456</p><blockquote><ol start="3"><li>查看容器是否启动<br>docker ps </li><li>启动容器<br>docker start container_id</li></ol></blockquote><blockquote><ol start="5"><li>进入容器内部,以命令行交互<br>docker exec -it container_id /bin/bash</li></ol></blockquote><blockquote><ol start="6"><li>登录MySQL<br>mysql -u root -p 然后在输入密码</li></ol></blockquote><blockquote><ol start="7"><li>成功表示已经成功登陆MySQL</li></ol></blockquote><h3 id="7-最强万能公式-数据卷挂载式创建容器"><a href="#7-最强万能公式-数据卷挂载式创建容器" class="headerlink" title="7.最强万能公式:数据卷挂载式创建容器"></a>7.最强万能公式:数据卷挂载式创建容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">守护式：docker run -di [--privileged=true] -P(或者指定端口 -p 外部port:该容器默认端口) \--name=&quot;newNginx&quot;  -v /home/chd/Desktop/entwechatapp:/var/www/EntWeChatApp:rw  nginx:1.15.7-alpine</span><br><span class="line">交互式：docker run -it [--privileged=true] -P(或者指定端口 -p 外部port:该容器默认端口) \--name=&quot;newNginx&quot;  -v /home/chd/Desktop/entwechatapp:/var/www/EntWeChatApp:rw  nginx:1.15.7-alpine</span><br><span class="line">含义：</span><br><span class="line">   a） 以-v /home/chd/Desktop/entwechatapp:/var/www/EntWeChatApp:rw 带rw(read,write)权限来将宿主机与容器进行数据卷挂载</span><br><span class="line">   b) docker run 以新容器名和端口号以及守护式或者交互式来创建容器</span><br></pre></td></tr></table></figure><h3 id="8-宿主机与docker容器权限纠纷"><a href="#8-宿主机与docker容器权限纠纷" class="headerlink" title="8.宿主机与docker容器权限纠纷"></a>8.宿主机与docker容器权限纠纷</h3><p>问题描述：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;它来了！问题又出现了！哭啦。数据卷挂载时，即使声明了rw权限，在宿主机中创建文件，数据共享后，容器内能够具有正常的rw权限；但在容器内新建了文件后，宿主机就只有只读权限，无法修改文件内容。</p><p>解决方案：宿主机的权限不够<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在（7）式中的万能公式中添加：docker run ··· --privileged=true ···</p><h3 id="9-docker配置nginx的配置文件"><a href="#9-docker配置nginx的配置文件" class="headerlink" title="9.docker配置nginx的配置文件"></a>9.<a href="https://www.cnblogs.com/zfding/p/11429695.html" target="_blank" rel="noopener">docker配置nginx的配置文件</a></h3><p><del>命令：<code>docker run --name=&quot;dnmp_nginx&quot; -p 80:80 -v /home/docker-nginx/nginx.conf:/etc/nginx/nginx.conf -v /home/docker-nginx/log:/var/log/nginx -v /home/docker-nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf -di nginx:\[tags]</code><br>&nbsp;&nbsp;&nbsp;&nbsp;第一个-v 表示将你本地的nginx.conf覆盖你要起启动的容器的nginx.conf文件，第二个表示将日志文件进行挂载，就是把nginx服务器的日志写到你docker宿主机的/home/docker-nginx/log/下面。第三个-v 表示的和第一个-v意思一样的<br>&nbsp;&nbsp;&nbsp;&nbsp;我个人更喜欢守护式映射的方式，麻烦的是需要自己准备好nginx.conf 和default.conf文件，我是直接从容器里面复制的，然后根据自己的需要改的</del></p><p>我都想把它杀了，部署nginx太多坑了，不过参考了<a href="https://blog.csdn.net/qierkang/article/details/92657302" target="_blank" rel="noopener">此博文</a>，最终解决了问题，解决方法：</p><blockquote><p>1.创建三个根目录根据情况创建：/docker/nginx/conf www logs</p></blockquote><p>docker run -d -p 80:80 --name=”nginx” --net host -v /docker/nginx/www:/usr/share/nginx/html -v /docker/nginx/logs:/var/log/nginx nginx:1.17.5</p><blockquote><p>2.不对配置文件进行数据挂载即 </p></blockquote><p>-v /docker/nginx/conf/nginx.conf:/etc/nginx/nginx.conf 这个   </p><blockquote><p>3.进入容器 获取文件</p></blockquote><p>docker exec -it nginx /bin/bash </p><blockquote><p>4.cd /etc/nginx/ </p></blockquote><p>（这里主要获取配置文件路径的）,然后exit</p><blockquote><p>5.数据拷贝</p></blockquote><p>进入宿主机目录文件 cd /docker/nginx/conf/<br>将已经运行成功的容器的配置文件拷贝到宿主机的配置文件目录：docker cp 容器ID:/etc/nginx/nginx.conf .（ps：“.”表示拷贝到当前目录）</p><p>ps：文件copy成功后 把nginx容器先删除掉</p><blockquote><p>6.创建最终的nginx容器</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -di -p 80:80 </span><br><span class="line">--name nginx </span><br><span class="line">[--net host] :再思考一下有没有必要写，使用–net = host时,它告诉容器使用主机网络堆栈.因此无法将端口暴露给主机,因为它是主机(就网络堆栈而言).</span><br><span class="line">-v /docker/nginx/www:/usr/share/nginx/html </span><br><span class="line">-v /docker/nginx/conf/nginx.conf:/etc/nginx/nginx.conf</span><br><span class="line">-v /docker/nginx/logs:/var/log/nginx </span><br><span class="line">nginx:1.17.5</span><br><span class="line">ps:成功后就代表部署成功</span><br></pre></td></tr></table></figure><p><font color=#ef4136>2019-11-29 新增：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里宿主机的nginx.conf其实是挂载了一个文件，docker是不推荐这样使用的，可以尝试在宿主机上创建目录为：/docker/nginx/conf/nginx.conf/nginx.conf(当前conf文件是一个具体的配置文件，不是一个目录)，这样上式就不会出现docker warning</font>，结合<a href="https://blog.csdn.net/u014106644/article/details/83152366" target="_blank" rel="noopener">此篇文章</a> 。</p><p>PS：访问可能会403 因为/docker/nginx/www/ 里面没有index.html放进去就好了</p><blockquote><p>7.权限赋予</p></blockquote><p>挂载成功后，给宿主机上的www目录（或整个文件目录）增加权限，不然一直无法读写：<br>&nbsp;&nbsp;&nbsp;&nbsp;sudo chmod -R 777 目标目录 ：给目标目录赋予最大管理员权限<br>&nbsp;&nbsp;&nbsp;&nbsp;sudo chmod +/-rwx 文件名|目录  给文件或目录的赋予权限</p><h3 id="10-docker配置MySQL，redis教程等，请点击此处链接"><a href="#10-docker配置MySQL，redis教程等，请点击此处链接" class="headerlink" title="10.docker配置MySQL，redis教程等，请点击此处链接"></a>10.docker配置MySQL，redis教程等，<a href="https://pan.baidu.com/s/1nUE4pfe2wThYVGMEYqADXw" target="_blank" rel="noopener">请点击此处链接</a></h3><p>命令:<code>docker run -di -p 12345:3306 \--name=&quot;mysql&quot; -v /lnmp/mysql/conf:/etc/mysql/conf.d -v /lnmp/mysql/logs:/logs -v /lnmp/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456:rw  mysql:5.6</code></p><p>命令说明：<br>-p 12345:3306：将主机的12345端口映射到docker容器的3306端口。<br>--name mysql：运行服务名字<br>-v /lnmp/mysql/conf:/etc/mysql/conf.d ：将主机/lnmp/mysql录下的conf/my.cnf 挂载到容器的 /etc/mysql/conf.d<br>-v /lnmp/mysql/logs:/logs：将主机/lnmp/mysql目录下的 logs 目录挂载到容器的 /logs。<br>-v /lnmp/mysql/data:/var/lib/mysql ：将主机/lnmp/mysql目录下的data目录挂载到容器的 /var/lib/mysql<br>-e MYSQL_ROOT_PASSWORD=123456：初始化 root 用户的密码。<br>-d mysql:5.6 : 后台程序运行mysql5.6</p><h3 id="11-docker-容器管理工具：portainer使用"><a href="#11-docker-容器管理工具：portainer使用" class="headerlink" title="11.docker 容器管理工具：portainer使用"></a>11.docker 容器管理工具：<a href="https://blog.csdn.net/yuanlingGeGe/article/details/100762360" target="_blank" rel="noopener">portainer使用</a></h3><ol><li>这个数据卷用于持久化Portainer数据：</li></ol><p>docker volume create portainer_data<br>2. 创建相关portainer容器<br>docker run -di -p 9000:9000 --name=”portainer”<br>-v /var/run/docker.sock:/var/run/docker.sock<br>-v portainer_data:/data portainer/portainer</p><h3 id="12-外部Windows如何访问docker内的容器"><a href="#12-外部Windows如何访问docker内的容器" class="headerlink" title="12.外部Windows如何访问docker内的容器"></a>12.外部Windows如何访问docker内的容器</h3><blockquote><p>1.基本架构：Windows，Dockers，Linux三者关系<br><fancybox><img src="https://images2018.cnblogs.com/blog/1228818/201805/1228818-20180510183714998-435698473.png" alt="Windows，Dockers，Linux三者关系"></fancybox></p></blockquote><blockquote><p>2.相关操作</p></blockquote><p>2.1 关闭Linux防火墙：systemctl stop firewalld.service</p><p>2.2 查看Linux，Docker的IP地址:ifconfig(区别于Windows的ipconfig命令)</p><p><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/CDN@1.2.2/docker.png" width="60%"></fancybox></p><p>2.3 Windows访问测试:</p><blockquote><p>思想：docker作为一个容器虚拟技术，创建并启动相关的容器服务，并把端口映射到Linux系统中。比如MySQL：docker启动MySQL服务后，并映射了一个外部访问的某端口（比如还是3306）<br>，则此刻Linux就具有了3306这个一个端口=&gt;外界访问方式应该是：访问虚拟机Linux上与之相绑定docker容器映射出的端口。</p></blockquote><p><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/CDN@1.2.2/test.JPG" height="60%"></fancybox><br><font color=#FF3030>2019-11-27 新增：</font><br>Linux:<br>在 windows 系统中访问 linux 中 nginx，默认不能访问的，因为防火墙问题,即我们可以有两种解决方法<br>（1）关闭防火墙：参考上述相关操作<br>（2）开放访问的端口号，比如80端口，操作如下： </p><p>查看开放的端口号 </p><blockquote><p>firewall-cmd --list-all </p></blockquote><p>设置开放的端口号 </p><blockquote><p>firewall-cmd --add-service=http --permanent<br>firewall-cmd --add-port=80(或其它开放端口号)/tcp --permanent </p></blockquote><p>重启防火墙 </p><blockquote><p>firewall-cmd --reload </p></blockquote><hr><p>Ubuntu:<br>Ubuntu与linux对于防火墙的操作存在很大的区别：注意区分<br>1、查看端口开启状态（inactive表示已经关闭了防火墙）<br>sudo ufw status</p><p>2、开启某个端口，比如我开启的是3306<br>sudo ufw allow 3306</p><p>3、开启防火墙<br>sudo ufw enable</p><p> 4、关闭防火墙<br>sudo ufw disable</p><p> 5、重启防火墙<br>sudo ufw reload</p><p>6、禁止外部某个端口比如80<br>sudo ufw delete allow 80</p><p>7、查看端口ip<br>netstat -ltn<br>————————————————</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> VMware </tag>
            
            <tag> images </tag>
            
            <tag> container </tag>
            
            <tag> Hyper-V </tag>
            
            <tag> Linux </tag>
            
            <tag> 交互式与守护式创建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Vue死神的至高法则》</title>
      <link href="/2019/11/08/Vue(%E4%B8%80)/"/>
      <url>/2019/11/08/Vue(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合,有很好的数据双向绑定性。<br><font size=4 color=#FF0000>本文要点：</font></p><blockquote><p>1.Vue基础★★★<br>2.jQuery与Vue糅合使用<br>3.Vue的组件<br>4.props属性使用<br>5.接受动态数据与静态数据</p></blockquote><a id="more"></a><h3 id="1-Vue基础★★★"><a href="#1-Vue基础★★★" class="headerlink" title="1.Vue基础★★★"></a>1.Vue基础★★★</h3><blockquote><p>基础结构</p></blockquote><p>如何创建一个Vue示例：<br><strong>new Vue()实例化，其传入参数是一个对象</strong>，我们回忆一下js中的对象到底应该怎样规范书写？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javascript对象的规范写法</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;  <span class="comment">//这里的person称为对象</span></span><br><span class="line">    firstName:<span class="string">"Bill"</span>,  <span class="comment">//  这是属性</span></span><br><span class="line">    lastName:<span class="string">"Gates"</span>, </span><br><span class="line">    age:<span class="number">62</span>, </span><br><span class="line">    eyeColor:<span class="string">"blue"</span>,</span><br><span class="line">    fullName : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  <span class="comment">// 这就是对象中方法的标准写法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">" "</span> + <span class="keyword">this</span>.lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">person.fullName();</span><br></pre></td></tr></table></figure><p>已经回忆了标准的js对象的写法，现在回归正题~~</p><ul><li>el：Vue实例挂载的元素节点，值可以是 CSS 选择符，或实际 HTML 元素，或返回 HTML 元素的函数。</li><li>data：数据存储地方，data的类型可以是object，但在组件（component）里的定义的data必须是方法类型的，且需要使用return返回包裹的数据</li><li>computed:数据类型是对象object，是在HTML DOM加载后马上执行的，如赋值</li><li>created:在模板渲染成html前调用，即通常初始化某些属性值，然后再渲染成视图。</li><li>mounted: 数据类型是function。在模板渲染成html后调用，通常是初始化页面完成后，再对html的dom节点进行一些需要的操作。</li><li>methods: 必须要有一定的触发条件才能执行，如点击事件</li><li>watch: 它用于观察Vue实例上的数据变动。对应一个对象，键是观察表达式，值是对应回调。值也可以是方法名，或者是对象，包含选项。所以他们的执行顺序为：<strong>默认加载的时候先computed再watch，不执行methods；等触发某一事件后，则是：先methods再watch。</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例化一个Vue示例对象，并介绍基本结构</span></span><br><span class="line"><span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">"#app"</span>,</span><br><span class="line">    data:&#123;&#125;,</span><br><span class="line">    computed:&#123;&#125;,</span><br><span class="line">    mounted:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      </span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;&#125;,</span><br><span class="line">    watch:&#123;&#125; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>PS: computed 和 methods虽然都可以实现对数据的计算,但两者有一定的区别:</p><ul><li>methods:使用methods方法可以接受外部传参,使用更加灵活</li><li>computed:<ul><li>计算属性computed的亮点在于:它能够依赖缓存当计算属性所依赖的数据发生改变时,才会重新触发计算属性方法执行所以对于较复杂或消耗效率的计算,一定要采用计算属性。</li><li>计算属性computed里面也可以写函数，并且调用函数时使用的mustache语法不用加括号</li></ul></li></ul><p>PS：mounted与created区别：</p><p>其实两者比较好理解，通常created使用的次数多，而mounted通常是在一些插件的使用或者组件的使用中进行操作，比如插件chart.js的使用: var ctx = document.getElementById(ID);通常会有这一步，而如果你写入组件中，你会发现在created中无法对chart进行一些初始化配置，一定要等这个html渲染完后才可以进行，那么mounted就是不二之选</p><p>参考文章：<a href="https://www.cnblogs.com/binmengxue/p/9958174.html" target="_blank" rel="noopener">Vue标准写法以及关于computed、methods、watch，mounted的区别</a></p><h3 id="2-jQuery与Vue糅合使用"><a href="#2-jQuery与Vue糅合使用" class="headerlink" title="2.jQuery与Vue糅合使用"></a>2.jQuery与Vue糅合使用</h3><blockquote><p>1.jquery基本使用：先导入相关jQuery库包，然后按人类正常思维，就声明入口函数,然后在入口函数中书写逻辑代码</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(function()&#123;</span><br><span class="line">          ...  </span><br><span class="line">          ...</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>但是，奇怪他个猪猪皮，即使不用声明入口函数，直接书写逻辑程序，经过多次测试，TM居然还可以正常使用</p><blockquote><p>2.jQuery+Vue(若想两者结合使用，则一定不能声明入口函数，否则Vue无法使用)<br>当你想测试Vue时，就会出现vue实例未声明的报错</p></blockquote><font color=#FF4040    ><p>&nbsp;&nbsp;1 Uncaught ReferenceError: vm is not defined<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at <anonymous>:1:1<br></font></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"rookie"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello fpx<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello IG<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello kk<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pre</span>&gt;</span>total:&#123;&#123;number&#125;&#125;<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h6</span> <span class="attr">:class</span>=<span class="string">"&#123;box:isactive&#125;"</span>&gt;</span>this is new h6&amp;nbsp;&amp;nbsp;<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h5</span> <span class="attr">:class</span>=<span class="string">"[box1,box2,box3?'luko':'']"</span>&gt;</span>this is new h6&amp;nbsp;&amp;nbsp;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"please input number"</span> <span class="attr">v-model</span>=<span class="string">"msg"</span> @<span class="attr">keyup.enter</span>=<span class="string">"fn"</span>&gt;</span>按键盘enter键触发:&#123;&#123;msg&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"please click enter"</span> <span class="attr">v-model</span>=<span class="string">"message"</span> @<span class="attr">keyup.13</span>=<span class="string">"greet(9527)"</span>&gt;</span>按键盘enter键触发&#123;&#123;message&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log($(<span class="string">'p'</span>).length);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">                el:<span class="string">'#app'</span>,</span></span><br><span class="line">                data:&#123;</span><br><span class="line"><span class="javascript">                    number:$(<span class="string">'p'</span>).length,</span></span><br><span class="line"><span class="actionscript">                    isactive:<span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">                    box1:<span class="string">'moko'</span>,</span></span><br><span class="line"><span class="actionscript">                    box2:<span class="string">'boka'</span>,</span></span><br><span class="line"><span class="actionscript">                    box3:<span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">                    msg:<span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">                    message:<span class="string">''</span>,</span></span><br><span class="line"></span><br><span class="line">                &#125;,</span><br><span class="line">                methods:&#123;</span><br><span class="line">                    fn()&#123;</span><br><span class="line"><span class="actionscript">                        alert(<span class="keyword">this</span>.msg)</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    greet(hi)&#123;</span><br><span class="line"><span class="actionscript">                        alert(<span class="keyword">this</span>.message+hi)</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;);</span><br><span class="line"><span class="javascript">            $(<span class="string">'h5'</span>).append(<span class="string">'&lt;b&gt;this is new plus increment&lt;/b&gt;'</span>);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">'h6'</span>).append(<span class="string">'&lt;br&gt; hello world'</span>);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-Vue的组件"><a href="#3-Vue的组件" class="headerlink" title="3.Vue的组件"></a>3.Vue的组件</h3><blockquote><p>1.组件创建方式分为全局组件与局部组件：</p></blockquote><p>&nbsp;&nbsp;&nbsp;全局组件：可以被多个APP进行调用,在APP实例外创建;定义一个名为 button-counter 的新组件:组件名称若使用驼峰原则，引用组件时需要全部小写，并且两个单词之间用“-”连接;若不使用驼峰原则时，直接使用原组件名</p><p>全局组件创建方式一：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Vue.component('buttonCounter', &#123;</span><br><span class="line">    data: function () &#123;  // 1.组件可以有自己的data数据，组件中的data必须是一个方法，且这个方法内部必须返回一个对象才行，而实例中的data可以为一个对象</span><br><span class="line">        return &#123;</span><br><span class="line">        count: 0,</span><br><span class="line">        info: 'hello world'</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;,</span><br><span class="line">      template: '<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"count++"</span>&gt;</span>&#123;&#123;message&#125;&#125; clicked me &#123;&#123; count &#125;&#125; times.<span class="tag">&lt;/<span class="name">button</span>&gt;</span>'</span><br><span class="line">      // 2. 全局组件有template属性 </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>全局组件创建方式二：调用公共模板对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    let project=&#123;</span><br><span class="line">        template:&apos;&apos;,</span><br><span class="line">        data:function()&#123;  // 组件中的data必须是一个方法</span><br><span class="line">            return &#123;</span><br><span class="line">            info:&apos;hello world&apos;,</span><br><span class="line">            message:&apos;badwoman&apos;      </span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;&#125;&#125;</span><br><span class="line">    Vue.component(&apos;组件名&apos;,project);     </span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>全局组件创建方式三：调用公共模板对象–其实这也是全局组件的一种创建方式，将template绑定到自身data函数中，此刻的data不同于实例中的data，此刻为一个函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template id=<span class="string">"tmpl"</span>&gt;  </span><br><span class="line">   &lt;div&gt;</span><br><span class="line">     &lt;h3&gt;&#123;&#123;count&#125;&#125;&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">   &lt;/</span>div&gt;</span><br><span class="line"> &lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp"> &lt;script&gt;</span></span><br><span class="line"><span class="regexp">   var dataObj = &#123; count: 0 &#125;;</span></span><br><span class="line"><span class="regexp">   /</span><span class="regexp">/ 这是一个计数器的组件, 身上有个按钮,每当点击按钮,让 data 中的 count 值 +1</span></span><br><span class="line"><span class="regexp">   Vue.component('counter', &#123;</span></span><br><span class="line"><span class="regexp">     data: function () &#123;</span></span><br><span class="line"><span class="regexp">       /</span><span class="regexp">/ return dataObj</span></span><br><span class="line"><span class="regexp">       return &#123; count: 0 &#125;</span></span><br><span class="line"><span class="regexp">     &#125;,</span></span><br><span class="line"><span class="regexp">     template: '#tmpl',</span></span><br><span class="line"><span class="regexp">     methods: &#123;&#125;</span></span><br><span class="line"><span class="regexp">   &#125;);</span></span><br><span class="line"><span class="regexp">   /</span><span class="regexp">/ 创建 Vue 实例，得到 ViewModel</span></span><br><span class="line"><span class="regexp">   var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">     el: '#app',</span></span><br><span class="line"><span class="regexp">     data: &#123;&#125;,</span></span><br><span class="line"><span class="regexp">     methods: &#123;&#125;</span></span><br><span class="line"><span class="regexp">   &#125;)</span></span><br><span class="line"><span class="regexp"> &lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h3 id="4-props属性使用："><a href="#4-props属性使用：" class="headerlink" title="4. props属性使用："></a>4. props属性使用：</h3><blockquote><p>数组写法</p></blockquote><p>props: [‘cmovies’, ‘cmessage’]</p><blockquote><p>对象写法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">props: &#123; </span><br><span class="line">    // propsName表示要传递的值</span><br><span class="line">    propsName: &#123;  </span><br><span class="line">    type: String, // 组件的值的类型</span><br><span class="line">    default: &apos;zzzzz&apos;, // 组件的默认值</span><br><span class="line">    required: true //在使用组件必传值</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>props对象写法样例如下：<br>拓展：组件props选项的值可以为为数组类型,也可以是对象类型，props选项的对象类型可以用于对外部传递进来的参数进行数据验证</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    Vue.component(<span class="string">'my-component'</span>,&#123;</span><br><span class="line">        props:&#123;</span><br><span class="line">            <span class="comment">// Number类型</span></span><br><span class="line">            propA: <span class="built_in">Number</span>,</span><br><span class="line">            <span class="comment">// 多种类型校验: String 或 Number类型</span></span><br><span class="line">            propB: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span><br><span class="line">            <span class="comment">// 布尔类型,默认值true</span></span><br><span class="line">            propC:&#123;</span><br><span class="line">                type:<span class="built_in">Boolean</span>,</span><br><span class="line">                <span class="keyword">default</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// String类型且必输</span></span><br><span class="line">            propD:&#123;</span><br><span class="line">                type:<span class="built_in">String</span>,</span><br><span class="line">                required: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// Array类型,默认返回一个数组对象</span></span><br><span class="line">            propE:&#123;</span><br><span class="line">                type:<span class="built_in">Array</span>,</span><br><span class="line">                <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// Object类型,默认返回一个对象</span></span><br><span class="line">            propF:&#123;</span><br><span class="line">                type:<span class="built_in">Object</span>,</span><br><span class="line">                <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;<span class="attr">a</span>:<span class="number">1</span>&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 自定义验证函数</span></span><br><span class="line">            propG:&#123;</span><br><span class="line">                validator:<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> value &lt; <span class="number">10</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">'#app'</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            parentInput:<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-接受动态数据与静态数据"><a href="#5-接受动态数据与静态数据" class="headerlink" title="5.接受动态数据与静态数据"></a>5.接受动态数据与静态数据</h3><p>有时候组件接收的参数是来自父组件的动态数据,需要使用v-bind动态绑定props值.<br>下列案例此刻使用了v-blid绑定props值，即此刻绑定的message的值就是为表单中输入的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> v-model=<span class="string">"parentInputText"</span> placeholder=<span class="string">"请输入..."</span>&gt;</span><br><span class="line">    &lt;my-component :message=<span class="string">"parentInputText"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    Vue.component('my-component',&#123;</span></span><br><span class="line"><span class="string">        props:['message'],</span></span><br><span class="line"><span class="string">        template:'&lt;div&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;'</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    const vm = new Vue(&#123;</span></span><br><span class="line"><span class="string">        el: '#app',</span></span><br><span class="line"><span class="string">        data:&#123;</span></span><br><span class="line"><span class="string">            parentInputText:''</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>在使用props对子组件传值时,如果不使用v-bind传递数字,布尔,数组,对象类型的数据，这时传递的数据都是字符串类型,由于未使用模板绑定语法,不会被编译，会被当做参数传递到模板中.<br>下列案例此刻没有使用了v-blid绑定props值，即此刻绑定的message的值直接就是”parentInputText“</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;my-component message=<span class="string">"parentInputText"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    Vue.component('my-component',&#123;</span></span><br><span class="line"><span class="string">        props:['message'],</span></span><br><span class="line"><span class="string">        template:'&lt;div&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;'</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    const vm = new Vue(&#123;</span></span><br><span class="line"><span class="string">        el: '#app',</span></span><br><span class="line"><span class="string">        data:&#123;</span></span><br><span class="line"><span class="string">            parentInputText:''</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><font  color=#080808>注意：重要的来了，必须理解┗|｀O′|┛ 嗷~~<br>创建格式：Vue.component('组件名',{ /* ..组件的模板对象.. */ })<br>&nbsp;&nbsp;&nbsp;组件的第一个参数为组件名，而第二个参数是以对象的形式去描述一个组件。组件是可复用的 Vue 实例，所以它们与 new Vue 接收相同的选项，例如 data、computed、watch、methods 以及生命周期钩子等。仅有的例外是像 el 这样根实例特有的选项</font><p><font color=#FF4040    >2019-12-9 新增：</font></p><h3 id="6-vue实例中的method方法抽象说明"><a href="#6-vue实例中的method方法抽象说明" class="headerlink" title="6.vue实例中的method方法抽象说明"></a>6.vue实例中的method方法抽象说明</h3><p>假设在HTML中有这样一个语句：调用methods里面的方法时，假如有返回值时，直接在&lt;!–￼12–&gt;里面展示，注意区分@click=”methodName”</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>&#123;&#123;test(2)&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">    <span class="comment">&lt;!---这里是调用methods里面的test()方法：判断参数的数据类型 ---&gt;</span></span><br><span class="line">    el:"#app",</span><br><span class="line">    data:&#123;&#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        test(hi) &#123;</span><br><span class="line">            arr = typeof(hi);</span><br><span class="line">            switch (arr) &#123;</span><br><span class="line">                case "string":</span><br><span class="line">                    return "this type is string";</span><br><span class="line">                case "number":</span><br><span class="line">                    console.log("good");</span><br><span class="line">                    if (hi<span class="tag">&lt;<span class="name">=10</span> &amp;&amp; <span class="attr">hi</span>%<span class="attr">2</span>===<span class="string">0)</span> &#123;</span></span><br><span class="line"><span class="tag">                        <span class="attr">return</span> <span class="attr">hi</span>;</span></span><br><span class="line"><span class="tag">                    &#125;</span></span><br><span class="line"><span class="tag">                    <span class="attr">else</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">return</span>("不满足条件");</span></span><br><span class="line"><span class="tag">                <span class="attr">case</span> "<span class="attr">object</span>"<span class="attr">:</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">return</span>("<span class="attr">this</span> <span class="attr">type</span> <span class="attr">is</span> <span class="attr">object</span>");</span></span><br><span class="line"><span class="tag">            &#125;</span></span><br><span class="line"><span class="tag">        &#125;</span></span><br><span class="line"><span class="tag">    &#125;</span></span><br><span class="line"><span class="tag">    </span></span><br><span class="line"><span class="tag">&#125;)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Jquery </tag>
            
            <tag> component </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python文件读read()、readline()、readlines()对比</title>
      <link href="/2019/11/07/python%E7%9A%84read_readlines_readline/"/>
      <url>/2019/11/07/python%E7%9A%84read_readlines_readline/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;read():读取整个文件，将文件内容放到一个字符串变量中<br>&nbsp;&nbsp;&nbsp;readline():每次读取一整行，包括换行符，并将其作为字符串返回<br>&nbsp;&nbsp;&nbsp;readlines():读取所有行然后把它们作为一个字符串型列表返回（即把每一行数据包括换行符作为一个列表元素）<br></p><blockquote><p>2.python文件打开方式详解</p></blockquote><a id="more"></a><h2 id="1-readline-示例："><a href="#1-readline-示例：" class="headerlink" title="1.readline()示例："></a>1.readline()示例：</h2><p>假设需求是读取一个多行的all_term.txt文件，并列出每一个单词<br>all_term.txt文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">new fallout chernobyl social impact chernobyl disast</span><br><span class="line">david r marpl st martin press cloth</span><br><span class="line">rnobyl social impact chernobyl disast</span><br><span class="line">david r marpl st martin piano</span><br></pre></td></tr></table></figure><p>程序源代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    obj = []</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'all_term.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>,errors=<span class="string">"ignore"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            myStr = f.readline()  <span class="comment"># 表示一次读取一行</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> myStr:</span><br><span class="line">                <span class="comment"># 读到数据最后跳出，结束循环。数据的最后也就是读不到数据了，mystr为空的时候</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="comment"># 指定字符串来分割目标字符串，以列表形式返回</span></span><br><span class="line">            new_list = myStr.split()</span><br><span class="line">            <span class="comment"># 表示将拆分好的每一行重新拼接成一个完整的数组</span></span><br><span class="line">            obj += new_list</span><br><span class="line">        print(obj)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>readline()表示读取一整行，那如果一个文件有多行数据，使用readline()函数是不是一直重复读取第一行？<br>其实不然，使用with open()打开文件后，第一个readline()读取第一行（也包括换行符），第二个读取第二行,…,第n个读取第n行数据，这是由系统机制判定的。<br>下面我列举一个实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""all_term.txt:</span></span><br><span class="line"><span class="string">new fallout chernobyl social impact chernobyl disast</span></span><br><span class="line"><span class="string">david r marpl st martin press cloth</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">new fallout chernobyl social impact chernobyl disast</span></span><br><span class="line"><span class="string">david r marpl st martin press cloth</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'all_term.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>, errors=<span class="string">'ignore'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    a = f.readline().replace(<span class="string">"\n"</span>, <span class="string">""</span>)</span><br><span class="line">    b = f.readline().replace(<span class="string">"\n"</span>, <span class="string">""</span>)</span><br><span class="line">print(<span class="string">"a:"</span>, a)</span><br><span class="line">print(<span class="string">"b:"</span>, b)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">结果为：</span></span><br><span class="line"><span class="string">a: new fallout chernobyl social impact chernobyl disast</span></span><br><span class="line"><span class="string">b: david r marpl st martin press cloth</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>根据结果可以得出结论：</p><p>1.第一个readline()读取第一行（也包括换行符），第二个读取第二行，……</p><p>2.上面是我们经常看到的按行遍历一个文件方法，你可能已经注意到我在代码中写的if not myStr:部分。当readline读取到为空的时候，意味着读到了文件的结束。这个时候，问题就在这里，很多人会想，是不是遇到一个空行，也会被认为是文件的结束呢？<br>事实上，文件的空白行并不会返回一个空行。因为在每一行的末尾还有一个或者多个分隔符，因此“空白行”至少会有一个换行符或者系统使用的其他符号。所以，即使文件中真的包含一个“空白行”，读入的行也不是空的，这就意味着在真实遍历读取到文件结束之前，程序实际上是不会停止的</p><h2 id="2-python文件打开方式详解-w-a-r"><a href="#2-python文件打开方式详解-w-a-r" class="headerlink" title="2.python文件打开方式详解~~w,a,r"></a>2.python文件打开方式详解~~w,a,r</h2><table><thead><tr><th>打开方式</th><th align="center">详解</th></tr></thead><tbody><tr><td>b</td><td align="center">二进制模式。</td></tr><tr><td>+</td><td align="center">打开一个文件进行更新(可读可写)。</td></tr><tr><td>r</td><td align="center">以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td>rb</td><td align="center">以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。</td></tr><tr><td>r+</td><td align="center">打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td>rb+</td><td align="center">以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。</td></tr><tr><td>w</td><td align="center">打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td>wb</td><td align="center">以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td>w+</td><td align="center">打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td>wb+</td><td align="center">以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td>a</td><td align="center">打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td>a+</td><td align="center">打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td>ab+</td><td align="center">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> read </tag>
            
            <tag> readline </tag>
            
            <tag> readlines </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo主体设置知识点</title>
      <link href="/2019/10/26/Hexo%E4%B8%BB%E4%BD%93%E8%AE%BE%E7%BD%AE%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2019/10/26/Hexo%E4%B8%BB%E4%BD%93%E8%AE%BE%E7%BD%AE%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p><fancybox><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1572260590229&di=c342004ec7897ef8697bd65876b3b9c5&imgtype=0&src=http%3A%2F%2F02imgmini.eastday.com%2Fmobile%2F20180822%2F20180822234333_351cde5dc9236b7836296868f06a44b4_2.jpeg" width="80%"></fancybox><br>介绍Hexo一些基本设置，比如分类，标签，作者，简要概述等等以及MarkDown的写法</p><a id="more"></a><h4 id="1-Hexo创建文章、标签、分类的Front-matter方法-Ⅰ-nbsp-nbsp-Front-matter-Ⅱ"><a href="#1-Hexo创建文章、标签、分类的Front-matter方法-Ⅰ-nbsp-nbsp-Front-matter-Ⅱ" class="headerlink" title="1.Hexo创建文章、标签、分类的Front-matter方法 Ⅰ&nbsp;&nbsp; Front-matter Ⅱ"></a>1.<a href="https://www.jianshu.com/p/6e4af897a3f0" target="_blank" rel="noopener">Hexo创建文章、标签、分类的Front-matter方法 Ⅰ</a>&nbsp;&nbsp; <a href="https://xaoxuu.com/wiki/material-x/pages/index.html#Front-matter" target="_blank" rel="noopener">Front-matter Ⅱ</a></h4><p>Front-matter 是md文件最上方以 — 分隔的区域，用于指定个别文件的变量<br></p><blockquote><p>其实Front-matter就是在\Hexo\source_posts下的.md文件中书写文章标题，上传时间，分类名，标签名等等</p></blockquote><table><thead><tr><th align="center">字段</th><th align="center">含义</th><th align="center">值类型</th><th align="center">默认值</th></tr></thead><tbody><tr><td align="center">layout</td><td align="center">布局模版</td><td align="center">String</td><td align="center">-</td></tr><tr><td align="center">title</td><td align="center">标题</td><td align="center">String</td><td align="center">-</td></tr><tr><td align="center">date</td><td align="center">创建时间</td><td align="center">Date</td><td align="center">文件创建时间</td></tr><tr><td align="center">description</td><td align="center">页面描述、摘要</td><td align="center">String</td><td align="center">-</td></tr><tr><td align="center">cover</td><td align="center">是否显示封面</td><td align="center">Bool</td><td align="center">true</td></tr></tbody></table><h4 id="2-Markdown标题页的写法"><a href="#2-Markdown标题页的写法" class="headerlink" title="2.Markdown标题页的写法"></a>2.Markdown标题页的写法</h4><pre>    ---    layout: 页面布局（配合主题文档使用）    title: 文章名称    date: 文章日期    comments: 文章是否开启评论    photos: 文章封面图（仅部分主题支持）    tags:       - 文章标签一      - 文章标签二    categories: # 文章分类（文章分类等级）                - 父分类                - 子分类                - 孙分类    description: 文章描述，即要在首页显示的摘要（仅部分主题支持）    ---    这里是摘要       <!-- more -->        这里是正文    注意：description 和 <!-- more --> 方式显示摘要二选一即可，部分主题不支持description，    每个配置英文冒号后面要空一格，不同主题配置有所差异，具体要参考主题文档</pre><h4 id="3-md文件的基本写法"><a href="#3-md文件的基本写法" class="headerlink" title="3.md文件的基本写法"></a>3.md文件的基本写法</h4><p><a href="https://www.jianshu.com/p/8c1b2b39deb0" target="_blank" rel="noopener">【Markdown写法大全】</a></p><blockquote><p>3.1. ``` 代码段 ``` : 表示以原格式展示代码片段。比如</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$(function () &#123;</span><br><span class="line">    ......</span><br><span class="line">     //鼠标进入的时候,其他的li标签透明度：0.5</span><br><span class="line">    $(&quot;.wrap li&quot;).hover(function() &#123;</span><br><span class="line">        $(this).siblings().stop().fadeTo(400, 0.5);  //.stop():停止所有在指定元素上正在运行的动画。</span><br><span class="line">    &#125;, function() &#123;</span><br><span class="line">        // 鼠标离开，其他li 透明度改为 1</span><br><span class="line">        $(this).siblings().stop().fadeTo(400, 1);</span><br><span class="line">    &#125;);</span><br><span class="line">    console.log($(&apos;.attr a&apos;).prop(&apos;href&apos;));</span><br><span class="line">    console.log($(&apos;.attr a&apos;).prop(&apos;title&apos;));</span><br><span class="line">    console.log($(&apos;input:checkbox&apos;).attr(&apos;id&apos;));</span><br><span class="line">    console.log($(&apos;.office p:eq(0)&apos;).scrollTop());</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>3.2. &lt;img src=”url” width=” “&gt;</p></blockquote><p>&nbsp;&nbsp;&nbsp;表示在md文件中展示图片，若不想破坏图片原格式，就只需要写width或者height其中一个，另一个会自适应变化</p><blockquote><p>3.3. 文本修饰:粗体，斜体…</p></blockquote><p>&nbsp;&nbsp;&nbsp;粗体文本用两个*或_包含，斜体文本用两个_或*包含</p><blockquote><p>3.4. 表格(注意其格式)</p></blockquote><p><em>语法说明</em>：</p><ol><li>第一行为表头，第二行分隔表头和主体部分，第三行开始每一行为一个表格行。</li><li>列于列之间用管道符<code>|</code>隔开。原生方式的表格每一行的两边也要有管道符。</li><li>第二行还可以为不同的列指定对齐方向。默认为左对齐，在<code>-</code>右边加上<code>:</code>就右对齐。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| Tables        | Are           | Cool  |</span><br><span class="line">| ------------- |:-------------:| -----:|</span><br><span class="line">| col 3 is      | right-aligned | $1600 |</span><br><span class="line">| col 2 is      | centered      |   $12 |</span><br><span class="line">| zebra stripes | are neat      |    $1 |</span><br></pre></td></tr></table></figure><blockquote><p>3.5. <a href="https://www.114la.com/other/rgb.htm" target="_blank" rel="noopener">颜色RGB</a>和字体以及背景颜色</p></blockquote><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"Tahoma"</span>&gt;</span></span>这是一串Tahoma字体<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"黑体"</span>&gt;</span></span>这是一串黑体字<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"微软雅黑"</span>&gt;</span></span>这是一串微软雅黑<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"STCAIYUN"</span>&gt;</span></span>这是一串华文彩云<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">#00ced1</span> <span class="attr">size</span>=<span class="string">7</span> <span class="attr">face</span>=<span class="string">"黑体"</span>&gt;</span></span>背景色+字体+字的size<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">#00ffff</span> <span class="attr">size</span>=<span class="string">72</span>&gt;</span></span>颜色设置<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">gray</span> <span class="attr">size</span>=<span class="string">72</span>&gt;</span></span>灰色处理<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">#bfe1f1</span>&gt;</span></span>背景色是：#bfe1f1<span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">Size：规定文本的尺寸大小。可能的值：从 1 到 7 的数字。浏览器默认值是 3</span><br></pre></td></tr></table></figure><p><font face="Tahoma">这是一串Tahoma字体</font><br/><br><font face="黑体">这是一串黑体字</font><br/><br><font face="微软雅黑">这是一串微软雅黑</font><br/><br><font face="STCAIYUN">这是一串华文彩云</font><br/><br><font color=#00ced1 size=7 face="黑体">背景色+字体+字的size</font><br/><br><font color=#00ffff size=72>颜色设置</font><br/><br><font color=gray size=72>灰色处理</font><br/></p><blockquote><p>3.6. 转义字符</p></blockquote><p>&lt;br&gt; : 换行<br><br>\ : 转义字符，原生字符，不加修饰<br><br>&amp;nbsp; : 空格</p><blockquote><p>3.7 每一篇博文设置图片</p></blockquote><p>只需要在文章前面配置 photos 关键字即可，若没有这种配置，可以选择在正文插入图片，然后使用 <!-- more --> 将图片显示在摘要里</p><blockquote><p>3.8 Markdown的todo list写法</p></blockquote><p>代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">近期任务安排:</span><br><span class="line">- [x] 整理Markdown手册</span><br><span class="line">- [ ] 改善项目</span><br><span class="line">   - [x] 优化首页显示方式</span><br><span class="line">   - [x] 修复闪退问题</span><br><span class="line">   - [ ] 修复视频卡顿</span><br><span class="line">- [ ] A3项目修复</span><br><span class="line">   - [x] 修复数值错误</span><br></pre></td></tr></table></figure><p>显示效果：<br><fancybox><img src="https://upload-images.jianshu.io/upload_images/1001659-420fea3d68612ca5.png" alt=""></p><blockquote><p>3.9 hexo-matrix主题支持图片缩放设置</p></blockquote><p>&lt;fancybox&gt;图片设置&lt;/fancybox&gt;</p><blockquote><p>3.10 列表嵌套</p></blockquote><p><strong>上一级和下一级之间敲三个空格即可</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">+ </span>一级无序列表内容</span><br><span class="line"></span><br><span class="line"><span class="bullet">   * </span>二级无序列表内容(三个空格)</span><br><span class="line"><span class="bullet">   * </span>二级无序列表内容</span><br><span class="line"><span class="bullet">   * </span>二级无序列表内容</span><br><span class="line"></span><br><span class="line"><span class="bullet">+ </span>一级无序列表内容</span><br><span class="line"></span><br><span class="line"><span class="bullet">   1. </span>二级有序列表内容</span><br><span class="line"><span class="bullet">   2. </span>二级有序列表内容</span><br><span class="line"><span class="bullet">   3. </span>二级有序列表内容</span><br></pre></td></tr></table></figure><h4 id="4-Hexo的搜索search功能设置"><a href="#4-Hexo的搜索search功能设置" class="headerlink" title="4.Hexo的搜索search功能设置"></a>4.Hexo的搜索search功能设置</h4><p>问题描述：</p><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在我的博客中点击search，输入相关关键字后，点击查询到的相关文章，会出现404错误</p></blockquote><p>解决方法：</p><blockquote><p>1.检查是否安装文档要求正确的安装了依赖包。<br>2.检查根目录配置文件是否有search字段冲突（我的根目录配置文件中没有search字段）。<br>3.检查我们的主题（我使用的是<a href="https://xaoxuu.com/wiki/material-x/index.html" target="_blank" rel="noopener">Material X主题</a>）的配置文件是否开启search功能</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 搜索配置</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  service:</span> <span class="string">hexo</span></span><br><span class="line">  <span class="comment"># google</span></span><br><span class="line"><span class="attr">  google_api_key:</span></span><br><span class="line"><span class="attr">  google_engine_id:</span></span><br><span class="line">  <span class="comment"># algolia</span></span><br><span class="line"><span class="attr">  algolia_app_id:</span></span><br><span class="line"><span class="attr">  algolia_api_key:</span></span><br><span class="line"><span class="attr">  algolia_index_name:</span></span><br><span class="line">  <span class="comment"># azure</span></span><br><span class="line"><span class="attr">  azure_service_name:</span></span><br><span class="line"><span class="attr">  azure_index_name:</span></span><br><span class="line"><span class="attr">  azure_query_key:</span></span><br><span class="line">  <span class="comment"># baidu</span></span><br><span class="line"><span class="attr">  baidu_api_id:</span></span><br></pre></td></tr></table></figure><blockquote><p>4.这是最容易忽略的，但往往也是问题出现的源头，请检查根目录配置文件中的链接是否正确，如：</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="attr">https://fioralove.github.io</span></span><br><span class="line"><span class="comment"># 这里似乎存在一个bug，推荐填写GitHub Page的访问地址，不要使用自己在阿里云以及其它的域名注册服务商所提供的地址</span></span><br><span class="line"><span class="comment"># 比如我在阿里云所注册的https:AhriLove.top，填上依旧会出现404错误</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure><h4 id="5-封面轮播图"><a href="#5-封面轮播图" class="headerlink" title="5.封面轮播图"></a>5.封面轮播图</h4><p>封面幻灯片轮播图片怎么引入本地的照片？？<br>修改主题下_config.yml文件，里面有个banner改一下，多加几行即可</p><h4 id="6-front-matter设置"><a href="#6-front-matter设置" class="headerlink" title="6.front-matter设置"></a>6.front-matter设置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">front-matter是指两个\---之间的内容</span><br><span class="line">\---</span><br><span class="line">title: Javascript篇章四：快速入门</span><br><span class="line">// 小图标</span><br><span class="line">icons: [fas fa-fire accent]</span><br><span class="line">date: 2019-11-21</span><br><span class="line">toc: true #是否显示文章目录</span><br><span class="line">categories:  #分类</span><br><span class="line">    - javascript</span><br><span class="line">// 是否显示封面    </span><br><span class="line">cover: true</span><br><span class="line">tags:   #标签</span><br><span class="line">// 是否置顶文章</span><br><span class="line">top: true</span><br><span class="line">// 文章右边的音乐块</span><br><span class="line">music:</span><br><span class="line">  enable: true      # true（文章内和文章列表都显示） internal（只在文章内显示）</span><br><span class="line">  server: netease   # netease（网易云音乐）tencent（QQ音乐） xiami（虾米） kugou（酷狗）</span><br><span class="line">  type: song        # song （单曲） album （专辑） playlist （歌单） search （搜索）</span><br><span class="line">  id: 26664345      # 歌曲/专辑/歌单 ID</span><br><span class="line">// 作者相关信息块</span><br><span class="line">author:</span><br><span class="line">  name: 作者</span><br><span class="line">  avatar: https://img.vim-cn.com/a1/d53c11fb5d4fd69529bc805d385fe818feb3f6.png</span><br><span class="line">  url: https://baidu.com</span><br><span class="line">meta:</span><br><span class="line">  header: \[title, author, date, categories, counter, top]</span><br><span class="line">  footer: \[updated, tags, share]</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 文章描述</span><br><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> front-matter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Hexo</title>
      <link href="/2019/10/25/hello-world/"/>
      <url>/2019/10/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><fancybox><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1573382292526&di=0009d867e1bde90c696eb40e0fd840e4&imgtype=jpg&src=http%3A%2F%2Fimg4.imgtn.bdimg.com%2Fit%2Fu%3D3010013829%2C2497003625%26fm%3D214%26gp%3D0.jpg" alt=""></fancybox></p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>初次见面，请多关照</title>
      <link href="/2019/10/20/%E5%88%9D%E6%AC%A1%E8%A7%81%E9%9D%A2_%E8%AF%B7%E5%A4%9A%E5%85%B3%E7%85%A7/"/>
      <url>/2019/10/20/%E5%88%9D%E6%AC%A1%E8%A7%81%E9%9D%A2_%E8%AF%B7%E5%A4%9A%E5%85%B3%E7%85%A7/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;这是一篇有关我如何使用 Github Pages 和 Hexo 搭建属于自己独立博客的功能展示</p><a id="more"></a><p>大家好–^^__^^–，我叫陈浩东<br></p><p><img src="https://cdn.jsdelivr.net/gh/FioraLove/CDN@1.1/5d4d2f1ba61c7.jpg" width="30%"><br></p><p>&nbsp;&nbsp;&nbsp;<code>作为GP-12线,滚齿磨齿操作员</code>，目前正学习清洗包装流程、磨齿、滚齿、齿轮生产工艺以及安全生产。&nbsp;&nbsp;&nbsp;对网站开发的有关知识几乎为零，这也是我搭建好自己的不完全博客之后写的第一篇博客，刚开始搭建博客的时候自己也是网上各种百度，由于自己属于小白那种，历经了千辛万苦才弄好，所以借这个机会会一直坚持下去分析自己的知识，一起走向成功的彼岸！</p>]]></content>
      
      
      <categories>
          
          <category> 博客Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github Page </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven的安装搭建补充点</title>
      <link href="/2019/04/11/Maven/"/>
      <url>/2019/04/11/Maven/</url>
      
        <content type="html"><![CDATA[<p><font size=5 color=#00ced1 size=5 face="黑体">与众不同的生活方式很累人呢，因为找不到借口</font></p><p>&nbsp;&nbsp;&nbsp;&nbsp;Maven项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的项目管理工具软件。</p><blockquote><p><font size=4 color=#FF0000>本文要点：</font><br>1.理清Maven概念<br>2.安装教程点</p></blockquote><a id="more"></a><h3 id="1-理清概念"><a href="#1-理清概念" class="headerlink" title="1.理清概念"></a>1.理清概念</h3><ol><li><p>Maven是Apache下的一个纯java开发的开源项目，它是一个项目管理工具，使用maven对java项目进行构建、依赖管理。</p></li><li><p>通俗的来说Maven就是一款帮助程序员构建项目的工具，我们只需要告诉Maven需要哪些Jar 包，它会帮助我们下载所有的Jar，极大提升开发效率</p></li></ol><h3 id="2-安装易错点"><a href="#2-安装易错点" class="headerlink" title="2.安装易错点"></a>2.安装易错点</h3><p>最主要的步骤：</p><ol><li>配置环境变量</li><li>解压后的conf/settings.xml文件进行配置</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置镜像文件--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/central/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置本地仓库（指定依赖下载的文件目录）--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\data\MavenRepository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--声明jdk版本--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>将配置的settings.xml文件必须要复制一份到&lt;localRepository&gt;的本地仓库中</strong></p>]]></content>
      
      
      <categories>
          
          <category> 服务器架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
