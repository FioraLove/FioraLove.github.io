<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Javascript篇章一：JavaScript基本知识</title>
      <link href="/2019/11/20/Javascript%E7%AF%87%E7%AB%A0%E4%B8%80/"/>
      <url>/2019/11/20/Javascript%E7%AF%87%E7%AB%A0%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;真实生活中的对象、属性和方法:在真实生活中，汽车是一个对象。汽车有诸如车重和颜色等属性，也有诸如启动和停止的方法<br>&nbsp;&nbsp;&nbsp;所有汽车都拥有同样的属性，但属性值因车而异。所有汽车都拥有相同的方法，但是方法会在不同时间被执行。</p><a id="more"></a><h3 id="1-变量及数据类型：JavaScript变量是数据值的容器"><a href="#1-变量及数据类型：JavaScript变量是数据值的容器" class="headerlink" title="1. 变量及数据类型：JavaScript变量是数据值的容器"></a>1. 变量及数据类型：JavaScript变量是数据值的容器</h3><p>变量修饰符：var,let,const<br>var car=”BMW”;<br>var age=18;</p><blockquote><p>JavaScript数据类型分为：数值、字符串值、数组、对象等等</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> length = <span class="number">7</span>;                             <span class="comment">// 数字</span></span><br><span class="line"><span class="keyword">let</span> lastName = <span class="string">"Gates"</span>;                      <span class="comment">// 字符串</span></span><br><span class="line"><span class="keyword">let</span> cars = [<span class="string">"Porsche"</span>, <span class="string">"Volvo"</span>, <span class="string">"BMW"</span>];         <span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">let</span> x = &#123;<span class="attr">firstName</span>:<span class="string">"Bill"</span>, <span class="attr">lastName</span>:<span class="string">"Gates"</span>&#125;;    <span class="comment">// 对象</span></span><br></pre></td></tr></table></figure><h3 id="2-对象"><a href="#2-对象" class="headerlink" title="2.对象"></a>2.对象</h3><p>对象的值以名称:值对的方式来书写（名称和值由冒号分隔）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;  <span class="comment">//这里的person称为对象</span></span><br><span class="line">    firstName:<span class="string">"Bill"</span>,  <span class="comment">//  这是属性</span></span><br><span class="line">    lastName:<span class="string">"Gates"</span>, </span><br><span class="line">    age:<span class="number">62</span>, </span><br><span class="line">    eyeColor:<span class="string">"blue"</span>,</span><br><span class="line">    fullName : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  <span class="comment">// 这就是方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">" "</span> + <span class="keyword">this</span>.lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>JavaScript中的this关键词</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在函数定义中，this 引用该函数的“拥有者”。</span><br><span class="line"></span><br><span class="line">在上面的例子中，this 指的是“拥有” fullName 函数的 person 对象。</span><br><span class="line"></span><br><span class="line">换言之，this.firstName 的意思是 this 对象的 firstName 属性。</span><br></pre></td></tr></table></figure><h4 id="案例：数据集构造"><a href="#案例：数据集构造" class="headerlink" title="案例：数据集构造"></a>案例：数据集构造</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> dimensions = [];  <span class="comment">//维度</span></span><br><span class="line"><span class="keyword">let</span> source = [];      <span class="comment">//数据集</span></span><br><span class="line"><span class="keyword">let</span> series = [];        <span class="comment">//图系列</span></span><br><span class="line"></span><br><span class="line">dimensions.push(<span class="string">"groupcus_name"</span>);</span><br><span class="line">dimensions.push(<span class="string">"剩余发出商品"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;response.Rows.length;i++)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">    obj[<span class="string">"groupcus_name"</span>] = response.Rows[i].groupcus_name;  <span class="comment">// 对象的调用方式obj["key_name"]或obj.key_name</span></span><br><span class="line">    obj[<span class="string">"剩余发出商品"</span>] = response.Rows[i].surplusp;</span><br><span class="line"></span><br><span class="line">    source.push(obj);   <span class="comment">// 记住push只适用于数组的元素添加，并返回数组元素个数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-javascript小知识点"><a href="#3-javascript小知识点" class="headerlink" title="3.javascript小知识点"></a>3.javascript小知识点</h3><blockquote><p>函数语法</p></blockquote><p>function function_name(param1,param2,…){code}<br>PS:不使用 () 访问函数将返回函数声明而不是函数结果</p><blockquote><p>js字符串长度</p></blockquote><p>易混点：<br>JavaScript字符串长度：str.length<br>php的字符串长度：count(string)<br>python的字符串长度：len(string)<br>jQuery中的length：表示query对象中元素个数 $(“div”).siblings().length=&gt;表示div标签的兄弟节点元素个数</p><blockquote><p>使用\ 转义字符</p></blockquote><p>\n表示换行</p><blockquote><p>&quot;==&quot; 与&quot;===&quot;：表示值相等，数据类型也相同</p></blockquote><p>&quot;==&quot;:表示值相等<br>&quot;===&quot;:表示值相等基础上，数据类型也相同</p><blockquote><p>str.slice(start，end)方法</p></blockquote><p>slice() 提取字符串的某个部分并在新字符串中返回被提取的部分。</p><p>该方法设置两个参数：起始索引（开始位置），终止索引（结束位置）。</p><blockquote><p>substring()方法</p></blockquote><p>substring() 类似于 slice()，不同之处在于 substring() 无法接受负的索引</p><blockquote><p>substr(start,length)</p></blockquote><p>第二个参数规定被提取部分的长度，如果省略第二个参数，则该 substr() 将裁剪字符串的剩余部分。</p><blockquote><p>str.replace(a,b) 用b替换a</p></blockquote><p>&#39;hello java&#39;.replace(&#39;java&#39;,&#39;python&#39;)</p><blockquote><p>转换为大小写</p></blockquote><p>str.toUpperCase()<br>str.toLowerCase()</p><blockquote><p>str.trim(“指定字符”)</p></blockquote><p>trim() 方法删除字符串两端的空白符或指定字符</p><blockquote><p>str.split(“指定字符”) </p></blockquote><p>以指定字符切割字符串，返回数组的形式</p><h3 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a>未完待续…</h3>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> clone </tag>
            
            <tag> push </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Memcached</title>
      <link href="/2019/11/20/Memcache/"/>
      <url>/2019/11/20/Memcache/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;Memcached是一个高性能的分布式的内存对象缓存系统，全世界有不少公司采用这个缓存项目来构建大负载的网站，来分担数据库的压力。Memcached是通过在内存里维护一个统一的巨大的hash表，memcached能存储各种各样的数据，包括图像、视频<font color=#FF4500>(但是极不推荐来保存二进制文件)</font>、文件、以及数据库检索的结果等。简单的说就是将数据调用到内存中，然后从内存中读取，从而大大提高读取速度。<br>&nbsp;&nbsp;&nbsp;<font color=#FF4500>适合使用Memcached：存储验证码（图形验证码、短信验证码）、登录session</font>等所有不是至关重要的数据(保存于内存中，关机后数据就会消失)</p><a id="more"></a><h2 id="1-安装memcached"><a href="#1-安装memcached" class="headerlink" title="1.安装memcached"></a>1.安装memcached</h2><p><a href="https://blog.csdn.net/qq_41717874/article/details/89472198" target="_blank" rel="noopener">参考docker创建memecached容器</a><br><a href="https://www.cnblogs.com/b-ruce/p/5639223.html" target="_blank" rel="noopener">windows下ThinkPHP3.2.3使用memcache缓存</a></p><h2 id="2-创建memcached镜像"><a href="#2-创建memcached镜像" class="headerlink" title="2.创建memcached镜像"></a>2.创建memcached镜像</h2><p>docker run -di –name=”memcached” -m 256m -p 11211:11211 memcached:[tag]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-d是启动一个守护进程；</span><br><span class="line">-m是分配给Memcache使用的内存数量，单位是MB；</span><br><span class="line">-u是运行Memcache的用户；</span><br><span class="line">-l是监听的服务器IP地址，可以有多个地址；</span><br><span class="line">-p是设置Memcache监听的端口，，最好是1024以上的端口；</span><br><span class="line">-c是最大运行的并发连接数，默认是1024；</span><br></pre></td></tr></table></figure><h2 id="3-测试并进入docker容器"><a href="#3-测试并进入docker容器" class="headerlink" title="3.测试并进入docker容器"></a>3.测试并进入docker容器</h2><blockquote><p>测试是否启动成功</p></blockquote><p>netstat -luntp|grep 11211或者docker ps</p><blockquote><p>安装telnet</p></blockquote><p>yum install -y telnet 或 sudo apt-get install telnet</p><blockquote><p>通过telnet方式连接memcached</p></blockquote><p>telnet 127.0.0.1 11211 或者使用 telnet ubuntu_ip docker_memcached_port</p><blockquote><p>设置值，age是key，0是标志位，900是生命周期，8代表所占字节数，回车之后的10是value</p></blockquote><p>set age 0 900 8<br>10</p><blockquote><p>获取值 </p></blockquote><p>get age</p><blockquote><p>退出</p></blockquote><p><del>exit</del><br>quit</p><h2 id="4-telnet操作memcached："><a href="#4-telnet操作memcached：" class="headerlink" title="4.telnet操作memcached："></a>4.telnet操作memcached：</h2><p>1.添加数据</p><ul><li>set语法：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> set key flas(是否压缩,默认为0，不压缩) timeout value_length</span><br><span class="line">  value</span><br><span class="line">示例：</span><br><span class="line">  set username 0 60 7</span><br><span class="line">  zhiliao</span><br><span class="line">``` </span><br><span class="line">  </span><br><span class="line">+ add语法：</span><br></pre></td></tr></table></figure>add key flas(0) timeout value_length<br>value<br>示例：<br>add username 0 60 7<br>xiaotuo<pre><code>set和add的区别：add是只负责添加数据，不会去修改数据。如果添加的数据的key已经存在了，则添加失败，如果添加的key不存在，则添加成功。而set不同，如果memcached中不存在相同的key，则进行添加，如果存在，则替换。</code></pre></li></ul><p>2.获取数据：get key_name</p><p>3.删除数据：delete key_name</p><p>4.删除memcached所有数据：flush_all</p><h2 id="5-memcached安全性"><a href="#5-memcached安全性" class="headerlink" title="5. memcached安全性"></a>5. memcached安全性</h2><p>memcached的操作不需要任何用户名和密码，只需要知道memcached服务器的ip地址和端口号即可。因此memcached使用的时候尤其要注意他的安全性。这里提供两种安全的解决方案。分别来进行讲解：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;1.使用-l参数设置为只有本地可以连接：这种方式，就只能通过本机才能连接，别的机器都不能访问，可以达到最好的安全性。<br>&nbsp;&nbsp;&nbsp;&nbsp;2.使用防火墙，关闭11211端口，外面也不能访问</p><h2 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a>未完待续…</h2>]]></content>
      
      
      <categories>
          
          <category> Memcached </category>
          
      </categories>
      
      
        <tags>
            
            <tag> thinkPHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript篇章二：js计算精度丢失</title>
      <link href="/2019/11/20/Javascript%E7%AF%87%E7%AB%A0%E4%BA%8C/"/>
      <url>/2019/11/20/Javascript%E7%AF%87%E7%AB%A0%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<p>在这一章节，我会着重表述js计算精确度丢失问题解决</p><a id="more"></a><h2 id="解决JS计算精确度丢失"><a href="#解决JS计算精确度丢失" class="headerlink" title="解决JS计算精确度丢失"></a>解决JS计算精确度丢失</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;创建calc.js文件，其调用方法参考&nbsp;&nbsp;<i class="far fa-hand-point-right"></i><a href="https://fioralove.github.io/2019/11/15/ThinkPHP/" target="_blank" rel="noopener">thinkphp项目调用Vue扩展函数方式</a></p><p><a href="https://www.cnblogs.com/wzl-learn/p/9790443.html" target="_blank" rel="noopener">参考文章</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.calc = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 千分位格式化函数</span></span><br><span class="line"><span class="comment">     * @param &#123;*&#125; number         要格式化的数字</span></span><br><span class="line"><span class="comment">     * @param &#123;*&#125; decimals       保留几位小数</span></span><br><span class="line"><span class="comment">     * @param &#123;*&#125; dec_point      小数点符号</span></span><br><span class="line"><span class="comment">     * @param &#123;*&#125; thousands_sep  千分位符号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    number_format(number, decimals, dec_point, thousands_sep) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">parseFloat</span>(number) == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">" - "</span>;</span><br><span class="line">        number = (number + <span class="string">''</span>).replace(<span class="regexp">/[^0-9+-Ee.]/g</span>, <span class="string">''</span>);</span><br><span class="line">        <span class="keyword">var</span> n = !<span class="built_in">isFinite</span>(+number) ? <span class="number">0</span> : +number,</span><br><span class="line">            decimals = (<span class="keyword">typeof</span> decimals === <span class="string">'undefined'</span>) ? <span class="number">2</span> : decimals,</span><br><span class="line">            prec = !<span class="built_in">isFinite</span>(+decimals) ? <span class="number">0</span> : <span class="built_in">Math</span>.abs(decimals),</span><br><span class="line">            sep = (<span class="keyword">typeof</span> thousands_sep === <span class="string">'undefined'</span>) ? <span class="string">','</span> : thousands_sep,</span><br><span class="line">            dec = (<span class="keyword">typeof</span> dec_point === <span class="string">'undefined'</span>) ? <span class="string">'.'</span> : dec_point,</span><br><span class="line">            s = <span class="string">''</span>,</span><br><span class="line">            toFixedFix = <span class="function"><span class="keyword">function</span> (<span class="params">n, prec</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> k = <span class="built_in">Math</span>.pow(<span class="number">10</span>, prec);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">''</span> + <span class="built_in">Math</span>.ceil(n * k) / k;</span><br><span class="line">            &#125;;</span><br><span class="line">     </span><br><span class="line">        s = (prec ? toFixedFix(n, prec) : <span class="string">''</span> + <span class="built_in">Math</span>.round(n)).split(<span class="string">'.'</span>);</span><br><span class="line">        <span class="keyword">var</span> re = <span class="regexp">/(-?\d+)(\d&#123;3&#125;)/</span>;</span><br><span class="line">        <span class="keyword">while</span> (re.test(s[<span class="number">0</span>])) &#123;</span><br><span class="line">            s[<span class="number">0</span>] = s[<span class="number">0</span>].replace(re, <span class="string">"$1"</span> + sep + <span class="string">"$2"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="keyword">if</span> ((s[<span class="number">1</span>] || <span class="string">''</span>).length &lt; prec) &#123;</span><br><span class="line">            s[<span class="number">1</span>] = s[<span class="number">1</span>] || <span class="string">''</span>;</span><br><span class="line">            s[<span class="number">1</span>] += <span class="keyword">new</span> <span class="built_in">Array</span>(prec - s[<span class="number">1</span>].length + <span class="number">1</span>).join(<span class="string">'0'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.join(dec);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加法函数，用来得到精确的加法结果</span></span><br><span class="line"><span class="comment">     * 说明：javascript的加法结果会有误差，在两个浮点数相加的时候会比较明显。这个函数返回较为精确的加法结果。</span></span><br><span class="line"><span class="comment">     * 调用：accAdd(arg1,arg2)</span></span><br><span class="line"><span class="comment">     * 返回值：arg1加上arg2的精确结果</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    accAdd: <span class="function"><span class="keyword">function</span>(<span class="params">arg1, arg2</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> r1, r2, m, c;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            r1 = arg1.toString().split(<span class="string">"."</span>)[<span class="number">1</span>].length;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            r1 = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            r2 = arg2.toString().split(<span class="string">"."</span>)[<span class="number">1</span>].length;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            r2 = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">Math</span>.abs(r1 - r2);</span><br><span class="line">        m = <span class="built_in">Math</span>.pow(<span class="number">10</span>, <span class="built_in">Math</span>.max(r1, r2));</span><br><span class="line">        <span class="keyword">if</span> (c &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> cm = <span class="built_in">Math</span>.pow(<span class="number">10</span>, c);</span><br><span class="line">            <span class="keyword">if</span> (r1 &gt; r2) &#123;</span><br><span class="line">                arg1 = <span class="built_in">Number</span>(arg1.toString().replace(<span class="string">"."</span>, <span class="string">""</span>));</span><br><span class="line">                arg2 = <span class="built_in">Number</span>(arg2.toString().replace(<span class="string">"."</span>, <span class="string">""</span>)) * cm;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                arg1 = <span class="built_in">Number</span>(arg1.toString().replace(<span class="string">"."</span>, <span class="string">""</span>)) * cm;</span><br><span class="line">                arg2 = <span class="built_in">Number</span>(arg2.toString().replace(<span class="string">"."</span>, <span class="string">""</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            arg1 = <span class="built_in">Number</span>(arg1.toString().replace(<span class="string">"."</span>, <span class="string">""</span>));</span><br><span class="line">            arg2 = <span class="built_in">Number</span>(arg2.toString().replace(<span class="string">"."</span>, <span class="string">""</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (arg1 + arg2) / m;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 减法函数，用来得到精确的减法结果</span></span><br><span class="line"><span class="comment">     * 说明：javascript的减法结果会有误差，在两个浮点数相减的时候会比较明显。这个函数返回较为精确的减法结果。</span></span><br><span class="line"><span class="comment">     * 调用：accSub(arg1,arg2)</span></span><br><span class="line"><span class="comment">     * 返回值：arg1加上arg2的精确结果</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    accSub: <span class="function"><span class="keyword">function</span>(<span class="params">arg1, arg2</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> r1, r2, m, n;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            r1 = arg1.toString().split(<span class="string">"."</span>)[<span class="number">1</span>].length;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            r1 = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            r2 = arg2.toString().split(<span class="string">"."</span>)[<span class="number">1</span>].length;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            r2 = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        m = <span class="built_in">Math</span>.pow(<span class="number">10</span>, <span class="built_in">Math</span>.max(r1, r2)); <span class="comment">//last modify by deeka //动态控制精度长度</span></span><br><span class="line">        n = (r1 &gt;= r2) ? r1 : r2;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">parseFloat</span>(((arg1 * m - arg2 * m) / m).toFixed(n));</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//乘法函数，用来得到精确的乘法结果 </span></span><br><span class="line">    <span class="comment">//说明：javascript的乘法结果会有误差，在两个浮点数相乘的时候会比较明显。这个函数返回较为精确的乘法结果。 </span></span><br><span class="line">    <span class="comment">//调用：accMul(arg1,arg2) </span></span><br><span class="line">    <span class="comment">//返回值：arg1乘以arg2的精确结果 </span></span><br><span class="line">    accMul: <span class="function"><span class="keyword">function</span>(<span class="params">arg1,arg2</span>) </span>&#123; </span><br><span class="line">        <span class="keyword">var</span> m = <span class="number">0</span>,</span><br><span class="line">            s1 = arg1.toString(),</span><br><span class="line">            s2 = arg2.toString();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m += s1.split(<span class="string">"."</span>)[<span class="number">1</span>].length</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m += s2.split(<span class="string">"."</span>)[<span class="number">1</span>].length</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Number</span>(s1.replace(<span class="string">"."</span>, <span class="string">""</span>)) * <span class="built_in">Number</span>(s2.replace(<span class="string">"."</span>, <span class="string">""</span>)) / <span class="built_in">Math</span>.pow(<span class="number">10</span>, m);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//除法函数，用来得到精确的除法结果 </span></span><br><span class="line">    <span class="comment">//说明：javascript的除法结果会有误差，在两个浮点数相除的时候会比较明显。这个函数返回较为精确的除法结果。 </span></span><br><span class="line">    <span class="comment">//调用：accDiv(arg1,arg2) </span></span><br><span class="line">    <span class="comment">//返回值：arg1除以arg2的精确结果 </span></span><br><span class="line">    accDiv: <span class="function"><span class="keyword">function</span>(<span class="params">arg1, arg2</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> t1 = <span class="number">0</span>,</span><br><span class="line">            t2 = <span class="number">0</span>,</span><br><span class="line">            r1, r2;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t1 = arg1.toString().split(<span class="string">"."</span>)[<span class="number">1</span>].length</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t2 = arg2.toString().split(<span class="string">"."</span>)[<span class="number">1</span>].length</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">        <span class="keyword">with</span>(<span class="built_in">Math</span>) &#123;</span><br><span class="line">            r1 = <span class="built_in">Number</span>(arg1.toString().replace(<span class="string">"."</span>, <span class="string">""</span>));</span><br><span class="line">            r2 = <span class="built_in">Number</span>(arg2.toString().replace(<span class="string">"."</span>, <span class="string">""</span>));</span><br><span class="line">            <span class="keyword">return</span> (r1 / r2) * pow(<span class="number">10</span>, t2 - t1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Javascript篇章二：js数字，数组与日期</title>
      <link href="/2019/11/20/Javascript%E7%AF%87%E7%AB%A0%E4%B8%89/"/>
      <url>/2019/11/20/Javascript%E7%AF%87%E7%AB%A0%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="1-数值方法"><a href="#1-数值方法" class="headerlink" title="1.数值方法"></a>1.数值方法</h2><blockquote><p>number.toString():将数值型转化为字符串型</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">15</span>; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(n));  <span class="comment">// 为字数值类型number</span></span><br><span class="line">a = n.toString();  <span class="comment">// a为字符串类型</span></span><br></pre></td></tr></table></figure><blockquote><p>toFixed(number) 返回保留指定小数位数的数值</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">9.656</span>;</span><br><span class="line">x.toFixed(<span class="number">0</span>);           <span class="comment">// 返回 10</span></span><br><span class="line">x.toFixed(<span class="number">2</span>);           <span class="comment">// 返回 9.66</span></span><br><span class="line">x.toFixed(<span class="number">4</span>);           <span class="comment">// 返回 9.6560</span></span><br><span class="line">x.toFixed(<span class="number">6</span>);           <span class="comment">// 返回 9.656000</span></span><br></pre></td></tr></table></figure><blockquote><p>把变量转换为数值</p></blockquote><p>这三种 JavaScript 方法可用于将变量转换为数字：</p><ul><li>Number() 方法</li><li>parseFloat(string) 方法:指定字符串的首个字符是否是数字。如果首字符为数字，则对其进行解析直到完整取出第一个数值，并返回首个数值，如果首字符不是数字则直接返回NaN</li><li>parseInt(string，radix) 方法:指定字符串的首个字符是否是数字。如果首字符为数字，将字符串取出首个完整数值，并转化为指定radix进制，如果首字符不是数字，就直接返回NaN</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">"10.008"</span>);      <span class="comment">// 返回 10</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"10.33"</span>);      <span class="comment">// 返回 10</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"10 20 30"</span>);   <span class="comment">// 返回 10</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"10 years"</span>);   <span class="comment">// 返回 10</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"years 10"</span>);   <span class="comment">// 返回 NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"30"</span>,<span class="number">8</span>);       <span class="comment">// 返回24，将30转化为8进制</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">"10"</span>);         <span class="comment">// 返回 10</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">"10.33"</span>);      <span class="comment">// 返回 10.33</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">"10 20 30"</span>);   <span class="comment">// 返回 10</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">"10 years"</span>);   <span class="comment">// 返回 10</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">"years 10"</span>);   <span class="comment">// 返回 NaN</span></span><br></pre></td></tr></table></figure><h2 id="2-数组"><a href="#2-数组" class="headerlink" title="2.数组"></a>2.数组</h2><blockquote><p>数组是一种特殊的变量，它能够一次存放一个以上的值。</p></blockquote><p>var cars=[“Saab”,”Volov”,”BMW”];</p><blockquote><p>访问数组元素：通过索引（从0开始，下标号）来引用某个数组元素</p></blockquote><p>var name=car[0]  访问数组值<br>var car[0] = “Benz”  修改数组值，即新数组为[“Benz”,”Volov”,”BMW”]</p><h3 id="数组属性和方法"><a href="#数组属性和方法" class="headerlink" title="数组属性和方法"></a>数组属性和方法</h3><ol><li><p>length:返回数组元素的数目</p></li><li><p>遍历数组元素：最安全是使用for循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits;</span><br><span class="line">fruits = [<span class="string">"Banana"</span>, <span class="string">"Orange"</span>, <span class="string">"Apple"</span>, <span class="string">"Mango"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; fruits.length; i++) &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(fruits[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>向数组添加新元素的最佳方法是使用 push() 方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fruits = [<span class="string">"Banana"</span>, <span class="string">"Orange"</span>, <span class="string">"Apple"</span>, <span class="string">"Mango"</span>];</span><br><span class="line">fruits.push(<span class="string">"Lemon"</span>);                <span class="comment">// 向 fruits 添加一个新元素 (Lemon),并返回数组元素个数</span></span><br></pre></td></tr></table></figure></li><li><p>join() 方法也可将所有数组元素结合为一个字符串</p></li></ol><p>格式：数组名.join(“指定拼接符”)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">"Banana"</span>, <span class="string">"Orange"</span>,<span class="string">"Apple"</span>, <span class="string">"Mango"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(fruits.join(<span class="string">" * "</span>));</span><br><span class="line"><span class="comment">// Banana * Orange * Apple * Mango</span></span><br></pre></td></tr></table></figure><ol start="5"><li><p>pop()从数组中删除最后一个元素,并返回该值<br>var fruits = [“Banana”, “Orange”, “Apple”, “Mango”];<br>var x = fruits.pop();       // x 的值是 “Mango”</p></li><li><p>sort()方法以字母顺序对数组进行排序</p></li><li><p>reverse()反转数组中的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">"Banana"</span>, <span class="string">"Orange"</span>, <span class="string">"Apple"</span>, <span class="string">"Mango"</span>];</span><br><span class="line">fruits.sort();            <span class="comment">// 对 fruits 中的元素进行排序</span></span><br><span class="line">fruitS.reverse();         <span class="comment">// 对数组元素进行反转</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="3-日期"><a href="#3-日期" class="headerlink" title="3.日期"></a>3.日期</h2><p>使用方法：<br>var d = new Date();<br>d.getDate()/d.getFullYear()…</p><table><thead><tr><th align="right">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="right">getDate()</td><td align="left">以数值返回天（1-31）</td></tr><tr><td align="right">getDay()</td><td align="left">以数值获取周名（0-6）</td></tr><tr><td align="right">getFullYear()</td><td align="left">获取四位的年（yyyy）</td></tr><tr><td align="right">getHours()</td><td align="left">获取小时（0-23）</td></tr><tr><td align="right">getMilliseconds()</td><td align="left">获取毫秒（0-999）</td></tr><tr><td align="right">getMinutes()</td><td align="left">获取分（0-59）</td></tr><tr><td align="right">getMonth()</td><td align="left">获取月（0-11）</td></tr><tr><td align="right">getSeconds()</td><td align="left">获取秒（0-59）</td></tr><tr><td align="right">getTime()</td><td align="left">获取时间（从 1970 年 1 月 1 日至今）</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>docker开发环境系列部署</title>
      <link href="/2019/11/19/docker%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
      <url>/2019/11/19/docker%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<p><font color=#00CD00>docker系列章节更新（二），这一章节主要收集并亲测docker部署各种各样的生产，开发环境。比如Nginx+Tomcat实现负载均衡，tomcat集群</font></p><ul><li>搭建python3+django+mysql开发环境</li><li>Docker实现Nginx和Tomcat负载均衡<a id="more"></a></li></ul><h2 id="1-python3-Django-MySQL部署Django项目集群"><a href="#1-python3-Django-MySQL部署Django项目集群" class="headerlink" title="1.python3+Django+MySQL部署Django项目集群"></a>1.<a href="https://blog.csdn.net/geek_xiong/article/details/92721957" target="_blank" rel="noopener">python3+Django+MySQL部署Django项目集群</a></h2><h4 id="1-1-宿主机上创建工程目录site，并进入该目录"><a href="#1-1-宿主机上创建工程目录site，并进入该目录" class="headerlink" title="1.1 宿主机上创建工程目录site，并进入该目录"></a>1.1 宿主机上创建工程目录site，并进入该目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">项目目录结构：</span><br><span class="line">site</span><br><span class="line">    |__achievements</span><br><span class="line">    |__db</span><br><span class="line">    |__Dockerfile</span><br><span class="line">    |__doocker-compose.yml</span><br><span class="line">    |__requirements.txt</span><br></pre></td></tr></table></figure><h4 id="1-2-参考两篇优秀博文"><a href="#1-2-参考两篇优秀博文" class="headerlink" title="1.2 参考两篇优秀博文"></a>1.2 参考两篇优秀博文</h4><p><a href="https://blog.csdn.net/geek_xiong/article/details/92721957" target="_blank" rel="noopener">离未罔两|Docker—-搭建python3+django+mysql开发环境</a><br><a href="https://blog.csdn.net/qq_25639809/article/details/78958647" target="_blank" rel="noopener">冰凉的枷锁lax|Docker搭建Python+Django+mysql开发环境</a></p><h2 id="2-Docker实现Nginx和Tomcat负载均衡"><a href="#2-Docker实现Nginx和Tomcat负载均衡" class="headerlink" title="2. Docker实现Nginx和Tomcat负载均衡"></a>2. Docker实现Nginx和Tomcat负载均衡</h2><p><a href="https://blog.csdn.net/u014106644/article/details/83152366" target="_blank" rel="noopener">暗夜猎手-大魔王|使用docker搭建高并发网站架构实践2–Docker实现Nginx和Tomcat负载均衡</a><br><fancybox><img src="https://img-blog.csdn.net/20181018202515672?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQxMDY2NDQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></fancybox></p><p><a href="https://blog.csdn.net/bbwangj/article/details/81005982" target="_blank" rel="noopener">菲宇|Docker下Nginx+Tomcat实现负载均衡</a><br><fancybox><img src="https://img-blog.csdn.net/20181012094800471?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Jid2FuZ2o=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></fancybox></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> python+Django+MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python模拟登录淘宝(Ⅰ)</title>
      <link href="/2019/11/18/requests%E5%BA%93%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95%E6%B7%98%E5%AE%9D(%E2%85%A0)/"/>
      <url>/2019/11/18/requests%E5%BA%93%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95%E6%B7%98%E5%AE%9D(%E2%85%A0)/</url>
      
        <content type="html"><![CDATA[<p>讲模拟登录淘宝之前，我们来回顾一下之前用requests库模拟登录GitHub和新浪微博的过程:<font color=#00CD00>这一类模拟登录是比较简单的登录，只需要在请求登录时将用户名和密码上传验证通过就成功了</font>，也就是说一步到位！而淘宝登录就比较复杂，为什么说复杂呢？因为淘宝登录涉及参数多且请求不止一次！</p><a id="more"></a><p><a href="https://blog.csdn.net/u014044812/article/details/99584382" target="_blank" rel="noopener">参考文章~裸睡的猪</a></p><pre>淘宝系列欲更新文章内容：    第一篇：Python模拟登录淘宝，详细讲解如何使用requests库登录淘宝pc端。    第二篇：淘宝自动登录2.0，新增Cookies序列化，教大家如何将cookies保存起来。    第三篇：Python爬取淘宝商品避孕套，教大家如何爬取淘宝pc端商品信息。    第四篇：Python分析2000款避孕套，教大家如何做数据分析得出结论。    ————————————————</pre><h4 id="1-淘宝登录流程"><a href="#1-淘宝登录流程" class="headerlink" title="1.淘宝登录流程"></a>1.淘宝登录流程</h4>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Requests </tag>
            
            <tag> POST请求 </tag>
            
            <tag> token </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git命令总结</title>
      <link href="/2019/11/18/git%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
      <url>/2019/11/18/git%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<p>总结一下自己常用的git命令<br><fancybox><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=1192836097,3318398259&fm=26&gp=0.jpg"></fancybox></p><a id="more"></a><ol><li><p>安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”</p></li><li><p>git config –global user.name “Your Name”<br>git config –global user.email “<a href="mailto:email@example.com" target="_blank" rel="noopener">email@example.com</a>“</p></li><li><p>cd F: (打开F盘)<br>mkdir <name> (创建子目录)<br>pwd (显示当前目录)</p></li><li><p>git init (把这个目录变成Git可以管理的仓库)</p></li><li><p>git add <file></p></li><li><p>git commit -m “说明”</p></li><li><p>git status (仓库当前的状态)</p></li><li><p>git diff (查看不同)</p></li><li><p>git log [–pretty=oneline  {缩略版,可选}] (查看历史记录)</p></li><li><p>git reset –hard HEAD^ (回退到上一个版本,HEAD后可以是 commit_id)</p></li><li><p>git reflog (用来记录你的每一次命令,找到commit_id回到未来某个版本)</p></li><li><p>git diff HEAD – <file> (查看工作区和版本库里面最新版本的区别)</p></li><li><p>git checkout – <file> (用版本库里的版本替换工作区的版本，无论工作区是修改还是删除)</p></li><li><p>git reset HEAD <file> (把暂存区的修改撤销掉（unstage），重新放回工作区. 用HEAD时，表示最新的版本)</p></li><li><p>git rm (用于删除一个文件)</p></li><li><p>ssh-keygen -t rsa -C “<a href="mailto:youremail@example.com" target="_blank" rel="noopener">youremail@example.com</a>“ (创建SSH Key)</p></li><li><p>git remote add origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:Bruce333/other.git (关联github远程库)</p></li><li><p>git push -u origin master/git push origin master<br>(推送到远程库,第一次用含有 -u 的命令,推送master分支的所有内容,此后用后面的命令推送最新修改)</p></li><li><p>git clone <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:Bruce333/other.git (克隆一个本地库)</p></li><li><p>git checkout -b dev<br>(创建dev分支，然后切换到dev分支,相当于以下两条命令:git branch dev[创建分支]/git checkout dev[切换分支])</p></li><li><p>git branch (列出所有分支，当前分支前面会标一个*号)</p></li><li><p>git checkout master (切换到master分支)</p></li><li><p>git merge dev (合并指定分支到当前分支)</p></li><li><p>git branch -d dev (删除dev分支)</p></li><li><p>git log –graph (查看分支合并图)</p></li><li><p>git merge –no-ff -m “merge with no-ff” dev<br>(通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息;–no-ff表示禁用Fast forward,用普通模式合并，合并后的历史有分支，能看出来曾经做过合并;-m参数，把commit描述写进去)</p></li><li><p>git stash (把当前工作现场“储藏”起来，等以后恢复现场后继续工作)</p></li><li><p>git stash list (查看工作现场) / git stash apply stash@{0} ()</p></li><li><p>git stash pop (恢复的同时把stash内容也删了,相当于:git stash apply[恢复]/git stash drop[删除])</p></li><li><p>git branch -D <name> (强行删除一个没有被合并过的分支)</p></li><li><p>git remote (查看远程库的信息) / git remote -v (显示更详细的信息)</p></li><li><p>git checkout -b branch-name origin/branch-name (在本地创建和远程分支对应的分支,本地和远程分支的名称最好一致)</p></li><li><p>从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交</p></li><li><p>git pull<br>(把最新的提交抓下来;如果提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，<br>用命令git branch –set-upstream branch-name origin/branch-name)</p></li><li><p>git tag <name> &lt;commit id 可无&gt;<br>(打一个新标签,默认标签是打在最新提交的commit上的;找到历史提交的commit id,可以给历史版本打标签)</p></li><li><p>git show <tagname> (查看标签信息)</p></li><li><p>git tag (查看所有标签)</p></li><li><p>git tag -a <tagname> -m “blablabla…” (指定标签信息)</p></li><li><p>git tag -s <tagname> -m “blablabla…” (用PGP签名标签)</p></li><li><p>git tag -d <name> (删除标签)</p></li><li><p>git push origin <tagname> (推送某个标签到远程)</p></li><li><p>git push origin –tags (一次性推送全部尚未推送到远程的本地标签)</p></li><li><p>git tag -d <tagname> (删除一个本地标签)</p></li><li><p>git push origin :refs/tags/<tagname> (删除一个远程标签)</p></li><li><p>git config –global color.ui true (让Git适当地显示不同的颜色)</p></li><li><p>忽略某些文件时，需要编写.gitignore；.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理</p></li><li><p>git config –global alias.st status<br>(告诉Git，以后st就表示status,配置别名;加上–global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用;每个仓库的Git配置文件都放在.git/config文件中,别名就在[alias]后面，要删除别名，直接把对应的行删掉即可;而当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中)</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThinkPHP</title>
      <link href="/2019/11/15/ThinkPHP/"/>
      <url>/2019/11/15/ThinkPHP/</url>
      
        <content type="html"><![CDATA[<p>最近一直在做一个有关于ThinkPHP的前后分离的移动报表项目。记录从建彬师傅那里学到的知识以及自己遇到的一些问题</p><p>涉及到的知识点包含：jQuery、Vue、PHP、Echarts、Bootstrap、HTML+CSS+JavaScript。。。</p><blockquote><p>js的push()<br>js的clone()</p></blockquote><a id="more"></a><h3 id="1-js的clone-与push函数的一些生活纠纷"><a href="#1-js的clone-与push函数的一些生活纠纷" class="headerlink" title="1.js的clone()与push函数的一些生活纠纷"></a>1.js的clone()与push函数的一些生活纠纷</h3><blockquote><p>push()函数：向数组的末尾添加一个或多个元素，并返回新的长度。返回值是把指定的值添加到数组后的新长度<br>语法：arrayObject.push(newelement1,newelement2,….)</p></blockquote><p>push() 方法可把它的参数顺序添加到 arrayObject（数组对象）的尾部。它直接修改 arrayObject，而不是创建一个新的数组，而是在原数组基础上修改。push() 方法和 pop() 方法使用数组提供的先进后出栈的功能，该方法会改变数组的长度。</p><p>案例1：push()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>);</span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">"chd"</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">"sjb"</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="string">"sgx"</span>;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//输出原素组 ['chd','sjb','sgx']</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.push(<span class="string">"badwoman"</span>));  <span class="comment">// 输出 4</span></span><br></pre></td></tr></table></figure><p>PS:来了，push添加元素之后没有直接输出添加元素之后的数组，只显示了数组的个数（长度）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 展示push后的新数组</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>);</span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">"chd"</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">"sjb"</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="string">"sgx"</span>;</span><br><span class="line">arr.push(<span class="string">'badwoman'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">//输出结果为：['chd','sjb','sgx','badwoman']</span></span><br></pre></td></tr></table></figure><blockquote><p>js的clone()函数</p></blockquote><p>js对象之间的赋值，如果直接用”=”会发现来两个对象还是同一个对象，改变其中一个另外的一个也会做出对应的改变。为了解决这个问题，可以利用java里面的clone的原理。<br>假设有这样一个场景：当存在一个公共数组(对象型)时，一个需要加{“name”:”chd”,”age”:18}另一个需要在数组尾加上{“name”:”sgx”,”age”:108}</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> commonCondition=[&#123;<span class="string">"id"</span>:<span class="number">15</span>&#125;];</span><br><span class="line"><span class="keyword">let</span> a=&#123;<span class="string">"name"</span>:<span class="string">"chd"</span>,<span class="string">"age"</span>:<span class="number">18</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> b=&#123;<span class="string">"name"</span>:<span class="string">"sgx"</span>,<span class="string">"age"</span>:<span class="number">108</span>&#125;;</span><br><span class="line"><span class="comment">// 当我们利用a = commonCondition.push(a)时，此时原来的commonCondition也会跟着改变</span></span><br><span class="line"><span class="comment">// 赋值b = commonCondition.push(b)。此时，b中也会包含a的数据，此刻js的clone函数就出现了</span></span><br></pre></td></tr></table></figure><p>js的clone()函数源代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">Obj</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> o;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> obj == <span class="string">"object"</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (obj === <span class="literal">null</span>) &#123;</span><br><span class="line">                o = <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">                    o = [];</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = obj.length; i &lt; len; i++) &#123;</span><br><span class="line">                        o.push(<span class="keyword">this</span>.clone(obj[i])); <span class="comment">// 有可能不要this</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    o = &#123;&#125;;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> j <span class="keyword">in</span> obj) &#123;</span><br><span class="line">                        o[j] = <span class="keyword">this</span>.clone(obj[j]);  <span class="comment">// 有可能不要this</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            o = obj;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>即此刻，我们才有如下最正确的式子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> new_a = clone(commonCondition);</span><br><span class="line">a = new_a.push(a);</span><br><span class="line"><span class="keyword">let</span> new_b = clone(commonCondition);</span><br><span class="line">b = new_b.push(b);</span><br></pre></td></tr></table></figure><h3 id="2-thinkphp项目调用Vue扩展函数方式"><a href="#2-thinkphp项目调用Vue扩展函数方式" class="headerlink" title="2. thinkphp项目调用Vue扩展函数方式"></a>2. thinkphp项目调用Vue扩展函数方式</h3><p>2.1 导入vue扩展包.js文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./cf.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.2 声明方法：新建一个与项目名同名的js文件，新增如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Vue.prototype.项目名 = &#123;</span><br><span class="line">    // 这里表示扩展函数</span><br><span class="line">    函数名一:function(obj)&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;,</span><br><span class="line">    函数名二:function(obj)&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.3 调用方法：<del>Vue实例化名.</del>  项目名.函数名()<br><del>Vue实力化名即：let app = new Vue({})中的app</del>,经过测试后，调用方法为 项目名.函数名（）</p><h3 id="3-thinkPHP的变量输出知识-lt-函数名-变量名-gt-中的冒号-quot-quot-表示引用调用函数，获取变量值"><a href="#3-thinkPHP的变量输出知识-lt-函数名-变量名-gt-中的冒号-quot-quot-表示引用调用函数，获取变量值" class="headerlink" title="3.thinkPHP的变量输出知识&lt;{:函数名/变量名}&gt; 中的冒号&quot;:&quot;表示引用调用函数，获取变量值"></a>3.thinkPHP的变量输出知识&lt;{:函数名/变量名}&gt; 中的冒号&quot;:&quot;表示引用调用函数，获取变量值</h3><blockquote><p>&lt;{:U(query)}&gt;:URL生成<a href="http://serverName/projectName/当前模块/当前控制器/声明的方法" target="_blank" rel="noopener">http://serverName/projectName/当前模块/当前控制器/声明的方法</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">默认的模板标签为：在config.php文件下更改设置</span><br><span class="line">&apos;TMPL_L_DELIM&apos;=&gt;&apos;&lt;&#123;&apos;,</span><br><span class="line">&apos;TMPL_R_DELIM&apos;=&gt;&apos;&#125;&gt;&apos;,</span><br></pre></td></tr></table></figure><blockquote><p>&lt;{:I(‘name’,’chd’)}&gt;中的I方法获取自定义参数值，不存在时，自定义默认值</p></blockquote><p>I(‘get.name’); // 相当于 $_GET[‘name’]支持默认值：</p><h3 id="4-ThinkPHP的memcached缓存机制"><a href="#4-ThinkPHP的memcached缓存机制" class="headerlink" title="4. ThinkPHP的memcached缓存机制"></a>4. ThinkPHP的memcached缓存机制</h3><blockquote><p>4.1 下载安装memcached，并启动其服务</p></blockquote><p> <a href="https://blog.csdn.net/qq_41717874/article/details/89472198" target="_blank" rel="noopener">参考docker创建memecached容器</a><br> <a href="https://www.cnblogs.com/b-ruce/p/5639223.html" target="_blank" rel="noopener">windows下ThinkPHP3.2.3使用memcache缓存</a></p><blockquote><p>4.2thinkphp3.2中其实已经加入了memcached缓存机制，只需要在Conf/config.php配置数据缓存类型即可使用Memcache:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;? php </span><br><span class="line">    return array(</span><br><span class="line">    &apos;DATA_CACHE_TYPE&apos; =&gt; &apos;Memcache&apos;,  // 数据缓存类型 </span><br><span class="line">    &apos;MEMCACHE_HOST&apos;   =&gt; &apos;tcp://127.0.0.1:11211&apos;, </span><br><span class="line">    &apos;DATA_CACHE_TIME&apos; =&gt; &apos;3600&apos;</span><br><span class="line">    )</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ThinkPHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> API </tag>
            
            <tag> Ajax </tag>
            
            <tag> CSS </tag>
            
            <tag> $.post() </tag>
            
            <tag> thinkPHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSON通常用于与服务端交换数据,在向服务器发送数据时一般是字符串</title>
      <link href="/2019/11/14/json/"/>
      <url>/2019/11/14/json/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;json语法规则</p><ul><li>数据在名称/值对中</li><li>数据由逗号分隔</li><li>大括号保存对象</li><li>中括号保存数组<br>PS:json键值对一定要用双引号包裹起来<a id="more"></a></li></ul><h3 id="1-Python的json规则"><a href="#1-Python的json规则" class="headerlink" title="1.Python的json规则"></a>1.Python的json规则</h3><p>python程序中的json有一点点区别于JavaScript中的json，它是通过对象和数组的组合来表示数据</p><blockquote><p>对象型数组</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;它在JavaScript是使用花括号{}包裹起来的内容，数据结构为{key1:value1,key2:value2…}的键值对结构，key为对象的属性，value为对应的值。键名可以使用整数和字符串来表示，<br>所以，一个json对象跨用写作如下格式(对象型数组)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"chd"</span>,</span><br><span class="line">  <span class="attr">"age"</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">"sex"</span>: <span class="string">"man"</span></span><br><span class="line">  &#125;,&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"Monica"</span>,</span><br><span class="line">  <span class="attr">"gender"</span>: <span class="string">"woman"</span>,</span><br><span class="line">  <span class="attr">"birthday"</span>: <span class="string">"1997-1-25"</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><blockquote><p>调用方式:通过中括号加0索引，可以得到第一个字典元素，然后调用其键名即可得到相应的键值</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;调用方式一：中括号加键名<br>data[index][“键名”] =&gt; data[0][‘name’]，结果为‘chd’<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;调用方式二：get()方法传入键名，如果键名不存在，不会报错，会返回none（python中推荐使用）<br>data[index].get(‘键名’) =&gt; data[1].get(“birthday”),结果为”1997-1-25”</p><h3 id="javascript中的json"><a href="#javascript中的json" class="headerlink" title="javascript中的json"></a>javascript中的json</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var stu = &#123;&quot;student&quot;:           //stu 对象包含student的key,值为一个数组</span><br><span class="line">            [                                     //数组的每一个值为一个具体的学生对象</span><br><span class="line">                &#123;&quot;name&quot;: &quot;Tom&quot;,&quot;Grade&quot;:1, &quot;age&quot;:11, &quot;gender&quot;: &quot;M&quot;&#125;,     //学生对象的键为名字,值为对应属性</span><br><span class="line">                &#123;&quot;name&quot;: &quot;Jerry&quot;, &quot;Grade&quot;:1, &quot;age&quot;:10, &quot;gender&quot;: &quot;M&quot;&#125;       //每个属性对应的是一个key,value对</span><br><span class="line">            ],</span><br><span class="line">            &quot;classroom&quot;: &#123;&quot;class1&quot;: &quot;room1&quot;, &quot;class2&quot;: &quot;room2&quot;&#125;         //对象的值,嵌套对象</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure><blockquote><p>json.parse()方法将数据转换为 JavaScript 对象</p></blockquote><blockquote><p>json.stringify() 方法将 JavaScript 对象转换为字符串。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> json </category>
          
      </categories>
      
      
        <tags>
            
            <tag> json.parse() </tag>
            
            <tag> json.stringify() </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库存储引擎与索引,视图</title>
      <link href="/2019/11/12/mysql(%E4%BA%8C)/"/>
      <url>/2019/11/12/mysql(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;MySQL支持多种存储引擎，以适用于不同领域的数据库应用需要，用户可以根据需要进行选择甚至是定制自己的引擎以提高应用效率。</p><ul><li>索引概述</li><li>索引作用</li><li>视图</li><li>视图的操作</li></ul><a id="more"></a><h3 id="1-索引概述"><a href="#1-索引概述" class="headerlink" title="1.索引概述"></a>1.索引概述</h3><p>索引在创建表的时候可以同时创建，也可以随时增加新的索引<br>创建新索引的语法为:<br>create [unique|fulltext|spatial] index index_name [using index_type] on table_name( col_name [(length)] [asc|desc])<br>删除索引： DROP INDEX index_name on table_name</p><h3 id="2-索引作用"><a href="#2-索引作用" class="headerlink" title="2.索引作用"></a>2.索引作用</h3><p>合理的创建索引是提高查询速度最有效的方式之一。<br>&nbsp;&nbsp;&nbsp;&nbsp;在没有建立索引的情况下，查询一条数据的过程是这样：<br>MySQL是从第一条记录开始查表，在某一个地方查到了匹配的数据，停止？NO，继续查询剩下的数据，直到查完整张表。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;在建立合适索引的情况下，查询一条数据的过程又是这样：<br>MySQL先根据索引快速到达一个位置去搜索数据文件，然后查出数据，而不必查看整张表的数据。<br>因此，为了提高查询速度，合理建立索引是非常有必要的。</p><hr><table><thead><tr><th>类型</th><th align="center">描述</th></tr></thead><tbody><tr><td>普通索引</td><td align="center">基本的索引类型，允许定义索引的列中插入重复值和空值</td></tr><tr><td>唯一索引</td><td align="center">索引列值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一</td></tr><tr><td>主键索引</td><td align="center">特殊的唯一索引，不允许有空值</td></tr><tr><td>全文索引</td><td align="center">类型为FULLTEXT,支持值的全文查找，允许在索引列中插入重复值和空值</td></tr><tr><td>组合索引</td><td align="center">在表的多个字段组合上创建的索引</td></tr></tbody></table><h3 id="3-视图（5-0-1提供视图功能）"><a href="#3-视图（5-0-1提供视图功能）" class="headerlink" title="3.视图（5.0.1提供视图功能）"></a>3.视图（5.0.1提供视图功能）</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;视图是一种虚拟存在的表，它存储的是查询语句，显示出来的是查询的结果；更直白的说就是当我们需要从表中查询一些信息时需要编写相关SQL语句，将这些SQL语句存储为视图，那么我们调用这些视图的时候就相当于执行了SQL语句，从而可以得到想要的结果<br>eg:创建视图并执行查询操作<br> create view view_name as select qty,price,qty*price as value from temp;</p><h4 id="视图有什么作用"><a href="#视图有什么作用" class="headerlink" title="视图有什么作用"></a>视图有什么作用</h4><blockquote><p>1.视图就像是一个封装了很多功能的函数，我们把一系列复杂的查询语句存储为一个视图，这样在需要频繁使用这些语句时不必反复编写，直接使用视图代替即可</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">如果要频繁获取表user的name和表goods的name。就应该使用以下sql语句：</span><br><span class="line">select a.name as username, b.name as goodsname from user as a, goods as b, ug as c where a.id=c.userid and c.goodsid=b.id;</span><br><span class="line"></span><br><span class="line">但有了视图就不一样了，创建视图other。示例</span><br><span class="line">create view other as select a.name as username, b.name as goodsname from user as a, goods as b, ug as c where a.id=c.userid and c.goodsid=b.id;</span><br><span class="line"></span><br><span class="line">创建好视图后，就可以这样获取user的name和goods的name：</span><br><span class="line"> select * from other;</span><br></pre></td></tr></table></figure><blockquote><p>2.对数据库进行重构但仍不会影响程序运行</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">假如因为某种需求，需要将user表拆成表usera和表userb，该两张表的结构如下：</span><br><span class="line">        测试表:usera有id，name，age字段</span><br><span class="line">        测试表:userb有id，name，sex字段</span><br><span class="line">这时如果程序端一直使用的sql语句是：select * from user;那就会报错提示该表不存在，这时要么去更改程序的查询语句要么就创建视图。显然，创建视图更简单，成本更低。</span><br><span class="line">以下sql语句创建视图：</span><br><span class="line">create view user as select a.name,a.age,b.sex from usera as a, userb as b where a.name=b.name;</span><br><span class="line">以上假设name都是唯一的。</span><br><span class="line">这时程序端端使用的sql语句：select * from user;就不会报错。这就实现了更改数据库结构，而不用更改脚本程序的功能。</span><br></pre></td></tr></table></figure><h3 id="4-视图的操作"><a href="#4-视图的操作" class="headerlink" title="4.视图的操作"></a>4.视图的操作</h3><blockquote><p>4.1 创建或修改视图</p></blockquote><p>create [ or replace ] [ algorithm = { undefined | merge | temptable } ] view view_name [ (column_list) ] as select_statement [ with [ cascaded | local ] check option ]</p><ul><li>使用了OR REPLACE可以修改视图，或者直接就CREATE OR REPLACE 替换为ALTER 即变成修改语法；</li><li>UNDEFINED：未定义指定算法；MERGE：更新视图表数据的同时会更新真实表的数据（默认）；TEMPTABLE：只能查询不能更新；</li><li>CASCADED(默认)：必须满足所有针对该视图的所有视图的条件才可以更新；LOCAL：只需满足本视图的条件就可以更新；</li><li>WITH CHECK OPTION：需要满足相关的检查条件才能进行更新<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--常量视图</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">view</span> <span class="keyword">pi</span> <span class="keyword">as</span> <span class="keyword">select</span> <span class="number">3.1415926</span> <span class="keyword">as</span> <span class="keyword">pi</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">--select中包含子查询</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">view</span> city_view <span class="keyword">as</span> <span class="keyword">select</span> (<span class="keyword">select</span> city <span class="keyword">from</span> city <span class="keyword">where</span> city_id=<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>4.2 查看当前数据库下所有视图 show full tables where table_type like ‘view’;</p></blockquote><h3 id="5-优化SQL语句一般步骤"><a href="#5-优化SQL语句一般步骤" class="headerlink" title="5.优化SQL语句一般步骤"></a>5.优化SQL语句一般步骤</h3><blockquote><p>5.1 通过show status 查看各语句的频率</p></blockquote><h3 id="6-数据库Leetcode"><a href="#6-数据库Leetcode" class="headerlink" title="6.数据库Leetcode"></a>6.数据库Leetcode</h3><p>1.求薪水第二高，不存在就返回null</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">ifnull</span>((<span class="keyword">select</span> <span class="keyword">distinct</span>(Salary) </span><br><span class="line"><span class="keyword">from</span> Employee </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> Salary <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">1</span>,<span class="number">1</span>),<span class="literal">null</span>) <span class="keyword">as</span> SecondHighestSalary;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>超过5名学生的课(having用法)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">class</span></span><br><span class="line"><span class="keyword">from</span> courses</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">class</span></span><br><span class="line"><span class="keyword">having</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> student) &gt;= <span class="number">5</span></span><br></pre></td></tr></table></figure></li><li><p>DATEDIFF是两个日期的天数差集</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.Id <span class="keyword">as</span> newId</span><br><span class="line"><span class="keyword">from</span> Weather a <span class="keyword">left</span> <span class="keyword">join</span> Weather b </span><br><span class="line"><span class="keyword">on</span> <span class="keyword">datediff</span>(a.RecordDate,b.RecordDate)=<span class="number">1</span> <span class="keyword">where</span> a.Temperature&gt;b.Temperature</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> InnoDB </tag>
            
            <tag> MyISAM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery学习</title>
      <link href="/2019/11/11/jquery/"/>
      <url>/2019/11/11/jquery/</url>
      
        <content type="html"><![CDATA[<p><font color=#00CD00>简单来说，jQuery是一个js库，却极大的简化了JavaScript编程。好记性不如烂笔头，mark一下自己遇到的问题</font><br><fancybox><img src="http://pic4.zhimg.com/v2-406e0657b46be0bb4b12ca3661c94397_b.jpg" width="60%"></fancybox></p><a id="more"></a><h3 id="1-选择器"><a href="#1-选择器" class="headerlink" title="1. 选择器"></a>1. 选择器</h3><p>id选择器 $(“#div”)<br>    类选择器  $(“.div”)<br>    标签选择器 $(“div”)<br>    并集选择器 $(“selector1,selector2,…,selectN”)：使用逗号连接，以数组形式返回所有的合并元素<br>    后代选择器 $(“div p”):div标签下的p标签，包含子孙节点<br>    过滤选择器 $(“div:eq(n)”) :eq(index)获取给定索引值的元素  从0开始计数<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:gt(index) 匹配所有大于给定索引值的元素<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:lt(index) 匹配所有小于给定索引值的元素<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:even      匹配所有索引值为偶数的元素，从 0 开始计数<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:odd       匹配所有索引值为奇数的元素，从 0 开始计数<br>属性选择器 $(“div[attribute=”value”]”)   :匹配给定的属性是某个特定值的元素</p><p>表单的选择器:$(‘input:radio/checkbox/text/password/…’),即: type值为radio、checkbox、password等的input元素</p><p>筛选选择器 : $(‘div’).eq(n) 获取第n个元素 数值从0开始<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.first()获取第一个元素<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.last()获取最后一个元素<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.parent() 选择父亲元素<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.siblings()选择兄弟元素<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.find() 查找目标元素值 </p><p><font color=#00CD00>PS:注意筛选选择器与过滤选择器的函数位置</font></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
            <tag> 选择器 </tag>
            
            <tag> API </tag>
            
            <tag> Ajax </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python全栈系列章节更新（一）</title>
      <link href="/2019/11/11/python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2019/11/11/python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>Python是一个“优雅”、“明确”、“简单”的编程语言,主要流行于网络爬虫、数据分析挖掘、机器学习、人工智能以及运维等等<br><fancybox><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1573535588082&di=d71746cb12806b9ce26862e1a2976671&imgtype=0&src=http%3A%2F%2Fimg2018.cnblogs.com%2Fblog%2F1457234%2F201905%2F1457234-20190506010127395-1632502037.gif" alt=""></fancybox><br>字符串：len(),split(),join()…<br>列表：append(),pop(),count()…<br>元组：与列表类似，不同之处在于元组的元素不能修改<br>字典：是另一种可变容器模型，且可存储任意类型对象</p><ul><li><p>直接赋值：其实就是对象的引用（别名）。</p></li><li><p>浅拷贝(copy)：拷贝父对象，不会拷贝对象的内部的子对象。</p></li><li><p>深拷贝(deepcopy)： copy 模块的 deepcopy 方法，完全拷贝了父对象及其子对象。</p><a id="more"></a><h3 id="1-字符串"><a href="#1-字符串" class="headerlink" title="1.字符串"></a>1.字符串</h3></li></ul><blockquote><p>zip()函数：将可迭代对象所包含的元素是由原列表元素组成的元组</p></blockquote><p>a = [a,b,c]  b = [1, 2, 3]<br>c = [x for x in zip(a,b)]<br>c = [(a, 1), (b, 2), (c, 3)]<br>结果为元祖型列表</p><blockquote><p>format():位置参数，参数索引从0开始，format里填写{}对应的参数值</p></blockquote><p>msg = “my name is {}, and age is {}”.format(‘chd’,18)<br>渲染结果：my name is chd, and age is 18</p><blockquote><p>str.index()字符串索引: 索引值从0开始,不存在就会报错</p></blockquote><p>s=’index’ s[0]=i<br>s.index(‘i’) = 0  : 查找目标字符串索引值</p><blockquote><p>str.find(‘目标字符串’)查找目标字符串,不存在就返回数值1</p></blockquote><blockquote><p>移除指定字符串 str.strip()</p></blockquote><p>s = ‘  hello,world!  ‘<br>s.strip()<br>s.lstrip()<br>s.rstrip()<br>s2 = ‘\hello,world!&#39;<br>s2.strip(‘&#39;)</p><blockquote><p>len(str)字符串长度</p></blockquote><p>len(‘hello,world’) =&gt; 11</p><blockquote><p>str.replace(a,b)替换：在字符串str中，用b来替换a</p></blockquote><p>‘hello,world’.replace(‘o’,’a’) =&gt; ‘hella,warld’</p><blockquote><p>str[a:b:c] 切片操作</p></blockquote><blockquote><p>string.capitalize()把字符串的第一个字符大写</p></blockquote><blockquote><p>str.count(‘目标字符串’):返回 str 在 string 里面出现的次数</p></blockquote><blockquote><p>“连接字符”.join(seq序列):返回 str 在 string 里面出现的次数</p></blockquote><p>以指定字符串作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串</p><blockquote><p>str.lower()/upper() 将字符串全部转换为小写/大写</p></blockquote><p>“hello world”.lower()/upper() =&gt;”hello world” / “HELLO WORLD”</p><blockquote><p>str.split(指定字符串) 以指定字符串来分割目标字符串，以列表形式返回</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">"http://www.baidu.com/python/image/123456.jpg"</span></span><br><span class="line"><span class="comment">#以“.” 进行分隔</span></span><br><span class="line">path =url.split(<span class="string">"."</span>)</span><br><span class="line">path1=[<span class="string">'http://www'</span>, <span class="string">'baidu'</span>, <span class="string">'com/python/image/123456'</span>, <span class="string">'jpg'</span>]</span><br></pre></td></tr></table></figure><h3 id="2-列表"><a href="#2-列表" class="headerlink" title="2.列表"></a>2.列表</h3><blockquote><p>列表截取（索引从0开始，且满足左闭右开原则）与拼接:从右至左取值，则索引默认从-1开始</p></blockquote><p>L=[‘Google’, ‘Runoob’, ‘Taobao’]<br>L[2]=’Taobao’ L[-1]=’Taobao’</p><blockquote><p>列表函数和方法</p></blockquote><table><thead><tr><th>函数和方法</th><th align="center">描述</th></tr></thead><tbody><tr><td>len(list)</td><td align="center">列表元素个数</td></tr><tr><td>list(seq)</td><td align="center">将元组或字符串转换为列表</td></tr><tr><td>max/min(list)</td><td align="center">返回列表元素最大/最小值</td></tr><tr><td>list.append(obj)</td><td align="center">在列表末尾添加新的对象</td></tr><tr><td>list.count(obj)</td><td align="center">统计某个元素在列表中出现的次数</td></tr><tr><td>list.extend(seq)</td><td align="center">在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</td></tr><tr><td>list.index(obj)</td><td align="center">从列表中找出某个值第一个匹配项的索引位置</td></tr><tr><td>list.insert(index, obj)</td><td align="center">将对象插入列表</td></tr><tr><td>list.pop([index=-1])</td><td align="center">移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</td></tr><tr><td>list.remove(obj)</td><td align="center">移除列表中某个值的第一个匹配项</td></tr><tr><td>list.reverse()</td><td align="center">反向列表中元素</td></tr><tr><td>list.sort( key=None, reverse=False)</td><td align="center">对原列表进行排序</td></tr></tbody></table><h3 id="3-元组"><a href="#3-元组" class="headerlink" title="3.元组"></a>3.元组</h3><blockquote><p>3.1元组的创建</p></blockquote><p>元组使用小括号，而列表使用方括号，只需要在括号中添加元素，并使用逗号隔开即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tup1 = (<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="number">336</span>)</span><br></pre></td></tr></table></figure><blockquote><p>3.2 元组的访问使用下脚标索引来访问元组中的值，下标索引从0开始</p></blockquote><p>tup1[0] =&gt; &#39;a&#39; ,tup[1] =&gt; &#39;b&#39;</p><blockquote><p>3.3 元组的修改</p></blockquote><p>元组中的元素是不允许修改或删除的，但我们开始对其进行拼接组合<br>tuple(seq)：将列表转换为元组。</p><h3 id="4-字典-可变模型，可存储任意类型对象"><a href="#4-字典-可变模型，可存储任意类型对象" class="headerlink" title="4.字典:可变模型，可存储任意类型对象"></a>4.字典:可变模型，可存储任意类型对象</h3><blockquote><p>4.1字典的创建</p></blockquote><p>字典的每个键值 key=&gt;value 对用冒号 : 分割，每个键值对之间用逗号&nbsp;&nbsp;,&nbsp;&nbsp;分割，整个字典包括在花括号 {}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;key1 : value1, key2 : value2 &#125;</span><br></pre></td></tr></table></figure><p><font color=#EE9A49>值可以取任何数据类型，但键必须是不可变的，如字符串，数字或元组</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;<span class="string">'Alice'</span>: <span class="string">'2341'</span>, <span class="string">'Beth'</span>: <span class="string">'9102'</span>, <span class="string">'Cecil'</span>: <span class="string">'3258'</span>,<span class="number">9527</span>:<span class="string">'badwoman'</span>,<span class="number">6394</span>:<span class="number">998</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>4.2 字典的访问</p></blockquote><p>访问方式：字典名[键名]</p><blockquote><p>4.3 字典的更新</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;<span class="string">'Name'</span>: <span class="string">'Zara'</span>, <span class="string">'Age'</span>: <span class="number">7</span>, <span class="string">'Class'</span>: <span class="string">'First'</span>&#125;</span><br><span class="line"> </span><br><span class="line">dict[<span class="string">'Age'</span>] = <span class="number">8</span> <span class="comment"># 更新</span></span><br><span class="line">dict[<span class="string">'School'</span>] = <span class="string">"RUNOOB"</span> <span class="comment"># 添加 </span></span><br><span class="line"> </span><br><span class="line">print(<span class="string">"dict['Age']: "</span>, dict[<span class="string">'Age'</span>])</span><br><span class="line">print(<span class="string">"dict['School']: "</span>, dict[<span class="string">'School'</span>])</span><br></pre></td></tr></table></figure><blockquote><p>4.4 内置函数和方法</p></blockquote><table><thead><tr><th>函数和方法</th><th align="center">描述</th></tr></thead><tbody><tr><td>cmp(dict1, dict2)</td><td align="center">比较字典元素值：如果两个字典的元素相同返回0，如果字典dict1大于字典dict2返回1，如果字典dict1小于字典dict2返回-1</td></tr><tr><td>len()</td><td align="center">计算字典元素个数，即键的总数</td></tr><tr><td>dict.items()</td><td align="center">将字典的键值一一对应组合成一个元组，以列表的形式返回值</td></tr><tr><td>dict.pop(key[,default])</td><td align="center">删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">demo=&#123;<span class="string">'Name'</span>: <span class="string">'Zara'</span>, <span class="string">'Age'</span>: <span class="number">8</span>, <span class="string">'Class'</span>: <span class="string">'First'</span>, <span class="string">'School'</span>: <span class="string">'RUNOOB'</span>&#125;</span><br><span class="line">demo.items() </span><br><span class="line"><span class="comment"># dict_items([('Name', 'Zara'), ('Age', 8), ('Class', 'First'), ('School', 'RUNOOB')])</span></span><br><span class="line"></span><br><span class="line">a = [x <span class="keyword">for</span> x <span class="keyword">in</span> demo.items()]</span><br><span class="line">print(a)  <span class="comment"># a=[('Name', 'Zara'), ('Age', 8), ('Class', 'First'), ('School', 'RUNOOB')]</span></span><br></pre></td></tr></table></figure><h3 id="python的直接赋值，浅拷贝和深拷贝"><a href="#python的直接赋值，浅拷贝和深拷贝" class="headerlink" title="python的直接赋值，浅拷贝和深拷贝"></a>python的直接赋值，浅拷贝和深拷贝</h3><ul><li><p>直接赋值：其实就是对象的引用（别名）。</p></li><li><p>浅拷贝(copy)：拷贝父对象，不会拷贝对象的内部的子对象。</p></li><li><p>深拷贝(deepcopy)： copy 模块的 deepcopy 方法，完全拷贝了父对象及其子对象。</p></li></ul><p>解析：</p><ol><li>b = a 赋值引用，a与b都指向同一个对象，即共有同一块内存地址<br><fancybox><img src="https://www.runoob.com/wp-content/uploads/2017/03/1489720931-7116-4AQC6.png"></fancybox></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;</span><br><span class="line">b = a   <span class="comment"># b = &#123;1: [1, 2, 3]&#125;</span></span><br><span class="line"><span class="comment"># 更新a的值</span></span><br><span class="line">a[<span class="number">1</span>]=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">print(b)  <span class="comment"># b = &#123;1: [1, 2, 3, 4]&#125;</span></span><br><span class="line"><span class="comment"># 即直接赋值也属于浅拷贝，共用同样一块地址</span></span><br></pre></td></tr></table></figure><ol start="2"><li>b = a.copy():浅拷贝，a与b是一个独立的对象，但他们的子对象还是指向统一对象（是引用）<br><fancybox><img src="https://www.runoob.com/wp-content/uploads/2017/03/1489720930-6827-Vtk4m.png" title="浅拷贝"></fancybox></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]&#125;</span><br><span class="line">b = a.copy()</span><br><span class="line">print(a,b)  <span class="comment"># (&#123;1: [1, 2, 3]&#125;, &#123;1: [1, 2, 3]&#125;)</span></span><br><span class="line">a[<span class="number">1</span>].append(<span class="number">4</span>)  <span class="comment"># 字典更新</span></span><br><span class="line">print(a, b)  <span class="comment">#(&#123;1: [1, 2, 3, 4]&#125;, &#123;1: [1, 2, 3, 4]&#125;)</span></span><br></pre></td></tr></table></figure><ol start="3"><li>b = copy.deepcopy(a) 深拷贝：深度拷贝, a 和 b 完全拷贝了父对象及其子对象，两者是完全独立的,是两块独立的地址。<br><fancybox><img src="https://www.runoob.com/wp-content/uploads/2017/03/1489720930-5882-BO4qO.png"></fancybox></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import copy</span><br><span class="line">&gt;&gt;&gt; c = copy.deepcopy(a)</span><br><span class="line">&gt;&gt;&gt; a, c</span><br><span class="line">(&#123;1: [1, 2, 3, 4]&#125;, &#123;1: [1, 2, 3, 4]&#125;)</span><br><span class="line">&gt;&gt;&gt; a[1].append(5)</span><br><span class="line">&gt;&gt;&gt; a, c</span><br><span class="line">(&#123;1: [1, 2, 3, 4, 5]&#125;, &#123;1: [1, 2, 3, 4]&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
            <tag> 选择器 </tag>
            
            <tag> API </tag>
            
            <tag> Ajax </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库(一)：DDL，DML，DCL</title>
      <link href="/2019/11/11/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2019/11/11/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;最近严重记忆力下降加上一直没有怎么用到数据库，好多命令都回忆不起来了，做个小笔记，mark。<br>今天建彬师傅（他不是厉不厉害的问题，他真的就是那种，很少见，很牛逼的存在…）给我讲了一个非常有用的小知识点，使我茅塞顿开，放在摘要页，很有用：<a href="https://blog.csdn.net/gaoshuying/article/details/53410137" target="_blank" rel="noopener">跨用户访问数据表的方式</a><br><font color=#5CACEE>1.两个用户在同一个应用服务器上:select * from ‘user_name’&nbsp;.&nbsp;’table_name’;<br>2.两个用户不在同一个应用服务器上。。。<br><fancybox><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1573658629292&di=ed394bb8e9aadd1d0f439c0a4018a796&imgtype=0&src=http%3A%2F%2Fs11.51cto.com%2Fimages%2F201901%2F20%2Fdec97881d1e4071c6e51c2a30105835d.jpg" alt=""></fancybox><br></font></p><a id="more"></a><h3 id="1-启动服务"><a href="#1-启动服务" class="headerlink" title="1.启动服务"></a>1.启动服务</h3><p>net start 服务器名（Windows）<br>service start 服务器名（linux）</p><h3 id="2-登录与修改密码"><a href="#2-登录与修改密码" class="headerlink" title="2.登录与修改密码"></a>2.登录与修改密码</h3><table><thead><tr><th>命令</th><th align="center">含义</th></tr></thead><tbody><tr><td>&nbsp;&nbsp;&nbsp;&nbsp;</td><td align="center">mysql -u root -p -h localhost：登录MySQL（p表示密码；u表示用户名；h表示主机地址）</td></tr><tr><td>&nbsp;&nbsp;&nbsp;&nbsp;</td><td align="center">mysqladmin -u用户名 -p旧密码 password新密码 :修改用户名密码</td></tr></tbody></table><h3 id="3-基本使用"><a href="#3-基本使用" class="headerlink" title="3.基本使用"></a>3.基本使用</h3><table><thead><tr><th>命令</th><th align="center">含义</th></tr></thead><tbody><tr><td>show databases;</td><td align="center">用于显示所有的数据库</td></tr><tr><td>use 数据库名;</td><td align="center">使用目标数据库</td></tr><tr><td>select database()/version()/now()/user();</td><td align="center">显示当前连接的信息</td></tr><tr><td>show tables;</td><td align="center">用于显示选中数据库下的所有的表</td></tr><tr><td>desc table_Name;</td><td align="center">查看表结构</td></tr><tr><td>show create table table_name \G;</td><td align="center">查看到创建时的SQL语句及更多详细信息  \G使记录按照字段竖向排列，易于阅读</td></tr></tbody></table><p>创建数据库并指定编码格式:create database if not exists 数据库名 character set utf8;<br>删除数据库：DROP DATABASE [IF EXISTS] 数据库名;</p><h3 id="4-DDL-amp-DML"><a href="#4-DDL-amp-DML" class="headerlink" title="4.DDL&amp;DML"></a>4.DDL&amp;DML</h3><p>DDL:数据定义语言仅对数据库，表，列，索引起作用（create、drop、alter）<br>DML:数据操纵语言仅对table中的具体数据起作用（select、insert、delete、update）</p><h3 id="5-DDL"><a href="#5-DDL" class="headerlink" title="5.DDL"></a>5.DDL</h3><blockquote><p>1.创建表</p></blockquote><pre>创建表    create table 表名(    ​  列名 数据类型  列级约束,    ​  列名 数据类型  列级约束    ​ )【表类型】【表字符集】【表注释】</pre>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#创建学生表，并设置表类型、字符集</span><br><span class="line">CREATE TABLE `student` (</span><br><span class="line">  `id` INT(4) NOT NULL AUTO_INCREMENT COMMENT &apos;主键、学号&apos;,</span><br><span class="line">  `psd` VARCHAR(20) COLLATE utf8_estonian_ci NOT NULL DEFAULT &apos;123456&apos; COMMENT &apos;密码&apos;,</span><br><span class="line">  `name` VARCHAR(30) COLLATE utf8_estonian_ci NOT NULL DEFAULT &apos;匿名&apos; COMMENT &apos;学生姓名&apos;,</span><br><span class="line">  `sex` VARCHAR(2) COLLATE utf8_estonian_ci NOT NULL DEFAULT &apos;男&apos; COMMENT &apos;性别&apos;,</span><br><span class="line">  `birsday` DATETIME DEFAULT NULL,</span><br><span class="line">  `email` VARCHAR(20) COLLATE utf8_estonian_ci DEFAULT NULL,</span><br><span class="line">   PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=INNODB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 COLLATE=utf8_estonian_ci</span><br></pre></td></tr></table></figure><ul><li><p><i class="fas fa-hand-point-right"></i> <a href="https://www.w3school.com.cn/sql/sql_datatypes.asp" target="_blank" rel="noopener">数据类型</a> </p></li><li><p>约束条件：<br>  not null<br>  unique<br>  primary key 主键名<br>  FOREIGN KEY (Id_P) REFERENCES Persons(Id_P) :一个表中的 FOREIGN KEY 指向另一个表中的 PRIMARY KEY<br>  default 默认值<br>  AUTO INCREMENT :在每次插入新记录时，自动地创建主键字段的值</p></li></ul><blockquote><p>2.删除表：drop table table_name</p></blockquote><blockquote><p>3.修改表</p></blockquote><table><thead><tr><th>命令</th><th align="center">含义</th></tr></thead><tbody><tr><td>修改表中列的数据类型</td><td align="center">alter table table_name modify 列名 column_definition</td></tr><tr><td>增加表字段</td><td align="center">alter table table_name add [column] 列名 column_definition</td></tr><tr><td>删除表字段表字段</td><td align="center">alter table table_name drop [column] 列名</td></tr><tr><td>表的字段改名</td><td align="center">alter table table_name change [column] old_col_name new_col_name</td></tr><tr><td>表字段改名同时也可修改字段类型</td><td align="center">alter table table_name change [column] old_col_name new_col_name column_definition</td></tr><tr><td>更改表名</td><td align="center">alter table table_name rename [to] new_tablename</td></tr></tbody></table><h3 id="6-DML语句"><a href="#6-DML语句" class="headerlink" title="6.DML语句"></a>6.DML语句</h3><table><thead><tr><th>命令</th><th align="center">含义</th></tr></thead><tbody><tr><td>插入数据</td><td align="center">insert into table_name ( field1, field2,…) values (value1,value2,….);</td></tr><tr><td>一次性插入多条数据</td><td align="center">insert into table_name ( field1, field2,…) values (value1,value2,..),(value1,value2,..)…;</td></tr><tr><td>更新记录</td><td align="center">update table_name set field1=value1，field2=value2，… [ WHERE CONDITION ]</td></tr><tr><td>删除某一项记录</td><td align="center">delete from table_name [WHERE CONDITION ]</td></tr><tr><td>排序和限制</td><td align="center">select * from table_name [ WHERE CONDITION ] [ order by field1 [ DESC\ASC ], field2 [ DESC\ASC], ..]</td></tr><tr><td>表连接</td><td align="center">select ename,deptname from emp1 left join dept on emp1.deptno=dept.deptno;</td></tr><tr><td>子查询</td><td align="center">关键字主要有in、not in、=、!=、exists、not exists,between and等等</td></tr></tbody></table><p>1.可以不用指定字段名称，但此时后面的values应该与表的字段顺序保持一致<br>2.对于某些字段允许空值、非空但是有指定的默认值、自增长等，这些字段在insert时如果没有指定value，那么将会右系统自动配置</p><h3 id="7-DCL语句"><a href="#7-DCL语句" class="headerlink" title="7.DCL语句"></a>7.<a href="https://blog.csdn.net/ywk_hax/article/details/83351552" target="_blank" rel="noopener">DCL语句</a></h3><blockquote><ol><li>创建数据库用户，并声明权限</li></ol></blockquote><p>创建操作数据库的专用用户，格式：<br>grant 权限 on 数据库名.数据表名 to 用户名@主机IP IDENTIFIED BY 密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">说明：</span><br><span class="line">权限：ALL PRIVILEGES(所有权限),select,insert,update,delete,create,alter,drop</span><br><span class="line">主机IP： &apos;%&apos; 匹配所有主机，localhost</span><br><span class="line">表名： * 表示所有表</span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>刷新权限</li></ol></blockquote><p>flush privileges</p><p><font color=#FF6347>这里向大家拓展一个知识点，那就是主机IP指的是该用户只能在对应的主机IP上进行登录。例如：假如user用户设置的主机IP为localhost，那么其他人就将无法从本地以外的地方使用user用户进行登录。</font></p><h3 id="8-查询记录"><a href="#8-查询记录" class="headerlink" title="8.查询记录"></a>8.查询记录</h3><blockquote><p>8.1 distinct 查询不重复的记录</p></blockquote><p>select distinct id from emp1; 加distinct关键字使得查出的结果中去掉了重复记录</p><blockquote><p>8.2 条件查询</p></blockquote><p>判断条件可以使用=、&gt;、&lt;、&gt;=、&lt;=、!=等等，同时多个条件还可以使用and、or等进行连接</p><blockquote><p>8.3 聚合</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">select [ field1, field2,...,fieldn] fun_name from tablename [ where condition ] </span><br><span class="line"></span><br><span class="line">      [ group by field1, field2,..., fieldn  [ with rollup ] ]  [ having  condition ]</span><br><span class="line"></span><br><span class="line">参数说明：fun_name 聚合函数，表示要做的聚合操作，常用的有sum（求和）、count(*)（计数）、max、min等。</span><br><span class="line"></span><br><span class="line">        GROUP BY  表示对后面的字段进行分类聚合（也常叫分组）；</span><br><span class="line"></span><br><span class="line">        WITH ROLLUP 可选语法，在ORDER BY 语句内出现，表示是否对分类聚合后的结果进行再汇总；</span><br><span class="line"></span><br><span class="line">        HAVING 表示对分类后的结果再进行条件过滤；</span><br></pre></td></tr></table></figure><p><font color=#FF3030>同样是条件过滤，having合where的区别在于，having是对聚合后的结果进行条件过滤，而where是在聚合前就对记录进行过滤。因此，为了提高聚合效率，一般先用where过滤不相干的记录后，在进行聚合，最后再用having进行二次过滤</font></p><h3 id="未完待续……"><a href="#未完待续……" class="headerlink" title="未完待续……"></a>未完待续……</h3>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> database </tag>
            
            <tag> DDL </tag>
            
            <tag> DML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker容器虚拟化技术</title>
      <link href="/2019/11/10/docker%E5%AE%B9%E5%99%A8%E8%99%9A%E6%8B%9F%E6%8A%80%E6%9C%AF/"/>
      <url>/2019/11/10/docker%E5%AE%B9%E5%99%A8%E8%99%9A%E6%8B%9F%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<p><font color=#00CD00>简单来说，在Windows系统下安装各种运行环境的坑简直不要太多了(●￣(ｴ)￣●)，并不仅限于docker、Nginx、PHP、Python等等</font>，我会尽详细写出实际过程中遇到的各种各样的奇葩问题<br><fancybox><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1573382566146&di=7b10832832e7d3c37d3f4e2e84d45d5d&imgtype=jpg&src=http%3A%2F%2Fimg3.imgtn.bdimg.com%2Fit%2Fu%3D859959778%2C1194286727%26fm%3D214%26gp%3D0.jpg" alt=""></fancybox></p><a id="more"></a><h3 id="1-docker适用环境"><a href="#1-docker适用环境" class="headerlink" title="1.docker适用环境"></a>1.docker适用环境</h3><p>其实docker本身也没有太多在Windows下花功夫。<font color=#00CD00>目前，docker仅支持Linux与Windows企业版、专业版、教育版。ps：家庭版不支持docker</font>,并且win10下可以安装<a href="https://hub.docker.com/editions/community/docker-ce-desktop-windows?tab=description" target="_blank" rel="noopener">docker-for-windows</a>,这个安装包是<br>专门适用于win10，安装简单，而对于win7/8则可以使用<a href="https://github.com/docker/toolbox/releases" target="_blank" rel="noopener">Docker Toolbox下载地址</a></p><h3 id="2-Windows下无法对docker容器进行端口访问（端口映射的问题）"><a href="#2-Windows下无法对docker容器进行端口访问（端口映射的问题）" class="headerlink" title="2.Windows下无法对docker容器进行端口访问（端口映射的问题）"></a>2.Windows下无法对docker容器进行端口访问（端口映射的问题）</h3><p>1.问题详情<br><br>&nbsp;&nbsp;&nbsp;在Windows10系统服务器中安装了docker和docker-compose<br><br>&nbsp;&nbsp;&nbsp;并尝试在其中运行Nginx服务，映射也做好<br><br>&nbsp;&nbsp;&nbsp;问题：在主机的浏览器中，打开localhost:port无法访问对应的Web服务。<br><br>2.问题解析<br><br>&nbsp;&nbsp;&nbsp;原因：docker是运行在Linux上的，在Windows中运行docker，实际上还是在Windows下先安装了一个Linux环境，然后在这个系统中运行的docker。也就是说，服务中使用的localhost指的是这个Linux环境的地址，而不是我们的宿主环境Windows10。<br><br>3.解决办法<br><br>&nbsp;&nbsp;&nbsp;启动docker命令行窗口<br><br>&nbsp;&nbsp;&nbsp;输入命令:docker-machine ip default<br><br>&nbsp;&nbsp;&nbsp;Linux的ip地址，一般情况下这个地址是192.168.99.100<br><br>&nbsp;&nbsp;&nbsp;然后在Windows的浏览器中，输入 <a href="http://IP:port" target="_blank" rel="noopener">http://IP:port</a> 即可启用（<a href="http://192.168.99.100：8069）" target="_blank" rel="noopener">http://192.168.99.100：8069）</a><br></p><h3 id="3-docker与VMware不可兼容"><a href="#3-docker与VMware不可兼容" class="headerlink" title="3.docker与VMware不可兼容"></a>3.docker与VMware不可兼容</h3><p>&nbsp;&nbsp;&nbsp;在Windows下安装docker，第一步就是要打开Hyper-V(打开控制面板 - 程序和功能 - 启用或关闭Windows功能，勾选Hyper-V),开启win自带的虚拟管理技术。但是若想要使用VMware，则必须关闭Hyper-V，鱼和熊掌不可兼得呀！(′д｀ )…彡…彡</p><h3 id="4-Windows：vmware与hyper-v不兼容-请移除hyper-v角色"><a href="#4-Windows：vmware与hyper-v不兼容-请移除hyper-v角色" class="headerlink" title="4.Windows：vmware与hyper-v不兼容,请移除hyper-v角色"></a>4.Windows：vmware与hyper-v不兼容,请移除hyper-v角色</h3><p>1、请移除hyper-v角色。<br>（1）以管理员身份（win + x）运行命令提示符；<br>（2）执行命令：bcdedit /set hypervisorlaunchtype off<br>（3）重启系统，运行vm即可。<br>2、如果想要恢复hyper启动：<br>&nbsp;&nbsp;&nbsp;bcdedit / set hypervisorlaunchtype auto</p><h3 id="5-docker-run后接-bin-sh和接-bin-bash的区别是什么："><a href="#5-docker-run后接-bin-sh和接-bin-bash的区别是什么：" class="headerlink" title="5.docker run后接/bin/sh和接/bin/bash的区别是什么："></a>5.docker run后接/bin/sh和接/bin/bash的区别是什么：</h3><p>比如我们要获取一个nginx镜像，同一镜像存在有不同的tags<br>&nbsp;&nbsp;&nbsp;/bin/sh命令仅适用于tags带alpine标签的： nginx:1.17-alpine；<br>&nbsp;&nbsp;&nbsp;/bin/bash命令仅适用于tags不带alpine标识的：nginx：laster，nginx:1.8…</p><h3 id="6-docker运行MySQL服务"><a href="#6-docker运行MySQL服务" class="headerlink" title="6.docker运行MySQL服务"></a>6.<a href="https://blog.csdn.net/siying8419/article/details/79670246" target="_blank" rel="noopener">docker运行MySQL服务</a></h3><blockquote><ol><li>拉取镜像<br>docker pull mysql:[tag]</li><li>创建并运行容器<br>docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql：5.6</li></ol></blockquote><p>ps: -p 表示指定访问端口<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-e 设置环境变量，或者覆盖已存在的环境变量<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-d 表示以守护式方式来运行容器<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MYSQL_ROOT_PASSWORD=123456 声明MySQL的用户名为ROOT，密码为123456</p><blockquote><ol start="3"><li>查看容器是否启动<br>docker ps </li><li>启动容器<br>docker start container_id</li></ol></blockquote><blockquote><ol start="5"><li>进入容器内部,以命令行交互<br>docker exec -it container_id /bin/bash</li></ol></blockquote><blockquote><ol start="6"><li>登录MySQL<br>mysql -u root -p 然后在输入密码</li></ol></blockquote><blockquote><ol start="7"><li>成功表示已经成功登陆MySQL</li></ol></blockquote><h3 id="7-最强万能公式-数据卷挂载式创建容器"><a href="#7-最强万能公式-数据卷挂载式创建容器" class="headerlink" title="7.最强万能公式:数据卷挂载式创建容器"></a>7.最强万能公式:数据卷挂载式创建容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">守护式：docker run -di [--privileged=true] -P(或者指定端口 -p 外部port:该容器默认端口) \--name=&quot;newNginx&quot;  -v /home/chd/Desktop/entwechatapp:/var/www/EntWeChatApp:rw  nginx:1.15.7-alpine</span><br><span class="line">交互式：docker run -it [--privileged=true] -P(或者指定端口 -p 外部port:该容器默认端口) \--name=&quot;newNginx&quot;  -v /home/chd/Desktop/entwechatapp:/var/www/EntWeChatApp:rw  nginx:1.15.7-alpine</span><br><span class="line">含义：</span><br><span class="line">   a） 以-v /home/chd/Desktop/entwechatapp:/var/www/EntWeChatApp:rw 带rw(read,write)权限来将宿主机与容器进行数据卷挂载</span><br><span class="line">   b) docker run 以新容器名和端口号以及守护式或者交互式来创建容器</span><br></pre></td></tr></table></figure><h3 id="8-宿主机与docker容器权限纠纷"><a href="#8-宿主机与docker容器权限纠纷" class="headerlink" title="8.宿主机与docker容器权限纠纷"></a>8.宿主机与docker容器权限纠纷</h3><p>问题描述：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;它来了！问题又出现了！哭啦。数据卷挂载时，即使声明了rw权限，在宿主机中创建文件，数据共享后，容器内能够具有正常的rw权限；但在容器内新建了文件后，宿主机就只有只读权限，无法修改文件内容。</p><p>解决方案：宿主机的权限不够<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在（7）式中的万能公式中添加：docker run ··· --privileged=true ···</p><h3 id="9-docker配置nginx的配置文件"><a href="#9-docker配置nginx的配置文件" class="headerlink" title="9.docker配置nginx的配置文件"></a>9.<a href="https://www.cnblogs.com/zfding/p/11429695.html" target="_blank" rel="noopener">docker配置nginx的配置文件</a></h3><p><del>命令：<code>docker run --name=&quot;dnmp_nginx&quot; -p 80:80 -v /home/docker-nginx/nginx.conf:/etc/nginx/nginx.conf -v /home/docker-nginx/log:/var/log/nginx -v /home/docker-nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf -di nginx:\[tags]</code><br>&nbsp;&nbsp;&nbsp;&nbsp;第一个-v 表示将你本地的nginx.conf覆盖你要起启动的容器的nginx.conf文件，第二个表示将日志文件进行挂载，就是把nginx服务器的日志写到你docker宿主机的/home/docker-nginx/log/下面。第三个-v 表示的和第一个-v意思一样的<br>&nbsp;&nbsp;&nbsp;&nbsp;我个人更喜欢守护式映射的方式，麻烦的是需要自己准备好nginx.conf 和default.conf文件，我是直接从容器里面复制的，然后根据自己的需要改的</del></p><p>我都想把它杀了，部署nginx太多坑了，不过参考了<a href="https://blog.csdn.net/qierkang/article/details/92657302" target="_blank" rel="noopener">此博文</a>，最终解决了问题，解决方法：</p><blockquote><p>1.创建三个根目录根据情况创建：/docker/nginx/conf www logs</p></blockquote><p>docker run -d -p 80:80 --name=”nginx” --net host -v /docker/nginx/www:/usr/share/nginx/html -v /docker/nginx/logs:/var/log/nginx nginx:1.17.5</p><blockquote><p>2.不对配置文件进行数据挂载即 -v /docker/nginx/conf/nginx.conf:/etc/nginx/nginx.conf 这个   </p></blockquote><blockquote><p>3.docker exec -it nginx /bin/bash （进入容器 获取文件）</p></blockquote><blockquote><p>4.cd /etc/nginx/ （这里主要获取配置文件路径的）,然后exit</p></blockquote><blockquote><p>5.数据拷贝<br>进入宿主机目录文件 cd /docker/nginx/conf/<br>将已经运行成功的容器的配置文件拷贝到宿主机的配置文件目录：docker cp 容器ID:/etc/nginx/nginx.conf .（ps：“.”表示拷贝到当前目录）</p></blockquote><p>ps：文件copy成功后 把nginx容器先删除掉</p><blockquote><p>6.创建最终的nginx容器</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run -di -p 80:80 </span><br><span class="line">--name nginx </span><br><span class="line">[--net host] :再思考一下有没有必要写，使用–net = host时,它告诉容器使用主机网络堆栈.因此无法将端口暴露给主机,因为它是主机(就网络堆栈而言).</span><br><span class="line">-v /docker/nginx/www:/usr/share/nginx/html </span><br><span class="line">-v /docker/nginx/conf/nginx.conf:/etc/nginx/nginx.conf </span><br><span class="line">-v /docker/nginx/logs:/var/log/nginx </span><br><span class="line">nginx:1.17.5</span><br><span class="line"></span><br><span class="line">ps:成功后就代表部署成功</span><br></pre></td></tr></table></figure><p>PS：访问可能会403 因为/docker/nginx/www/ 里面没有index.html放进去就好了</p><p>挂载成功后，给宿主机上的www目录（或整个文件目录）增加权限，不然一直无法读写：<br>&nbsp;&nbsp;&nbsp;&nbsp;sudo chmod -R 777 目标目录 ：给目标目录赋予最大管理员权限<br>&nbsp;&nbsp;&nbsp;&nbsp;sudo chmod +/-rwx 文件名|目录  给文件或目录的赋予权限</p><h3 id="10-docker配置MySQL，redis教程等，请点击此处链接"><a href="#10-docker配置MySQL，redis教程等，请点击此处链接" class="headerlink" title="10.docker配置MySQL，redis教程等，请点击此处链接"></a>10.docker配置MySQL，redis教程等，<a href="https://pan.baidu.com/s/1nUE4pfe2wThYVGMEYqADXw" target="_blank" rel="noopener">请点击此处链接</a></h3><p>命令:<code>docker run -di -p 12345:3306 \--name=&quot;mysql&quot; -v /lnmp/mysql/conf:/etc/mysql/conf.d -v /lnmp/mysql/logs:/logs -v /lnmp/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456:rw  mysql:5.6</code></p><p>命令说明：<br>-p 12345:3306：将主机的12345端口映射到docker容器的3306端口。<br>--name mysql：运行服务名字<br>-v /lnmp/mysql/conf:/etc/mysql/conf.d ：将主机/lnmp/mysql录下的conf/my.cnf 挂载到容器的 /etc/mysql/conf.d<br>-v /lnmp/mysql/logs:/logs：将主机/lnmp/mysql目录下的 logs 目录挂载到容器的 /logs。<br>-v /lnmp/mysql/data:/var/lib/mysql ：将主机/lnmp/mysql目录下的data目录挂载到容器的 /var/lib/mysql<br>-e MYSQL_ROOT_PASSWORD=123456：初始化 root 用户的密码。<br>-d mysql:5.6 : 后台程序运行mysql5.6</p><h3 id="11-外部Windows如何访问docker内的容器"><a href="#11-外部Windows如何访问docker内的容器" class="headerlink" title="11.外部Windows如何访问docker内的容器"></a>11.外部Windows如何访问docker内的容器</h3><blockquote><p>1.基本架构：Windows，Dockers，Linux三者关系</p></blockquote><p><fancybox><img src="https://images2018.cnblogs.com/blog/1228818/201805/1228818-20180510183714998-435698473.png" alt=""></fancybox></p><blockquote><p>2.相关操作</p></blockquote><p>2.1 关闭Linux防火墙：systemctl stop firewalld.service</p><p>2.2 查看Linux，Docker的IP地址:ifconfig(区别于Windows的ipconfig命令)</p><p><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/CDN@1.2.2/docker.png" width="60%"></fancybox></p><p>2.3 Windows访问测试:</p><blockquote><p>思想：docker作为一个容器虚拟技术，创建并启动相关的容器服务，并把端口映射到Linux系统中。比如MySQL：docker启动MySQL服务后，并映射了一个外部访问的某端口（比如还是3306）<br>，则此刻Linux就具有了3306这个一个端口=&gt;外界访问方式应该是：访问虚拟机Linux上与之相绑定docker容器映射出的端口。</p></blockquote><p><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/CDN@1.2.2/test.JPG" height="60%"></fancybox></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> VMware </tag>
            
            <tag> images </tag>
            
            <tag> container </tag>
            
            <tag> Hyper-V </tag>
            
            <tag> Linux </tag>
            
            <tag> 交互式与守护式创建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue</title>
      <link href="/2019/11/08/Vue/"/>
      <url>/2019/11/08/Vue/</url>
      
        <content type="html"><![CDATA[<img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1573211421138&di=ed4a66a277a70944cfe8a99015bd8d2b&imgtype=0&src=http%3A%2F%2Fwww.igeekbar.com%2Figeekbar%2Fnetworks%2Fuploadimg%2Fa268122f-78c7-4f1b-ba31-a92f21ed1133.jpg" height="285px"><p>&nbsp;&nbsp;Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合,有很好的数据双向绑定性。</p><a id="more"></a><h3 id="1-jQuery与Vue糅合使用"><a href="#1-jQuery与Vue糅合使用" class="headerlink" title="1.jQuery与Vue糅合使用"></a>1.jQuery与Vue糅合使用</h3><blockquote><p>1.jquery基本使用：先导入相关jQuery库包，然后按人类正常思维，就声明入口函数,然后在入口函数中书写逻辑代码</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(function()&#123;</span><br><span class="line">          ...  </span><br><span class="line">          ...</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>但是，奇怪他个猪猪皮，即使不用声明入口函数，直接书写逻辑程序，经过多次测试，TM居然还可以正常使用</p><blockquote><p>2.jQuery+Vue(若想两者结合使用，则一定不能声明入口函数，否则Vue无法使用)<br>当你想测试Vue时，就会出现vue实例未声明的报错</p></blockquote><font color=#FF4040    ><p>&nbsp;&nbsp;1 Uncaught ReferenceError: vm is not defined<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at <anonymous>:1:1<br></font></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"rookie"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello fpx<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello IG<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello kk<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pre</span>&gt;</span>total:&#123;&#123;number&#125;&#125;<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h6</span> <span class="attr">:class</span>=<span class="string">"&#123;box:isactive&#125;"</span>&gt;</span>this is new h6&amp;nbsp;&amp;nbsp;<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h5</span> <span class="attr">:class</span>=<span class="string">"[box1,box2,box3?'luko':'']"</span>&gt;</span>this is new h6&amp;nbsp;&amp;nbsp;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"please input number"</span> <span class="attr">v-model</span>=<span class="string">"msg"</span> @<span class="attr">keyup.enter</span>=<span class="string">"fn"</span>&gt;</span>按键盘enter键触发:&#123;&#123;msg&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"please click enter"</span> <span class="attr">v-model</span>=<span class="string">"message"</span> @<span class="attr">keyup.13</span>=<span class="string">"greet(9527)"</span>&gt;</span>按键盘enter键触发&#123;&#123;message&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log($(<span class="string">'p'</span>).length);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">                el:<span class="string">'#app'</span>,</span></span><br><span class="line">                data:&#123;</span><br><span class="line"><span class="javascript">                    number:$(<span class="string">'p'</span>).length,</span></span><br><span class="line"><span class="actionscript">                    isactive:<span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">                    box1:<span class="string">'moko'</span>,</span></span><br><span class="line"><span class="actionscript">                    box2:<span class="string">'boka'</span>,</span></span><br><span class="line"><span class="actionscript">                    box3:<span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">                    msg:<span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">                    message:<span class="string">''</span>,</span></span><br><span class="line"></span><br><span class="line">                &#125;,</span><br><span class="line">                methods:&#123;</span><br><span class="line">                    fn()&#123;</span><br><span class="line"><span class="actionscript">                        alert(<span class="keyword">this</span>.msg)</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    greet(hi)&#123;</span><br><span class="line"><span class="actionscript">                        alert(<span class="keyword">this</span>.message+hi)</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;);</span><br><span class="line"><span class="javascript">            $(<span class="string">'h5'</span>).append(<span class="string">'&lt;b&gt;this is new plus increment&lt;/b&gt;'</span>);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">'h6'</span>).append(<span class="string">'&lt;br&gt; hello world'</span>);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-Vue的组件"><a href="#2-Vue的组件" class="headerlink" title="2.Vue的组件"></a>2.Vue的组件</h3><blockquote><p>1.组件创建方式分为全局组件与局部组件：</p></blockquote><p>&nbsp;&nbsp;&nbsp;全局组件：可以被多个APP进行调用,在APP实例外创建;定义一个名为 button-counter 的新组件:组件名称若使用驼峰原则，引用组件时需要全部小写，并且两个单词之间用“-”连接;若不使用驼峰原则时，直接使用原组件名</p><p>全局组件创建方式一：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Vue.component('buttonCounter', &#123;</span><br><span class="line">    data: function () &#123;  // 1.组件可以有自己的data数据，组件中的data必须是一个方法，且这个方法内部必须返回一个对象才行，而实例中的data可以为一个对象</span><br><span class="line">        return &#123;</span><br><span class="line">        count: 0,</span><br><span class="line">        info: 'hello world'</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;,</span><br><span class="line">      template: '<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"count++"</span>&gt;</span>&#123;&#123;message&#125;&#125; clicked me &#123;&#123; count &#125;&#125; times.<span class="tag">&lt;/<span class="name">button</span>&gt;</span>'</span><br><span class="line">      // 2. 全局组件有template属性 </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>全局组件创建方式二：调用公共模板对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">    &lt;script&gt;</span><br><span class="line">        let project=&#123;</span><br><span class="line">            template:&apos;&apos;,</span><br><span class="line">            data:function()&#123;  // 组件中的data必须是一个方法</span><br><span class="line">                return &#123;</span><br><span class="line">                info:&apos;hello world&apos;,</span><br><span class="line">                message:&apos;badwoman&apos;      </span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;&#125;</span><br><span class="line">           ...</span><br><span class="line">            &#125;</span><br><span class="line">        Vue.component(&apos;组件名&apos;,project);     </span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt; </span><br><span class="line">       </span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">### 3. vue的props属性传值</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;!--父组件，可以在引用子组件的时候，通过属性绑定（v:bind）的形式，把需要传递给子组件的数据</span><br><span class="line">        传递到子组件内部--&gt;</span><br><span class="line">        &lt;com1 :parentmsg=&quot;msg&quot;&gt;</span><br><span class="line">        &lt;/com1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var vm = new Vue(&#123;</span><br><span class="line">            el: &apos;#app&apos;,</span><br><span class="line">            data:&#123;</span><br><span class="line">                msg: &apos;123父组件中的数据&apos; </span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;,</span><br><span class="line">            components:&#123;</span><br><span class="line">                &apos;com1&apos;:&#123;</span><br><span class="line">                    //子组件中，默认无法访问到父组件中的data和methods</span><br><span class="line">                    template: &apos;&lt;h1 @click=&quot;change&quot;&gt; 这是子组件 &#123;&#123;parentmsg&#125;&#125;&lt;/h1&gt;&apos;,</span><br><span class="line">                    //注意，组件中的所有props中的数据都是通过父组件传递给子组件的</span><br><span class="line">                    //propes中的数据是只可读</span><br><span class="line">                    props: [&apos;parentmsg&apos;] ,// 把父组件传递过来的parentmsg属性， 数组中，定义一下，这样才能用这个数据,</span><br><span class="line">                    //注意子组件中的data数据，并不是通过父组件传递过来的，而是子组件字有的，比如：子组件通过Ajax请求回来的值，可以放到data中</span><br><span class="line">                    //data中的数据可读可写</span><br><span class="line">                    data()&#123;</span><br><span class="line">                        return &#123;</span><br><span class="line">                            title: &apos;123&apos;,</span><br><span class="line">                            content: &apos;qqq&apos;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    methods: &#123;</span><br><span class="line">                        change()&#123;</span><br><span class="line">                            this.parentmsg=&apos;被修改&apos;   // 这里不推荐使用此方法修改传递参数值，会一直报出vue warning</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><font  color=#080808>注意：重要的来了，必须理解┗|｀O′|┛ 嗷~~<br>创建格式：Vue.component('组件名',{ /* ..组件的模板对象.. */ })<br>&nbsp;&nbsp;&nbsp;组件的第一个参数为组件名，而第二个参数是以对象的形式去描述一个组件。组件是可复用的 Vue 实例，所以它们与 new Vue 接收相同的选项，例如 data、computed、watch、methods 以及生命周期钩子等。仅有的例外是像 el 这样根实例特有的选项</font>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Jquery </tag>
            
            <tag> component </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python文件读read()、readline()、readlines()对比</title>
      <link href="/2019/11/07/python%E7%9A%84read_readlines_readline/"/>
      <url>/2019/11/07/python%E7%9A%84read_readlines_readline/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;read():读取整个文件，将文件内容放到一个字符串变量中<br><br>&nbsp;&nbsp;&nbsp;readline():读取整行，包括行结束符，并以其作为字符串返回<br><br>&nbsp;&nbsp;&nbsp;readline():读取所有行然后把它们作为一个字符串列表返回（即把每一行作为一个列表元素）<br></p><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> read() - readline() - readlines() </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo主体设置知识点</title>
      <link href="/2019/10/26/Hexo%E4%B8%BB%E4%BD%93%E8%AE%BE%E7%BD%AE%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2019/10/26/Hexo%E4%B8%BB%E4%BD%93%E8%AE%BE%E7%BD%AE%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p><fancybox><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1572260590229&di=c342004ec7897ef8697bd65876b3b9c5&imgtype=0&src=http%3A%2F%2F02imgmini.eastday.com%2Fmobile%2F20180822%2F20180822234333_351cde5dc9236b7836296868f06a44b4_2.jpeg" width="80%"></fancybox><br>介绍Hexo一些基本设置，比如分类，标签，作者，简要概述等等以及MarkDown的写法</p><a id="more"></a><h4 id="1-Hexo创建文章、标签、分类的Front-matter方法-Ⅰ-nbsp-nbsp-Front-matter-Ⅱ"><a href="#1-Hexo创建文章、标签、分类的Front-matter方法-Ⅰ-nbsp-nbsp-Front-matter-Ⅱ" class="headerlink" title="1.Hexo创建文章、标签、分类的Front-matter方法 Ⅰ&nbsp;&nbsp; Front-matter Ⅱ"></a>1.<a href="https://www.jianshu.com/p/6e4af897a3f0" target="_blank" rel="noopener">Hexo创建文章、标签、分类的Front-matter方法 Ⅰ</a>&nbsp;&nbsp; <a href="https://xaoxuu.com/wiki/material-x/pages/index.html#Front-matter" target="_blank" rel="noopener">Front-matter Ⅱ</a></h4><p>Front-matter 是md文件最上方以 — 分隔的区域，用于指定个别文件的变量<br></p><blockquote><p>其实Front-matter就是在\Hexo\source_posts下的.md文件中书写文章标题，上传时间，分类名，标签名等等</p></blockquote><table><thead><tr><th align="center">字段</th><th align="center">含义</th><th align="center">值类型</th><th align="center">默认值</th></tr></thead><tbody><tr><td align="center">layout</td><td align="center">布局模版</td><td align="center">String</td><td align="center">-</td></tr><tr><td align="center">title</td><td align="center">标题</td><td align="center">String</td><td align="center">-</td></tr><tr><td align="center">date</td><td align="center">创建时间</td><td align="center">Date</td><td align="center">文件创建时间</td></tr><tr><td align="center">description</td><td align="center">页面描述、摘要</td><td align="center">String</td><td align="center">-</td></tr><tr><td align="center">cover</td><td align="center">是否显示封面</td><td align="center">Bool</td><td align="center">true</td></tr></tbody></table><h4 id="2-Makedown标题页的写法"><a href="#2-Makedown标题页的写法" class="headerlink" title="2.Makedown标题页的写法"></a>2.Makedown标题页的写法</h4><pre>    ---    layout: 页面布局（配合主题文档使用）    title: 文章名称    date: 文章日期    comments: 文章是否开启评论    photos: 文章封面图（仅部分主题支持）    tags:       - 文章标签一      - 文章标签二    categories: # 文章分类（文章分类等级）                - 父分类                - 子分类                - 孙分类    description: 文章描述，即要在首页显示的摘要（仅部分主题支持）    ---    这里是摘要       <!-- more -->        这里是正文    注意：description 和 <!-- more --> 方式显示摘要二选一即可，部分主题不支持description，    每个配置英文冒号后面要空一格，不同主题配置有所差异，具体要参考主题文档</pre><h4 id="3-md文件的基本写法"><a href="#3-md文件的基本写法" class="headerlink" title="3.md文件的基本写法"></a>3.md文件的基本写法</h4><blockquote><p>3.1. ``` 代码段 ``` : 表示以原格式展示代码片段。比如</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$(function () &#123;</span><br><span class="line">    ......</span><br><span class="line">     //鼠标进入的时候,其他的li标签透明度：0.5</span><br><span class="line">    $(&quot;.wrap li&quot;).hover(function() &#123;</span><br><span class="line">        $(this).siblings().stop().fadeTo(400, 0.5);  //.stop():停止所有在指定元素上正在运行的动画。</span><br><span class="line">    &#125;, function() &#123;</span><br><span class="line">        // 鼠标离开，其他li 透明度改为 1</span><br><span class="line">        $(this).siblings().stop().fadeTo(400, 1);</span><br><span class="line">    &#125;);</span><br><span class="line">    console.log($(&apos;.attr a&apos;).prop(&apos;href&apos;));</span><br><span class="line">    console.log($(&apos;.attr a&apos;).prop(&apos;title&apos;));</span><br><span class="line">    console.log($(&apos;input:checkbox&apos;).attr(&apos;id&apos;));</span><br><span class="line">    console.log($(&apos;.office p:eq(0)&apos;).scrollTop());</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>3.2. &lt;img src=”url” width=” “&gt;</p></blockquote><p>&nbsp;&nbsp;&nbsp;表示在md文件中展示图片，若不想破坏图片原格式，就只需要写width或者height其中一个，另一个会自适应变化</p><blockquote><p>3.3. 文本修饰:粗体，斜体…</p></blockquote><p>&nbsp;&nbsp;&nbsp;粗体文本用两个*或_包含，斜体文本用一个_包含</p><blockquote><p>3.4. 表格(注意其格式)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| Tables        | Are           | Cool  |</span><br><span class="line">| ------------- |:-------------:| -----:|</span><br><span class="line">| col 3 is      | right-aligned | $1600 |</span><br><span class="line">| col 2 is      | centered      |   $12 |</span><br><span class="line">| zebra stripes | are neat      |    $1 |</span><br></pre></td></tr></table></figure><blockquote><p>3.5. <a href="https://www.114la.com/other/rgb.htm" target="_blank" rel="noopener">颜色RGB</a>和字体以及背景颜色</p></blockquote><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"Tahoma"</span>&gt;</span></span>这是一串Tahoma字体<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"黑体"</span>&gt;</span></span>这是一串黑体字<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"微软雅黑"</span>&gt;</span></span>这是一串微软雅黑<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"STCAIYUN"</span>&gt;</span></span>这是一串华文彩云<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">#00ced1</span> <span class="attr">size</span>=<span class="string">7</span> <span class="attr">face</span>=<span class="string">"黑体"</span>&gt;</span></span>背景色+字体+字的size<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">#00ffff</span> <span class="attr">size</span>=<span class="string">72</span>&gt;</span></span>颜色设置<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">gray</span> <span class="attr">size</span>=<span class="string">72</span>&gt;</span></span>灰色处理<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">#bfe1f1</span>&gt;</span></span>背景色是：#bfe1f1<span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">Size：规定文本的尺寸大小。可能的值：从 1 到 7 的数字。浏览器默认值是 3</span><br></pre></td></tr></table></figure><p><font face="Tahoma">这是一串Tahoma字体</font><br/><br><font face="黑体">这是一串黑体字</font><br/><br><font face="微软雅黑">这是一串微软雅黑</font><br/><br><font face="STCAIYUN">这是一串华文彩云</font><br/><br><font color=#00ced1 size=7 face="黑体">背景色+字体+字的size</font><br/><br><font color=#00ffff size=72>颜色设置</font><br/><br><font color=gray size=72>灰色处理</font><br/></p><blockquote><p>3.6. 转义字符</p></blockquote><p>&lt;br&gt; : 换行<br><br>\ : 转义字符，原生字符，不加修饰<br><br>&amp;nbsp; : 空格</p><blockquote><p>3.7 每一篇博文设置图片</p></blockquote><p>只需要在文章前面配置 photos 关键字即可，若没有这种配置，可以选择在正文插入图片，然后使用 <!-- more --> 将图片显示在摘要里</p><blockquote><p>3.8 图片可点击设置，单独出现</p></blockquote><p>&lt;fancybox&gt;图片设置&lt;/fancybox&gt;</p>]]></content>
      
      
      <categories>
          
          <category> 博客Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> front-matter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Hexo</title>
      <link href="/2019/10/25/hello-world/"/>
      <url>/2019/10/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><fancybox><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1573382292526&di=0009d867e1bde90c696eb40e0fd840e4&imgtype=jpg&src=http%3A%2F%2Fimg4.imgtn.bdimg.com%2Fit%2Fu%3D3010013829%2C2497003625%26fm%3D214%26gp%3D0.jpg" alt=""></fancybox></p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>初次见面，请多关照</title>
      <link href="/2019/10/20/%E5%88%9D%E6%AC%A1%E8%A7%81%E9%9D%A2_%E8%AF%B7%E5%A4%9A%E5%85%B3%E7%85%A7/"/>
      <url>/2019/10/20/%E5%88%9D%E6%AC%A1%E8%A7%81%E9%9D%A2_%E8%AF%B7%E5%A4%9A%E5%85%B3%E7%85%A7/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;这是一篇有关我如何使用 Github Pages 和 Hexo 搭建属于自己独立博客的功能展示</p><a id="more"></a><p>大家好–^^__^^–，我叫陈浩东<br></p><p><img src="https://cdn.jsdelivr.net/gh/FioraLove/CDN@1.1/5d4d2f1ba61c7.jpg" width="30%"><br></p><p>&nbsp;&nbsp;&nbsp;<code>本人是嘉兴双环第二分公司GP-12线,滚齿磨齿操作员</code>，目前正学习清洗包装流程、磨齿、滚齿、齿轮生产工艺以及安全生产。&nbsp;&nbsp;&nbsp;对网站开发的有关知识几乎为零，这也是我搭建好自己的不完全博客之后写的第一篇博客，刚开始搭建博客的时候自己也是网上各种百度，由于自己属于小白那种，历经了千辛万苦才弄好，所以借这个机会会一直坚持下去分析自己的知识，一起走向成功的彼岸！</p>]]></content>
      
      
      <categories>
          
          <category> 博客Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github Page </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
