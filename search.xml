<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据库存储引擎与索引,视图</title>
      <link href="/2019/11/12/mysql(%E4%BA%8C)/"/>
      <url>/2019/11/12/mysql(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;MySQL支持多种存储引擎，以适用于不同领域的数据库应用需要，用户可以根据需要进行选择甚至是定制自己的引擎以提高应用效率。</p><ul><li>索引概述</li><li>索引作用</li><li>视图</li><li>视图的操作</li></ul><a id="more"></a><h3 id="1-索引概述"><a href="#1-索引概述" class="headerlink" title="1.索引概述"></a>1.索引概述</h3><p>索引在创建表的时候可以同时创建，也可以随时增加新的索引<br>创建新索引的语法为:<br>create [unique|fulltext|spatial] index index_name [using index_type] on table_name( col_name [(length)] [asc|desc])<br>删除索引： DROP INDEX index_name on table_name</p><h3 id="2-索引作用"><a href="#2-索引作用" class="headerlink" title="2.索引作用"></a>2.索引作用</h3><p>合理的创建索引是提高查询速度最有效的方式之一。<br>&nbsp;&nbsp;&nbsp;&nbsp;在没有建立索引的情况下，查询一条数据的过程是这样：<br>MySQL是从第一条记录开始查表，在某一个地方查到了匹配的数据，停止？NO，继续查询剩下的数据，直到查完整张表。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;在建立合适索引的情况下，查询一条数据的过程又是这样：<br>MySQL先根据索引快速到达一个位置去搜索数据文件，然后查出数据，而不必查看整张表的数据。<br>因此，为了提高查询速度，合理建立索引是非常有必要的。</p><hr><table><thead><tr><th>类型</th><th align="center">描述</th></tr></thead><tbody><tr><td>普通索引</td><td align="center">基本的索引类型，允许定义索引的列中插入重复值和空值</td></tr><tr><td>唯一索引</td><td align="center">索引列值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一</td></tr><tr><td>主键索引</td><td align="center">特殊的唯一索引，不允许有空值</td></tr><tr><td>全文索引</td><td align="center">类型为FULLTEXT,支持值的全文查找，允许在索引列中插入重复值和空值</td></tr><tr><td>组合索引</td><td align="center">在表的多个字段组合上创建的索引</td></tr></tbody></table><h3 id="3-视图（5-0-1提供视图功能）"><a href="#3-视图（5-0-1提供视图功能）" class="headerlink" title="3.视图（5.0.1提供视图功能）"></a>3.视图（5.0.1提供视图功能）</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;视图是一种虚拟存在的表，它存储的是查询语句，显示出来的是查询的结果；更直白的说就是当我们需要从表中查询一些信息时需要编写相关SQL语句，将这些SQL语句存储为视图，那么我们调用这些视图的时候就相当于执行了SQL语句，从而可以得到想要的结果<br>eg:创建视图并执行查询操作<br> create view view_name as select qty,price,qty*price as value from temp;</p><h4 id="视图有什么作用"><a href="#视图有什么作用" class="headerlink" title="视图有什么作用"></a>视图有什么作用</h4><blockquote><p>1.视图就像是一个封装了很多功能的函数，我们把一系列复杂的查询语句存储为一个视图，这样在需要频繁使用这些语句时不必反复编写，直接使用视图代替即可</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">如果要频繁获取表user的name和表goods的name。就应该使用以下sql语句：</span><br><span class="line">select a.name as username, b.name as goodsname from user as a, goods as b, ug as c where a.id=c.userid and c.goodsid=b.id;</span><br><span class="line"></span><br><span class="line">但有了视图就不一样了，创建视图other。示例</span><br><span class="line">create view other as select a.name as username, b.name as goodsname from user as a, goods as b, ug as c where a.id=c.userid and c.goodsid=b.id;</span><br><span class="line"></span><br><span class="line">创建好视图后，就可以这样获取user的name和goods的name：</span><br><span class="line"> select * from other;</span><br></pre></td></tr></table></figure><blockquote><p>2.对数据库进行重构但仍不会影响程序运行</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">假如因为某种需求，需要将user表拆成表usera和表userb，该两张表的结构如下：</span><br><span class="line">        测试表:usera有id，name，age字段</span><br><span class="line">        测试表:userb有id，name，sex字段</span><br><span class="line">这时如果程序端一直使用的sql语句是：select * from user;那就会报错提示该表不存在，这时要么去更改程序的查询语句要么就创建视图。显然，创建视图更简单，成本更低。</span><br><span class="line">以下sql语句创建视图：</span><br><span class="line">create view user as select a.name,a.age,b.sex from usera as a, userb as b where a.name=b.name;</span><br><span class="line">以上假设name都是唯一的。</span><br><span class="line">这时程序端端使用的sql语句：select * from user;就不会报错。这就实现了更改数据库结构，而不用更改脚本程序的功能。</span><br></pre></td></tr></table></figure><h3 id="4-视图的操作"><a href="#4-视图的操作" class="headerlink" title="4.视图的操作"></a>4.视图的操作</h3><blockquote><p>4.1 创建或修改视图</p></blockquote><p>create [ or replace ] [ algorithm = { undefined | merge | temptable } ] view view_name [ (column_list) ] as select_statement [ with [ cascaded | local ] check option ]</p><ul><li>使用了OR REPLACE可以修改视图，或者直接就CREATE OR REPLACE 替换为ALTER 即变成修改语法；</li><li>UNDEFINED：未定义指定算法；MERGE：更新视图表数据的同时会更新真实表的数据（默认）；TEMPTABLE：只能查询不能更新；</li><li>CASCADED(默认)：必须满足所有针对该视图的所有视图的条件才可以更新；LOCAL：只需满足本视图的条件就可以更新；</li><li>WITH CHECK OPTION：需要满足相关的检查条件才能进行更新<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--常量视图</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">view</span> <span class="keyword">pi</span> <span class="keyword">as</span> <span class="keyword">select</span> <span class="number">3.1415926</span> <span class="keyword">as</span> <span class="keyword">pi</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">--select中包含子查询</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">view</span> city_view <span class="keyword">as</span> <span class="keyword">select</span> (<span class="keyword">select</span> city <span class="keyword">from</span> city <span class="keyword">where</span> city_id=<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>4.2 查看视图 show full tables where table_type like ‘view’;</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
          <category> 存储引擎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> InnoDB </tag>
            
            <tag> MyISAM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery学习</title>
      <link href="/2019/11/11/jquery/"/>
      <url>/2019/11/11/jquery/</url>
      
        <content type="html"><![CDATA[<p><font color=#00CD00>简单来说，jQuery是一个js库，却极大的简化了JavaScript编程。好记性不如烂笔头，mark一下自己遇到的问题</font><br><fancybox><img src="http://pic4.zhimg.com/v2-406e0657b46be0bb4b12ca3661c94397_b.jpg" width="60%"></fancybox></p><a id="more"></a><h3 id="1-选择器"><a href="#1-选择器" class="headerlink" title="1. 选择器"></a>1. 选择器</h3><p>id选择器 $(“#div”)<br>    类选择器  $(“.div”)<br>    标签选择器 $(“div”)<br>    并集选择器 $(“selector1,selector2,…,selectN”)：使用逗号连接，以数组形式返回所有的合并元素<br>    后代选择器 $(“div p”):div标签下的p标签，包含子孙节点<br>    过滤选择器 $(“div:eq(n)”) :eq(index)获取给定索引值的元素  从0开始计数<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:gt(index) 匹配所有大于给定索引值的元素<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:lt(index) 匹配所有小于给定索引值的元素<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:even      匹配所有索引值为偶数的元素，从 0 开始计数<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:odd       匹配所有索引值为奇数的元素，从 0 开始计数<br>属性选择器 $(“div[attribute=”value”]”)   :匹配给定的属性是某个特定值的元素</p><p>表单的选择器:$(‘input:radio/checkbox/text/password/…’),即: type值为radio、checkbox、password等的input元素</p><p>筛选选择器 : $(‘div’).eq(n) 获取第n个元素 数值从0开始<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.first()获取第一个元素<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.last()获取最后一个元素<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.parent() 选择父亲元素<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.siblings()选择兄弟元素<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.find() 查找目标元素值 </p><p><font color=#00CD00>PS:注意筛选选择器与过滤选择器的函数位置</font></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
            <tag> 选择器 </tag>
            
            <tag> API </tag>
            
            <tag> Ajax </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python全栈系列章节更新（一）</title>
      <link href="/2019/11/11/python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2019/11/11/python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>Python是一个“优雅”、“明确”、“简单”的编程语言,主要流行于网络爬虫、数据分析挖掘、机器学习、人工智能以及运维等等<br><fancybox><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1573535588082&di=d71746cb12806b9ce26862e1a2976671&imgtype=0&src=http%3A%2F%2Fimg2018.cnblogs.com%2Fblog%2F1457234%2F201905%2F1457234-20190506010127395-1632502037.gif" alt=""></fancybox><br>字符串：len(),split(),join()…<br>列表：append(),pop(),count()…<br>元组与列表类似，不同之处在于元组的元素不能修改<br>字典：</p><a id="more"></a><h3 id="1-字符串"><a href="#1-字符串" class="headerlink" title="1.字符串"></a>1.字符串</h3><blockquote><p>zip()函数：将可迭代对象所包含的元素是由原列表元素组成的元组</p></blockquote><p>a = [a,b,c]  b = [1, 2, 3]<br>c = [x for x in zip(a,b)]<br>c = [(a, 1), (b, 2), (c, 3)]<br>结果为元祖型列表</p><blockquote><p>format():位置参数，参数索引从0开始，format里填写{}对应的参数值</p></blockquote><p>msg = “my name is {}, and age is {}”.format(‘chd’,18)<br>渲染结果：my name is chd, and age is 18</p><blockquote><p>str.index()字符串索引: 索引值从0开始,不存在就会报错</p></blockquote><p>s=’index’ s[0]=i<br>s.index(‘i’) = 0  : 查找目标字符串索引值</p><blockquote><p>str.find(‘目标字符串’)查找目标字符串,不存在就返回数值1</p></blockquote><blockquote><p>移除指定字符串 str.strip()</p></blockquote><p>s = ‘  hello,world!  ‘<br>s.strip()<br>s.lstrip()<br>s.rstrip()<br>s2 = ‘\hello,world!&#39;<br>s2.strip(‘&#39;)</p><blockquote><p>len(str)字符串长度</p></blockquote><p>len(‘hello,world’) =&gt; 11</p><blockquote><p>str.replace(a,b)替换：在字符串str中，用b来替换a</p></blockquote><p>‘hello,world’.replace(‘o’,’a’) =&gt; ‘hella,warld’</p><blockquote><p>str[a:b:c] 切片操作</p></blockquote><blockquote><p>string.capitalize()把字符串的第一个字符大写</p></blockquote><blockquote><p>str.count(‘目标字符串’):返回 str 在 string 里面出现的次数</p></blockquote><blockquote><p>“连接字符”.join(seq序列):返回 str 在 string 里面出现的次数</p></blockquote><p>以指定字符串作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串</p><blockquote><p>str.lower()/upper() 将字符串全部转换为小写/大写</p></blockquote><p>“hello world”.lower()/upper() =&gt;”hello world” / “HELLO WORLD”</p><blockquote><p>str.split(指定字符串) 以指定字符串来分割目标字符串，以列表形式返回</p></blockquote><p>url = “<a href="http://www.baidu.com/python/image/123456.jpg&quot;" target="_blank" rel="noopener">http://www.baidu.com/python/image/123456.jpg&quot;</a><br>#以“.” 进行分隔<br>path =url.split(“.”)<br>path=[‘<a href="http://www&#39;" target="_blank" rel="noopener">http://www&#39;</a>, ‘baidu’, ‘com/python/image/123456’, ‘jpg’]</p><h3 id="2-列表"><a href="#2-列表" class="headerlink" title="2.列表"></a>2.列表</h3><blockquote><p>列表截取（索引从0开始，且满足左闭右开原则）与拼接:从右至左取值，则索引默认从-1开始</p></blockquote><p>L=[‘Google’, ‘Runoob’, ‘Taobao’]<br>L[2]=’Taobao’ L[-1]=’Taobao’</p><blockquote><p>列表函数和方法</p></blockquote><table><thead><tr><th>函数和方法</th><th align="center">描述</th></tr></thead><tbody><tr><td>len(list)</td><td align="center">列表元素个数</td></tr><tr><td>list(seq)</td><td align="center">将元组或字符串转换为列表</td></tr><tr><td>max/min(list)</td><td align="center">返回列表元素最大/最小值</td></tr><tr><td>list.append(obj)</td><td align="center">在列表末尾添加新的对象</td></tr><tr><td>list.count(obj)</td><td align="center">统计某个元素在列表中出现的次数</td></tr><tr><td>list.extend(seq)</td><td align="center">在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</td></tr><tr><td>list.index(obj)</td><td align="center">从列表中找出某个值第一个匹配项的索引位置</td></tr><tr><td>list.insert(index, obj)</td><td align="center">将对象插入列表</td></tr><tr><td>list.pop([index=-1])</td><td align="center">移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</td></tr><tr><td>list.remove(obj)</td><td align="center">移除列表中某个值的第一个匹配项</td></tr><tr><td>list.reverse()</td><td align="center">反向列表中元素</td></tr><tr><td>list.sort( key=None, reverse=False)</td><td align="center">对原列表进行排序</td></tr></tbody></table><h3 id="3-元组"><a href="#3-元组" class="headerlink" title="3.元组"></a>3.元组</h3><p>tuple(seq)：将列表转换为元组。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
            <tag> 选择器 </tag>
            
            <tag> API </tag>
            
            <tag> Ajax </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库(一)：DDL，DML，DCL</title>
      <link href="/2019/11/11/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2019/11/11/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;最近严重记忆力下降加上一直没有怎么用到数据库，好多命令都回忆不起来了，做个小笔记，mark。<br>今天建彬师傅（他不是厉不厉害的问题，他真的就是那种，很少见，很牛逼的存在…）给我讲了一个非常有用的小知识点，使我茅塞顿开，放在摘要页，很有用：<a href="https://blog.csdn.net/gaoshuying/article/details/53410137" target="_blank" rel="noopener">跨用户访问数据表的方式</a><br><font color=#5CACEE>1.两个用户在同一个应用服务器上:select * from ‘user_name’&nbsp;.&nbsp;’table_name’;<br>2.两个用户不在同一个应用服务器上。。。<br><fancybox><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1573658629292&di=ed394bb8e9aadd1d0f439c0a4018a796&imgtype=0&src=http%3A%2F%2Fs11.51cto.com%2Fimages%2F201901%2F20%2Fdec97881d1e4071c6e51c2a30105835d.jpg" alt=""></fancybox><br></font></p><a id="more"></a><h3 id="1-启动服务"><a href="#1-启动服务" class="headerlink" title="1.启动服务"></a>1.启动服务</h3><p>net start 服务器名（Windows）<br>service start 服务器名（linux）</p><h3 id="2-登录与修改密码"><a href="#2-登录与修改密码" class="headerlink" title="2.登录与修改密码"></a>2.登录与修改密码</h3><table><thead><tr><th>命令</th><th align="center">含义</th></tr></thead><tbody><tr><td>&nbsp;&nbsp;&nbsp;&nbsp;</td><td align="center">mysql -u root -p -h localhost：登录MySQL（p表示密码；u表示用户名；h表示主机地址）</td></tr><tr><td>&nbsp;&nbsp;&nbsp;&nbsp;</td><td align="center">mysqladmin -u用户名 -p旧密码 password新密码 :修改用户名密码</td></tr></tbody></table><h3 id="3-基本使用"><a href="#3-基本使用" class="headerlink" title="3.基本使用"></a>3.基本使用</h3><table><thead><tr><th>命令</th><th align="center">含义</th></tr></thead><tbody><tr><td>show databases;</td><td align="center">用于显示所有的数据库</td></tr><tr><td>use 数据库名;</td><td align="center">使用目标数据库</td></tr><tr><td>select database()/version()/now()/user();</td><td align="center">显示当前连接的信息</td></tr><tr><td>show tables;</td><td align="center">用于显示选中数据库下的所有的表</td></tr><tr><td>desc table_Name;</td><td align="center">查看表结构</td></tr><tr><td>show create table table_name \G;</td><td align="center">查看到创建时的SQL语句及更多详细信息  \G使记录按照字段竖向排列，易于阅读</td></tr></tbody></table><p>创建数据库并指定编码格式:create database if not exists 数据库名 character set utf8;<br>删除数据库：DROP DATABASE [IF EXISTS] 数据库名;</p><h3 id="4-DDL-amp-DML"><a href="#4-DDL-amp-DML" class="headerlink" title="4.DDL&amp;DML"></a>4.DDL&amp;DML</h3><p>DDL:数据定义语言仅对数据库，表，列，索引起作用（create、drop、alter）<br>DML:数据操纵语言仅对table中的具体数据起作用（select、insert、delete、update）</p><h3 id="5-DDL"><a href="#5-DDL" class="headerlink" title="5.DDL"></a>5.DDL</h3><blockquote><p>1.创建表</p></blockquote><pre>创建表    create table 表名(    ​  列名 数据类型  列级约束,    ​  列名 数据类型  列级约束    ​ )【表类型】【表字符集】【表注释】</pre>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#创建学生表，并设置表类型、字符集</span><br><span class="line">CREATE TABLE `student` (</span><br><span class="line">  `id` INT(4) NOT NULL AUTO_INCREMENT COMMENT &apos;主键、学号&apos;,</span><br><span class="line">  `psd` VARCHAR(20) COLLATE utf8_estonian_ci NOT NULL DEFAULT &apos;123456&apos; COMMENT &apos;密码&apos;,</span><br><span class="line">  `name` VARCHAR(30) COLLATE utf8_estonian_ci NOT NULL DEFAULT &apos;匿名&apos; COMMENT &apos;学生姓名&apos;,</span><br><span class="line">  `sex` VARCHAR(2) COLLATE utf8_estonian_ci NOT NULL DEFAULT &apos;男&apos; COMMENT &apos;性别&apos;,</span><br><span class="line">  `birsday` DATETIME DEFAULT NULL,</span><br><span class="line">  `email` VARCHAR(20) COLLATE utf8_estonian_ci DEFAULT NULL,</span><br><span class="line">   PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=INNODB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 COLLATE=utf8_estonian_ci</span><br></pre></td></tr></table></figure><ul><li><p><i class="fas fa-hand-point-right"></i> <a href="https://www.w3school.com.cn/sql/sql_datatypes.asp" target="_blank" rel="noopener">数据类型</a> </p></li><li><p>约束条件：<br>  not null<br>  unique<br>  primary key 主键名<br>  FOREIGN KEY (Id_P) REFERENCES Persons(Id_P) :一个表中的 FOREIGN KEY 指向另一个表中的 PRIMARY KEY<br>  default 默认值<br>  AUTO INCREMENT :在每次插入新记录时，自动地创建主键字段的值</p></li></ul><blockquote><p>2.删除表：drop table table_name</p></blockquote><blockquote><p>3.修改表</p></blockquote><table><thead><tr><th>命令</th><th align="center">含义</th></tr></thead><tbody><tr><td>修改表中列的数据类型</td><td align="center">alter table table_name modify 列名 column_definition</td></tr><tr><td>增加表字段</td><td align="center">alter table table_name add [column] 列名 column_definition</td></tr><tr><td>删除表字段表字段</td><td align="center">alter table table_name drop [column] 列名</td></tr><tr><td>表的字段改名</td><td align="center">alter table table_name change [column] old_col_name new_col_name</td></tr><tr><td>表字段改名同时也可修改字段类型</td><td align="center">alter table table_name change [column] old_col_name new_col_name column_definition</td></tr><tr><td>更改表名</td><td align="center">alter table table_name rename [to] new_tablename</td></tr></tbody></table><h3 id="6-DML语句"><a href="#6-DML语句" class="headerlink" title="6.DML语句"></a>6.DML语句</h3><table><thead><tr><th>命令</th><th align="center">含义</th></tr></thead><tbody><tr><td>插入数据</td><td align="center">insert into table_name ( field1, field2,…) values (value1,value2,….);</td></tr><tr><td>一次性插入多条数据</td><td align="center">insert into table_name ( field1, field2,…) values (value1,value2,..),(value1,value2,..)…;</td></tr><tr><td>更新记录</td><td align="center">UPDATE table_name SET field1=value1，field2=value2，… [ WHERE CONDITION ]</td></tr><tr><td>删除某一项记录</td><td align="center">DELETE FROM table_name [WHERE CONDITION ]</td></tr><tr><td>排序和限制</td><td align="center">SELECT * FROM tablename [ WHERE CONDITION ] [ ORDER BY field1 [ DESC\ASC ], field2 [ DESC\ASC], ..]</td></tr><tr><td>表连接</td><td align="center">select ename,deptname from emp1 left join dept on emp1.deptno=dept.deptno;</td></tr><tr><td>子查询</td><td align="center">关键字主要有in、not in、=、!=、exists、not exists,between and等等</td></tr></tbody></table><p>1.可以不用指定字段名称，但此时后面的values应该与表的字段顺序保持一致<br>2.对于某些字段允许空值、非空但是有指定的默认值、自增长等，这些字段在insert时如果没有指定value，那么将会右系统自动配置</p><h3 id="7-DCL语句"><a href="#7-DCL语句" class="headerlink" title="7.DCL语句"></a>7.<a href="https://blog.csdn.net/ywk_hax/article/details/83351552" target="_blank" rel="noopener">DCL语句</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">创建z1用户，密码为123，对数据库test1里的所有表具有查询和插入权限</span><br><span class="line">mysql&gt; grant select,insert on test1.* to &apos;z1&apos;@&apos;localhost&apos; identified by &apos;123&apos;;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.01 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; exit</span><br><span class="line">Bye</span><br><span class="line"> </span><br><span class="line">用户z1登陆，这里提示密码最好不要直接写在在命令行，会有风险</span><br><span class="line">C:\Users\15330&gt;mysql -u z1 -p123</span><br><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 18</span><br><span class="line">Server version: 5.7.17-log MySQL Community Server (GPL)</span><br><span class="line"> </span><br><span class="line">Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"> </span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"> </span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line"> </span><br><span class="line">mysql&gt; use test1;      登陆后该用户对test1库内的表插入操作都是成功的</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; insert into emp1 values(&apos;24&apos;,&apos;hwtong&apos;,&apos;1989-07-24&apos;,&apos;2017-08-16&apos;,&apos;10000&apos;,5);</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br></pre></td></tr></table></figure><h3 id="未完待续……"><a href="#未完待续……" class="headerlink" title="未完待续……"></a>未完待续……</h3>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
          <category> DDL，DML，DCL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> database </tag>
            
            <tag> DDL </tag>
            
            <tag> DML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker容器虚拟化技术</title>
      <link href="/2019/11/10/docker%E5%AE%B9%E5%99%A8%E8%99%9A%E6%8B%9F%E6%8A%80%E6%9C%AF/"/>
      <url>/2019/11/10/docker%E5%AE%B9%E5%99%A8%E8%99%9A%E6%8B%9F%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<p><font color=#00CD00>简单来说，在Windows系统下安装各种运行环境的坑简直不要太多了(●￣(ｴ)￣●)，并不仅限于docker、Nginx、PHP、Python等等</font>，我会尽详细写出实际过程中遇到的各种各样的奇葩问题<br><fancybox><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1573382566146&di=7b10832832e7d3c37d3f4e2e84d45d5d&imgtype=jpg&src=http%3A%2F%2Fimg3.imgtn.bdimg.com%2Fit%2Fu%3D859959778%2C1194286727%26fm%3D214%26gp%3D0.jpg" alt=""></fancybox></p><a id="more"></a><h3 id="1-docker适用环境"><a href="#1-docker适用环境" class="headerlink" title="1.docker适用环境"></a>1.docker适用环境</h3><p>其实docker本身也没有太多在Windows下花功夫。<font color=#00CD00>目前，docker仅支持Linux与Windows企业版、专业版、教育版。ps：家庭版不支持docker</font>,并且win10下可以安装<a href="https://hub.docker.com/editions/community/docker-ce-desktop-windows?tab=description" target="_blank" rel="noopener">docker-for-windows</a>,这个安装包是<br>专门适用于win10，安装简单，而对于win7/8则可以使用<a href="https://github.com/docker/toolbox/releases" target="_blank" rel="noopener">Docker Toolbox下载地址</a></p><h3 id="2-Windows下无法对docker容器进行端口访问（端口映射的问题）"><a href="#2-Windows下无法对docker容器进行端口访问（端口映射的问题）" class="headerlink" title="2.Windows下无法对docker容器进行端口访问（端口映射的问题）"></a>2.Windows下无法对docker容器进行端口访问（端口映射的问题）</h3><p>1.问题详情<br><br>&nbsp;&nbsp;&nbsp;在Windows10系统服务器中安装了docker和docker-compose<br><br>&nbsp;&nbsp;&nbsp;并尝试在其中运行Nginx服务，映射也做好<br><br>&nbsp;&nbsp;&nbsp;问题：在主机的浏览器中，打开localhost:port无法访问对应的Web服务。<br><br>2.问题解析<br><br>&nbsp;&nbsp;&nbsp;原因：docker是运行在Linux上的，在Windows中运行docker，实际上还是在Windows下先安装了一个Linux环境，然后在这个系统中运行的docker。也就是说，服务中使用的localhost指的是这个Linux环境的地址，而不是我们的宿主环境Windows10。<br><br>3.解决办法<br><br>&nbsp;&nbsp;&nbsp;启动docker命令行窗口<br><br>&nbsp;&nbsp;&nbsp;输入命令:docker-machine ip default<br><br>&nbsp;&nbsp;&nbsp;Linux的ip地址，一般情况下这个地址是192.168.99.100<br><br>&nbsp;&nbsp;&nbsp;然后在Windows的浏览器中，输入 <a href="http://IP:port" target="_blank" rel="noopener">http://IP:port</a> 即可启用（<a href="http://192.168.99.100：8069）" target="_blank" rel="noopener">http://192.168.99.100：8069）</a><br></p><h3 id="3-docker与VMware不可兼容"><a href="#3-docker与VMware不可兼容" class="headerlink" title="3.docker与VMware不可兼容"></a>3.docker与VMware不可兼容</h3><p>&nbsp;&nbsp;&nbsp;在Windows下安装docker，第一步就是要打开Hyper-V(打开控制面板 - 程序和功能 - 启用或关闭Windows功能，勾选Hyper-V),开启win自带的虚拟管理技术。但是若想要使用VMware，则必须关闭Hyper-V，鱼和熊掌不可兼得呀！(′д｀ )…彡…彡</p><h3 id="4-Windows：vmware与hyper-v不兼容-请移除hyper-v角色"><a href="#4-Windows：vmware与hyper-v不兼容-请移除hyper-v角色" class="headerlink" title="4.Windows：vmware与hyper-v不兼容,请移除hyper-v角色"></a>4.Windows：vmware与hyper-v不兼容,请移除hyper-v角色</h3><p>1、请移除hyper-v角色。<br>（1）以管理员身份（win + x）运行命令提示符；<br>（2）执行命令：bcdedit /set hypervisorlaunchtype off<br>（3）重启系统，运行vm即可。<br>2、如果想要恢复hyper启动：<br>&nbsp;&nbsp;&nbsp;bcdedit / set hypervisorlaunchtype auto</p><h3 id="5-docker-run后接-bin-sh和接-bin-bash的区别是什么："><a href="#5-docker-run后接-bin-sh和接-bin-bash的区别是什么：" class="headerlink" title="5.docker run后接/bin/sh和接/bin/bash的区别是什么："></a>5.docker run后接/bin/sh和接/bin/bash的区别是什么：</h3><p>比如我们要获取一个nginx镜像，同一镜像存在有不同的tags<br>&nbsp;&nbsp;&nbsp;/bin/sh命令仅适用于tags带alpine标签的： nginx:1.17-alpine；<br>&nbsp;&nbsp;&nbsp;/bin/bash命令仅适用于tags不带alpine标识的：nginx：laster，nginx:1.8…</p><h3 id="6-docker运行MySQL服务"><a href="#6-docker运行MySQL服务" class="headerlink" title="6.docker运行MySQL服务"></a>6.<a href="https://blog.csdn.net/siying8419/article/details/79670246" target="_blank" rel="noopener">docker运行MySQL服务</a></h3><blockquote><ol><li>拉取镜像<br>docker pull mysql:[tag]</li><li>创建并运行容器<br>docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql：5.6</li></ol></blockquote><p>ps: -p 表示指定访问端口<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-e 设置环境变量，或者覆盖已存在的环境变量<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-d 表示以守护式方式来运行容器<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MYSQL_ROOT_PASSWORD=123456 声明MySQL的用户名为ROOT，密码为123456</p><blockquote><ol start="3"><li>查看容器是否启动<br>docker ps </li><li>启动容器<br>docker start container_id</li></ol></blockquote><blockquote><ol start="5"><li>进入容器内部,以命令行交互<br>docker exec -it container_id /bin/bash</li></ol></blockquote><blockquote><ol start="6"><li>登录MySQL<br>mysql -u root -p 然后在输入密码</li></ol></blockquote><blockquote><ol start="7"><li>成功表示已经成功登陆MySQL</li></ol></blockquote><h3 id="7-最强万能公式-数据卷挂载式创建容器"><a href="#7-最强万能公式-数据卷挂载式创建容器" class="headerlink" title="7.最强万能公式:数据卷挂载式创建容器"></a>7.最强万能公式:数据卷挂载式创建容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">守护式：docker run -di [--privileged=true] -P(或者指定端口 -p 外部port:该容器默认端口) \--name=&quot;newNginx&quot;  -v /home/chd/Desktop/entwechatapp:/var/www/EntWeChatApp:rw  nginx:1.15.7-alpine</span><br><span class="line">交互式：docker run -it [--privileged=true] -P(或者指定端口 -p 外部port:该容器默认端口) \--name=&quot;newNginx&quot;  -v /home/chd/Desktop/entwechatapp:/var/www/EntWeChatApp:rw  nginx:1.15.7-alpine</span><br><span class="line">含义：</span><br><span class="line">   a） 以-v /home/chd/Desktop/entwechatapp:/var/www/EntWeChatApp:rw 带rw(read,write)权限来将宿主机与容器进行数据卷挂载</span><br><span class="line">   b) docker run 以新容器名和端口号以及守护式或者交互式来创建容器</span><br></pre></td></tr></table></figure><h3 id="8-宿主机与docker容器权限纠纷"><a href="#8-宿主机与docker容器权限纠纷" class="headerlink" title="8.宿主机与docker容器权限纠纷"></a>8.宿主机与docker容器权限纠纷</h3><p>问题描述：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;它来了！问题又出现了！哭啦。数据卷挂载时，即使声明了rw权限，在宿主机中创建文件，数据共享后，容器内能够具有正常的rw权限；但在容器内新建了文件后，宿主机就只有只读权限，无法修改文件内容。</p><p>解决方案：宿主机的权限不够<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在（7）式中的万能公式中添加：docker run ··· --privileged=true ···</p><h3 id="9-docker配置nginx的配置文件"><a href="#9-docker配置nginx的配置文件" class="headerlink" title="9.docker配置nginx的配置文件"></a>9.<a href="https://www.cnblogs.com/zfding/p/11429695.html" target="_blank" rel="noopener">docker配置nginx的配置文件</a></h3><p><del>命令：<code>docker run --name=&quot;dnmp_nginx&quot; -p 80:80 -v /home/docker-nginx/nginx.conf:/etc/nginx/nginx.conf -v /home/docker-nginx/log:/var/log/nginx -v /home/docker-nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf -di nginx:\[tags]</code><br>&nbsp;&nbsp;&nbsp;&nbsp;第一个-v 表示将你本地的nginx.conf覆盖你要起启动的容器的nginx.conf文件，第二个表示将日志文件进行挂载，就是把nginx服务器的日志写到你docker宿主机的/home/docker-nginx/log/下面。第三个-v 表示的和第一个-v意思一样的<br>&nbsp;&nbsp;&nbsp;&nbsp;我个人更喜欢守护式映射的方式，麻烦的是需要自己准备好nginx.conf 和default.conf文件，我是直接从容器里面复制的，然后根据自己的需要改的</del></p><p>我都想把杀了，部署nginx太多坑了，不过参考了<a href="https://blog.csdn.net/qierkang/article/details/92657302" target="_blank" rel="noopener">此博文</a>，最终解决了问题，解决方法：</p><blockquote><p>1.创建三个根目录根据情况创建：/docker/nginx/conf www logs</p></blockquote><p>docker run -d -p 80:80 --name=”nginx” --net host -v /docker/nginx/www:/usr/share/nginx/html -v /docker/nginx/logs:/var/log/nginx nginx:1.17.5</p><blockquote><p>2.不对配置文件进行数据挂载即 -v /docker/nginx/conf/nginx.conf:/etc/nginx/nginx.conf 这个   </p></blockquote><blockquote><p>3.docker exec -it nginx /bin/bash （进入容器 获取文件）</p></blockquote><blockquote><p>4.cd /etc/nginx/ （这里主要获取配置文件路径的）,然后exit</p></blockquote><blockquote><p>5.数据拷贝<br>进入宿主机目录文件 cd /docker/nginx/conf/<br>将已经运行成功的容器的配置文件拷贝到宿主机的配置文件目录：docker cp 容器ID:/etc/nginx/nginx.conf .（ps：“.”表示拷贝到当前目录）</p></blockquote><p>ps：文件copy成功后 把nginx容器先删除掉</p><blockquote><p>6.创建最终的nginx容器</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run -di -p 80:80 </span><br><span class="line">--name nginx </span><br><span class="line">[--net host] :再思考一下有没有必要写，使用–net = host时,它告诉容器使用主机网络堆栈.因此无法将端口暴露给主机,因为它是主机(就网络堆栈而言).</span><br><span class="line">-v /docker/nginx/www:/usr/share/nginx/html </span><br><span class="line">-v /docker/nginx/conf/nginx.conf:/etc/nginx/nginx.conf </span><br><span class="line">-v /docker/nginx/logs:/var/log/nginx </span><br><span class="line">nginx:1.17.5</span><br><span class="line"></span><br><span class="line">ps:成功后就代表部署成功</span><br></pre></td></tr></table></figure><p>PS：访问可能会403 因为/docker/nginx/www/ 里面没有index.html放进去就好了</p><p>挂载成功后，给宿主机上的www目录（或整个文件目录）增加权限，不然一直无法读写：<br>&nbsp;&nbsp;&nbsp;&nbsp;sudo chmod -R 777 目标目录 ：给目标目录赋予最大管理员权限<br>&nbsp;&nbsp;&nbsp;&nbsp;sudo chmod +/-rwx 文件名|目录  给文件或目录的赋予权限</p><h3 id="10-docker配置MySQL，redis教程等，请点击此处链接"><a href="#10-docker配置MySQL，redis教程等，请点击此处链接" class="headerlink" title="10.docker配置MySQL，redis教程等，请点击此处链接"></a>10.docker配置MySQL，redis教程等，<a href="https://pan.baidu.com/s/1nUE4pfe2wThYVGMEYqADXw" target="_blank" rel="noopener">请点击此处链接</a></h3><p>命令:<code>docker run -di -p 12345:3306 \--name=&quot;mysql&quot; -v /lnmp/mysql/conf:/etc/mysql/conf.d -v /lnmp/mysql/logs:/logs -v /lnmp/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456:rw  mysql:5.6</code></p><p>命令说明：<br>-p 12345:3306：将主机的12345端口映射到docker容器的3306端口。<br>--name mysql：运行服务名字<br>-v /lnmp/mysql/conf:/etc/mysql/conf.d ：将主机/lnmp/mysql录下的conf/my.cnf 挂载到容器的 /etc/mysql/conf.d<br>-v /lnmp/mysql/logs:/logs：将主机/lnmp/mysql目录下的 logs 目录挂载到容器的 /logs。<br>-v /lnmp/mysql/data:/var/lib/mysql ：将主机/lnmp/mysql目录下的data目录挂载到容器的 /var/lib/mysql<br>-e MYSQL_ROOT_PASSWORD=123456：初始化 root 用户的密码。<br>-d mysql:5.6 : 后台程序运行mysql5.6</p><h3 id="11-外部Windows如何访问docker内的容器"><a href="#11-外部Windows如何访问docker内的容器" class="headerlink" title="11.外部Windows如何访问docker内的容器"></a>11.外部Windows如何访问docker内的容器</h3><blockquote><p>1.基本架构：Windows，Dockers，Linux三者关系</p></blockquote><p><fancybox><img src="https://images2018.cnblogs.com/blog/1228818/201805/1228818-20180510183714998-435698473.png" alt=""></fancybox></p><blockquote><p>2.相关操作</p></blockquote><p>2.1 关闭Linux防火墙：systemctl stop firewalld.service</p><p>2.2 查看Linux，Docker的IP地址:ifconfig(区别于Windows的ipconfig命令)</p><p><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/CDN@1.2.2/docker.png" width="60%"></fancybox></p><p>2.3 Windows访问测试:</p><blockquote><p>思想：docker作为一个容器虚拟技术，创建并启动相关的容器服务，并把端口映射到Linux系统中。比如MySQL：docker启动MySQL服务后，并映射了一个外部访问的某端口（比如还是3306）<br>，则此刻Linux就具有了3306这个一个端口=&gt;外界访问方式应该是：访问虚拟机Linux上与之相绑定docker容器映射出的端口。</p></blockquote><p><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/CDN@1.2.2/test.JPG" height="60%"></fancybox></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> VMware </tag>
            
            <tag> images </tag>
            
            <tag> container </tag>
            
            <tag> Hyper-V </tag>
            
            <tag> Linux </tag>
            
            <tag> 交互式与守护式创建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue</title>
      <link href="/2019/11/08/Vue/"/>
      <url>/2019/11/08/Vue/</url>
      
        <content type="html"><![CDATA[<img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1573211421138&di=ed4a66a277a70944cfe8a99015bd8d2b&imgtype=0&src=http%3A%2F%2Fwww.igeekbar.com%2Figeekbar%2Fnetworks%2Fuploadimg%2Fa268122f-78c7-4f1b-ba31-a92f21ed1133.jpg" height="285px"><p>&nbsp;&nbsp;Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合,有很好的数据双向绑定性。</p><a id="more"></a><h3 id="1-jQuery与Vue糅合使用"><a href="#1-jQuery与Vue糅合使用" class="headerlink" title="1.jQuery与Vue糅合使用"></a>1.jQuery与Vue糅合使用</h3><blockquote><p>1.jquery基本使用：先导入相关jQuery库包，然后按人类正常思维，就声明入口函数,然后在入口函数中书写逻辑代码</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(function()&#123;</span><br><span class="line">          ...  </span><br><span class="line">          ...</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>但是，奇怪他个猪猪皮，即使不用声明入口函数，直接书写逻辑程序，经过多次测试，TM居然还可以正常使用</p><blockquote><p>2.jQuery+Vue(若想两者结合使用，则一定不能声明入口函数，否则Vue无法使用)<br>当你想测试Vue时，就会出现vue实例未声明的报错</p></blockquote><font color=#FF4040    ><p>&nbsp;&nbsp;1 Uncaught ReferenceError: vm is not defined<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at <anonymous>:1:1<br></font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;rookie&quot;&gt;</span><br><span class="line">            &lt;p&gt;hello fpx&lt;/p&gt;</span><br><span class="line">            &lt;p&gt;hello IG&lt;/p&gt;</span><br><span class="line">            &lt;p&gt;hello kk&lt;/p&gt;</span><br><span class="line">            &lt;pre&gt;total:&#123;&#123;number&#125;&#125;&lt;/pre&gt;</span><br><span class="line">            &lt;h6 :class=&quot;&#123;box:isactive&#125;&quot;&gt;this is new h6&amp;nbsp;&amp;nbsp;&lt;/h6&gt;</span><br><span class="line">            &lt;h5 :class=&quot;[box1,box2,box3?&apos;luko&apos;:&apos;&apos;]&quot;&gt;this is new h6&amp;nbsp;&amp;nbsp;&lt;/h5&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; placeholder=&quot;please input number&quot; v-model=&quot;msg&quot; @keyup.enter=&quot;fn&quot;&gt;按键盘enter键触发:&#123;&#123;msg&#125;&#125;&lt;br&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; placeholder=&quot;please click enter&quot; v-model=&quot;message&quot; @keyup.13=&quot;greet(9527)&quot;&gt;按键盘enter键触发&#123;&#123;message&#125;&#125;&lt;br&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">            console.log($(&apos;p&apos;).length);</span><br><span class="line">            let vm = new Vue(&#123;</span><br><span class="line">                el:&apos;#app&apos;,</span><br><span class="line">                data:&#123;</span><br><span class="line">                    number:$(&apos;p&apos;).length,</span><br><span class="line">                    isactive:true,</span><br><span class="line">                    box1:&apos;moko&apos;,</span><br><span class="line">                    box2:&apos;boka&apos;,</span><br><span class="line">                    box3:true,</span><br><span class="line">                    msg:&apos;&apos;,</span><br><span class="line">                    message:&apos;&apos;,</span><br><span class="line"></span><br><span class="line">                &#125;,</span><br><span class="line">                methods:&#123;</span><br><span class="line">                    fn()&#123;</span><br><span class="line">                        alert(this.msg)</span><br><span class="line">                    &#125;,</span><br><span class="line">                    greet(hi)&#123;</span><br><span class="line">                        alert(this.message+hi)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;);</span><br><span class="line">            $(&apos;h5&apos;).append(&apos;&lt;b&gt;this is new plus increment&lt;/b&gt;&apos;);</span><br><span class="line">            $(&apos;h6&apos;).append(&apos;&lt;br&gt; hello world&apos;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="2-Vue的组件"><a href="#2-Vue的组件" class="headerlink" title="2.Vue的组件"></a>2.Vue的组件</h3><blockquote><p>1.组件创建方式分为全局组件与局部组件：</p></blockquote><p>&nbsp;&nbsp;&nbsp;全局组件：可以被多个APP进行调用,在APP实例外创建;定义一个名为 button-counter 的新组件:组件名称若使用驼峰原则，引用组件时需要全部小写，并且两个单词之间用“-”连接;若不使用驼峰原则时，直接使用原组件名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;buttonCounter&apos;, &#123;</span><br><span class="line">    da: function () &#123;  // 1.组件可以有自己的data数据，组件中的data必须是一个方法，且这个方法内部必须返回一个对象才行，而实例中的data可以为一个对象</span><br><span class="line">        return &#123;count: 0&#125; </span><br><span class="line">    &#125;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        message:&apos;badwoman&apos;</span><br><span class="line">    ,</span><br><span class="line">      template: &apos;&lt;button v-on:click=&quot;count++&quot;&gt;&#123;&#123;message&#125;&#125; clicked me &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&apos;</span><br><span class="line">      // 2. 全局组件有template属性 </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><font  color=#080808>注意：重要的来了，必须理解┗|｀O′|┛ 嗷~~<br>创建格式：Vue.component('组件名',{ /* ..组件的模板对象.. */ })<br>&nbsp;&nbsp;&nbsp;组件的第一个参数为组件名，而第二个参数是以对象的形式去描述一个组件。组件是可复用的 Vue 实例，   所以它们与 new Vue 接收相同的选项，例如 data、computed、watch、methods 以及生命周期钩子等。仅有的例外是像 el 这样根实例特有的选项</font>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python文件读read()、readline()、readlines()对比</title>
      <link href="/2019/11/07/python%E7%9A%84read_readlines_readline/"/>
      <url>/2019/11/07/python%E7%9A%84read_readlines_readline/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;read():读取整个文件，将文件内容放到一个字符串变量中<br><br>&nbsp;&nbsp;&nbsp;readline():读取整行，包括行结束符，并以其作为字符串返回<br><br>&nbsp;&nbsp;&nbsp;readline():读取所有行然后把它们作为一个字符串列表返回（即把每一行作为一个列表元素）<br></p><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> read、readline、readlines对比 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> read() - readline() - readlines() </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python模拟登录淘宝(Ⅰ)</title>
      <link href="/2019/11/05/requests%E5%BA%93%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95%E6%B7%98%E5%AE%9D(%E2%85%A0)/"/>
      <url>/2019/11/05/requests%E5%BA%93%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95%E6%B7%98%E5%AE%9D(%E2%85%A0)/</url>
      
        <content type="html"><![CDATA[<p>讲模拟登录淘宝之前，我们来回顾一下之前用requests库模拟登录GitHub和新浪微博的过程:<font color=#00CD00>这一类模拟登录是比较简单的登录，只需要在请求登录时将用户名和密码上传验证通过就成功了</font>，也就是说一步到位！而淘宝登录就比较复杂，为什么说复杂呢？因为淘宝登录涉及参数多且请求不止一次！</p><a id="more"></a><p><a href="https://blog.csdn.net/u014044812/article/details/99584382" target="_blank" rel="noopener">参考文章~裸睡的猪</a></p><pre>淘宝系列欲更新文章内容：    第一篇：Python模拟登录淘宝，详细讲解如何使用requests库登录淘宝pc端。    第二篇：淘宝自动登录2.0，新增Cookies序列化，教大家如何将cookies保存起来。    第三篇：Python爬取淘宝商品避孕套，教大家如何爬取淘宝pc端商品信息。    第四篇：Python分析2000款避孕套，教大家如何做数据分析得出结论。    ————————————————</pre><h4 id="1-淘宝登录流程"><a href="#1-淘宝登录流程" class="headerlink" title="1.淘宝登录流程"></a>1.淘宝登录流程</h4>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 模拟登录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Requests </tag>
            
            <tag> POST请求 </tag>
            
            <tag> token </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo主体设置知识点</title>
      <link href="/2019/10/26/Hexo%E4%B8%BB%E4%BD%93%E8%AE%BE%E7%BD%AE%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2019/10/26/Hexo%E4%B8%BB%E4%BD%93%E8%AE%BE%E7%BD%AE%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p><fancybox><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1572260590229&di=c342004ec7897ef8697bd65876b3b9c5&imgtype=0&src=http%3A%2F%2F02imgmini.eastday.com%2Fmobile%2F20180822%2F20180822234333_351cde5dc9236b7836296868f06a44b4_2.jpeg" width="80%"></fancybox><br>介绍Hexo一些基本设置，比如分类，标签，作者，简要概述等等以及MarkDown的写法</p><a id="more"></a><h4 id="1-Hexo创建文章、标签、分类的Front-matter方法-Ⅰ-nbsp-nbsp-Front-matter-Ⅱ"><a href="#1-Hexo创建文章、标签、分类的Front-matter方法-Ⅰ-nbsp-nbsp-Front-matter-Ⅱ" class="headerlink" title="1.Hexo创建文章、标签、分类的Front-matter方法 Ⅰ&nbsp;&nbsp; Front-matter Ⅱ"></a>1.<a href="https://www.jianshu.com/p/6e4af897a3f0" target="_blank" rel="noopener">Hexo创建文章、标签、分类的Front-matter方法 Ⅰ</a>&nbsp;&nbsp; <a href="https://xaoxuu.com/wiki/material-x/pages/index.html#Front-matter" target="_blank" rel="noopener">Front-matter Ⅱ</a></h4><p>Front-matter 是md文件最上方以 — 分隔的区域，用于指定个别文件的变量<br></p><blockquote><p>其实Front-matter就是在\Hexo\source_posts下的.md文件中书写文章标题，上传时间，分类名，标签名等等</p></blockquote><table><thead><tr><th align="center">字段</th><th align="center">含义</th><th align="center">值类型</th><th align="center">默认值</th></tr></thead><tbody><tr><td align="center">layout</td><td align="center">布局模版</td><td align="center">String</td><td align="center">-</td></tr><tr><td align="center">title</td><td align="center">标题</td><td align="center">String</td><td align="center">-</td></tr><tr><td align="center">date</td><td align="center">创建时间</td><td align="center">Date</td><td align="center">文件创建时间</td></tr><tr><td align="center">description</td><td align="center">页面描述、摘要</td><td align="center">String</td><td align="center">-</td></tr><tr><td align="center">cover</td><td align="center">是否显示封面</td><td align="center">Bool</td><td align="center">true</td></tr></tbody></table><h4 id="2-Makedown标题页的写法"><a href="#2-Makedown标题页的写法" class="headerlink" title="2.Makedown标题页的写法"></a>2.Makedown标题页的写法</h4><pre>    ---    layout: 页面布局（配合主题文档使用）    title: 文章名称    date: 文章日期    comments: 文章是否开启评论    photos: 文章封面图（仅部分主题支持）    tags:       - 文章标签一      - 文章标签二    categories: # 文章分类（文章分类等级）                - 父分类                - 子分类                - 孙分类    description: 文章描述，即要在首页显示的摘要（仅部分主题支持）    ---    这里是摘要       <!-- more -->        这里是正文    注意：description 和 <!-- more --> 方式显示摘要二选一即可，部分主题不支持description，    每个配置英文冒号后面要空一格，不同主题配置有所差异，具体要参考主题文档</pre><h4 id="3-md文件的基本写法"><a href="#3-md文件的基本写法" class="headerlink" title="3.md文件的基本写法"></a>3.md文件的基本写法</h4><blockquote><p>3.1. ``` 代码段 ``` : 表示以原格式展示代码片段。比如</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$(function () &#123;</span><br><span class="line">    ......</span><br><span class="line">     //鼠标进入的时候,其他的li标签透明度：0.5</span><br><span class="line">    $(&quot;.wrap li&quot;).hover(function() &#123;</span><br><span class="line">        $(this).siblings().stop().fadeTo(400, 0.5);  //.stop():停止所有在指定元素上正在运行的动画。</span><br><span class="line">    &#125;, function() &#123;</span><br><span class="line">        // 鼠标离开，其他li 透明度改为 1</span><br><span class="line">        $(this).siblings().stop().fadeTo(400, 1);</span><br><span class="line">    &#125;);</span><br><span class="line">    console.log($(&apos;.attr a&apos;).prop(&apos;href&apos;));</span><br><span class="line">    console.log($(&apos;.attr a&apos;).prop(&apos;title&apos;));</span><br><span class="line">    console.log($(&apos;input:checkbox&apos;).attr(&apos;id&apos;));</span><br><span class="line">    console.log($(&apos;.office p:eq(0)&apos;).scrollTop());</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>3.2. &lt;img src=”url” width=” “&gt;</p></blockquote><p>&nbsp;&nbsp;&nbsp;表示在md文件中展示图片，若不想破坏图片原格式，就只需要写width或者height其中一个，另一个会自适应变化</p><blockquote><p>3.3. 文本修饰:粗体，斜体…</p></blockquote><p>&nbsp;&nbsp;&nbsp;粗体文本用两个*或_包含，斜体文本用一个_包含</p><blockquote><p>3.4. 表格(注意其格式)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| Tables        | Are           | Cool  |</span><br><span class="line">| ------------- |:-------------:| -----:|</span><br><span class="line">| col 3 is      | right-aligned | $1600 |</span><br><span class="line">| col 2 is      | centered      |   $12 |</span><br><span class="line">| zebra stripes | are neat      |    $1 |</span><br></pre></td></tr></table></figure><blockquote><p>3.5. <a href="https://www.114la.com/other/rgb.htm" target="_blank" rel="noopener">颜色RGB</a>和字体以及背景颜色</p></blockquote><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"Tahoma"</span>&gt;</span></span>这是一串Tahoma字体<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"黑体"</span>&gt;</span></span>这是一串黑体字<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"微软雅黑"</span>&gt;</span></span>这是一串微软雅黑<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"STCAIYUN"</span>&gt;</span></span>这是一串华文彩云<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">#00ced1</span> <span class="attr">size</span>=<span class="string">7</span> <span class="attr">face</span>=<span class="string">"黑体"</span>&gt;</span></span>背景色+字体+字的size<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">#00ffff</span> <span class="attr">size</span>=<span class="string">72</span>&gt;</span></span>颜色设置<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">gray</span> <span class="attr">size</span>=<span class="string">72</span>&gt;</span></span>灰色处理<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">#bfe1f1</span>&gt;</span></span>背景色是：#bfe1f1<span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">Size：规定文本的尺寸大小。可能的值：从 1 到 7 的数字。浏览器默认值是 3</span><br></pre></td></tr></table></figure><p><font face="Tahoma">这是一串Tahoma字体</font><br/><br><font face="黑体">这是一串黑体字</font><br/><br><font face="微软雅黑">这是一串微软雅黑</font><br/><br><font face="STCAIYUN">这是一串华文彩云</font><br/><br><font color=#00ced1 size=7 face="黑体">背景色+字体+字的size</font><br/><br><font color=#00ffff size=72>颜色设置</font><br/><br><font color=gray size=72>灰色处理</font><br/></p><blockquote><p>3.6. 转义字符</p></blockquote><p>&lt;br&gt; : 换行<br><br>\ : 转义字符，原生字符，不加修饰<br><br>&amp;nbsp; : 空格</p><blockquote><p>3.7 每一篇博文设置图片</p></blockquote><p>只需要在文章前面配置 photos 关键字即可，若没有这种配置，可以选择在正文插入图片，然后使用 <!-- more --> 将图片显示在摘要里</p><blockquote><p>3.8 图片可点击设置，单独出现</p></blockquote><p>&lt;fancybox&gt;图片设置&lt;/fancybox&gt;</p>]]></content>
      
      
      <categories>
          
          <category> -博客Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> front-matter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Hexo</title>
      <link href="/2019/10/25/hello-world/"/>
      <url>/2019/10/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><fancybox><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1573382292526&di=0009d867e1bde90c696eb40e0fd840e4&imgtype=jpg&src=http%3A%2F%2Fimg4.imgtn.bdimg.com%2Fit%2Fu%3D3010013829%2C2497003625%26fm%3D214%26gp%3D0.jpg" alt=""></fancybox></p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>初次见面，请多关照</title>
      <link href="/2019/10/20/%E5%88%9D%E6%AC%A1%E8%A7%81%E9%9D%A2_%E8%AF%B7%E5%A4%9A%E5%85%B3%E7%85%A7/"/>
      <url>/2019/10/20/%E5%88%9D%E6%AC%A1%E8%A7%81%E9%9D%A2_%E8%AF%B7%E5%A4%9A%E5%85%B3%E7%85%A7/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;这是一篇有关我如何使用 Github Pages 和 Hexo 搭建属于自己独立博客的功能展示</p><a id="more"></a><p>大家好–^^__^^–，我叫陈浩东<br></p><p><img src="https://cdn.jsdelivr.net/gh/FioraLove/CDN@1.1/5d4d2f1ba61c7.jpg" width="30%"><br></p><p>&nbsp;&nbsp;&nbsp;<code>本人是嘉兴双环第二分公司GP-12线,滚齿磨齿操作员</code>，目前正学习清洗包装流程、磨齿、滚齿、齿轮生产工艺以及安全生产。&nbsp;&nbsp;&nbsp;对网站开发的有关知识几乎为零，这也是我搭建好自己的不完全博客之后写的第一篇博客，刚开始搭建博客的时候自己也是网上各种百度，由于自己属于小白那种，历经了千辛万苦才弄好，所以借这个机会会一直坚持下去分析自己的知识，一起走向成功的彼岸！</p>]]></content>
      
      
      <categories>
          
          <category> -博客Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github Page </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
