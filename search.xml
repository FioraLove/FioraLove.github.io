<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Javascript篇章八：js的事件响应机制</title>
      <link href="/2020/03/11/Javascript%E7%AF%87%E7%AB%A0%E5%85%AB/"/>
      <url>/2020/03/11/Javascript%E7%AF%87%E7%AB%A0%E5%85%AB/</url>
      
        <content type="html"><![CDATA[<p>HTML 事件是发生在 HTML 元素上的事情。当在 HTML 页面中使用 JavaScript 时， JavaScript 可以触发这些事件。<br><strong>本章内容：</strong></p><blockquote><p>1.HTML事件响应机制</p></blockquote><a id="more"></a><h3 id="1-常见的HTML事件"><a href="#1-常见的HTML事件" class="headerlink" title="1.常见的HTML事件"></a>1.常见的HTML事件</h3><table><thead><tr><th>事件</th><th align="center">描述</th></tr></thead><tbody><tr><td>onchange</td><td align="center">HTML 元素改变</td></tr><tr><td>onclick</td><td align="center">用户点击 HTML 元素</td></tr><tr><td>onmouseover</td><td align="center">用户在一个HTML元素上移动鼠标</td></tr><tr><td>onmouseout</td><td align="center">用户从一个HTML元素上移开鼠标</td></tr><tr><td>onkeydown</td><td align="center">用户按下键盘按键</td></tr><tr><td>onload</td><td align="center">浏览器已完成页面的加载</td></tr><tr><td>…</td><td align="center">…</td></tr></tbody></table><p><a href="https://www.runoob.com/jsref/dom-obj-event.html" target="_blank" rel="noopener">HTML DOM事件大全</a><br>举例说明：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>点击这个按钮，来调用带参数的函数。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"myFunction('Harry Potter','Wizard')"</span>&gt;</span>点击这里<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span><span class="params">(name,job)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">    alert(<span class="string">"Welcome "</span> + name + <span class="string">", the "</span> + job);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-js获取表单元素和标签节点内容"><a href="#2-js获取表单元素和标签节点内容" class="headerlink" title="2.js获取表单元素和标签节点内容"></a>2.js获取表单元素和标签节点内容</h3><p>首先document.getElementById(“节点id”)获取节点的DOM<br>对于表单元素，获取其中的内容，通过<code>.value</code>的属性<br>对于标签节点，<code>.innerHTML</code>获取标签间的内容</p><p><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/20200311214808.png" alt=""></fancybox></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Json（二）：关于json的前后分离</title>
      <link href="/2020/03/10/json(%E4%BA%8C)/"/>
      <url>/2020/03/10/json(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<p><strong>本章内容：</strong></p><blockquote><p>1.json文件的读写<br>2.json作为前后端数据交互<br>3.flask与requests，前端form表单交互</p></blockquote><a id="more"></a><h3 id="1-json文件的读写"><a href="#1-json文件的读写" class="headerlink" title="1.json文件的读写"></a>1.json文件的读写</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;由前文可知，当我们读写json文件时，一定要用loads、dumps，不然会报错<br>json.dumps    ：将 Python 对象编码成 JSON 字符串<br>json.loads    ：将已编码的 JSON 字符串解码为 Python 对象</p><p><strong>文件的储存的数据格式只能是字符串，不能为json字符串(python里实际为dict字典)，文件无法存储字典对象</strong></p><p>读取json文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"./demo_json.json"</span>,<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    a = json.loads(f.read())</span><br><span class="line"><span class="comment"># 打印python对象</span></span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><p>写入json文件：<br><strong>无论写入txt、json文件无非就是open()文件时，需要添加utf-8，dumps()时。带有中文数据时，需要添加ensure_ascii=False，防止ascii中文编码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"demo_json.json"</span>, <span class="string">'w'</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(json.dumps(response, ensure_ascii=<span class="literal">False</span>))</span><br></pre></td></tr></table></figure><h3 id="2-json作为前后端数据交互"><a href="#2-json作为前后端数据交互" class="headerlink" title="2.json作为前后端数据交互"></a>2.json作为前后端数据交互</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;需求：我们用flask作为服务器后端，做一个API，携带目标参数，flask接受POST或GET请求的参数，处理后返回到前端展示<br>&nbsp;&nbsp;&nbsp;&nbsp;请求参数：json数据格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">request_body = &#123;</span><br><span class="line">    &quot;username&quot;: &quot;1900201&quot;,</span><br><span class="line">    &quot;data&quot;: &#123;</span><br><span class="line">        &quot;age&quot;: 18,</span><br><span class="line">        &quot;location&quot;: &quot;Hangzhou&quot;,</span><br><span class="line">        &quot;birthday&quot;: &quot;1997-01-25&quot;,</span><br><span class="line">        &quot;ip&quot;: [&quot;10.10.11.1&quot;, &quot;10.10.11.2&quot;, &quot;10.10.11.3&quot;],</span><br><span class="line">        &quot;request-type&quot;: 2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>数据发送端：</strong><br>利用requests库，构建一个API，向由flask创建的服务器后端，发送POST数据请求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数 测试一个服务接口</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_info</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 构造服务接口地址</span></span><br><span class="line">    url = <span class="string">'http://localhost:9527/'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造请求体 请求体将被转换为 JSON 格式</span></span><br><span class="line">    request_body = &#123;</span><br><span class="line">        <span class="string">"username"</span>: <span class="string">"1900201"</span>,</span><br><span class="line">        <span class="string">"data"</span>: &#123;</span><br><span class="line">            <span class="string">"age"</span>: <span class="number">18</span>,</span><br><span class="line">            <span class="string">"location"</span>: <span class="string">"Hangzhou"</span>,</span><br><span class="line">            <span class="string">"birthday"</span>: <span class="string">"1997-01-25"</span>,</span><br><span class="line">            <span class="string">"ip"</span>: [<span class="string">"10.10.11.1"</span>, <span class="string">"10.10.11.2"</span>, <span class="string">"10.10.11.3"</span>],</span><br><span class="line">            <span class="string">"request-type"</span>: <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 向指定服务接口发送 POST 请求</span></span><br><span class="line">        response = requests.post(url=url, json=request_body)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="comment"># 解析 JSON 格式的响应体 并打印</span></span><br><span class="line">            print(<span class="string">'Response info:'</span>, response.json())</span><br><span class="line">            <span class="comment"># 将返回的数据写入文件</span></span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">"demo_json.json"</span>, <span class="string">'w'</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(json.dumps(response.json(), ensure_ascii=<span class="literal">False</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    get_info()</span><br></pre></td></tr></table></figure><p><strong>数据处理端：</strong></p><p>拓展（牢记）：<br><strong>flask服务端获取数据方式：</strong></p><ul><li>data = request.data   ：获取的是字符串，得到的是原始提交的数据</li><li>data = request.get_data()  ：获取的是字符串，得到的是原始提交的数据</li><li>data = request.get_json() ：获取 JSON 格式的请求体 </li><li>username = request.form.get(&quot;username&quot;)  获取前端form表单名为name=”username”的表单数据</li><li>password = request.form.get(“password”)  获取前端form表单名为name=”password”的表单数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个服务</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment"># 声明一个端口</span></span><br><span class="line">APP_PORT = <span class="number">9527</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个接口 指定路由和请求方法 定义处理请求的函数</span></span><br><span class="line"><span class="meta">@app.route(rule='/', methods=['POST', "GET"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">        <span class="comment"># 获取 JSON 格式的请求体 并解析</span></span><br><span class="line">        data = request.get_json()</span><br><span class="line">        print(<span class="string">'Request info: '</span>, data)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 解析POST/GET请求传递过来的数据</span></span><br><span class="line">        item = data[<span class="string">"data"</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 生成响应信息</span></span><br><span class="line">        response_info = &#123;</span><br><span class="line">            <span class="string">'msg'</span>: <span class="string">'收到'</span>,</span><br><span class="line">            <span class="string">"数据"</span>: item</span><br><span class="line">        &#125;</span><br><span class="line">        print(<span class="string">'Response info:'</span>, response_info)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将响应信息转换为 JSON 格式</span></span><br><span class="line">        response_body = jsonify(response_info)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 最终对请求进行相应</span></span><br><span class="line">        <span class="keyword">return</span> response_body</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;h1&gt;请使用post请求&lt;/h1&gt;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这种路由模式：&lt;name&gt;尖括号代表传入参数</span></span><br><span class="line"><span class="meta">@app.route('/user/&lt;name&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"&lt;h2&gt; hello python+html, %s&lt;/h2&gt;"</span> % name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 启动服务 指定主机和端口</span></span><br><span class="line">    app.run(host=<span class="string">'127.0.0.1'</span>, port=APP_PORT, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>路由模式Ⅱ：尖括号&lt;name&gt;尖括号代表传入参数</p><p><strong>运行结果：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Response info: &#123;</span><br><span class="line">    &apos;msg&apos;:&apos;收到&apos;,</span><br><span class="line">    &quot;data&quot;: &#123;</span><br><span class="line">        &quot;age&quot;: 18,</span><br><span class="line">        &quot;location&quot;: &quot;Hangzhou&quot;,</span><br><span class="line">        &quot;birthday&quot;: &quot;1997-01-25&quot;,</span><br><span class="line">        &quot;ip&quot;: [&quot;10.10.11.1&quot;, &quot;10.10.11.2&quot;, &quot;10.10.11.3&quot;],</span><br><span class="line">        &quot;request-type&quot;: 2</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://blog.csdn.net/mywang88/article/details/90114192?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">Python 使用 flask 库传递 JSON 数据</a></li><li><a href="https://blog.csdn.net/u010197393/article/details/83503202?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">Flask框架前端后端交互之传递Json数据</a></li><li><a href="https://blog.csdn.net/qq_29287973/article/details/52495042?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">【python学习笔记】flask实现简单的接收json返回json的接口</a></li><li><a href="https://www.jianshu.com/p/0f528c47c5bf" target="_blank" rel="noopener">Flask框架基础教程</a></li><li><a href="https://blog.csdn.net/james_laughing/article/details/89194742" target="_blank" rel="noopener">flask接受前台的form表单数据</a></li><li><a href="https://blog.csdn.net/qq_29113041/article/details/80392597" target="_blank" rel="noopener">flask接受前台Ajax的post请求传递过来的json数据</a></li><li><a href="https://blog.csdn.net/M983373615/article/details/99966682" target="_blank" rel="noopener">一个页面上多个form表单的用json数据格式提交到后台</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> json </category>
          
      </categories>
      
      
        <tags>
            
            <tag> json </tag>
            
            <tag> 前后分离 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java（七）：Java的static关键字</title>
      <link href="/2020/03/05/Java%E7%9A%84static%E5%85%B3%E9%94%AE%E5%AD%97(%E4%B8%83)/"/>
      <url>/2020/03/05/Java%E7%9A%84static%E5%85%B3%E9%94%AE%E5%AD%97(%E4%B8%83)/</url>
      
        <content type="html"><![CDATA[<p><strong>本章内容：</strong></p><blockquote><p>1.static静态关键字概述<br>2.静态变量<br>3.静态方法<br><strong>4.总结</strong></p></blockquote><a id="more"></a><h3 id="1-static静态关键字概述"><a href="#1-static静态关键字概述" class="headerlink" title="1.static静态关键字概述"></a>1.static静态关键字概述</h3><p>关于 static 关键字的使用，它可以用来修饰的成员变量和成员方法，被修饰的成员是属于类的，而不是单单是属 于某个对象的。也就是说，既然属于类，就可以不靠创建对象来调用了。 </p><p>在一个类中，有变量和方法，而变量有成员变量，静态变量；而方法有成员方法和静态方法之分(只要带static关键字就代表静态变量或方法)</p><p><strong>如何区分我们什么时候使用static关键字呢？</strong></p><p><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/02-%E9%9D%99%E6%80%81static%E5%85%B3%E9%94%AE%E5%AD%97%E6%A6%82%E8%BF%B0.png" alt=""></fancybox><br>从上述图中我们可以看出在学生类中，我们new三个学生对象，每一个对象除了姓名，年龄，学号不同之外，每一个学生对象的所在教室完全一样。<br>对于姓名，年龄，学号来说，<strong>每一个对象都有自己独立的数据</strong>。但对于所在的教室来说，这应该是<strong>多个对象共享同一份数据</strong>才对。<br>一旦使用了static关键字，那么这样的内容不在属于对象自己，而是属于类的，所以凡是本类的对象，都<strong>共享同一份</strong>。</p><p>我们来实现这个图片展示的功能（以标准的类的创建方式）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bytedance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">staticDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 静态static常量赋初值(类名称.变量名)</span></span><br><span class="line">        Student1.room = <span class="string">"101教室"</span>;</span><br><span class="line"></span><br><span class="line">        Student1 one = <span class="keyword">new</span> Student1(<span class="string">"郭靖"</span>, <span class="number">20</span>);</span><br><span class="line">        System.out.println(<span class="string">"one的姓名："</span> + one.getName());</span><br><span class="line">        System.out.println(<span class="string">"one的年龄："</span> + one.getAge());</span><br><span class="line">        System.out.println(<span class="string">"one的教室："</span> + Student1.room);</span><br><span class="line">        System.out.println(<span class="string">"============"</span>);</span><br><span class="line"></span><br><span class="line">        Student1 two = <span class="keyword">new</span> Student1(<span class="string">"黄蓉"</span>, <span class="number">18</span>);</span><br><span class="line">        System.out.println(<span class="string">"two的姓名："</span> + two.getName());</span><br><span class="line">        System.out.println(<span class="string">"two的年龄："</span> + two.getAge());</span><br><span class="line">        System.out.println(<span class="string">"two的教室："</span> + Student1.room);</span><br><span class="line"></span><br><span class="line">        myMethod() <span class="comment">// 本类中的静态方法直接调用</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 本类中的静态方法，调用时可以省略类名称，直接调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">myMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"自己的方法！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id; <span class="comment">// 学号</span></span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age; <span class="comment">// 年龄</span></span><br><span class="line">    <span class="keyword">static</span> String room; <span class="comment">// 所在教室</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> idCounter = <span class="number">0</span>; <span class="comment">// 学号计数器，每当new了一个新对象的时候，计数器++</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = ++idCounter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student1</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.id = ++idCounter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-静态变量"><a href="#2-静态变量" class="headerlink" title="2.静态变量"></a>2.静态变量</h3><p>静态变量 ： static 数据类型 变量名 （static int numberID）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比如说，基础班新班开班，学员报到。现在想为每一位新来报到的同学编学号（sid），从第一名同学开始，sid为 1，以此类推。学号必须是唯一的，连续的，并且与班级的人数相符，这样以便知道，要分配给下一名新同学的学 号是多少。这样我们就需要一个变量，与单独的每一个学生对象无关，而是与整个班级同学数量有关</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bytedance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">staticDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student1 s1 = <span class="keyword">new</span> Student1(<span class="string">"迪丽热巴"</span>,<span class="number">18</span>);</span><br><span class="line">        Student1 s2 = <span class="keyword">new</span> Student1(<span class="string">"古力娜扎"</span>,<span class="number">20</span>);</span><br><span class="line">        Student1 s3 = <span class="keyword">new</span> Student1(<span class="string">"马尔扎哈"</span>,<span class="number">33</span>);</span><br><span class="line">        s1.show(); <span class="comment">// Student : name=迪丽热巴, age=18, 学生编号=1</span></span><br><span class="line">        s2.show(); <span class="comment">// Student : name=古力娜扎, age=20, 学生编号=2</span></span><br><span class="line">        s3.show(); <span class="comment">// Student : name=马尔扎哈, age=33, 学生编号=3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student1</span></span>&#123;</span><br><span class="line">    <span class="comment">// 成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">// 学生的id</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="comment">// 静态变量，记录学生数量，分配学号</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> numberNo = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student1</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="comment">// 表示每创建一个Student1对象，id就会自动加一</span></span><br><span class="line">        <span class="keyword">this</span>.id =  ++ numberNo;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 打印属性值   </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Student : name="</span>+<span class="keyword">this</span>.name+<span class="string">", age="</span>+<span class="keyword">this</span>.age+<span class="string">", 学生编号="</span>+<span class="keyword">this</span>.id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-静态方法"><a href="#3-静态方法" class="headerlink" title="3.静态方法"></a>3.静态方法</h3><p>使用格式： 修饰符 static 返回值类型 方法名 (参数列表){  // 执行语句代码块      }</p><p>被static修饰的成员可以并且建议通过类名直接访问。虽然也可以通过对象名访问静态成员，原因即多个对象均属 于一个类，共享使用同一个静态成员，但是不建议，会出现警告信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bytedance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">staticDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyClass obj = <span class="keyword">new</span> MyClass(); <span class="comment">// 首先创建对象</span></span><br><span class="line">        obj.num = <span class="number">18</span>;</span><br><span class="line">        MyClass.numStatic = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建对象之后，然后才能使用没有static关键字的内容</span></span><br><span class="line">        obj.method();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对于静态方法来说，可以通过对象名进行调用，也可以直接通过类名称来调用。</span></span><br><span class="line">        obj.methodStatic(); <span class="comment">// 正确，不推荐，这种写法在编译之后也会被javac翻译成为“类名称.静态方法名”</span></span><br><span class="line"></span><br><span class="line">        MyClass.methodStatic(); <span class="comment">// 正确，推荐</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对于本类当中的静态方法，可以省略类名称</span></span><br><span class="line">        myMethod();</span><br><span class="line">        staticDemo.myMethod(); <span class="comment">// 对于本类中的静态方法，myMethod()与staticDemo.myMethod()完全等效，可以省略类名称</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">myMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"自己的方法！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num; <span class="comment">// 成员变量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> numStatic; <span class="comment">// 静态变量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成员方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是一个成员方法。"</span>);</span><br><span class="line">        <span class="comment">// 成员方法可以访问成员变量</span></span><br><span class="line">        System.out.println(num);</span><br><span class="line">        <span class="comment">// 成员方法可以访问静态变量</span></span><br><span class="line">        System.out.println(numStatic);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodStatic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是一个静态方法。"</span>);</span><br><span class="line">        <span class="comment">// 静态方法可以访问静态变量</span></span><br><span class="line">        System.out.println(numStatic);</span><br><span class="line">        <span class="comment">// 静态不能直接访问非静态【重点】</span></span><br><span class="line">        <span class="comment">// System.out.println(num); // 错误写法！</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 静态方法中不能使用this关键字。</span></span><br><span class="line">        <span class="comment">//  System.out.println(this); // 错误写法！</span></span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h3><p>一旦使用static修饰成员方法，那么这就成为了静态方法。静态方法不属于对象，而是属于类的。</p><p>如果没有static关键字，那么必须首先创建对象，然后通过对象才能使用它。<br>如果有了static关键字，那么不需要创建对象，直接就能通过类名称来使用它。</p><p><strong>无论是成员变量，还是成员方法。如果有了static，都推荐使用类名称进行调用</strong>。<br>静态变量\：类名称.静态变量<br>静态方法\：类名称.静态方法()</p><p>静态常量赋初始值的方法：类名称.静态变量名 = 初始值</p><p>注意事项：</p><ol><li><p>静态方法只能访问静态成员，实例方法可以访问静态和实例成员。反之，成员方法可以直接访问类变量或静态方法<br>原因：因为在内存当中是【先】有的静态内容，【后】有的非静态内容。<br>“先人不知道后人，但是后人知道先人。”</p></li><li><p>静态方法当中不能用this。<br>原因：this代表当前对象，通过谁调用的方法，谁就是当前对象。</p></li><li><p>对于本类当中的静态方法，调用时可以省略类名称</p></li></ol><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><a href="https://blog.csdn.net/qq_28727015/article/details/79893158?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">静态方法类名访问，只允许访问静态成员</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python函数基础补充</title>
      <link href="/2020/03/03/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89/"/>
      <url>/2020/03/03/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>本章内容：</strong></p><blockquote><p>1.匿名函数<br>2.enumerate内置函数<br>3.列表生成式<br>4.python中的 end=””<br>5.生成器generator<br>6.可迭代对象和迭代器 </p></blockquote><a id="more"></a><h3 id="1-匿名函数"><a href="#1-匿名函数" class="headerlink" title="1.匿名函数"></a>1.匿名函数</h3><p><strong>匿名函数：不需要显示的指定函数名，匿名函数支持的最复杂的运算就是三元运算</strong><br>lambda也是一个简短的匿名函数，格式：<font color=#7fb80e>lambda 参数 : 表达式</font></p><p>举例说明：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="keyword">lambda</span> a, b, c : a + b + c</span><br><span class="line">print(x(<span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>))  <span class="comment"># 13</span></span><br><span class="line">func = <span class="keyword">lambda</span> x,y:x*y    <span class="comment"># 声明一个匿名函数并赋值给func</span></span><br><span class="line">print(func(<span class="number">3</span>,<span class="number">8</span>))       <span class="comment"># 输出结果为24</span></span><br></pre></td></tr></table></figure><h3 id="2-enumerate内置函数"><a href="#2-enumerate内置函数" class="headerlink" title="2.enumerate内置函数"></a>2.enumerate内置函数</h3><p>对于一个可迭代的（iterable）/可遍历的对象（如列表、字符串），enumerate将其组成一个索引序列，利用它可以同时获得索引和值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">"这"</span>, <span class="string">"是"</span>, <span class="string">"一个"</span>, <span class="string">"测试"</span>]</span><br><span class="line"><span class="keyword">for</span> index, item <span class="keyword">in</span> enumerate(list1):</span><br><span class="line">    print(index, item)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">0 这</span></span><br><span class="line"><span class="string">1 是</span></span><br><span class="line"><span class="string">2 一个</span></span><br><span class="line"><span class="string">3 测试</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h3 id="3-列表生成式"><a href="#3-列表生成式" class="headerlink" title="3.列表生成式"></a>3.列表生成式</h3><p>列表生成式格式：<code>\[执行语句 列表生成]</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># 写列表生成式时，把要生成的元素x * x放到前面，后面跟for循环，就可以把list创建出来</span><br><span class="line">&gt;&gt;&gt; [x * x for x in range(1, 11)]</span><br><span class="line">[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span><br><span class="line"></span><br><span class="line"># for循环后面还可以加上if判断，这样我们就可以筛选出仅偶数的平方</span><br><span class="line">&gt;&gt;&gt; [x * x for x in range(1, 11) if x % 2 == 0]</span><br><span class="line">[4, 16, 36, 64, 100]</span><br><span class="line"></span><br><span class="line"># 用三元运算生成列表</span><br><span class="line">&gt;&gt;&gt; a = range(1,11)</span><br><span class="line">&gt;&gt;&gt; a = [i if i &lt; 5 else i*i for i in a]</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, 3, 4, 25, 36, 49, 64, 81, 100]</span><br><span class="line"></span><br><span class="line"># 使用两层循环，可以生成全排列</span><br><span class="line">&gt;&gt;&gt; [m + n for m in &apos;ABC&apos; for n in &apos;XYZ&apos;]</span><br><span class="line">[&apos;AX&apos;, &apos;AY&apos;, &apos;AZ&apos;, &apos;BX&apos;, &apos;BY&apos;, &apos;BZ&apos;, &apos;CX&apos;, &apos;CY&apos;, &apos;CZ&apos;]</span><br><span class="line"></span><br><span class="line"># 列表生成式也可以使用两个变量来生成list</span><br><span class="line">&gt;&gt;&gt; d = &#123;&apos;x&apos;: &apos;A&apos;, &apos;y&apos;: &apos;B&apos;, &apos;z&apos;: &apos;C&apos; &#125;</span><br><span class="line">&gt;&gt;&gt; [k + &apos;=&apos; + v for k, v in d.items()]</span><br><span class="line">[&apos;x=A&apos;, &apos;y=B&apos;, &apos;z=C&apos;]</span><br><span class="line"></span><br><span class="line"># 字符串操作，都变为小写</span><br><span class="line">&gt;&gt;&gt; L = [&apos;Hello&apos;, &apos;World&apos;, &apos;IBM&apos;, &apos;Apple&apos;]</span><br><span class="line">&gt;&gt;&gt; [s.lower() for s in L]</span><br><span class="line">[&apos;hello&apos;, &apos;world&apos;, &apos;ibm&apos;, &apos;apple&apos;]</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过列表生成式可以直接创建一个列表。列表创建在内存中，因此列表容量受到内存限制。特别是对一个元素量很大的列表，仅需访问前几个元素时，尤其浪费空间</p><h3 id="4-python中的-end-””"><a href="#4-python中的-end-””" class="headerlink" title="4.python中的 end=””"></a>4.python中的 end=””</h3><p>为末尾end传递一个空字符串，这样print函数不会在字符串末尾添加一个换行符，而是添加一个空字符串</p><p>print默认是打印一行，结尾加换行。end=’ ‘意思是末尾不换行，加空格。</p><h3 id="5-生成器generator"><a href="#5-生成器generator" class="headerlink" title="5.生成器generator"></a>5.生成器generator</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;列表元素可以按照某种算法推算出来（有规律的数组），则可以在循环的过程中不断推算出后续的元素。这种方式就不必创建完整的list，可以节省大量的空间。python中，这种一边循环一边计算的机制，称为生成器：generator。</p><p><strong>生成器创建方法一：将列表生成式的‘[]’改为‘()’</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># 生成器保存的是公式，取一次创建一次，只能往前不能后退</span><br><span class="line">&gt;&gt;&gt; a2 = (i for i in range(1000))</span><br><span class="line">&gt;&gt;&gt; a2</span><br><span class="line">&lt;generator object &lt;genexpr&gt; at 0x103761a98&gt;</span><br><span class="line">&gt;&gt;&gt; next(a2)</span><br><span class="line">0</span><br><span class="line">&gt;&gt;&gt; next(a2)</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">#生成器走完时，会报错：StopIteration</span><br><span class="line">&gt;&gt;&gt; a3 = (i for i in range(5))   # 限制5个</span><br><span class="line">&gt;&gt;&gt; a3</span><br><span class="line">&lt;generator object &lt;genexpr&gt; at 0x103761e08&gt;</span><br><span class="line">&gt;&gt;&gt; next(a3)</span><br><span class="line">0</span><br><span class="line">&gt;&gt;&gt; next(a3)</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; next(a3)</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; next(a3)</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; next(a3)</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt; next(a3)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;input&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure><p>生成器保存的是算法，每次调用next(g)就计算出g的下一个元素的值，直到计算出最后一个元素，没有更多的元素时，抛出StopIteration的错误。</p><p>创建生成器后，很少会调用next()，一般是通过for循环来迭代。使用for循环(<strong>有且仅有for循环满足</strong>)来迭代生成器，不会出现StopIteration报错，直接结束</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个生成器a</span></span><br><span class="line">a = (i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line"><span class="comment">#  a=&lt;generator object demo2.&lt;locals&gt;.&lt;genexpr&gt; at 0x0000026556A46B10&gt;</span></span><br><span class="line">print(a)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    print(i, end=<span class="string">" "</span>)  <span class="comment"># end="strings",end表示每行连接格式</span></span><br><span class="line"><span class="comment"># 结果为：0 1 2 3 4 5 6 7 8 9</span></span><br></pre></td></tr></table></figure><p><strong>生成器创建方法二：一个函数定义中包含yield关键字，函数为生成器(generator)</strong><br>这种生成器和函数相似，但与函数的执行流程不同：</p><p>　　函数是顺序执行，遇到return语句或最后一行函数语句就返回。</p><p>　　函数转化为生成器后，在每次调用next()的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; def fib_g(max):</span><br><span class="line">...     n, a, b = 0, 0, 1</span><br><span class="line">...     while n &lt; max:</span><br><span class="line">...         print(&apos;before yield&apos;)</span><br><span class="line">...         yield b   # yield 把函数的执行过程冻结在这一步，并且把b的值返回给外面的next()</span><br><span class="line">...         print(b)</span><br><span class="line">...         a, b = b, a+b</span><br><span class="line">...         n = n + 1</span><br><span class="line">...     return &apos;done&apos;</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; f = fib_g(15)  # 将函数转换为生成器，有了yeild后，函数名(参数)根本不执行</span><br><span class="line">&gt;&gt;&gt; next(f)</span><br><span class="line">before yield</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; next(f)</span><br><span class="line">1</span><br><span class="line">before yield</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; next(f)</span><br><span class="line">1</span><br><span class="line">before yield</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; next(f)</span><br><span class="line">2</span><br><span class="line">before yield</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; next(f)</span><br><span class="line">3</span><br><span class="line">before yield</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>send(“Strings”)方法：①唤醒并继续执行,直到遇到下一个yield ②发送一个信息到生成器内部</li><li>next():唤醒冻结的函数执行过程，继续执行，直到遇到下一个yield</li></ol><h3 id="6-可迭代对象和迭代器"><a href="#6-可迭代对象和迭代器" class="headerlink" title="6.可迭代对象和迭代器"></a>6.可迭代对象和迭代器</h3><p>可直接作用于for循环的数据类型有一下几种：</p><p>一、集合数据类型，如：list、tuple、dict、set、str等；</p><p>二、generator，包括生成器表达式(geneator expression)和生成器函数(generator function)两组构建方式。</p><p>上述这些可以直接作用于for循环的对象统称为可迭代对象(Iterable)。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java（六）：Java正则表达式与多线程基础</title>
      <link href="/2020/02/29/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80(%E5%85%AD)/"/>
      <url>/2020/02/29/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80(%E5%85%AD)/</url>
      
        <content type="html"><![CDATA[<p><strong>本章内容：</strong></p><blockquote><p>1.正则表达式简介<br>2.多线程<br>3.maven编程</p></blockquote><a id="more"></a><h3 id="1-正则表达式简介"><a href="#1-正则表达式简介" class="headerlink" title="1.正则表达式简介"></a>1.正则表达式简介</h3><h4 id="匹配规则"><a href="#匹配规则" class="headerlink" title="匹配规则"></a>匹配规则</h4><p>正则表达式是一套标准，它可以用于任何语言。Java标准库的java.util.regex包内置了正则表达式引擎，在Java程序中使用正则表达式非常简单<br><strong>注意Java字符串用\\表示\</strong>，比如正常的<code>202\d\d</code> ,在Java中的<code>202\\d\\d</code><br><strong>正则表达式也有特殊字符，比如转义字符<code>\</code></strong>，对于正则表达式<code>a\&amp;c</code>来说，对应的Java字符串是<code>a\\&amp;c</code>，因为<code>\</code>也是Java字符串的转义字符，两个<code>\\</code>实际上表示的是一个<code>\</code>：<br><font color=#ef4136>透过现象看本质，Java与<a href="https://ahrilove.top/2019/12/10/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E4%B8%83%EF%BC%89/">python正则表达式</a>关于正则表达式的使用方法是相同的，可以参考使用,注意Java字符串用\\表示\</font></p><table><thead><tr><th>正则表达式</th><th align="center">规则</th><th align="right">可以匹配</th></tr></thead><tbody><tr><td>A</td><td align="center">指定字符</td><td align="right">A</td></tr><tr><td>\u548c</td><td align="center">指定Unicode字符</td><td align="right">和</td></tr><tr><td>.</td><td align="center">任意字符</td><td align="right">a，b，&amp;，0</td></tr><tr><td>\d</td><td align="center">数字0~9</td><td align="right">0~9</td></tr><tr><td>\w</td><td align="center">大小写字母，数字和下划线</td><td align="right">a~z，A~Z，0~9，_</td></tr><tr><td>\s</td><td align="center">空格、Tab键</td><td align="right">空格，Tab</td></tr><tr><td>\D</td><td align="center">非数字</td><td align="right">a，A，&amp;，_，……</td></tr><tr><td>\W</td><td align="center">非\w</td><td align="right">&amp;，@，中，……</td></tr><tr><td>\S</td><td align="center">非\s</td><td align="right">a，A，&amp;，_，……</td></tr><tr><td>A*</td><td align="center">任意个数字符</td><td align="right">空，A，AA，AAA，……</td></tr><tr><td>A+</td><td align="center">至少1个字符</td><td align="right">A，AA，AAA，……</td></tr><tr><td>A?</td><td align="center">0个或1个字符</td><td align="right">空，A</td></tr><tr><td>A{3}</td><td align="center">指定个数字符</td><td align="right">AAA</td></tr><tr><td>A{2,3}</td><td align="center">指定范围个数字符</td><td align="right">AA，AAA</td></tr><tr><td>A{2,}</td><td align="center">至少n个字符</td><td align="right">AA，AAA，AAAA，……</td></tr><tr><td>A{0,3}</td><td align="center">最多n个字符</td><td align="right">空，A，AA，AAA</td></tr><tr><td>^</td><td align="center">开头</td><td align="right">字符串开头</td></tr><tr><td>$</td><td align="center">结尾</td><td align="right">字符串结束</td></tr><tr><td>[ABC]</td><td align="center">[…]内任意字符</td><td align="right">A，B，C</td></tr><tr><td>[A-F0-9xy]</td><td align="center">指定范围的字符</td><td align="right">A，……，F，0，……，9，x，y</td></tr><tr><td>[^A-F]</td><td align="center">指定范围外的任意字符</td><td align="right">非A~F</td></tr></tbody></table><p>String.matches(regex)方法：只能匹配目标字符串是否满足给定的正则表达式规则，返回值是Boolean类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String re1 = <span class="string">"java\\d"</span>; <span class="comment">// 对应的正则是java\d</span></span><br><span class="line">        System.out.println(<span class="string">"java9"</span>.matches(re1));</span><br><span class="line">        System.out.println(<span class="string">"java10"</span>.matches(re1));</span><br><span class="line">        System.out.println(<span class="string">"javac"</span>.matches(re1));</span><br><span class="line"></span><br><span class="line">        String re2 = <span class="string">"java\\D"</span>;</span><br><span class="line">        System.out.println(<span class="string">"javax"</span>.matches(re2));</span><br><span class="line">        System.out.println(<span class="string">"java#"</span>.matches(re2));</span><br><span class="line">        System.out.println(<span class="string">"java5"</span>.matches(re2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分组匹配"><a href="#分组匹配" class="headerlink" title="分组匹配"></a>分组匹配</h4><p>我们前面讲到的(…)可以用来把一个子规则括起来，这样写learn\s(java|php|go)就可以更方便地匹配长字符串了。</p><p><strong>实际上(…)还有一个重要作用，就是分组匹配。</strong></p><p>前面已经了解到String.matches(regex)来判断是否满足目标正则表达式。但是如何提取匹配的子串？这就必须引入java.util.regex包，用Pattern对象匹配，匹配后获得一个Matcher对象，如果匹配成功，就可以直接从Matcher.group(index)返回子串：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 编译解析规则</span></span><br><span class="line">        Pattern p = Pattern.compile(<span class="string">"(\\d&#123;3,4&#125;)\\-(\\d&#123;7,8&#125;)"</span>);</span><br><span class="line">        <span class="comment">// 待匹配的字符</span></span><br><span class="line">        Matcher m = p.matcher(<span class="string">"010-12345678"</span>);</span><br><span class="line">        <span class="keyword">if</span> (m.matches()) &#123;</span><br><span class="line">            String g1 = m.group(<span class="number">1</span>);</span><br><span class="line">            String g2 = m.group(<span class="number">2</span>);</span><br><span class="line">            System.out.println(g1);</span><br><span class="line">            System.out.println(g2);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"匹配失败!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上述代码，会得到两个匹配上的子串010和12345678。</p><p>要特别注意，Matcher.group(index)方法的参数用1表示第一个子串，2表示第二个子串。如果我们传入0会得到什么呢？答案是010-12345678，即整个正则匹配到的字符串。</p><h4 id="搜索和替换"><a href="#搜索和替换" class="headerlink" title="搜索和替换"></a>搜索和替换</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">regexFind</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//  目标字符串</span></span><br><span class="line">        String s = <span class="string">"the quick brown fox jumps over the lazy dog."</span>;</span><br><span class="line">        <span class="comment">// 正则表达式编译模板</span></span><br><span class="line">        Pattern p = Pattern.compile(<span class="string">"\\wo\\w"</span>);</span><br><span class="line">        <span class="comment">// 编译获取Matcher对象</span></span><br><span class="line">        Matcher m = p.matcher(s);</span><br><span class="line">        <span class="comment">// 创建ArrayList集合，用于存储</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 反复调用find()方法</span></span><br><span class="line">        <span class="keyword">while</span> (m.find()) &#123;</span><br><span class="line">            <span class="comment">// 在整个串中搜索能匹配上\\wo\\w规则的子串</span></span><br><span class="line">            String sub = s.substring(m.start(), m.end());</span><br><span class="line">            <span class="comment">// 将所有的字串添加到集合中</span></span><br><span class="line">            list.add(sub);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用regexFind()方法</span></span><br><span class="line">        List&lt;String&gt; demo =  regexFind();</span><br><span class="line">        System.out.println(demo);</span><br><span class="line">        System.out.println(demo.get(<span class="number">0</span>));</span><br><span class="line">        System.out.println(demo.get(<span class="number">1</span>));</span><br><span class="line">        System.out.println(demo.size());</span><br><span class="line">        <span class="comment">/* 运行结果：</span></span><br><span class="line"><span class="comment">        [row, fox, dog]</span></span><br><span class="line"><span class="comment">        row</span></span><br><span class="line"><span class="comment">        fox</span></span><br><span class="line"><span class="comment">        3</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们获取到Matcher对象后，不需要调用matches()方法（因为匹配整个串肯定返回false），而是反复调用find()方法</p><h4 id="替换字符串"><a href="#替换字符串" class="headerlink" title="替换字符串"></a>替换字符串</h4><p>使用正则表达式替换字符串可以直接调用<code>String.replaceAll()</code>，它的第一个参数是正则表达式，第二个参数是待替换的字符串。举例说明：<br>语言格式：strings.replaceAll(“正则表达式规则”,a) 用a替换strings里面的正则表达式规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String s = <span class="string">"the quick brown fox jumps over the lazy dog."</span>;</span><br><span class="line">        <span class="keyword">return</span> s.replaceAll(<span class="string">"\\s+"</span>,<span class="string">"--"</span>);</span><br><span class="line">        <span class="comment">// 运行结果： the--quick--brown--fox--jumps--over--the--lazy--dog.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-多线程"><a href="#2-多线程" class="headerlink" title="2.多线程"></a>2.多线程</h3><p>进程 vs 线程<br>进程和线程是包含关系，但是多任务既可以由多进程实现，也可以由单进程内的多线程实现，还可以混合多进程＋多线程。</p><p>和多线程相比，多进程的缺点在于：</p><ul><li>创建进程比创建线程开销大，尤其是在Windows系统上；</li><li>进程间通信比线程间通信要慢，因为线程间通信就是读写同一个变量，速度很快。<br>而多进程的优点在于：</li></ul><p>多进程稳定性比多线程高，因为在多进程的情况下，一个进程崩溃不会影响其他进程，而在多线程的情况下，任何一个线程崩溃会直接导致整个进程崩溃。</p><p>多线程<br>Java语言内置了多线程支持：一个Java程序实际上是一个JVM进程，JVM进程用一个主线程来执行main()方法，在main()方法内部，我们又可以启动多个线程。此外，JVM还有负责垃圾回收的其他工作线程等。</p><p>因此，对于大多数Java程序来说，我们说多任务，实际上是说如何使用多线程实现多任务。</p><p>和单线程相比，多线程编程的特点在于：多线程经常需要读写共享数据，并且需要同步。例如，播放电影时，就必须由一个线程播放视频，另一个线程播放音频，两个线程需要协调运行，否则画面和声音就不同步。因此，多线程编程的复杂度高，调试更困难。</p><p>Java多线程编程的特点又在于：</p><ul><li>多线程模型是Java程序最基本的并发模型；</li><li>后续读写网络、数据库、Web开发等都依赖Java多线程模型。</li></ul><h4 id="创建新线程"><a href="#创建新线程" class="headerlink" title="创建新线程"></a>创建新线程</h4><p>Java语言内置了多线程支持。当Java程序启动的时候，实际上是启动了一个JVM进程，然后，JVM启动主线程来执行main()方法。在main()方法中，我们又可以启动其他线程。</p><p>要创建一个新线程非常容易，我们需要实例化一个Thread实例，然后调用它的start()方法<br><strong>方法一：从Thread派生一个自定义类，然后覆写</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> MyThread();</span><br><span class="line">        t.start(); <span class="comment">// 启动新线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"start new thread!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法二：创建Thread实例时，传入一个Runnable实例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyRunnable());</span><br><span class="line">        t.start(); <span class="comment">// 启动新线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"start new thread!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法三：用Java8引入的lambda语法进一步简写</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">"start new thread!"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        t.start(); <span class="comment">// 启动新线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小结：</p><ul><li><p>Java用Thread对象表示一个线程，通过调用start()启动一个新线程；</p></li><li><p>一个线程对象只能调用一次start()方法；</p></li><li><p>线程的执行代码写在run()方法中；</p></li><li><p>线程调度由操作系统决定，程序本身无法决定调度顺序；</p></li><li><p>Thread.sleep()可以把当前线程暂停一段时间，单位是毫秒</p></li></ul><h4 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h4><ul><li>New：新创建的线程，尚未执行；</li><li>Runnable：运行中的线程，正在执行run()方法的Java代码；</li><li>Blocked：运行中的线程，因为某些操作被阻塞而挂起；</li><li>Waiting：运行中的线程，因为某些操作在等待中；</li><li>Timed Waiting：运行中的线程，因为执行sleep()方法正在计时等待；</li><li>Terminated：线程已终止，因为run()方法执行完毕。</li></ul><p>join()方法：优先运行子线程，主线程卡在原地，子线程结束后，运行主线程后面的代码，即join就是指等待该线程结束，然后才继续往下执行自身线程。<br>Thread.sleep()方法：线程暂停，时间为毫秒级</p><h4 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h4><p>Java程序入口就是由JVM启动main线程，main线程又可以启动其他线程。当所有线程都运行结束时，JVM退出，进程结束。</p><p>如果有一个线程没有退出，JVM进程就不会退出。所以，必须保证所有线程都能及时结束</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 创建方式：只是在调用start()方法前，调用setDaemon(true)把该线程标记为守护线程</span><br><span class="line">Thread t = new MyThread();</span><br><span class="line">t.setDaemon(true);</span><br><span class="line">t.start();</span><br></pre></td></tr></table></figure><h3 id="3-Maven基础"><a href="#3-Maven基础" class="headerlink" title="3.Maven基础"></a>3.Maven基础</h3><p>Maven就是是专门为Java项目打造的管理和构建工具，它的主要功能有：</p><ul><li>提供了一套标准化的项目结构；</li><li>提供了一套标准化的构建流程（编译，测试，打包，发布……）；</li><li>提供了一套依赖管理机制。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">a-maven-project</span><br><span class="line">├── pom.xml</span><br><span class="line">├── src</span><br><span class="line">│   ├── main</span><br><span class="line">│   │   ├── java</span><br><span class="line">│   │   └── resources</span><br><span class="line">│   └── test</span><br><span class="line">│       ├── java</span><br><span class="line">│       └── resources</span><br><span class="line">└── target</span><br><span class="line"></span><br><span class="line">Ps:</span><br><span class="line">1.main目录用来存放Java源代码，而test目录用来存放Java测试代码</span><br><span class="line">2.resources用来存放配置文件，资源文件（图片，js，css等等）</span><br><span class="line">3.pom.xml项目描述文件：groupId类似于Java的包名，artifact类似于Java的类名，version代表版本号</span><br><span class="line">4.target 存放所有编译、打包生成的文件</span><br></pre></td></tr></table></figure></li></ul><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><a href="https://www.cnblogs.com/shijiaoyun/p/5882285.html" target="_blank" rel="noopener">Maven 与 IntelliJ IDEA 的完美结合</a></li><li><a href="https://blog.csdn.net/weixin_38310965/article/details/80392767?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">java 使用idea将工程打成jar并创建成exe文件类型执行</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于jQuery，Vue选择当前DOM对象的探讨</title>
      <link href="/2020/02/20/%E5%85%B3%E4%BA%8E$event%E7%9A%84%E6%8E%A2%E8%AE%A8/"/>
      <url>/2020/02/20/%E5%85%B3%E4%BA%8E$event%E7%9A%84%E6%8E%A2%E8%AE%A8/</url>
      
        <content type="html"><![CDATA[<p><strong>本章内容：</strong><br>关于jQuery与Vue对当前操作的DOM元素选择的探讨，如jQuery的$(event.target)与Vue的$event</p><a id="more"></a><h3 id="jQuery的当前DOM对象的选择"><a href="#jQuery的当前DOM对象的选择" class="headerlink" title="jQuery的当前DOM对象的选择"></a>jQuery的当前DOM对象的选择</h3><p>this与<a href="https://www.runoob.com/jquery/jq-event-target.html" target="_blank" rel="noopener">event.target</a>的区别：均表示当前事件对象<br>1.js中事件是会冒泡的，所以this是可以变化的，但event.target不会变化，它永远指向触发事件的DOM元素本身(表示是什么元素来触发事件)；<br>2.this和event.target都是dom对象，使用jQuey中的方法可以将他们转换为jquery对象：$(this)和$(event.target).<br>3.js中事件是会冒泡的，所以this是可以变化的，但event.target不会变化，它永远是直接接受事件的目标DOM元素</p><h3 id="Vue对于当前DOM对象的选择"><a href="#Vue对于当前DOM对象的选择" class="headerlink" title="Vue对于当前DOM对象的选择"></a>Vue对于当前DOM对象的选择</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click = “clickfun($event)”&gt;点击&lt;/button&gt;</span><br><span class="line">methods: &#123;</span><br><span class="line">    clickfun(e) &#123;</span><br><span class="line">    // e.target 是你当前点击的元素</span><br><span class="line">    // e.currentTarget 是你绑定事件的元素</span><br><span class="line">        #获得点击元素的前一个元素</span><br><span class="line">        e.currentTarget.previousElementSibling.innerHTML</span><br><span class="line">        #获得点击元素的第一个子元素</span><br><span class="line">        e.currentTarget.firstElementChild</span><br><span class="line">        # 获得点击元素的下一个元素</span><br><span class="line">        e.currentTarget.nextElementSibling</span><br><span class="line">        # 获得点击元素中id为string的元素</span><br><span class="line">        e.currentTarget.getElementById(&quot;string&quot;)</span><br><span class="line">        # 获得点击元素的string属性</span><br><span class="line">        e.currentTarget.getAttributeNode(&apos;string&apos;)</span><br><span class="line">        # 获得点击元素的父级元素</span><br><span class="line">        e.currentTarget.parentElement</span><br><span class="line">        # 获得点击元素的前一个元素的第一个子元素的HTML值</span><br><span class="line">        e.currentTarget.previousElementSibling.firstElementChild.innerHTML</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/weixin_42931825/article/details/100015613" target="_blank" rel="noopener">参考文章【vue学习笔记：事件中的$event对象作用】</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java（五）：Java面向对象的补充</title>
      <link href="/2020/02/19/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%A1%A5%E5%85%85%EF%BC%88%E4%BA%94%EF%BC%89/"/>
      <url>/2020/02/19/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%A1%A5%E5%85%85%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><strong>本章内容：</strong></p><blockquote><p>1.如何创建一个标准的类<br>2.API的概述与使用<br>3.对象型数组<br>4.面向对象的三大特性<br>5.抽象类和抽象方法补充<br>6.接口</p></blockquote><a id="more"></a><h3 id="1-如何创建一个标准的类"><a href="#1-如何创建一个标准的类" class="headerlink" title="1.如何创建一个标准的类"></a>1.如何创建一个标准的类</h3><p>一个标准的类通常要拥有下面四个部分：</p><ol><li>所有的成员变量都要使用private关键字修饰</li><li>为每一个成员变量编写一堆Getter/Setter方法</li><li>编写一个无参数的构造方法</li><li>编写一个全参数的构造方法</li></ol><p>举一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bytedance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pokers</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 实例对象创建方式一：</span></span><br><span class="line">        Woman w1 = <span class="keyword">new</span> Woman();</span><br><span class="line">        w1.setName(<span class="string">"迪丽热巴"</span>);</span><br><span class="line">        w1.setAge(<span class="number">18</span>);</span><br><span class="line">        System.out.println(<span class="string">"姓名："</span>+w1.getName()+<span class="string">",年龄："</span>+w1.getAge());</span><br><span class="line">        System.out.println(<span class="string">"========"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实例对象的创建方式二：（推荐，很推荐）</span></span><br><span class="line">        Woman w2 = <span class="keyword">new</span> Woman(<span class="string">"古力娜扎"</span>,<span class="number">19</span>);</span><br><span class="line">        System.out.println(<span class="string">"姓名："</span>+w2.getName()+<span class="string">",年龄："</span>+w2.getAge());</span><br><span class="line">        System.out.println(<span class="string">"========"</span>);</span><br><span class="line">        <span class="comment">// 此时Setter方法也很有用，比如我们想改写一下年纪</span></span><br><span class="line">        w2.setAge(<span class="number">20</span>);</span><br><span class="line">        System.out.println(<span class="string">"修改年龄后~"</span>+<span class="string">"姓名："</span>+w2.getName()+<span class="string">",年龄："</span>+w2.getAge());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Woman</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参数的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Woman</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 全参数的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Woman</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br>姓名：迪丽热巴,年龄：18<br>========<br>姓名：古力娜扎,年龄：19<br>========<br>修改年龄后~姓名：古力娜扎,年龄：20</p><h3 id="2-API的概述与使用"><a href="#2-API的概述与使用" class="headerlink" title="2. API的概述与使用"></a>2. API的概述与使用</h3><p>导包：import 包路径.类名称<br><font color=#f05b72>只有Java.lang包内的内容不需要导入，其余的API都要手动导入</font></p><h3 id="3-对象型数组"><a href="#3-对象型数组" class="headerlink" title="3.对象型数组"></a>3.对象型数组</h3><p>对象型数组这一小节不仅能够温习如何创建一个最标准的类，也复习了有关于数组（数组长度不可改变）的一些操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bytedance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">objectArray</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个对象数组，即包含对象的数组</span></span><br><span class="line">        People[] people = <span class="keyword">new</span> People[<span class="number">3</span>];</span><br><span class="line">        <span class="comment">// 创建三个People对象实例</span></span><br><span class="line">        People p1 = <span class="keyword">new</span> People(<span class="string">"迪丽热巴"</span>, <span class="number">18</span>);</span><br><span class="line">        People p2 = <span class="keyword">new</span> People(<span class="string">"古力娜扎"</span>, <span class="number">28</span>);</span><br><span class="line">        People p3 = <span class="keyword">new</span> People(<span class="string">"马尔扎哈"</span>, <span class="number">688</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将三个people对象赋予到数组中</span></span><br><span class="line">        people[<span class="number">0</span>] = p1;</span><br><span class="line">        people[<span class="number">1</span>] = p2;</span><br><span class="line">        people[<span class="number">2</span>] = p3;</span><br><span class="line"></span><br><span class="line">        System.out.println(people[<span class="number">0</span>]);  <span class="comment">//  打印地址值：com.bytedance.People@2d98a335</span></span><br><span class="line">        System.out.println(people[<span class="number">1</span>]);  <span class="comment">// 打印地址值：com.bytedance.People@16b98e56</span></span><br><span class="line">        <span class="comment">// 调用对象的方法</span></span><br><span class="line">        people[<span class="number">0</span>].sayHello(<span class="string">"陈浩东"</span>);</span><br><span class="line">        <span class="comment">// 大家好，我叫迪丽热巴,今年18岁了，喜欢陈浩东</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最标准的类的创建方式如下所示：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">People</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 全参构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">People</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String lover)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"大家好，我叫"</span> + <span class="keyword">this</span>.name + <span class="string">",今年"</span> + <span class="keyword">this</span>.age + <span class="string">"岁了，喜欢"</span> + lover);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-面向对象的三大特性"><a href="#4-面向对象的三大特性" class="headerlink" title="4.面向对象的三大特性"></a>4.面向对象的三大特性</h3><p><strong>面向对象的三大特性：继承，封装，多态</strong><br>封装性在Java当中的体现：</p><ol><li>方法（理解成python中的函数）就是一种封装</li><li>关键字private也是一种封装</li></ol><p>一旦使用了private进行修饰，只能在本类中随意访问，但是，超出了本类范围就不能直接访问（间接访问private成员变量，就是定义一对getter，setter方法）</p><ul><li>对于Getter来说，不能有参数，返回值类型与成员变量对应</li><li>对于Setter来说，不能有返回值，参数类型和成员变量对应</li><li>对于基本类型当中的Boolean值，Getter方法一定要携程isXXXX的形式，而SetXXX规则不变</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person ming = <span class="keyword">new</span> Person();</span><br><span class="line">        ming.setName(<span class="string">"Xiao Ming"</span>); <span class="comment">// 设置name</span></span><br><span class="line">        ming.setAge(<span class="number">12</span>); <span class="comment">// 设置age</span></span><br><span class="line">        System.out.println(ming.getName() + <span class="string">", "</span> + ming.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 对参数name进行校验</span></span><br><span class="line">        <span class="keyword">if</span> (name == <span class="keyword">null</span> || name.isBlank()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"invalid name"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">this</span>.name = name.strip(); <span class="comment">// 去掉首尾空格</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 对参数age进行校验</span></span><br><span class="line">        <span class="keyword">if</span> (age &lt; <span class="number">0</span> || age &gt; <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"invalid age value"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-抽象类和抽象方法补充"><a href="#5-抽象类和抽象方法补充" class="headerlink" title="5.抽象类和抽象方法补充"></a>5.抽象类和抽象方法补充</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;如果父类当中的方法不确定能实现什么具体的方法，那么这应该就是一种抽象方法（通俗的理解，比如求图形的面积计算方法，动物吃东西的方法。这里我们具体确定是什么图形，是三角形？还是正方形？，是比较抽象的一类概念）</p><p><strong>抽象方法：就是加上abstract关键字，然后去掉大括号，直接分号结束<br>抽象类：抽象方法所在的类，必须是抽象类才行。在class之前写上abstract即可</strong></p><p>如何使用抽象类和抽象方法：</p><ol><li>不能直接创建new抽象对象</li><li>必须用一个子类来继承抽象父类</li><li>子类必须覆盖重写抽象父类当中的所有抽象方法（即子类去掉抽象方法的abstract关键字，然后补上方法体和大括号），否追编译无法通过</li><li>创建子类对象进行使用</li><li>抽象类中，可以有构造方法，是供子类创建对象时，初始化父类成员使用的</li></ol><h3 id="6-接口"><a href="#6-接口" class="headerlink" title="6.接口"></a>6.接口</h3><p>接口就是一种公共的规范标准。只要符合标准规范，就可以大家通用（比如插座，U盘）。<br>接口是一种引用数据类型，最重要的内容就是其中的抽象方法。</p><h4 id="如何定义一个接口的格式："><a href="#如何定义一个接口的格式：" class="headerlink" title="如何定义一个接口的格式："></a>如何定义一个接口的格式：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface 接口名&#123;</span><br><span class="line">    // 接口内容</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接口内容"><a href="#接口内容" class="headerlink" title="接口内容"></a>接口内容</h4><p><strong>在任何版本中，接口都能定义抽象方法</strong></p><blockquote><p><strong>2.1 常量</strong></p></blockquote><p>接口当中也可以定义“成员变量”，但必须使用<code>public static final</code>三个关键字进行修饰。从效果上看，<strong>这就是接口的常量</strong><br>格式：<br>public static final 数据类型 常量名称 = 数据值 </p><p>PS：</p><ul><li>一旦使用final关键字，就说明不可变</li><li>接口当中的常量必须赋值</li><li>接口当中的常量的命名规范：使用完全大写的字母，用下划线进行分隔</li><li>调用接口名的常量方法：接口名.常量名</li></ul><br><blockquote><p>2.2 抽象方法</p></blockquote><p>接口中最重要的时<strong>抽象方法</strong><br>格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[public] [abstract] 返回值类型 方法名（参数）&#123;方法体&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：实现类必须覆盖重写接口的所有的抽象方法，除非实现类是抽象的</strong></p><br><blockquote><p><strong>2.3 默认方法（接口中的默认方法，可以解决接口升级的问题）</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">public default 返回值类型 方法名（参数列表）&#123;</span><br><span class="line">    方法体 // 默认方法里面可以有方法体</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">使用：</span><br><span class="line">1.接口的默认方法，可以通过接口实现类对象，直接调用</span><br><span class="line">2.接口的默认方法，也可以被接口实现类进行覆盖重写</span><br></pre></td></tr></table></figure><br><blockquote><p><strong>2.4 静态方法</strong></p></blockquote><p>创建格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">public static 返回值类型 方法名称(参数列表)&#123;</span><br><span class="line">    方法体</span><br><span class="line">&#125;</span><br><span class="line">tips：就是将abstract 或者default换成static即可，带上方法体。</span><br></pre></td></tr></table></figure><p>注意：<br>1.<strong>不能通过实现类的的对象来调用接口当中的静态方法</strong><br>2.正确调用方式：接口名.静态方法名（参数）。与之前学习的static静态方法的调用方式（类名称.静态方法）一样</p><br><blockquote><p><strong>2.5 私有方法</strong></p></blockquote><p>问题描述：我们需要一个共有方法，用来解决两个默认方法之间重复代码的问题。但是这个共有方法不应该让实现类使用，应该是私有化的</p><p>解决方案：从java9开始，接口当中允许定义私有方法<br>Ⅰ. 普通私有方法，解决多个默认方法之间重复代码问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private 返回值类型 方法名（参数列表）&#123;</span><br><span class="line">    方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Ⅱ. 静态私有方法，解决多个静态方法之间的重复代码问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private static 返回值类型 方法名（参数列表）&#123;</span><br><span class="line">    方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接口使用步骤"><a href="#接口使用步骤" class="headerlink" title="接口使用步骤"></a>接口使用步骤</h4><ul><li>接口不能直接使用，必须有一个“实现类”来“实现”该接口</li></ul><p><font color=#d93a49 >格式：public class 实现类 implements 接口名称{…}</font></p><ul><li><p>接口的实现类必须重写接口中所有的抽象方法（即去掉abstract关键字，加上方法体和大括号）</p></li><li><p>创建实现类的对象，进行使用（即直接 new 实现类的对象，才能使用）。</p></li></ul><p>接口的小结：<br><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/interfaceasd.jpg" alt=""></fancybox></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java（四）：Java核心类</title>
      <link href="/2020/02/14/Java%E6%A0%B8%E5%BF%83%E7%B1%BB(%E5%9B%9B)/"/>
      <url>/2020/02/14/Java%E6%A0%B8%E5%BF%83%E7%B1%BB(%E5%9B%9B)/</url>
      
        <content type="html"><![CDATA[<p><strong>本章内容：</strong></p><blockquote><p>1.字符串与编码<br>2.定义常量<br>3.enum枚举类型<br>4.常用工具类<br>5.异常处理机制<br>6.Java集合<br>7.IO(File类的操作大全)<br>8.InputStream&amp;OutputStream<br>9.日期与时间</p></blockquote><a id="more"></a><h3 id="1-字符串与编码"><a href="#1-字符串与编码" class="headerlink" title="1.字符串与编码"></a>1.字符串与编码</h3><p><strong>String</strong>，<a href="https://ahrilove.top/2019/11/20/Javascript%E7%AF%87%E7%AB%A0%E4%B8%80/">【与js，python的字符串操作对比】</a></p><p>在Java中，String是一个引用类型，它本身也是一个class。但是，Java编译器对String有特殊处理，即可以直接用”…”来表示一个字符串。</p><ol><li><p>字符串比较：比较字符串的内容是否相同。必须使用<code>equals()</code>方法而不能用<code>==</code><br>str1.equals(str2):判断两个字符串的是否相同</p></li><li><p>字符索引查找<br>字符串.indexOf(“目标字符”)</p></li><li><p>判断以什么开头<br>字符串.startsWith(“目标字符串”):判断是否以目标字符串开头<br>字符串.endWith(“目标字符串”):判断是否以目标目标字符串结尾</p></li><li><p>字符串的截取<br>字符串.substring(起始索引，结束索引)：截取目标字符串，索引从0开始</p></li><li><p>去掉首尾空白字符<br>字符串.trim()<br>字符串.strip():也可以移除字符串首尾空白字符。它和trim()不同的是，类似中文的空格字符<code>\u3000</code>也会被移除</p></li><li><p>替换字符串<br>字符串.replace(a,b):用字符b替换字符a</p></li><li><p>拼接字符串<br>拼接字符串使用静态方法<code>String.join</code>,它用指定的字符串连接字符串数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String arr = &#123;&quot;A&quot;, &quot;B&quot;, &quot;C&quot;&#125;;</span><br><span class="line">String s = String.join(&quot;***&quot;, arr); // &quot;A***B***C&quot;</span><br></pre></td></tr></table></figure></li><li><p>基本类型与字符串类型之间的相互转换</p></li></ol><p><strong>要把任意基本类型或引用类型转换为字符串，可以使用静态方法String.valueOf()</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String.valueOf(123); // &quot;123&quot;</span><br><span class="line">String.valueOf(45.67); // &quot;45.67&quot;</span><br><span class="line">String.valueOf(true); // &quot;true&quot;</span><br><span class="line">String.valueOf(new Object()); // 类似java.lang.Object@636be97c</span><br></pre></td></tr></table></figure><p><strong>要把字符串转换为其他类型，就需要根据情况。例如，把字符串转换为int类型</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int n1 = Integer.parseInt(&quot;123&quot;); // 123</span><br><span class="line">int n2 = Integer.parseInt(&quot;ff&quot;, 16); // 按十六进制转换，255</span><br></pre></td></tr></table></figure><p><strong>把字符串转换为boolean类型：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">boolean b1 = Boolean.parseBoolean(&quot;true&quot;); // true</span><br><span class="line">boolean b2 = Boolean.parseBoolean(&quot;FALSE&quot;); // false</span><br></pre></td></tr></table></figure><p><strong>把字符串转换为其它基本数据类型</strong><br>借用包装类的功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int n1 = Integer.parseInt(&quot;123&quot;); // 123</span><br><span class="line">boolean b1 = Boolean.parseBoolean(&quot;true&quot;); // true</span><br><span class="line">double d1 = Double.parseDouble(&quot;3.1415927&quot;);  // 3.1415927</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ol start="9"><li><p>是否包含子字符串<br>字符串.contains(“目标字符串”)：返回结果true 或者 false</p></li><li><p>分割字符串<br>字符串.split(“指定字符串”)=》数组格式</p></li></ol><p><strong>按指定字符（串）或正则去分割某个字符串，结果以字符串数组形式返回</strong>，记住：返回结果是数组，数组无法直接打印</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">"hello world java!!!"</span>;</span><br><span class="line">String[] aa = s.split(<span class="string">" "</span>);</span><br><span class="line">System.out.println(aa[<span class="number">2</span>]);</span><br></pre></td></tr></table></figure><h4 id="包装类型："><a href="#包装类型：" class="headerlink" title="包装类型："></a>包装类型：</h4><p>基本类型===&gt;    对应的引用类型<br>boolean    ===&gt; java.lang.Boolean<br>byte    ===&gt; java.lang.Byte<br>short    ===&gt; java.lang.Short<br>int        ===&gt; java.lang.Integer<br>long    ===&gt; java.lang.Long<br>float    ===&gt; java.lang.Float<br>double    ===&gt; java.lang.Double<br>char    ===&gt; java.lang.Character</p><h3 id="2-定义常量"><a href="#2-定义常量" class="headerlink" title="2.定义常量"></a>2.定义常量</h3><p>Java 语言使用 final 关键字来定义一个常量（常量有三种类型：静态常量、成员常量和局部常量。），其语法如下所示：<br><strong>final dataType variableName = value</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 静态常量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> PI = <span class="number">3.14</span>;</span><br><span class="line">    <span class="comment">// 声明成员常量</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> y = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 声明局部常量</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">double</span> x = <span class="number">3.3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-enum枚举类"><a href="#3-enum枚举类" class="headerlink" title="3.enum枚举类"></a>3.enum枚举类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Weekday day = Weekday.SUN;</span><br><span class="line">        <span class="keyword">if</span> (day == Weekday.SAT || day == Weekday.SUN) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Work at home!"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"Work at office!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> Weekday &#123;</span><br><span class="line">    SUN, MON, TUE, WED, THU, FRI, SAT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-常用工具类"><a href="#4-常用工具类" class="headerlink" title="4.常用工具类"></a>4.常用工具类</h3><h4 id="MAth：进行数学计算"><a href="#MAth：进行数学计算" class="headerlink" title="MAth：进行数学计算"></a>MAth：进行数学计算</h4><p>Math.abs()求绝对值<br>Math.max/min()<br>Math.pow(a,b)计算a的次方<br>Math.sqrt()计算开方<br>Math.exp()计算e的次方<br>Math.PI 数学常量PI<br>Math.E  数学常量e<br>Math.random() 生成随机[0,1)的数</p><h4 id="Random：创建伪随机数"><a href="#Random：创建伪随机数" class="headerlink" title="Random：创建伪随机数"></a>Random：创建伪随机数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 创建Random实例对象</span><br><span class="line">Random r = new Random(seed); // 种子数只是随机算法的起源数字，和生成的随机数的区间没有任何关系</span><br><span class="line">r.nextInt(); // 2071575453,每次都不一样</span><br><span class="line">r.nextInt(100); // 54,生成一个随机[0,100)的随机整数</span><br><span class="line">r.nextInt(10); // 5,生成一个[0,10)之间的int</span><br><span class="line">r.nextLong(); // 8811649292570369305,每次都不一样</span><br><span class="line">r.nextFloat(); // 0.54335...生成一个[0,1)之间的float</span><br><span class="line">r.nextDouble(); // 0.3716...生成一个[0,1)之间的double</span><br><span class="line"></span><br><span class="line">Random rand =new Random(25); // 预设种子数</span><br><span class="line">int i=rand.nextInt(100);</span><br><span class="line">System.out.println(i);</span><br></pre></td></tr></table></figure><p>初始化时25并没有起直接作用（注意：不是没有起作用）,rand.nextInt(100);中的100是随机数的上限,产生的随机数为0-100的整数,不包括100</p><p><strong>对于种子相同的Random对象，生成的随机数序列是一样的。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Random ran1 = <span class="keyword">new</span> Random(<span class="number">10</span>);</span><br><span class="line">System.out.println(<span class="string">"使用种子为10的Random对象生成[0,10)内随机整数序列: "</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    System.out.print(ran1.nextInt(<span class="number">10</span>) + <span class="string">" "</span>);</span><br><span class="line">   &#125;</span><br><span class="line">System.out.println();</span><br><span class="line">Random ran2 = <span class="keyword">new</span> Random(<span class="number">10</span>);</span><br><span class="line">System.out.println(<span class="string">"使用另一个种子为10的Random对象生成[0,10)内随机整数序列: "</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    System.out.print(ran2.nextInt(<span class="number">10</span>) + <span class="string">" "</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出结果为：</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 使用种子为10的Random对象生成[0,10)内随机整数序列:</span></span><br><span class="line"><span class="comment"> * 3 0 3 0 6 6 7 8 1 4</span></span><br><span class="line"><span class="comment"> * 使用另一个种子为10的Random对象生成[0,10)内随机整数序列:</span></span><br><span class="line"><span class="comment"> * 3 0 3 0 6 6 7 8 1 4</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="5-异常处理机制"><a href="#5-异常处理机制" class="headerlink" title="5.异常处理机制"></a>5.<a href="https://blog.csdn.net/weixin_42359237/article/details/89502035" target="_blank" rel="noopener">异常处理机制</a></h3><p>在Java中，凡是可能抛出异常的语句，都可以用<code>try ... catch</code>捕获。把可能发生异常的语句放在try { … }中，然后使用catch捕获对应的Exception及其子类。</p><p>在使用try…catch捕获处理异常时需要注意：<br><strong>·</strong> 不要过度使用异常，不能使用异常处理机制来代替正常的流程控制语句<br><strong>·</strong> 异常捕获时，一定要先捕获小异常，再捕获大异常。否则小异常将无法被捕获<br><strong>·</strong> 避免出现庞大的try块<br><strong>·</strong> 避免使用catch(Exception e){}<br><strong>·</strong> 不要忽略异常</p><p>Exception类的常用的几种情况：<br>IOException有：<br>EOFException文件已结束异常；<br>FileNotFoundException文件未找到异常。</p><p>RuntimeException有：<br>IndexOutOfBoundsException索引越界异常；<br>ArrayIndexOutOfBoundsException数组索引越界异常；<br>ArithmeticException算数条件异常，譬如:整数除零等；<br>NullPointerException空指针异常；<br>NegativeArraySizeException数组长度为负异常；<br>ArrayStoreException数组存储异常，当向数组中存放非数组声明类型对象时抛出；<br>SecurityException违背安全原则异常；<br>IllegalArgumentException非法参数异常；<br>ClassCastException类型强制转换异常。<br>ReflectiveOperationException有：<br>ClassNotFoundException找不到类异常；<br>NoSuchMethodException方法未找到异常；<br>NoSuchFieldException找不到属性异常。</p><p>错误类Error：<br>一般是指与虚拟机相关的问题，如系统崩溃、虚拟机错误、动态链接失败<br>等，这种错误无法恢复或不可能捕获，将导致应用程序中断。所以不应该试图使用catch块来捕捉Error和不能在throws子句中声明该方法可能抛出Error及其任何子类</p><h4 id="多catch语句"><a href="#多catch语句" class="headerlink" title="多catch语句"></a>多catch语句</h4><p><strong>多catch语句:简单来说，多个catch语句只有一个能被执行</strong> 可以使用多个catch语句，每个catch分别捕获对应的Exception及其子类。JVM在捕获到异常后，会从上到下匹配catch语句，匹配到某个catch后，执行catch代码块，然后不再继续匹配。</p><h4 id="finally语句"><a href="#finally语句" class="headerlink" title="finally语句"></a>finally语句</h4><p>无论是否有异常发生，程序语句最终都要执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            process1();</span><br><span class="line">            process2();</span><br><span class="line">            process3();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Bad encoding"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"IO error"</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"END"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-集合"><a href="#6-集合" class="headerlink" title="6.集合"></a>6.集合</h3><h4 id="collection接口"><a href="#collection接口" class="headerlink" title="collection接口"></a>collection接口</h4><p><strong>Java的集合与数组都是为了处理一类数据</strong>，但Java数组也存在很大的缺陷：</p><ul><li>数组初始化后大小不可变；</li><li>数组只能按索引顺序存取。</li></ul><p>Java标准库自带的java.util包提供了集合类：Collection，它是除Map外所有其他集合类的根接口。Java的java.util包主要提供了以下三种类型的集合：</p><ul><li>List接口：一种有序列表的集合，允许存储重复的元素，具体实现的类有ArrayList集合，LinkedList集合，Vector集合；</li><li>Set接口：一种保证没有重复元素的集合，且没有索引（不能使用普通的for循环遍历集合），具体实现的类有TreeSet集合，HashSet集合，LinkedHashSet集合；</li><li>Map：一种通过键值（key-value）查找的映射表集合。</li></ul><p>创建List：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = new ArrayList&lt;&gt;(); // 只能放入String类型</span><br><span class="line">List&lt;Integer&gt; list1 = new ArrayList&lt;&gt;(); // 只能放入Integer类型</span><br><span class="line">List&lt;Character&gt; list2 = new ArrayList&lt;&gt;(); // 只能放入Character类型</span><br><span class="line">拓展：根据给定的元素快速创建List</span><br><span class="line">List&lt;Integer&gt; list3 = List.of(1, 2, 5);</span><br></pre></td></tr></table></figure><p><strong>collection接口的List接口的共性方法</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在末尾添加一个元素：void add(E e)</span><br><span class="line">在指定索引添加一个元素：void add(int index, E e)</span><br><span class="line">删除指定索引的元素：int remove(int index)</span><br><span class="line">删除某个元素：int remove(Object e)</span><br><span class="line">获取指定索引的元素：E get(int index)</span><br><span class="line">获取链表大小（包含元素的个数）：int size()</span><br></pre></td></tr></table></figure><p>前面已经讲解了List接口下的ArrayList类，接下来我们开始了解Map接口的HashMap类（Map&lt;K, V&gt;是一种键-值映射表，<strong>Map中不存在重复的key，因为放入相同的key，只会把原有的key-value对应的value给替换掉。</strong>）<br>创建HashMap类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Map&lt;键Key数据类型, 值Value的数据类型&gt; map = new HashMap&lt;&gt;();</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"apple"</span>, <span class="number">123</span>);</span><br><span class="line">        map.put(<span class="string">"pear"</span>, <span class="number">456</span>);</span><br><span class="line">        map.put(<span class="string">"banana"</span>, <span class="number">789</span>);</span><br><span class="line">        <span class="comment">// for each循环遍历键所组成的集合</span></span><br><span class="line">        <span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">            Integer value = map.get(key);</span><br><span class="line">            System.out.println(key + <span class="string">" = "</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>collection接口的Map接口的共性方法</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">map.put(key,value):在末尾添加一组键值对</span><br><span class="line">map.get(key):通过指定的key值获取相应的value值</span><br><span class="line">map.containerKey(key):查询某个Key是否存在</span><br><span class="line">map.containerValue(value):查询某个value是否存在</span><br><span class="line">map.size():获取Map中键值对的元素个数</span><br></pre></td></tr></table></figure><p>关于HashMap的小结：</p><ul><li>对Map来说，要遍历key可以使用for each循环遍历Map实例的keySet()方法返回的Set集合，它包含不重复的key的集合</li><li>同时遍历key和value可以使用for each循环遍历Map对象的entrySet()集合，它包含每一个key-value映射</li></ul><h4 id="Iterator迭代器接口"><a href="#Iterator迭代器接口" class="headerlink" title="Iterator迭代器接口"></a>Iterator迭代器接口</h4><p>collection接口下有各种各样的集合，不同的集合存储方式不同，相应的集合取值方式也不同，这时就需要Iterator迭代器接口了。<br>我们要始终坚持使用迭代器Iterator来访问List。Iterator本身也是一个对象，但它是由List的实例调用iterator()方法的时候创建的。Iterator对象知道如何遍历一个List，并且不同的List类型，返回的Iterator对象实现也是不同的，但总是具有最高的访问效率。</p><p>Iterator对象有两个方法：boolean hasNext()判断是否有下一个元素，E next()返回下一个元素。因此，使用Iterator遍历List代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = List.of(<span class="string">"apple"</span>, <span class="string">"pear"</span>, <span class="string">"banana"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Iterator&lt;String&gt; it = list.iterator(); it.hasNext(); ) &#123;</span><br><span class="line">            String s = it.next();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>童鞋可能觉得使用Iterator访问List的代码比使用索引更复杂。但是，要记住，通过Iterator遍历List永远是最高效的方式。并且，由于Iterator遍历是如此常用，所以，Java的for each循环本身就可以帮我们使用Iterator遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = List.of(<span class="string">"apple"</span>, <span class="string">"pear"</span>, <span class="string">"banana"</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><p>对于ArrayList来说，有一个尖括号<E>代表泛型（<strong>泛型：也就是装在集合中的所有元素，全部都是统一的什么类型。注意，泛型只能是引用数据类型，不能是基本类型</strong>）</p><h4 id="找出一组整数缺失的数值案例"><a href="#找出一组整数缺失的数值案例" class="headerlink" title="找出一组整数缺失的数值案例"></a>找出一组整数缺失的数值案例</h4><p>给定一组整数，找出缺失的数字:这里推荐使用集合，因为不确定整数的数据多少，而Java中的数组个数无法改变</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findMissingNumber</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end, List&lt;Integer&gt; list)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 对等差数列进行求和 Sn=na1+n(n-1)d/2或Sn=n(a1+an)/2</span></span><br><span class="line">            <span class="keyword">int</span> total = ((end+start)*(end-start + <span class="number">1</span>))/<span class="number">2</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 对list集合进行求和</span></span><br><span class="line">            <span class="keyword">for</span>(Integer p : list)</span><br><span class="line">    </span><br><span class="line">                max+= p;</span><br><span class="line">           <span class="comment">// 将两个集合之和做差，即可知晓缺失的是那个数</span></span><br><span class="line">            <span class="keyword">return</span> total - max;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 构造从start到end的序列：</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> start = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> end = <span class="number">20</span>;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= end; i++) &#123;</span><br><span class="line">            list.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 随机删除List中的一个元素:</span></span><br><span class="line">        <span class="keyword">int</span> removed = list.remove((<span class="keyword">int</span>) (Math.random() * list.size()));</span><br><span class="line">        <span class="keyword">int</span> found = findMissingNumber(start, end, list);</span><br><span class="line">        System.out.println(list.toString());</span><br><span class="line">        System.out.println(<span class="string">"missing number: "</span> + found);</span><br><span class="line">        System.out.println(removed == found ? <span class="string">"测试成功"</span> : <span class="string">"测试失败"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="集合的综合运用：斗地主游戏"><a href="#集合的综合运用：斗地主游戏" class="headerlink" title="集合的综合运用：斗地主游戏"></a>集合的综合运用：斗地主游戏</h4><p>游戏原理示意图：<br><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/poker.JPG" alt=""></fancybox><br>且每次运行后的发牌结果都不相同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bytedance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pokers</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 1.准备牌：定义一个集合来存储54张扑克牌</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        List&lt;String&gt; pokers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 定义两个数组或集合来分别存储花色与数字</span></span><br><span class="line">        String[] colors = &#123;<span class="string">"♥"</span>,<span class="string">"♣"</span>,<span class="string">"♦"</span>,<span class="string">"♠"</span>&#125;;</span><br><span class="line">        String[] numbers = &#123;<span class="string">"2"</span>,<span class="string">"A"</span>,<span class="string">"K"</span>,<span class="string">"Q"</span>,<span class="string">"J"</span>,<span class="string">"10"</span>,<span class="string">"9"</span>,<span class="string">"8"</span>,<span class="string">"7"</span>,<span class="string">"6"</span>,<span class="string">"5"</span>,<span class="string">"4"</span>,<span class="string">"3"</span>&#125;;</span><br><span class="line">        <span class="comment">// 将两组数组两两嵌套，组成一幅扑克牌</span></span><br><span class="line">        <span class="keyword">for</span> (String color:colors) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String number:numbers) &#123;</span><br><span class="line">                pokers.add(color+number);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 再把大王，小王存储到pokers集合中，这就组成了一幅完整的牌了</span></span><br><span class="line">        pokers.add(<span class="string">"redJoker"</span>);</span><br><span class="line">        pokers.add(<span class="string">"blackJoker"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 2.将完整的扑克牌就行洗牌，利用集合静态方法Collections.shuffle（英文就有洗牌之意）</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        Collections.shuffle(pokers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 3.发牌：建立四个集合，分别存储四个玩家的牌：</span></span><br><span class="line"><span class="comment">        * 遍历pokers集合，获取每一张牌</span></span><br><span class="line"><span class="comment">        * 使用pokers集合的索引%3 个玩家轮流发牌</span></span><br><span class="line"><span class="comment">        * 剩余三张牌给底牌，注意：先判断底牌索引（是否i&gt;=51）,否则牌就发完了</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义四个集合来存储玩家的牌和底牌</span></span><br><span class="line">        List&lt;String&gt; play01 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;String&gt; play02 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;String&gt; play03 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;String&gt; diPai = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;pokers.size();i++)&#123;</span><br><span class="line">            <span class="comment">// 获取每一张牌</span></span><br><span class="line">            String p = pokers.get(i);</span><br><span class="line">            <span class="comment">// 轮流发牌</span></span><br><span class="line">            <span class="keyword">if</span>(i&gt;=<span class="number">51</span>)&#123;</span><br><span class="line">                diPai.add(p);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (i%<span class="number">3</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                play01.add(p);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (i%<span class="number">3</span> == <span class="number">1</span>)&#123;</span><br><span class="line">                play02.add(p);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                play03.add(p);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 4.看牌：可以遍历也可以直接打印</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        System.out.println(<span class="string">"周星驰："</span>+play01);</span><br><span class="line">        System.out.println(<span class="string">"刘德华："</span>+play02);</span><br><span class="line">        System.out.println(<span class="string">"郑伊健："</span>+play03);</span><br><span class="line">        System.out.println(<span class="string">"底牌："</span>+diPai);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>集合的综合运用：斗地主游戏（二）</strong><br>上述在完成斗地主游戏时，实现了基本洗牌，发牌功能，但是对玩家手中的牌却没有进行排序处理，比较散乱,因此需要做出改进，利用Map接口的HashMap类的键值对特性，利用键值来找到相应的value值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bytedance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pokers</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">look</span><span class="params">(String name,ArrayList&lt;Integer&gt; player,HashMap&lt;Integer,String&gt; pokers)</span></span>&#123;</span><br><span class="line">        System.out.print(name+<span class="string">"："</span>);</span><br><span class="line">        <span class="comment">// 遍历ArrayList集合，获取元素，作为建，到Map集合中查找值</span></span><br><span class="line">        <span class="keyword">for</span> (Integer key:player) &#123;</span><br><span class="line">            String value = pokers.get(key);</span><br><span class="line">            System.out.print(value+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 打印换行</span></span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 1.准备牌：定义一个集合来存储54张扑克牌</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="comment">// 创建map集合，键值对</span></span><br><span class="line">        HashMap&lt;Integer, String&gt; pokers = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 创建List集合来存储数字编号</span></span><br><span class="line">        List&lt;Integer&gt; pokerNumber = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 定义两个数组或集合来分别存储花色与数字</span></span><br><span class="line">        String[] colors = &#123;<span class="string">"♥"</span>,<span class="string">"♣"</span>,<span class="string">"♦"</span>,<span class="string">"♠"</span>&#125;;</span><br><span class="line">        String[] numbers = &#123;<span class="string">"2"</span>,<span class="string">"A"</span>,<span class="string">"K"</span>,<span class="string">"Q"</span>,<span class="string">"J"</span>,<span class="string">"10"</span>,<span class="string">"9"</span>,<span class="string">"8"</span>,<span class="string">"7"</span>,<span class="string">"6"</span>,<span class="string">"5"</span>,<span class="string">"4"</span>,<span class="string">"3"</span>&#125;;</span><br><span class="line">        <span class="comment">// 初始索引为2，因为大小王会占据索引值0，1</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 将两组数组两两嵌套，组成一幅扑克牌</span></span><br><span class="line">        <span class="keyword">for</span> (String number:numbers) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String color:colors) &#123;</span><br><span class="line">                pokers.put(index,color+number);</span><br><span class="line">                pokerNumber.add(index);</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 再把大王，小王存储到pokers集合中，这就组成了一幅完整的牌了</span></span><br><span class="line">        pokers.put(<span class="number">0</span>,<span class="string">"redJoker"</span>);</span><br><span class="line">        pokerNumber.add(<span class="number">0</span>);</span><br><span class="line">        pokers.put(<span class="number">1</span>,<span class="string">"blackJoker"</span>);</span><br><span class="line">        pokerNumber.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 2.将完整的扑克牌就行洗牌，利用集合静态方法Collections.shuffle（英文就有洗牌之意）</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        Collections.shuffle(pokerNumber);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 3.发牌：建立四个集合，分别存储四个玩家的牌：</span></span><br><span class="line"><span class="comment">        * 遍历pokers集合，获取每一张牌</span></span><br><span class="line"><span class="comment">        * 使用pokers集合的索引%3 个玩家轮流发牌</span></span><br><span class="line"><span class="comment">        * 剩余三张牌给底牌，注意：先判断底牌索引（是否i&gt;=51）,否则牌就发完了</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义四个集合来存储玩家的牌和底牌</span></span><br><span class="line">        ArrayList&lt;Integer&gt; player1 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; player2 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; player3 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; bottom = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;pokerNumber.size();i++)&#123;</span><br><span class="line">            <span class="comment">// 获取每一张牌</span></span><br><span class="line">            <span class="keyword">int</span> p = pokerNumber.get(i);</span><br><span class="line">            <span class="comment">// 轮流发牌</span></span><br><span class="line">            <span class="comment">// 前三张作为底牌</span></span><br><span class="line">            <span class="keyword">if</span>(i&lt;<span class="number">3</span>)&#123;</span><br><span class="line">                bottom.add(p);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (i%<span class="number">3</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                player1.add(p);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (i%<span class="number">3</span> == <span class="number">1</span>)&#123;</span><br><span class="line">                player2.add(p);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                player3.add(p);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对玩家手中的编号进行排序</span></span><br><span class="line">        Collections.sort(player1);</span><br><span class="line">        Collections.sort(player2);</span><br><span class="line">        Collections.sort(player3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 4.看牌：就是将玩家手中的编号放到map集合中查找，根据键值对</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        look(<span class="string">"周润发"</span>,player1, pokers);</span><br><span class="line">        look(<span class="string">"郭富城"</span>,player2, pokers);</span><br><span class="line">        look(<span class="string">"刘德华"</span>,player3, pokers);</span><br><span class="line">        look(<span class="string">"底牌"</span>,bottom, pokers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-IO，【File类的操作大全】"><a href="#7-IO，【File类的操作大全】" class="headerlink" title="7.IO，【File类的操作大全】"></a>7.IO，<a href="https://blog.csdn.net/lianghl8090/article/details/20539301" target="_blank" rel="noopener">【File类的操作大全】</a></h3><p>Java的标准库java.io提供了File对象来操作文件和目录<br>要构造一个file对象，需要传入文件路径：构造File对象时，可以是绝对路径（以根目录开头的完整路径），也可以是相对路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">'文件路径'</span>);</span><br><span class="line">        System.out.println(f);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意Windows平台使用\作为路径分隔符，在Java字符串中需要用\\表示一个\。Linux平台使用/作为路径分隔符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">linux: File f = new File(&quot;/usr/bin/javac&quot;);</span><br><span class="line">windows: File f = new File(&quot;C:\\Windows\\notepad.exe&quot;);</span><br></pre></td></tr></table></figure><h4 id="文件和目录"><a href="#文件和目录" class="headerlink" title="文件和目录"></a>文件和目录</h4><p>File对象既可以表示文件，也可以表示目录。特别要注意的是，构造一个File对象，即使传入的文件或目录不存在，代码也不会出错，因为构造一个File对象，并不会导致任何磁盘操作。只有当我们调用File对象的某些方法的时候，才真正进行磁盘操作。</p><p>相关的操作方法：用File对象获取到一个文件时，还可以进一步判断文件的权限和大小</p><ul><li>isFile() ： 判断File对象是否存在，即文件是否已经存在</li><li>isDirectory()：判断该File对象是否是一个已存在的目录</li><li>boolean canRead()：是否可读</li><li>boolean canWrite()：是否可写</li><li>boolean canExecute()：是否可执行</li><li>long length()：文件字节大小</li><li>exists() : 判断文件是否存在</li><li>createNewFile()：创建一个新文件</li><li>delete()：删除该文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 1.调用isFile()，判断该File对象是否是一个已存在的文件，</span></span><br><span class="line"><span class="comment">        * 2.调用isDirectory()，判断该File对象是否是一个已存在的目录</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        File f1 = <span class="keyword">new</span> File(<span class="string">"C:\\Windows"</span>);</span><br><span class="line">        File f2 = <span class="keyword">new</span> File(<span class="string">"C:\\Windows\\notepad.exe"</span>);</span><br><span class="line">        File f3 = <span class="keyword">new</span> File(<span class="string">"C:\\Windows\\nothing"</span>);</span><br><span class="line">        System.out.println(f1.isFile());</span><br><span class="line">        System.out.println(f1.isDirectory());</span><br><span class="line">        System.out.println(f2.isFile());</span><br><span class="line">        System.out.println(f2.isDirectory());</span><br><span class="line">        System.out.println(f3.isFile());</span><br><span class="line">        System.out.println(f3.isDirectory());</span><br><span class="line">        System.out.println(<span class="string">"========"</span>);</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"C:\\Users\\CHD\\Desktop\\abc.txt"</span>);</span><br><span class="line">        <span class="keyword">if</span> (file.createNewFile()) &#123;</span><br><span class="line">            <span class="comment">// 文件创建成功:</span></span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span></span></span><br><span class="line">            <span class="comment">//  file.delete();// 删除文件成功:</span></span><br><span class="line">            System.out.println(file.isFile());  <span class="comment">// true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="遍历文件和目录"><a href="#遍历文件和目录" class="headerlink" title="遍历文件和目录"></a>遍历文件和目录</h4><p>当File对象表示一个目录时，可以使用list()和listFiles()列出目录下的文件和子目录名。listFiles()提供了一系列重载方法，可以过滤不想要的文件和目录<br>举一个例子：查找桌面上的所有文件，并过滤掉不想要的文件或目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"C:\\Users\\CHD\\Desktop"</span>);</span><br><span class="line">        File[] fs1 = f.listFiles(); <span class="comment">// 列出所有文件和子目录</span></span><br><span class="line">        printFiles(fs1);</span><br><span class="line">        File[] fs2 = f.listFiles(<span class="keyword">new</span> FilenameFilter() &#123; <span class="comment">// 仅列出.exe文件</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File dir, String name)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> name.endsWith(<span class="string">".txt"</span>); <span class="comment">// 返回true表示接受该文件</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        printFiles(fs2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printFiles</span><span class="params">(File[] files)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"=========="</span>);</span><br><span class="line">        <span class="keyword">if</span> (files != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (File f : files) &#123;</span><br><span class="line">                System.out.println(f);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"=========="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建和删除目录"><a href="#创建和删除目录" class="headerlink" title="创建和删除目录"></a>创建和删除目录</h4><ul><li>boolean mkdir()：创建当前File对象表示的目录；</li><li>boolean mkdirs()：创建当前File对象表示的目录，并在必要时将不存在的父目录也创建出来；</li><li>boolean delete()：删除当前File对象表示的目录，当前目录必须为空才能删除成功</li></ul><h4 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h4><p>Java标准库还提供了一个Path对象，它位于java.nio.file包。Path对象和File对象类似，但操作更加简单。如果需要对目录进行复杂的拼接、遍历等操作，使用Path对象更方便：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Path p1 = Paths.get(<span class="string">"."</span>, <span class="string">"project"</span>, <span class="string">"study"</span>); <span class="comment">// 构造一个Path对象</span></span><br><span class="line">        System.out.println(p1); <span class="comment">// .\project\study</span></span><br><span class="line">        Path p2 = p1.toAbsolutePath(); <span class="comment">// 转换为绝对路径</span></span><br><span class="line">        System.out.println(p2);  <span class="comment">// D:\data\demo2\.\project\study</span></span><br><span class="line">        Path p3 = p2.normalize(); <span class="comment">// 转换为规范路径</span></span><br><span class="line">        System.out.println(p3); <span class="comment">// D:\data\demo2\project\study</span></span><br><span class="line">        File f = p3.toFile(); <span class="comment">// 转换为File对象</span></span><br><span class="line">        System.out.println(f);  <span class="comment">// D:\data\demo2\project\study</span></span><br><span class="line">        <span class="keyword">for</span> (Path p : Paths.get(<span class="string">".."</span>).toAbsolutePath()) &#123; <span class="comment">// 可以直接遍历Path</span></span><br><span class="line">            System.out.println(<span class="string">"  "</span> + p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-InputStream与OutputStream"><a href="#8-InputStream与OutputStream" class="headerlink" title="8.InputStream与OutputStream"></a>8.InputStream与OutputStream</h3><p>InputStream就是Java标准库提供的最基本的输入流。它位于java.io这个包里。java.io包提供了所有同步IO的功能。</p><p>要特别注意的一点是，InputStream并不是一个接口，而是一个抽象类，它是所有输入流的超类。这个抽象类定义的一个最重要的方法就是int read()</p><h3 id="9-日期与时间"><a href="#9-日期与时间" class="headerlink" title="9.日期与时间"></a>9.日期与时间</h3><p>我们再来看一下Java标准库提供的API。Java标准库有两套处理日期和时间的API：</p><ul><li>定义在java.util这个包里面，主要包括Date、Calendar和TimeZone这几个类(这里面有很多方法已经过时，废弃了，会报出warning)；</li><li>新的API是在Java 8引入的，定义在java.time这个包里面，主要包括LocalDateTime、ZonedDateTime、ZoneId等（推荐使用这个API）</li></ul><h4 id="Date（废弃）"><a href="#Date（废弃）" class="headerlink" title="Date（废弃）"></a><del>Date（废弃）</del></h4><p><del>java.util.Date是用于表示一个日期和时间的对象，注意与java.sql.Date区分，后者用在数据库中。如果观察Date的源码，可以发现它实际上存储了一个long类型的以毫秒表示的时间戳</del><br>使用方式：<a href="https://ahrilove.top/2019/11/22/Javascript%E7%AF%87%E7%AB%A0%E4%B8%89/">【与JavaScript使用方式大同小异，作为参考】</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Date date = new Date();</span><br><span class="line">(date.getYear()+1900):获取当前的年份，不同于其它编程语言，一定要加上1900</span><br><span class="line">(date.getMonth()+1)： 获取当前月份，不同于其它编程语言，一定要+1</span><br><span class="line">(date.getDate())：获取当前天数，范围为1-31天，不能+1</span><br><span class="line">(date.getDay())：获取当前周几，范围为0-6</span><br><span class="line">(date.toString())：转换为String</span><br><span class="line">(date.toGMTString())：转换为GMT时区</span><br><span class="line">(date.toLocaleString())：转换为本地地区（2020年2月24日 下午4:07:14）</span><br></pre></td></tr></table></figure><h4 id="自定义日期格式-废弃"><a href="#自定义日期格式-废弃" class="headerlink" title="自定义日期格式(废弃)"></a><del>自定义日期格式(废弃)</del></h4><p>举一个自定义日期格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前时间:</span></span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="keyword">var</span> sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">        System.out.println(sdf.format(date));  <span class="comment">// 2020-02-24 16:18:20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拓展：对于Java中的var表示声明局部变量，java在var上是有要求的。总结起来，有以下三点很重要：</p><p>（1）只能用于局部变量上；</p><p>（2）声明时必须初始化；</p><p>（3）不能用作方法参数。</p><h4 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a><del>Calendar</del></h4><p><del>Calendar可以用于获取并设置年、月、日、时、分、秒，它和Date比，主要多了一个可以做简单的日期和时间运算的功能</del></p><p>从Java 8开始，java.time包提供了新的日期和时间API，主要涉及的类型有：</p><ol><li>本地日期和时间：LocalDateTime，LocalDate，LocalTime；</li><li>带时区的日期和时间：ZonedDateTime；</li><li>时刻：Instant；</li><li>时区：ZoneId，ZoneOffset；</li><li>时间间隔：Duration。</li><li>以及一套新的用于取代SimpleDateFormat的格式化类型DateTimeFormatter。</li></ol><p>和旧的API相比，新API严格区分了时刻、本地日期、本地时间和带时区的日期时间，并且，对日期和时间进行运算更加方便。</p><p><font color=#ed1941>此外，新API修正了旧API不合理的常量设计：</p><p>Month的范围用1~12表示1月到12月；<br>Week的范围用1~7表示周一到周日。<br>最后，新API的类型几乎全部是不变类型（和String类似），可以放心使用不必担心被修改。</font></p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://blog.csdn.net/qq_36850813/article/details/90900744" target="_blank" rel="noopener">JAVA中的Random()</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java（三）：面向对象编程</title>
      <link href="/2020/02/10/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B(%E4%B8%89)/"/>
      <url>/2020/02/10/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B(%E4%B8%89)/</url>
      
        <content type="html"><![CDATA[<p><strong>本章内容：</strong></p><blockquote><p>1.类（class）与实例（instance）<br>2.方法<br>3.this变量<br>4.构造方法<br>5.方法重载Overload<br>6.继承<br>7.多态<br>8.抽象类<br>9.接口<br>10.package包<br>11.作用域</p></blockquote><a id="more"></a><h3 id="1-类（class）与实例（instance）"><a href="#1-类（class）与实例（instance）" class="headerlink" title="1.类（class）与实例（instance）"></a>1.类（class）与实例（instance）</h3><p>现实世界中，我们定义了“人”这种抽象概念，而具体的人则是“小明”、“小红”、“小军”等一个个具体的人。所以，“人”可以定义为一个类（class），而具体的人则是实例（instance）<br>instance是对象实例，instance是根据class创建的实例，可以创建多个instance，每个instance类型相同，但各自属性可能不相同。<br>在Java中，我们来写一个完整的程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// class的public前缀有且仅有一个</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OOP</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 在主类中定义一个demo方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">demo</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义程序入口方法：main方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用定义好的demo方法</span></span><br><span class="line">        System.out.println(demo(<span class="number">5</span>));</span><br><span class="line">        <span class="comment">// 创建一个ming实例变量</span></span><br><span class="line">        Person ming = <span class="keyword">new</span> Person();</span><br><span class="line">        ming.setBirth(<span class="number">2008</span>);</span><br><span class="line">        ming.tel = <span class="string">"15867119504"</span>;</span><br><span class="line">        System.out.println(ming.getTel());</span><br><span class="line">        System.out.println(ming.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个People类（类里包含属性和方法）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String tel;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> birth;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirth</span><span class="params">(<span class="keyword">int</span> birth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.tel;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这里说明一下：利用public型的getAge()方法调用private型的calcAge()方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> calcAge(<span class="number">2019</span>); <span class="comment">// 调用private方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// private方法:</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">calcAge</span><span class="params">(<span class="keyword">int</span> currentYear)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> currentYear - <span class="keyword">this</span>.birth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小结：</p><ul><li>public是用来修饰字段的，它表示这个字段可以被外部访问。</li><li>private方法不允许外部调用,内部方法（即处于同一class中）是可以调用private方法</li></ul><h3 id="2-方法"><a href="#2-方法" class="headerlink" title="2.方法"></a>2.方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修饰符 方法返回类型 方法名(方法参数列表) &#123;</span><br><span class="line">    若干方法语句;</span><br><span class="line">    return 方法返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法返回值通过return语句实现，如果没有返回值，返回类型设置为void，可以省略return</strong>。</p><h3 id="3-this变量"><a href="#3-this变量" class="headerlink" title="3.this变量"></a>3.this变量</h3><p>在方法内部，可以使用一个隐含的变量this，它始终指向当前实例。因此，通过this.field就可以访问当前实例的字段。</p><p>如果没有命名冲突，可以省略this。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name; // 相当于this.name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">但是，如果有局部变量和字段重名，那么局部变量优先级更高，就必须加上this：</span><br><span class="line"></span><br><span class="line">class Person &#123;</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name; // 前面的this不可少，少了就变成局部变量name了</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-构造方法"><a href="#4-构造方法" class="headerlink" title="4.构造方法"></a>4.构造方法</h3><p>构造方法是专门用来创建对象的方法，通过关键字new来创建对象，是就是在调用构造方法<br>格式：public 类名称(参数类型 变量名称){方法体}<br>注意事项：</p><ul><li>构造方法的名称必须和所在的类名称完全一样，就连大小写也一样</li><li>构造方法不要写返回值类型，连void都不要写</li><li>构造方法不能return一个具体的返回值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OOP</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 在通过new操作符调用的时候，构造方法的参数数量、位置和类型一一对应</span></span><br><span class="line">        Person p = <span class="keyword">new</span> Person(<span class="string">"chd"</span>,<span class="number">18</span>,<span class="number">10086</span>); </span><br><span class="line">        System.out.println(p.getAge());</span><br><span class="line">        <span class="comment">// 调用实例对象的属性</span></span><br><span class="line">        System.out.println(p.tel);</span><br><span class="line">        System.out.println(p.getAge());</span><br><span class="line">        System.out.println(p.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这个不能省略，用以声明变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> tel;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这就是Java的构造方法，类似于python的def __init__函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age,<span class="keyword">int</span> tel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.tel = tel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拓：多构造方法<br>可以定义多个构造方法，在通过new操作符调用的时候，编译器通过构造方法的参数数量、位置和类型自动区分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = <span class="number">12</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果调用<code>new Person(&quot;Xiao Ming&quot;, 20)</code>;，会自动匹配到构造方法<code>public Person(String, int)</code>。</p><p>如果调用<code>new Person(&quot;Xiao Ming&quot;)</code>;，会自动匹配到构造方法<code>public Person(String)</code>。</p><p>如果调用<code>new Person()</code>;，会自动匹配到构造方法<code>public Person()</code></p><h3 id="5-方法重载"><a href="#5-方法重载" class="headerlink" title="5.方法重载"></a>5.方法重载</h3><p>这种<strong>方法名相同，但各自的参数不同（即参数数目不同，参数数据类型不同），称为方法重载（Overload）</strong>。注意：<strong>方法重载的返回值类型通常都是相同的</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello, world!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello, "</span> + name + <span class="string">"!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (age &lt; <span class="number">18</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Hi, "</span> + name + <span class="string">"!"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"Hello, "</span> + name + <span class="string">"!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-继承"><a href="#6-继承" class="headerlink" title="6.继承"></a>6.继承</h3><p>继承是面向对象编程中非常强大的一种机制，它首先可以复用代码。当我们让Student从Person继承时，Student就获得了Person的所有功能，我们只需要为Student编写新增的功能。<br>继承的特点：</p><ol><li>Java是单继承语言：一个类的直接父类只能有唯一一个</li><li>Java语言可以多级继承：父类也可以继承父类的父类</li><li>一个父类可以拥有多个子类：兄弟子类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 不要重复name和age字段/方法,</span></span><br><span class="line">    <span class="comment">// 只需要定义新增score字段/方法:</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getScore</span><span class="params">()</span> </span>&#123; … &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScore</span><span class="params">(<span class="keyword">int</span> score)</span> </span>&#123; … &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="super"><a href="#super" class="headerlink" title="super"></a>super</h4><p>super关键字表示父类（超类）。子类引用父类的字段时，可以用<code>super.fieldName</code><br>实际上，这里使用<code>super.name</code>，或者<code>this.name</code>，或者<code>name</code>，效果都是一样的。编译器会自动定位到父类的name字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello, "</span> + <span class="keyword">super</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在继承时，如果父类存在构造函数，在这个时候，就必须使用super</strong>,其正确写法应为(牢记)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OOP</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person(<span class="string">"chd"</span>,<span class="number">18</span>,<span class="number">10086</span>); </span><br><span class="line">        <span class="comment">// 实例s为Person的子类Student类的实例</span></span><br><span class="line">        Student s = <span class="keyword">new</span> Student(<span class="string">"gz"</span>,<span class="number">18</span>,<span class="number">10010</span>,<span class="number">100</span>);</span><br><span class="line">        System.out.println(s.getAge());</span><br><span class="line">        System.out.println(p.getAge());</span><br><span class="line">        System.out.println(p.tel);</span><br><span class="line">        System.out.println(p.getAge());</span><br><span class="line">        System.out.println(p.getName());</span><br><span class="line">        System.out.println(s.grand);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> tel;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age,<span class="keyword">int</span> tel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.tel = tel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> grand;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">int</span> tel,<span class="keyword">int</span> grand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age, tel);  <span class="comment">// 自动调用父类的构造方法Person(name, age, tel)</span></span><br><span class="line">        <span class="keyword">this</span>.grand = grand;     <span class="comment">// 这是新构建的字段</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// Override重写，方法名，参数，返回值类型完全相同</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.grand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继承小结：</p><ul><li><strong>Java只允许一个class继承自一个类</strong>，因此，一个类有且仅有一个父类。只有Object特殊，它没有父类</li><li>子类无法访问父类的private字段或者private方法，为了让子类可以访问父类的字段，我们需要把private改为protected</li><li>子类不会继承任何父类的构造方法。子类默认的构造方法是编译器自动生成的，不是继承的</li></ul><h3 id="7-多态"><a href="#7-多态" class="headerlink" title="7.多态"></a>7.多态</h3><p>在继承关系中，<strong>子类如果与父类的方法名完全相同（方法名相同，参数相同，子类方法的返回值必须小于等于父类的返回值范围（推荐：子类和父类方法的返回值类型相同））</strong>，被称为重写（Override，这里要区别于Overload是方法名相同，但各自的参数不同）<br>举一个简单案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Student();</span><br><span class="line">        p.run(); <span class="comment">// 应该打印Person.run还是Student.run?</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// class中的方法不要写static</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Person.run"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Student类继承Person类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// 这是重写符号</span></span><br><span class="line">    <span class="comment">// 将子类的run方法进行重写，增加新的功能</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Student.run"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="调用super关键字"><a href="#调用super关键字" class="headerlink" title="调用super关键字"></a>调用super关键字</h4><p>在子类的覆写方法中，如果要调用父类的被覆写的方法，可以通过super来调用。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello, "</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用父类的hello()方法:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.hello() + <span class="string">"!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小结：<br>区分子类方法中变量名的三种访问方式：</p><ul><li>局部变量： 直接写成员变量名</li><li>本类的成员变量： this.成员变量名</li><li>父类的成员变量： super.成员变量名</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class zi extends Fu&#123;</span><br><span class="line">    public int num = 20; // 成员变量</span><br><span class="line">    public void method()&#123;</span><br><span class="line">        int num = 10;  // 局部变量</span><br><span class="line">        System.out.println(num); // 30:局部变量直接访问</span><br><span class="line">        System.out.println(this.num); // 20:本类的成员变量： this.成员变量名</span><br><span class="line">        System.out.println(super.num); // 10:父类的成员变量： super.成员变量名</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="final"><a href="#final" class="headerlink" title="final"></a>final</h4><p>继承可以允许子类覆写父类的方法。如果一个父类不允许子类对它的某个方法进行覆写，可以把该方法标记为final。用final修饰的方法不能被Override：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello, "</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// compile error: 不允许覆写</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2020-3-9 新增：<br>在父子类的继承关系中，如果成员变量重名，则创建子类访问对象时，访问有两种方法：</p><ol><li>通过子类对象访问成员变量：<strong>等号左边时谁，就优先用谁，没有则向上找父类</strong></li><li>通过成员方法访问成员变量：<strong>该方法属于谁，就有限用谁，没有向上找父类</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Alibaba;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">extendsField</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Fu fu = <span class="keyword">new</span> Fu();</span><br><span class="line">        Zi zi = <span class="keyword">new</span> Zi();<span class="comment">// 实例化两个对象</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 当父类和子类都具有num这个成员变量时</span></span><br><span class="line"><span class="comment">        * 等号左边是谁，优先用谁</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        System.out.println(zi.num);  <span class="comment">// 20</span></span><br><span class="line">        System.out.println(<span class="string">"======"</span>);</span><br><span class="line">        zi.methodZi(); <span class="comment">// 20：这个方法是子类的，优先使用子类的</span></span><br><span class="line"></span><br><span class="line">        zi.methodFu();  <span class="comment">// 10：这个方法实在父类中定义的</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> numFu = <span class="number">100</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodFu</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是父类方法"</span>);</span><br><span class="line">        <span class="comment">// 优先使用本类中的num</span></span><br><span class="line">        System.out.println(num); <span class="comment">// 10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> num = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> numFu = <span class="number">100</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodZi</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是子类方法"</span>);</span><br><span class="line">        <span class="comment">// 优先使用本类中的成员变量</span></span><br><span class="line">        System.out.println(num);  <span class="comment">// 20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-抽象类"><a href="#8-抽象类" class="headerlink" title="8.抽象类"></a>8.抽象类</h3><p>由于多态的存在，每个子类都可以覆写父类的方法，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; … &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; … &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; … &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义：<br><strong>抽象类：抽象方法所在的类，必须是抽象类才行，在class前写上abstract即可</strong><br><strong>抽象方法：就是在方法强加上abstract关键字，然后去掉大括号，直接分号结束</strong></p><p>使用方法：</p><ol><li>不能直接创建new抽象类对象</li><li>必须用一个子类来继承抽象父类</li><li>子类必须覆盖重写抽象父类当中的所有抽象方法</li><li>创建子类实例对象进行使用<br>如果一个class定义了方法，但没有具体执行代码，这个方法就是抽象方法，抽象方法用abstract修饰。因为无法执行抽象方法，因此这个类也必须申明为抽象类（abstract class）。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OOP</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *这里值得值得注意：用abstract修饰的类就是抽象类。我们无法实例化一个抽象类</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        Person p = <span class="keyword">new</span> Student();  <span class="comment">// 第四点：创建子类实例对象</span></span><br><span class="line">        p.age = <span class="number">18</span>;</span><br><span class="line">        p.run();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象类不仅要在类名前加abstract，也要在抽象方法名前加abstract</span></span><br><span class="line"><span class="comment">// Person类用abstract修饰的，表示为抽象类，我们无法实例化抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Student类继承Person类，并将父类的run方法进行重写</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">super</span>.age);  <span class="comment">// super指代父类</span></span><br><span class="line">        System.out.println(<span class="keyword">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>小结：</li></ol><ul><li><p>通过abstract定义的方法是抽象方法，它只有定义，没有实现。抽象方法定义了子类必须实现的接口规范；</p></li><li><p>定义了抽象方法的class必须被定义为抽象类，从抽象类继承的子类必须实现抽象方法；</p></li><li><p>抽象类无法被实例化（即className 变量名 = new className()）</p></li></ul><h3 id="9-接口"><a href="#9-接口" class="headerlink" title="9.接口"></a>9.接口</h3><h4 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h4><p><strong>如果一个抽象类没有字段或者说没有属性，所有方法全部都是抽象方法</strong>【抽象方法：修饰符 abstract 返回值类型 方法名()】，就可以把该抽象类改写为接口：<code>interface</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Java中，可以使用interface可以声明一个接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>所谓interface，就是比抽象类还要抽象的纯抽象接口，因为它连字段都不能有。因为接口定义的所有方法默认都是public abstract的，所以这两个修饰符不需要写出来（写不写效果都一样）</strong></p><h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><p>当一个具体的class去实现一个interface时，需要使用implements关键字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name + <span class="string">" run"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类实现多接口"><a href="#类实现多接口" class="headerlink" title="类实现多接口"></a>类实现多接口</h4><p>在Java中，一个类只能继承自另一个类，不能从多个类继承。但是，一个类可以实现多个interface</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Student implements Person, Hello &#123; // 实现了两个interface</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接口继承"><a href="#接口继承" class="headerlink" title="接口继承"></a>接口继承</h4><p>一个interface可以继承自另一个interface。interface继承自interface使用extends，它相当于扩展了接口的方法。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，Person接口继承自Hello接口，因此，Person接口现在实际上有3个抽象方法签名，其中一个来自继承的Hello接口。</p><h3 id="10-package包"><a href="#10-package包" class="headerlink" title="10.package包"></a>10.package包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">程序目录结构：</span><br><span class="line">package_sample</span><br><span class="line">└─ src</span><br><span class="line">    ├─ hong</span><br><span class="line">    │  └─ Person.java</span><br><span class="line">    │  ming</span><br><span class="line">    │  └─ Person.java</span><br><span class="line">    └─ mr</span><br><span class="line">       └─ jun</span><br><span class="line">          └─ Arrays.java</span><br></pre></td></tr></table></figure><p>使用<code>import</code>导入相关包</p><ul><li>方式一：import 包名.某一类名</li><li>方式二：import 包名.*</li></ul><h3 id="11-作用域"><a href="#11-作用域" class="headerlink" title="11.作用域"></a>11.作用域</h3><p>priavte          本类可见</p><p>public            所有类可见</p><p>protected      作用于继承关系，定义为protected的字段和方法可以被子类访问，以及子类的子类</p><p>default          本包可见（即默认的形式）（本包中的子类非子类均可访问，不同包中的类及子类均不能访问）</p><p><strong>小结</strong></p><ul><li><p>Java内建的访问权限包括public、protected、private和package权限；</p></li><li><p>Java在方法内部定义的变量是局部变量，局部变量的作用域从变量声明开始，到一个块结束；</p></li><li><p>final修饰符不是访问权限，它可以修饰class、field和method；</p></li><li><p>一个.java文件只能包含一个public类，但可以包含多个非public类。如果有public类，文件名必须和public类的名字相同。</p><h3 id="12-未完待续…"><a href="#12-未完待续…" class="headerlink" title="12.未完待续…"></a>12.未完待续…</h3></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java（二）：流程控制</title>
      <link href="/2020/02/09/Java%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6(%E4%BA%8C)/"/>
      <url>/2020/02/09/Java%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<p><strong>本章内容：</strong></p><blockquote><p>1.Java输入输出<br>2.if判断<br>3.switch语句<br>4.while循环<br>5.do-while循环<br>6.for循环与for each循环<br>7.break与continue<br>8.Java多维数组</p></blockquote><a id="more"></a><h3 id="1-输入输出"><a href="#1-输入输出" class="headerlink" title="1.输入输出"></a>1.输入输出</h3><p>在前面的代码中，我们总是使用<code>System.out.println()</code>来向屏幕输出一些内容。println是print line的缩写，表示输出并换行。因此，如果输出后不想换行，可以用<code>System.out.print()</code><br><strong>格式化输出：</strong><br>如果要把数据显示成我们期望的格式，就需要使用格式化输出的功能。格式化输出使用<code>System.out.printf()</code>，通过使用占位符<code>%?</code>，printf()可以把后面的参数格式化成指定格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> d = <span class="number">3.1415927</span>;</span><br><span class="line">        System.out.printf(<span class="string">"%.2f"</span>,d);  </span><br><span class="line">        System.out.printf(<span class="string">"%.4f"</span>,d);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>占位符</th><th align="center">说明</th></tr></thead><tbody><tr><td>%d</td><td align="center">格式化输出整数</td></tr><tr><td>%x</td><td align="center">格式化输出十六进制整数</td></tr><tr><td>%f</td><td align="center">格式化输出浮点数</td></tr><tr><td>%e</td><td align="center">格式化输出科学计数法表示的浮点数</td></tr><tr><td>%s</td><td align="center">格式化字符串</td></tr></tbody></table><p><strong>输入：</strong> 直接看案例<br>输入类型：<br>方法&nbsp;&nbsp;&nbsp;&nbsp;    描述<br>nextBoolean()&nbsp;&nbsp;&nbsp;&nbsp;    从用户输入中读取1个 boolean 值<br>nextByte()    &nbsp;&nbsp;&nbsp;&nbsp;    从用户输入中读取1个 byte 值<br>nextDouble()&nbsp;&nbsp;&nbsp;&nbsp;    从用户输入中读取1个 double 值<br>nextFloat()&nbsp;&nbsp;&nbsp;&nbsp;    从用户输入中读取1个 float 值<br>nextInt()&nbsp;&nbsp;&nbsp;&nbsp;    从用户输入中读取1个 int 值<br>nextLine()&nbsp;&nbsp;&nbsp;&nbsp;    从用户输入中读取1个 String 值<br>nextLong()    &nbsp;&nbsp;&nbsp;&nbsp;从用户输入中读取1个 long 值<br>nextShort()    &nbsp;&nbsp;&nbsp;&nbsp;从用户输入中读取1个 short 值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in); <span class="comment">// 创建Scanner对象</span></span><br><span class="line">        System.out.print(<span class="string">"Input your name: "</span>); <span class="comment">// 打印提示</span></span><br><span class="line">        String name = scanner.nextLine(); <span class="comment">// 读取一行输入并获取字符串</span></span><br><span class="line">        System.out.print(<span class="string">"Input your age: "</span>); <span class="comment">// 打印提示</span></span><br><span class="line">        <span class="keyword">int</span> age = scanner.nextInt(); <span class="comment">// 读取一行输入并获取整数</span></span><br><span class="line">        System.out.printf(<span class="string">"Hi, %s, you are %d\n"</span>, name, age); <span class="comment">// 格式化输出</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，我们通过import语句导入java.util.Scanner，import是导入某个类的语句，必须放到Java源代码的开头</p><p>然后，创建Scanner对象并传入System.in。System.out代表标准输出流，而System.in代表标准输入流。直接使用System.in读取用户输入虽然是可以的，但需要更复杂的代码，而通过Scanner就可以简化后续的代码。</p><p>有了Scanner对象后，要读取用户输入的字符串，使用<code>scanner.nextLine()</code>；要读取用户输入的整数，使用<code>scanner.nextInt()</code>。Scanner会自动转换数据类型，因此不必手动转换。</p><h3 id="2-if判断"><a href="#2-if判断" class="headerlink" title="2.if判断"></a>2.if判断</h3><p>if语句的基本语法是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if (条件) &#123;</span><br><span class="line">    // 条件一满足时执行</span><br><span class="line">&#125;</span><br><span class="line">else if(条件) &#123;</span><br><span class="line">    // 条件二满足时执行</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">    // 条件不满足时执行</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拓：浮点数相等判断。浮点数在计算机中常常无法精确表示，并且计算可能出现误差，因此，判断浮点数相等用==判断不靠谱</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> x = <span class="number">1</span> - <span class="number">9.0</span> / <span class="number">10</span>;</span><br><span class="line">        <span class="comment">// 利用Math的绝对值之差</span></span><br><span class="line">        <span class="keyword">if</span> (Math.abs(x - <span class="number">0.1</span>) &lt; <span class="number">0.00001</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"x is 0.1"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"x is NOT 0.1"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-switch语句"><a href="#3-switch语句" class="headerlink" title="3.switch语句"></a>3.switch语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">switch (option) &#123;</span><br><span class="line">    case 3:</span><br><span class="line">        ...</span><br><span class="line">        break;</span><br><span class="line">    case 2:</span><br><span class="line">        ...</span><br><span class="line">        break;</span><br><span class="line">    case 1:</span><br><span class="line">        ...</span><br><span class="line">        break;</span><br><span class="line">    default:</span><br><span class="line">        ...</span><br><span class="line">        break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-while循环"><a href="#4-while循环" class="headerlink" title="4.while循环"></a>4.while循环</h3><p><code>while循环</code>在每次循环开始前，首先判断条件是否成立。如果计算结果为true，就把循环体内的语句执行一遍，如果计算结果为false，那就直接跳到while循环的末尾，继续往下执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>; <span class="comment">// 累加的和，初始化为0</span></span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (n &lt;= <span class="number">100</span>) &#123; <span class="comment">// 循环条件是n &lt;= 100</span></span><br><span class="line">            sum = sum + n; <span class="comment">// 把n累加到sum中</span></span><br><span class="line">            n ++; <span class="comment">// n自身加1</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum); <span class="comment">// 5050</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>while循环是先判断循环条件，再循环，因此，有可能一次循环都不做。</strong></p><h3 id="5-do…while循环"><a href="#5-do…while循环" class="headerlink" title="5.do…while循环"></a>5.do…while循环</h3><p>在Java中，while循环是先判断循环条件，再执行循环。而另一种do while循环则是先执行循环，再判断条件，条件满足时继续循环，条件不满足时退出。它的用法是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">do &#123;</span><br><span class="line">    执行循环语句</span><br><span class="line">&#125; while (条件表达式);</span><br></pre></td></tr></table></figure><p>可见，do while循环会至少循环一次。</p><h3 id="6-for循环"><a href="#6-for循环" class="headerlink" title="6.for循环"></a>6.for循环</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] ns = &#123; <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span> &#125;;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;ns.length; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"i = "</span> + i + <span class="string">", ns[i] = "</span> + ns[i]);</span><br><span class="line">            sum = sum + ns[i];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"sum = "</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">i = 0, ns[i] = 1</span></span><br><span class="line"><span class="comment">i = 1, ns[i] = 4</span></span><br><span class="line"><span class="comment">i = 2, ns[i] = 9</span></span><br><span class="line"><span class="comment">i = 3, ns[i] = 16</span></span><br><span class="line"><span class="comment">i = 4, ns[i] = 25</span></span><br><span class="line"><span class="comment">sum = 55</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="for-each循环"><a href="#for-each循环" class="headerlink" title="for each循环"></a>for each循环</h4><p>本质上为增强for循环：<strong>用来遍历集合与数组</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">for(集合/数组的数据类型 变量名：集合名/数组名)&#123;</span><br><span class="line">    执行语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-break与continue"><a href="#7-break与continue" class="headerlink" title="7.break与continue"></a>7.break与continue</h3><p>break：会跳出整个循环，也就是整个循环都不会执行了<br>continue：提前结束本次循环，直接继续执行下次循环</p><h3 id="8-二维数组"><a href="#8-二维数组" class="headerlink" title="8.二维数组"></a>8.二维数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] ns = &#123;</span><br><span class="line">            &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;,</span><br><span class="line">            &#123; <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span> &#125;,</span><br><span class="line">            &#123; <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span> &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(ns.length); <span class="comment">// 3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为ns包含3个数组，因此，<code>ns.length为3</code>.<br><strong>访问二维数组的某个元素需要使用array[row][col]</strong>，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(ns[<span class="number">1</span>][<span class="number">2</span>]); <span class="comment">// 7</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java（一）：程序基础</title>
      <link href="/2020/02/07/Java%E7%A8%8B%E5%BA%8F%E5%9F%BA%E7%A1%80(%E4%B8%80)/"/>
      <url>/2020/02/07/Java%E7%A8%8B%E5%BA%8F%E5%9F%BA%E7%A1%80(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Java是一门面向对象编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程  。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Java具有简单性、面向对象、分布式、健壮性、安全性、平台独立与可移植性、多线程、动态性等特点 。Java可以编写桌面应用程序、Web应用程序、分布式系统和嵌入式系统应用程序等</p><blockquote><p>1.Java基础结构<br>2.Java命名规范与注释<br>3.变量，常量与数据类型<br>4.字符与字符串类型<br>5.数组类型<br>6.常量<br>7.访问修饰符</p></blockquote><a id="more"></a><h3 id="1-Java基础结构"><a href="#1-Java基础结构" class="headerlink" title="1.Java基础结构"></a>1.Java基础结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类名与Java文件名相同</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; <span class="comment">// 方法名是main，main方法表示为入口文件</span></span><br><span class="line">        <span class="comment">// 方法代码...</span></span><br><span class="line">    &#125; <span class="comment">// 方法定义结束</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PS：<strong>我们注意到public除了可以修饰class外，也可以修饰方法。而关键字static是另一个修饰符，它表示静态方法，后面我们会讲解方法的类型，目前，我们只需要知道，Java入口程序规定的方法必须是静态方法，方法名必须为main，括号内的参数必须是String数组。</strong></p><h3 id="2-命名规范"><a href="#2-命名规范" class="headerlink" title="2.命名规范"></a>2.命名规范</h3><p>命名规则：包含数字，字母，下划线与$符号（不能以数字开头；不能为关键字）<br>命名规范：类名（大驼峰原则），方法名与变量名（小驼峰原则）</p><h3 id="3-注释"><a href="#3-注释" class="headerlink" title="3.注释"></a>3.注释</h3><p>单行注释：\\<br>多行注释：\* content *\<br>从Java 13开始，字符串可以用<code>&quot;&quot;&quot;...&quot;&quot;&quot;</code>表示多行字符串（Text Blocks）</p><h3 id="4-变量与数据类型"><a href="#4-变量与数据类型" class="headerlink" title="4.变量与数据类型"></a>4.变量与数据类型</h3><p><strong>在Java中，变量必须先定义后使用，定义时，也可以赋值一个初始值</strong>，在Java中，变量分为两种：<code>基本类型的变量</code>和<code>引用类型的变量</code>。<br>基本数据类型是CPU可以直接进行运算的类型。Java定义了以下几种基本数据类型：</p><ul><li><p>整数类型：byte，short，int，long</p></li><li><p>浮点数类型：float，double</p></li><li><p>字符类型：char</p></li><li><p>布尔类型：boolean<br>注意char类型使用单引号<code>&#39;</code>，且仅有一个字符，要和双引号<code>&quot;</code>的字符串类型区分开。</p></li></ul><h3 id="5-常量-通常大写"><a href="#5-常量-通常大写" class="headerlink" title="5.常量(通常大写)"></a>5.常量(通常大写)</h3><p>定义变量的时候，如果加上final修饰符，这个变量就变成了常量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">double</span> PI = <span class="number">3.14</span>; <span class="comment">// PI是一个常量</span></span><br><span class="line"><span class="keyword">double</span> r = <span class="number">5.0</span>;</span><br><span class="line"><span class="keyword">double</span> area = PI * r * r;</span><br><span class="line">PI = <span class="number">300</span>; <span class="comment">// compile error! 常量在定义时进行初始化后就不可再次赋值，再次赋值会导致编译错误。</span></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li><p>变量可重新赋值，等号是赋值语句，不是数学意义的等号。</p></li><li><p>常量在初始化后不可重新赋值，使用常量便于理解程序意图。</p></li></ul><h3 id="6-字符与字符串类型"><a href="#6-字符与字符串类型" class="headerlink" title="6.字符与字符串类型"></a>6.字符与字符串类型</h3><p>字符类型：字符char是基本数据类型，一个char保存一个Unicode字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">char c1 = &apos;A&apos;;</span><br><span class="line">char c2 = &apos;中&apos;;</span><br></pre></td></tr></table></figure><p>要显示一个字符的Unicode编码，只需将char类型直接赋值给int类型即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int n1 = &apos;A&apos;; // 字母“A”的Unicodde编码是65</span><br><span class="line">int n2 = &apos;中&apos;; // 汉字“中”的Unicode编码是20013</span><br></pre></td></tr></table></figure><p>字符串类型：<br>和char类型不同，字符串类型String是引用类型，常常使用双引号包裹起来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String s = &quot;&quot;; // 空字符串，包含0个字符</span><br><span class="line">String s1 = &quot;A&quot;; // 包含一个字符</span><br><span class="line">String s2 = &quot;ABC&quot;; // 包含3个字符</span><br><span class="line">String s3 = &quot;中文 ABC&quot;; // 包含6个字符，其中有一个空格</span><br></pre></td></tr></table></figure><h3 id="7-数组类型"><a href="#7-数组类型" class="headerlink" title="7.数组类型"></a>7.数组类型</h3><p>语法：定义一个数组类型的变量，使用数组类型<code>“类型[]”</code>，例如，<code>int[]</code>。和单个基本类型变量不同，<strong>数组变量初始化必须使用new int[5]表示创建一个可容纳5个int元素的数组</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 数组的创建方式</span></span><br><span class="line">        <span class="keyword">int</span>[] grades = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">        System.out.println(ns.length); <span class="comment">// 5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java的数组有几个特点：</p><ul><li>数组所有元素初始化为默认值，整型都是0，浮点型是0.0，布尔型是false；</li><li>数组一旦创建后，大小就不可改变。</li><li>要访问数组中的某一个元素，需要使用索引。数组索引从0开始，例如，5个元素的数组，索引范围是0~4。</li><li>可以修改数组中的某一个元素，使用赋值语句，例如，ns[1] = 79;。</li><li>可以用数组变量.length 获取数组大小</li></ul><p><a href="https://blog.csdn.net/wu1226419614/article/details/80870120" target="_blank" rel="noopener">python的列表List与python的数组的区别</a>：<br>List（列表） 是 Python 中使用最频繁的数据类型。<strong>列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）</strong>。</p><p>Java数值初始化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int[] ns = new int[] &#123; 68, 79, 91, 85, 62 &#125;;</span><br><span class="line">int[] ns = &#123; 68, 79, 91, 85, 62 &#125;   // 这是简写</span><br><span class="line">ns[index] // 按索引值查找</span><br><span class="line">int[] bb = &#123;1,2,3&#125;;</span><br><span class="line">System.out.println(Arrays.toString(bb));  // 直接打印数组</span><br></pre></td></tr></table></figure><p>小结：</p><ul><li><p>数组是同一数据类型的集合，数组一旦创建后，大小就不可变；</p></li><li><p>可以通过索引访问数组元素，但索引超出范围将报错；</p></li><li><p>数组元素可以是值类型（如int）或引用类型（如String），但数组本身是引用类型；</p></li><li><p>java不同于python，Java的数组无法直接打印，可以使用Arrays.toString(数组名)来直接打印出来</p></li></ul><h3 id="8-访问修饰符"><a href="#8-访问修饰符" class="headerlink" title="8.访问修饰符"></a>8.访问修饰符</h3><table><thead><tr><th>作用域</th><th align="center">本类</th><th>本包范围内</th><th>子孙类（只代表其他包中的子孙类）</th><th align="right">其他包</th></tr></thead><tbody><tr><td>public</td><td align="center">可以</td><td>可以</td><td>可以</td><td align="right">可以</td></tr><tr><td>protected</td><td align="center">可以</td><td>可以</td><td>可以</td><td align="right">不可以</td></tr><tr><td>default</td><td align="center">可以</td><td>可以</td><td>不可以</td><td align="right">不可以</td></tr><tr><td>private</td><td align="center">可以</td><td>不可以</td><td>不可以</td><td align="right">不可以</td></tr></tbody></table><p>同一package可以理解为在同一个村庄</p><p>public 可以理解为无论是否在一个村，谁都可以访问</p><p>protected 可以理解为，只有自己一个村的邻居和子女，以及远嫁出去的子女可以访问</p><p>default 可以理解为，只有自己同村的可以范围，如果子女和自己是同村，也可以使用。如果子女远嫁出去，不在自己的村庄了，很抱歉，远水解不了近渴，远亲不如近邻。</p><p>private 可以理解为   私有财产不可侵犯，有些事情，除了自己，绝不能让其他人访问，例如银行密码。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020 新年快乐  \﻿ (•◡•) /</title>
      <link href="/2020/01/24/HappyNewYear/"/>
      <url>/2020/01/24/HappyNewYear/</url>
      
        <content type="html"><![CDATA[<p><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/2020_HappyNewYear.png" alt=""></fancybox></p><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>你很秀！但下一秒，我跟你一样秀</title>
      <link href="/2020/01/23/%E6%88%90%E7%A5%9E%E8%A3%85%E9%80%BC%E8%BF%9B%E5%8C%96%E4%B9%8B%E8%B7%AF/"/>
      <url>/2020/01/23/%E6%88%90%E7%A5%9E%E8%A3%85%E9%80%BC%E8%BF%9B%E5%8C%96%E4%B9%8B%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<p>【天不造人上之人,亦不造人下之人】谢邀，人在美国，刚下飞机。利益相关，圈子太小，匿了(总结装逼的知识百科)。</p><a id="more"></a><p>要想修身,齐家,治国,平天下,无形之中装逼，除了超凡的智商压制，还离不开知识的积累铺垫。</p><h3 id="1-大相径庭：比喻相差很远，大不相同"><a href="#1-大相径庭：比喻相差很远，大不相同" class="headerlink" title="1. 大相径庭：比喻相差很远，大不相同"></a>1. <strong><font color=#ed1941>大相径庭：比喻相差很远，大不相同</font></strong></h3><p>近义词：    迥然不同、泾渭分明、截然不同、天差地别<br>反义词：    一模一样、如出一辙、大同小异、相差无几</p><h3 id="2-量子纠缠态"><a href="#2-量子纠缠态" class="headerlink" title="2. 量子纠缠态"></a>2. <strong><font color=#ed1941>量子纠缠态</font></strong></h3><p>官方解释：<a href="https://baike.baidu.com/item/%E9%87%8F%E5%AD%90%E7%BA%A0%E7%BC%A0/1714985?fr=aladdin" target="_blank" rel="noopener">【在量子力学里，当几个粒子在彼此相互作用后，由于各个粒子所拥有的特性已综合成为整体性质，无法单独描述各个粒子的性质，只能描述整体系统的性质，则称这现象为量子缠结或量子纠缠（quantum entanglement）。量子纠缠是一种纯粹发生于量子系统的现象；在经典力学里，找不到类似的现象。】</a><br>我一直不能理解量子纠缠理论的解释，为什么两个相距甚远的两个粒子发生量子纠缠现象，就会瞬间互相改变对方的状态？今天早晨，我有了新的理解！因为我觉得爱情可以用量子纠缠来解释，两个完全不相关的人，在某一点发生相遇，发生纠缠，产生了爱情，即使这两个人一个在火星，一个在地球，只要一个人心情发生变化，也会影响到另外一个人的心情，比如一个人像另一个人提出分手，即使距离很远，两个人的恋爱状态都在瞬间发生改变了！爱情的不确定性用量子物理学解释的很清楚，太诡异啦！</p><h3 id="3-从量子纠缠态解释记忆"><a href="#3-从量子纠缠态解释记忆" class="headerlink" title="3. 从量子纠缠态解释记忆"></a>3. <strong><font color=#ed1941>从量子纠缠态解释记忆</font></strong></h3><p>记忆是个神奇的东西，虚虚实实，如薛定谔的猫，也就像处在不同态同时叠加的量子，确定了他的位置，就摸不到他的温度。</p><p>集体记忆更是个神奇的东西，大家一起构建，共同维护，却不一定就是真实的时间轨迹。物理学里面世界尺度小到原子级别以后，就会出现量子态，而相干的量子态之间，一定会纠缠。正如有关联的的两个人，记忆缠在一起，只能同时出现或消失，而无法分开。</p><p>最神奇的事情是，量子态被测量时，会坍缩。本来都有一定几率发生的叠加态，会坍缩到其中一个确定的态，而纠缠的量子之间，因为相干，而无法相互独立，故而测量会使得纠缠的所有量子态集体坍缩，如同集体记忆的共同丢失，变得诡异异常。</p><p>当一个群体的记忆发生变化时，一切都仿佛演化到了新的世界线，在那里，现状里看不清过去，过去的推演不到现在。如同被测量的量子态，并不在遵循因果律，因而也完全无法时间反演，要做的，只有重新建立原来的叠加态，然后二次测量。</p><p>假设我是一个眼睁睁地看着另一个量子态在测量中坍缩的（光或者原子）量子，我记得他坍缩前的样子，记得测量前发生的所有事情，我还和他是一个好朋友。目睹了这一切之后，脑子可能要炸了吧。</p><h3 id="4-诸葛大力对张伟的告白情书"><a href="#4-诸葛大力对张伟的告白情书" class="headerlink" title="4. 诸葛大力对张伟的告白情书"></a>4. <strong><font color=#ed1941><a href="https://www.zhihu.com/question/367384052/answer/982020030" target="_blank" rel="noopener">诸葛大力对张伟的告白情书</a></font></strong></h3><p>特斯拉穿过平面，编织成一个又一个韦伯 。 安倍冲过欧姆，寻找着法拉，充电到一个伏特，电键已断，我以库仑之名涌出，化为焦耳，为了你，烟消云散。<br>我们知道，<strong>磁生电的其中一个方法为让闭合电路中的导体在磁场中做切割磁感线的运动</strong>。那么这个“平面”的理解即是其定义式：Φ=BS，即当平面与磁场方向不垂直时：Φ=BS⊥=BScosθ（θ为两个平面的二面角,即垂直于磁感线的平面），所以晚上老抢我被子的大力所说“平面”应该就指的是上文中物理意义上的抽象的平面。所以“特斯拉穿过平面，编织成一个又一个韦伯 ”整句的意思就是以电磁感应做一个开始，以电流作为主要人物贯穿整封情书。</p><h3 id="5-蚂蚁花呗，京东白条背后的真实利率惊人"><a href="#5-蚂蚁花呗，京东白条背后的真实利率惊人" class="headerlink" title="5. 蚂蚁花呗，京东白条背后的真实利率惊人"></a>5. <strong>蚂蚁花呗，京东白条背后的真实利率惊人</strong></h3><p>在网购支付时，经济不宽裕时我们常常选择分期付款，看似每个月支付的很少，其实背后的利率究竟有多吓人？？其计算方式究竟是怎样的？？我用两张图片来展示如何详细计算<br>不同的平台对利息的叫法是不同的，比如阿里的手续费，京东的服务费等等，就是换了个壳子的叫法而已<br><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/20200201143229.png" alt=""></fancybox><br>这是京东上面价值<code>3899.00</code>的iPhone8，可以看到其费率是1.00%（3899.00<em>1.00% = 38.99）即每期的利息相当于38.99元， <code>这里需要注意的是：不管你每月还了多少，每月利息不是按剩余未还本金计算，而是按照总共本金计算每月利息，总结起来都是这样的套路。</code><br>假如我们选择`201.41</em>24期`这一选项，我们来具体算算这些数字的得来吧</p><ul><li>每月固定的利息为1.00%，其利息 = 本金 * 利率 （3899.00*1.00% = 38.99）</li><li>每月固定的偿还本金为：总金额/分期时限 （3899/24 = 162.46）</li></ul><p>相加大约为38.99+162.46 = 201.45 （201.45 * 24 = 4834.8）</p><p><strong>分期付款时，你的商品（手机）价格是一直贬值的，而你一直支付的该商品的原来价值，所以说资本家又会将这价值差拿来在钱生钱</strong></p><p>比如上图这张图片，虽然没有明确标注出费率是多少，我们也可以计算出来，依旧选择<code>24期分期</code>，由图可知，其24期的手续费为<code>14.36元</code>：</p><ul><li>商品价格 * 费率 = 每期固定利息 （14.36 / 2299 = 0.625%费率）</li><li>每月固定偿还的本金：总金额/分期时限 （2299/24 = 95.79） （95.79 + 14.36 = 110.15元）</li></ul><p><strong>可知在分期付款方面，白条的费率更高，更吓人呀！！</strong></p><p><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/20200201143335.png" alt=""></fancybox><br>至于真实的年化率怎么计算，直接在微信小程序<code>IRR内部收益率计算器</code>上输入计算得知</p><h3 id="6-佳句赏析"><a href="#6-佳句赏析" class="headerlink" title="6. 佳句赏析"></a>6. 佳句赏析</h3><ul><li>Diamonds and gold last for ever，and so will our love:宝石与金子能够永存，我们的爱也是！！</li><li>生前何必久睡，死后自会长眠 ：用来文艺化来表达睡什么睡，起来嗨（睡NMB睡这类的）之意</li></ul><h3 id="7-如何做一个优质的自媒体？做B站UP赚钱吗？"><a href="#7-如何做一个优质的自媒体？做B站UP赚钱吗？" class="headerlink" title="7. 如何做一个优质的自媒体？做B站UP赚钱吗？"></a>7. 如何做一个优质的自媒体？做B站UP赚钱吗？</h3><p>对于B站，我是十分喜欢的，上面有很多的优质的视频资源，我认为它是<font color="#585eaa">“多元宇宙最好的APP”</font>，旨在对标YouTube</p><p><a href="https://www.zhihu.com/question/308179641/answer/986833358" target="_blank" rel="noopener">【做B站up主赚钱吗? - 魔法纽扣的回答 - 知乎】</a><br>我这里对于视频流量特别说明一哈：<strong>千万不要刷流量x3，也不要加互助群</strong>，因为平均有效观看时长被你弄得很低很低。系统算法会认为你的视频质量极低<br>首先它很贵…比如说1万的播放量，B站近百元，爱奇艺16元，腾讯2元，优酷8元，乐视0.8元，秒拍、美拍1元。为什么贵这么多，因为<strong>B站一个IP一天算一个播放量</strong>，应该算是播放量最真实的一个视频网站了，所以我说B站潜力很大，像微博僵尸粉和机器人遍地走之后想变回来都不可能。这么贵的刷，会不会回本呢？</p><p>永远不会，你刷一千播放量，是的，视频很快破千，然后你会发现它几乎就不动了。你在互助群和十几个小伙伴点来点去，然后视频就再也没什么赞了。为什么？因为平均有效观看时长被你弄得很低很低。系统算法会认为你的视频质量极低，一千个人都是点开来一秒钟就走，这个视频可能会被判定为标题党。no作no die</p><h3 id="8-微商-amp-amp-传销"><a href="#8-微商-amp-amp-传销" class="headerlink" title="8.微商&amp;&amp;传销"></a>8.微商&amp;&amp;传销</h3><p>微商与传销本质都是割韭菜，找接盘侠。不同之处是微商有真实的商品，传销完完全全是虚空的，没有实际商品价值，纯粹收人头费，入会费！</p><h3 id="9-2019武汉新型冠状肺炎-amp-瑞德西韦"><a href="#9-2019武汉新型冠状肺炎-amp-瑞德西韦" class="headerlink" title="9.2019武汉新型冠状肺炎&amp;瑞德西韦"></a>9.2019武汉新型冠状肺炎&amp;瑞德西韦</h3><p>2019年的武汉肺炎可谓闹的是沸沸扬扬，给全中国人民带来很大的不便和经济损失。美国的吉利德公司（HIV，流感，丙肝等）研发出了一款<code>瑞德西韦</code>药物，中国与吉利德公司于2月5号紧急签订协议，通常一款药物从研发到上市差不多要10年之久，流程十分复杂：</p><ol><li>一期：安全性的试验</li><li>二期，三期：药物疗效对照试验。实验对象分为两组，实验组注射韦德西韦，对照组注射安慰剂。实验主要分为三个阶段：一盲（实验对象不知道自己注射的是那种试剂），双盲（实验对象，医生不知道试剂类别），三盲（实验对象，医生，实验结果统计专家都不知道）</li><li>上市阶段</li></ol><p>拓展：对于某些疾病尚未有有效药物时，美国的“同情原则”==“中国的死马当活马医”，2月5号第一位病人注射了瑞德西韦，到<strong>4月底实验结束才能确定这种特效药究竟有没有作用</strong></p><h3 id="10-老千层饼了"><a href="#10-老千层饼了" class="headerlink" title="10.老千层饼了"></a>10.老千层饼了</h3><p>释义: 大司马直播LOL游戏时对自己预判操作的解释， 我预判他，他预判了我的预判，我预判他预判了我的预判……一层一层预判像千层饼，所以被网友称他为老千层饼</p><p>用法: 多用于形容或者调侃迂腐的人</p><p>来源: LOL主播大司马直播语录:<strong>你只看到了第二层 ，以为我在第一层 ，实际上我在第五层 <del>~</del></strong></p><h3 id="11-幸存者偏差"><a href="#11-幸存者偏差" class="headerlink" title="11.幸存者偏差"></a>11.幸存者偏差</h3><p>幸存者偏差意思是指，当取得资讯的渠道，仅来自于幸存者时（因为死人不会说话），此资讯可能会存在与实际情况不同的偏差。<br>此规律也适用于金融和商业领域。存活下来的企业往往被视为 “传奇”，它们的做法被争相效仿。而其实有些也许只是因为偶然原因幸存下来了而已。<br>生活中的例子：读书无用论</p><h3 id="12-通货膨胀"><a href="#12-通货膨胀" class="headerlink" title="12.通货膨胀"></a>12.通货膨胀</h3><ol><li><strong>20年来，China平均年化通货膨胀率5%</strong>，银行定期利率才2%，存银行只会越来越少。</li><li>若你的基金或股票年化收益率到达15%，那么你就是巴菲特，每十年资本翻一番</li><li>财经类经典读物《小狗钱钱》推荐</li></ol>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Javascript篇章七：js函数与构造函数</title>
      <link href="/2020/01/22/Javascript%E7%AF%87%E7%AB%A0%E4%B8%83/"/>
      <url>/2020/01/22/Javascript%E7%AF%87%E7%AB%A0%E4%B8%83/</url>
      
        <content type="html"><![CDATA[<p>函数: 就是可被重复调用执行的代码块。一般来说，一个函数是可以通过外部代码调用的一个“子程序”（或在递归的情况下由内部函数调用）。像程序本身一样，一个函数由称为函数体的一系列语句组成。值可以传递给一个函数，函数将返回一个值。</p><blockquote><p>1.函数的创建方式<br>2.关于变量作用域的说明<br>3.js的构造函数<br>4.python，js与java关于类和对象的理解</p></blockquote><a id="more"></a><h3 id="1-函数的创建方式"><a href="#1-函数的创建方式" class="headerlink" title="1.函数的创建方式"></a>1.函数的创建方式</h3><p><strong>方式一：函数声明/函数语句（推荐）</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function 函数名(参数1, 参数2, ... , 参数3) &#123;  </span><br><span class="line">    // 需要执行的代码块  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方式二：函数表达式 (function expression)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var myFunction = function name([param1, param2, ... paramN)&#123;statements&#125;</span><br></pre></td></tr></table></figure><p>ps:在使用函数表达式时，注意以下几点</p><ul><li>name:函数名，可以省略。当省略函数名的时候，该函数就成为了匿名函数。</li><li>param:传递给函数的参数的名称，一个函数最多可以有255个参数.</li><li>statements:组成函数体的声明语句。</li></ul><h3 id="2-关于变量作用域的说明"><a href="#2-关于变量作用域的说明" class="headerlink" title="2.关于变量作用域的说明"></a>2.关于变量作用域的说明</h3><p>在JavaScript中，用var申明的变量实际上是有作用域的（局部变量：在函数中通过var声明的变量；全局变量：在函数外通过var声明的变量）<br>变量按照作用域划分有局部变量和全局变量。<br>对以下几点做出说明：</p><ul><li>1.如果一个变量在函数体内部申明，则该变量的作用域为整个函数体，在函数体外不可引用该变量</li><li>2.如果两个不同的函数各自申明了同一个变量，那么该变量只在各自的函数体内起作用。换句话说，不同函数内部的同名变量互相独立，互不影响</li><li>3.由于JavaScript的函数可以嵌套，此时，内部函数可以访问外部函数定义的变量，反过来则不行:举例<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> y = x + <span class="number">1</span>; <span class="comment">// bar可以访问foo的变量x!</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> z = y + <span class="number">1</span>; <span class="comment">// ReferenceError! foo不可以访问bar的变量y!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-js的构造函数"><a href="#3-js的构造函数" class="headerlink" title="3.js的构造函数"></a>3.js的构造函数</h3><p>1,函数名首字母大写(不强制,味蕾和普通函数的区别)<br>2,通过this来给对象添加属性和方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name,age,grender</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 添加属性</span></span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.grender = grender;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加方法</span></span><br><span class="line">    <span class="keyword">this</span>.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name+<span class="string">":"</span>+age+<span class="string">":"</span>+grender</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用构造函数来创建对象</span></span><br><span class="line"><span class="keyword">var</span> student1 = <span class="keyword">new</span> Student(<span class="string">"chd"</span>,<span class="number">18</span>,<span class="string">"man"</span>);</span><br><span class="line"><span class="keyword">var</span> student2 = <span class="keyword">new</span> Student(<span class="string">"lmm"</span>,<span class="number">19</span>,<span class="string">"woman"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用对象的属性和方法</span></span><br><span class="line"><span class="built_in">console</span>.log(student1.name); <span class="comment">// 调用属性："chd"</span></span><br><span class="line"><span class="built_in">console</span>.log(student1.sayHi()); <span class="comment">// 调用方法："chd:18:man"</span></span><br></pre></td></tr></table></figure><p><strong>instanceof判断是否是实例对象，返回true或者false</strong></p><h3 id="python，js与java关于类和对象的理解"><a href="#python，js与java关于类和对象的理解" class="headerlink" title="python，js与java关于类和对象的理解"></a>python，js与java关于类和对象的理解</h3><blockquote><p>Python的类和对象</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class 类名(object/父类):</span><br><span class="line">    def __init__(self,参数1,参数2):</span><br><span class="line">        self.对象的属性1 = 参数1</span><br><span class="line">        self.对象的属性2 = 参数2</span><br><span class="line"></span><br><span class="line">    def 方法名(self):pass</span><br><span class="line"></span><br><span class="line">    def 方法名2(self):pass</span><br><span class="line"></span><br><span class="line">对象名 = 类名(实参1,实参2)  #对象就是实例，代表一个具体的东西</span><br><span class="line">                  #类名() : 类名+括号就是实例化一个类，相当于调用了__init__方法</span><br><span class="line">                  #括号里传参数，参数不需要传self，其他与init中的形参一一对应</span><br><span class="line">                  #结果返回一个对象</span><br><span class="line">对象名.对象的属性1   #查看对象的属性，直接用 对象名.属性名 即可</span><br><span class="line">对象名.方法名()     #调用类中的方法，直接用 对象名.方法名() 即可</span><br></pre></td></tr></table></figure><blockquote><p>js的class类与对象</p></blockquote><p>constructor 是一种用于创建和初始化class创建的对象的特殊方法(与js的构造函数用法相差无几)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Polygon</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(age) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">"Polygon"</span>;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.demo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name+<span class="string">":"</span>+<span class="keyword">this</span>.age</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> poly1 = <span class="keyword">new</span> Polygon(<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"> <span class="built_in">console</span>.log(poly1);        <span class="comment">// [object Object]</span></span><br><span class="line"> <span class="built_in">console</span>.log(poly1.demo()); <span class="comment">// "Polygon:18"</span></span><br></pre></td></tr></table></figure><blockquote><p>java的类与对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OOP</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 在通过new操作符调用的时候，构造方法的参数数量、位置和类型一一对应</span></span><br><span class="line">        Person p = <span class="keyword">new</span> Person(<span class="string">"chd"</span>,<span class="number">18</span>,<span class="number">10086</span>); </span><br><span class="line">        System.out.println(p.getAge());</span><br><span class="line">        <span class="comment">// 调用实例对象的属性</span></span><br><span class="line">        System.out.println(p.tel);</span><br><span class="line">        System.out.println(p.getAge());</span><br><span class="line">        System.out.println(p.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这个不能省略，用以声明变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> tel;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这就是Java的构造方法，类似于python的def __init__函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age,<span class="keyword">int</span> tel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.tel = tel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更新中。。。</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python的requirement.txt文件</title>
      <link href="/2020/01/22/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89/"/>
      <url>/2020/01/22/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;正如 PHP 中使用 Composer 维护依赖一样，Python 也需要维护项目相关的依赖包。通常我们会在项目的根目录下放置一个 requirement.txt 文件，用于记录所有依赖包和它的确切版本号。</p><a id="more"></a><p><strong>1.Python的依赖</strong><br>requirement.txt 的内容长这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">alembic==1.0.10</span><br><span class="line">appnope==0.1.0</span><br><span class="line">astroid==2.2.5</span><br><span class="line">attrs==19.1.0</span><br><span class="line">backcall==0.1.0</span><br><span class="line">bcrypt==3.1.6</span><br><span class="line">bleach==3.1.0</span><br><span class="line">cffi==1.12.3</span><br><span class="line">Click==7.0</span><br><span class="line">decorator==4.4.0</span><br><span class="line">defusedxml==0.6.0</span><br><span class="line">entrypoints==0.3</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>2.如何使用：</strong><br>那么 requirement.txt 究竟如何使用呢？<br>当我们拿到一个项目时，首先要在项目运行环境安装 requirement.txt 所包含的依赖：</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirement.txt</span><br></pre></td></tr></table></figure><p>当我们要把环境中的依赖写入 requirement.txt 中时，可以借助 freeze 命令：</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt;requirements.txt</span><br></pre></td></tr></table></figure><p><strong>3.环境混用怎么办？</strong><br>在导出依赖到 requirement.txt 文件时会有一种尴尬的情况。<br>你的本地环境不仅包含项目 A 所需要的依赖，也包含着项目 B 所需要的依赖。此时我们要如何做到只把项目 A 的依赖导出呢？</p><p>pipreqs 可以通过扫描项目目录，帮助我们仅生成当前项目的依赖清单。</p><p>通过以下命令安装：</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pipreqs</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipreqs ./</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> requirement.txt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html关于图片自适应大小的说明</title>
      <link href="/2020/01/20/html%E5%85%B3%E4%BA%8E%E5%9B%BE%E7%89%87%E8%87%AA%E9%80%82%E5%BA%94%E5%A4%A7%E5%B0%8F%E7%9A%84%E8%AF%B4%E6%98%8E/"/>
      <url>/2020/01/20/html%E5%85%B3%E4%BA%8E%E5%9B%BE%E7%89%87%E8%87%AA%E9%80%82%E5%BA%94%E5%A4%A7%E5%B0%8F%E7%9A%84%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在div盒子中想要展示一张图片，我们可以使用style样式来设置width或者height中的某一项，即<code>style=&quot;width:100px&quot;</code>，这时另一项就会自适应变化,按比例变化。<strong>学习犹如逆水行舟，不进则退</strong>。</p><a id="more"></a><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在设置网页的整个背景图片时，我们可以在css中的使用<code>background-size：100%</code>来铺满整个页面，也可以设置为其它的百分比数值来局部铺HTML页面。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"../public/images/5927f2c7269aa.jpg"</span>);</span><br><span class="line">    <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在div盒子中想要展示一张图片，我们可以使用style样式来设置width或者height中的某一项，即<code>style=&quot;width:100px&quot;</code>，这时另一项就会自适应变化,按比例变化。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我来举一个例子说明，也可以总结出一个公式，以后若固定了width或height中的某一项，另一项也就会求出来：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../public/images/5d5e5c7d1e1b8.jpg"</span>  <span class="attr">style</span>=<span class="string">"width: 100px"</span> /&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入的图片的原分辨率为1920*1080--&gt;</span></span><br></pre></td></tr></table></figure><p><strong>style=&quot;width: 100px&quot;</strong>：将引入的图片的宽度固定为100px；此时height就会自适应变化。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL0Zpb3JhTG92ZS9JbWFnZXMvJUU1JUJFJUFFJUU0JUJGJUExJUU2JTg4JUFBJUU1JTlCJUJFXzIwMjAwMTIwMTEzMjIzLnBuZw?x-oss-process=image/format,png" alt=""><br>由上图可知，图片已经自适应变化了，<code>height:56.25px</code>，这个数字是怎么得出来的？<br>width:1920---&gt;100<br>heidth:1080 ---&gt;56.25  &nbsp;&nbsp;&nbsp;因为：1080/(1920/100)=56.25px</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql查询大全补充</title>
      <link href="/2020/01/17/sql%E7%B3%BB%E5%88%97%E6%9B%B4%E6%96%B0%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2020/01/17/sql%E7%B3%BB%E5%88%97%E6%9B%B4%E6%96%B0%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>数据库是每一个IT工程师必备的技能树，而select往往是使用频率最大的，总结并补充之前有关于select查询的补充</p><blockquote><p><font color=#FF3030>本文要点：</font><br>1.sql的执行顺序<br>2.select+case…when…then…end 语句<br>3.select top语句<br>4.where条件查询<br>5.sql函数大全</p></blockquote><a id="more"></a><h3 id="1-sql的执行顺序"><a href="#1-sql的执行顺序" class="headerlink" title="1.sql的执行顺序"></a>1.sql的执行顺序</h3><p>下面展示一张sql的执行图：<br><fancybox><img src="https://img-blog.csdn.net/20150621112546457?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbDI5NDI2NTQyMQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></fancybox><br>这里我们可以理解为：先执行from语句，获取表----&gt;然后在使用where过滤掉不相关的记录----&gt;再执行聚合函数或者group by分组----&gt;紧接着执行having进行二次过滤----&gt;最后执行sql的select语句</p><h3 id="2-Select-case…when…then…end-语句"><a href="#2-Select-case…when…then…end-语句" class="headerlink" title="2.Select+case…when…then…end 语句"></a>2.Select+case…when…then…end 语句</h3><p><strong>case…when…then语句，相当于编程语言中if判断(important)</strong></p><ul><li>例1:根据IsUser字段查询学生是否在线<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.StudentID,</span><br><span class="line">(<span class="keyword">case</span> a.IsUse </span><br><span class="line"><span class="keyword">when</span> <span class="string">'0'</span> <span class="keyword">then</span> <span class="string">'未在线'</span> </span><br><span class="line"><span class="keyword">when</span> <span class="string">'1'</span> <span class="keyword">then</span> <span class="string">'在线'</span> <span class="keyword">else</span> <span class="string">'未上传'</span> <span class="keyword">end</span>) <span class="keyword">as</span> 在线情况</span><br><span class="line"><span class="keyword">from</span> StudentBindPaperTypeEntity <span class="keyword">as</span> a</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-select-top语句"><a href="#3-select-top语句" class="headerlink" title="3.select top语句"></a>3.select top语句</h3><p>TOP 子句用于规定要返回的记录的数目。<br>对于拥有数千条记录的大型表来说，TOP 子句是非常有用的。<br>注释：<strong>并非所有的数据库系统都支持 TOP 子句(top仅适用于sql server)。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 例1.取出表中第几行数据（如第一行）</span></span><br><span class="line"><span class="keyword">select</span> top <span class="number">1</span> * <span class="keyword">from</span> TABLE_NAME </span><br><span class="line"></span><br><span class="line"><span class="comment">--例2.取出表中百分之多少数据</span></span><br><span class="line"><span class="keyword">select</span> top <span class="number">50</span> <span class="keyword">percent</span> * <span class="keyword">from</span> TABLE_NAME</span><br></pre></td></tr></table></figure><blockquote><p>oracle语法:rownum</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">ROWNUM</span> &lt;= <span class="built_in">number</span></span><br></pre></td></tr></table></figure><blockquote><p>mysql语法：limit</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">LIMIT</span> <span class="built_in">number</span></span><br></pre></td></tr></table></figure><h3 id="4-where条件查询"><a href="#4-where条件查询" class="headerlink" title="4.where条件查询"></a>4.where条件查询</h3><p><fancybox><img src="https://img-blog.csdnimg.cn/20200114093851576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NoYW5nXzAxMjI=,size_16,color_FFFFFF,t_70" alt=""></fancybox></p><h3 id="5-sql函数大全"><a href="#5-sql函数大全" class="headerlink" title="5.sql函数大全"></a>5.sql函数大全</h3><p><a href="https://www.cnblogs.com/tongbiao/p/6823427.html" target="_blank" rel="noopener">【常用经典SQL语句大全完整版–详解+实例】</a><br><a href="https://blog.csdn.net/sundna/article/details/89926586" target="_blank" rel="noopener">【SQL函数大全及示例汇总】</a></p><p>补充：left(filed,numbers):字段从左边开始截取指定位数<br>geohash通过算法将1个定位的经度和纬度2个数值，转换成1个hash字符串。如果2个地方距离越近，那么他们的hash值的前缀越相同。然后通过数据库中like操作符 “ like wtw366%” 快速查找到附近的车。比如上海腾讯大厦的经纬度是： （31.1688749, 121.3975184），那么转换成geohash就是 wtw366ngz5qt，我们想找附近的车子，可以用：<br>left(filed,numbers):字段从左边开始截取指定位数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> cart <span class="keyword">where</span> geohash <span class="keyword">like</span> <span class="string">'wtw366%'</span> ;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> cart <span class="keyword">where</span> <span class="keyword">LEFT</span>(geohash, <span class="number">6</span>) = <span class="string">'wtw366'</span>;</span><br></pre></td></tr></table></figure><h3 id="6-多字段的group-by"><a href="#6-多字段的group-by" class="headerlink" title="6.多字段的group by"></a>6.多字段的group by</h3><p><code>group by</code>表示为分组，一定要和聚合函数一起并用。但是在这里，我们不深思分组函数的基本用法，而是考虑sql对多个字段进行group by分组：</p><p><strong>GROUP BY X意思是将所有具有相同X字段值的记录放到一个分组里，<br>GROUP BY X, Y意思是将所有具有相同X字段值进行分组后，再把Y字段值进行分组处理。</strong></p><h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><ul><li><a href="https://www.cnblogs.com/87060524test/p/10402784.html" target="_blank" rel="noopener">SQL GROUP BY对多个字段进行分组</a></li><li><a href="https://stackoverflow.com/questions/2421388/using-group-by-on-multiple-columns" target="_blank" rel="noopener">Using group by on multiple columns</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析章节（三）：pandas</title>
      <link href="/2020/01/16/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%AB%A0%E8%8A%82%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2020/01/16/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%AB%A0%E8%8A%82%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Pandas是Python的一个大数据处理模块。Pandas使用一个二维的数据结构DataFrame来表示表格式的数据，相比较于Numpy，Pandas可以存储混合的数据结构，同时使用NaN来表示缺失的数据，而不用像Numpy一样要手工处理缺失的数据，并且Pandas使用轴标签来表示行和列。</p><a id="more"></a><p>pandas与numpy在数据处理前期阶段起着重要作用，两者相辅相成，异曲同工</p><h3 id="1-Series一维数据"><a href="#1-Series一维数据" class="headerlink" title="1.Series一维数据"></a>1.Series一维数据</h3><p><strong>Series是一种类似于一维数组的对象，由一组数据和一组与之相关的数据标签（索引）组成</strong><br>Series的字符串表现形式为：索引在左边，值在右边。如果没有为数据指定索引，于是会自动创建一个0到N-1(N为数据的长度)的整数型索引。可以通过Series的values和index属性获取其数组表现形式和索引对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">a = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="string">""" a:左边为索引，右边为值</span></span><br><span class="line"><span class="string">0    1</span></span><br><span class="line"><span class="string">1    2</span></span><br><span class="line"><span class="string">2    3</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h4 id="1-1-传递带有日期时间索引和标签"><a href="#1-1-传递带有日期时间索引和标签" class="headerlink" title="1.1 传递带有日期时间索引和标签"></a>1.1 传递带有日期时间索引和标签</h4><p>dates = pd.date_range(&#39;20190110&#39;,periods=6):period表示时间期间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; dates</span><br><span class="line">DatetimeIndex([&apos;2020-01-10&apos;, &apos;2020-01-11&apos;, &apos;2020-01-12&apos;, &apos;2020-01-13&apos;,</span><br><span class="line">               &apos;2020-01-14&apos;, &apos;2020-01-15&apos;],</span><br><span class="line">              dtype=&apos;datetime64[ns]&apos;, freq=&apos;D&apos;)</span><br></pre></td></tr></table></figure><h4 id="1-2-pandas的index指定索引目录"><a href="#1-2-pandas的index指定索引目录" class="headerlink" title="1.2 pandas的index指定索引目录"></a>1.2 pandas的index指定索引目录</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a1 = pd.Series([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>])</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>a1</span></span><br><span class="line"><span class="string">a    2</span></span><br><span class="line"><span class="string">b    3</span></span><br><span class="line"><span class="string">c    4</span></span><br><span class="line"><span class="string">d    5</span></span><br><span class="line"><span class="string">dtype: int64</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h3 id="2-Series支持numpy的array特性"><a href="#2-Series支持numpy的array特性" class="headerlink" title="2.Series支持numpy的array特性"></a>2.Series支持numpy的array特性</h3><ul><li><p><strong>从ndarray创建Series</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># np.array创建一维数组</span></span><br><span class="line">a2 = pd.Series(np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]))</span><br><span class="line"><span class="comment"># np.arrange(start,end,jiange)创建一维数组</span></span><br><span class="line">a3 = pd.Series(np.arange(<span class="number">1</span>,<span class="number">9</span>,<span class="number">2</span>))</span><br><span class="line"><span class="string">"""a2:</span></span><br><span class="line"><span class="string">0    1</span></span><br><span class="line"><span class="string">1    2</span></span><br><span class="line"><span class="string">2    3</span></span><br><span class="line"><span class="string">3    4</span></span><br><span class="line"><span class="string">dtype: int32</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure></li><li><p><strong>与标量的运算</strong><br>两个series运算,即索引值相对应的值相加减:<br>a2 + a3</p></li><li><p><strong>Series的索引:下角标从零开始(类似于数组的索引切片)</strong><br>b[0] :单个字符的索引<br>b[[1,2,3]] :数组组合的索引所对应的具体值</p></li><li><p><strong>切片操作(满足左闭右开，起始索引为0的原则)</strong><br>b[1:4]</p></li><li><p><strong>通用函数（最大值，绝对值等）</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">data = <span class="number">10</span></span><br><span class="line">c1 = pd.Series(np.linspace(<span class="number">-1</span>,<span class="number">1</span>,data))</span><br><span class="line">print(c1)</span><br><span class="line">print(c1.min())</span><br><span class="line">print(c1.max())</span><br></pre></td></tr></table></figure><h3 id="3-从字典创建series"><a href="#3-从字典创建series" class="headerlink" title="3.从字典创建series"></a>3.从字典创建series</h3></li></ul><h4 id="3-1-从字典创建series"><a href="#3-1-从字典创建series" class="headerlink" title="3.1 从字典创建series"></a>3.1 从字典创建series</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sr = pd.Series(&#123;<span class="string">'name'</span>: <span class="string">'chd'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'gender'</span>: <span class="string">'man'</span>, <span class="string">'capacity'</span>: <span class="number">10</span>,<span class="string">'is_love_girl'</span>:<span class="literal">True</span>&#125;)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>sr</span></span><br><span class="line"><span class="string">name             chd</span></span><br><span class="line"><span class="string">age               18</span></span><br><span class="line"><span class="string">gender           man</span></span><br><span class="line"><span class="string">capacity          10</span></span><br><span class="line"><span class="string">is_love_girl    True</span></span><br><span class="line"><span class="string">dtype: object</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h4 id="3-2-in运算："><a href="#3-2-in运算：" class="headerlink" title="3.2.in运算："></a>3.2.in运算：</h4><p>&#39;a&#39; in sr:<strong>只能判断键名是否在’pandas.core.series.Series’类中，不能判断values值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'name'</span> <span class="keyword">in</span> sr)  <span class="comment"># true</span></span><br><span class="line">print(<span class="string">'age'</span> <span class="keyword">in</span> sr)   <span class="comment"># true</span></span><br><span class="line">print(<span class="string">'love is unlimited'</span> <span class="keyword">in</span> sr)   <span class="comment"># false</span></span><br></pre></td></tr></table></figure><h4 id="3-3-遍历运算-只遍历打印值，不会打印键名"><a href="#3-3-遍历运算-只遍历打印值，不会打印键名" class="headerlink" title="3.3.遍历运算:只遍历打印值，不会打印键名"></a>3.3.遍历运算:只遍历打印值，不会打印键名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; x = [i for i in sr]</span><br><span class="line">&gt;&gt;&gt; x</span><br><span class="line">[&apos;chd&apos;, 18, &apos;man&apos;, 10, True]</span><br></pre></td></tr></table></figure><h4 id="3-4-获取索引以及对应值"><a href="#3-4-获取索引以及对应值" class="headerlink" title="3.4.获取索引以及对应值"></a>3.4.获取索引以及对应值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(sr.index) <span class="comment"># 获取索引</span></span><br><span class="line">print(sr.values) <span class="comment"># 获取对应的值</span></span><br></pre></td></tr></table></figure><h4 id="3-5-整数索引问题："><a href="#3-5-整数索引问题：" class="headerlink" title="3.5 整数索引问题："></a>3.5 整数索引问题：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str = pd.Series(np.arange(<span class="number">4.</span>))</span><br><span class="line">print(str)</span><br></pre></td></tr></table></figure><h4 id="3-6-浅拷贝，a，b都指向内存地址，若其中一个修改值，则另一个也必会修改值"><a href="#3-6-浅拷贝，a，b都指向内存地址，若其中一个修改值，则另一个也必会修改值" class="headerlink" title="3.6 浅拷贝，a，b都指向内存地址，若其中一个修改值，则另一个也必会修改值"></a>3.6 浅拷贝，a，b都指向内存地址，若其中一个修改值，则另一个也必会修改值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str2 = str[<span class="number">1</span>:].copy()</span><br><span class="line">print(str2)</span><br></pre></td></tr></table></figure><p>series数据对齐，pandas在进行两个Series对象运算时，会按索引自动对齐然后运算<br>若两series对象的index长度不一样，则会当做数据缺失值NaN处理</p><h3 id="4-Series对象运算"><a href="#4-Series对象运算" class="headerlink" title="4.Series对象运算"></a>4.Series对象运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sr1 = pd.Series([<span class="number">12</span>, <span class="number">23</span>, <span class="number">34</span>, <span class="number">34</span>], index=[<span class="string">'c'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>])</span><br><span class="line">sr2 = pd.Series([<span class="number">11</span>, <span class="number">20</span>, <span class="number">10</span>], index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>])</span><br><span class="line">print(sr1 + sr2)</span><br></pre></td></tr></table></figure><h4 id="4-1-Series灵活算术方法"><a href="#4-1-Series灵活算术方法" class="headerlink" title="4.1 Series灵活算术方法"></a>4.1 Series灵活算术方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(sr1.add(sr2,fill_value = <span class="number">0</span>))</span><br><span class="line">print(sr1.sub(sr2,fill_value = <span class="number">0</span>))</span><br><span class="line">print(sr1.div(sr2,fill_value = <span class="number">0</span>))</span><br></pre></td></tr></table></figure><h4 id="4-2-缺失值处理方式："><a href="#4-2-缺失值处理方式：" class="headerlink" title="4.2 缺失值处理方式："></a>4.2 缺失值处理方式：</h4><blockquote><p>缺失值处理方式一：过滤缺失数据str.dropna()：直接删除缺值的键值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = pd.Series(np.array([<span class="number">1</span>, <span class="number">3</span>, <span class="number">4.</span>, <span class="literal">None</span>, <span class="number">8</span>, <span class="literal">None</span>, <span class="number">99</span>]))</span><br><span class="line">print(d.dropna())</span><br><span class="line">print(d.isnull())  <span class="comment"># 判断每一键值对是否缺失数据</span></span><br></pre></td></tr></table></figure><blockquote><p>缺失值处理方式二：填充缺失数据：str.fillna(填充值)</p></blockquote><p>print(d.fillna(1))</p><blockquote><p>缺失值处理方式三：不处理</p></blockquote><blockquote><p>提出NaN后求得平均值</p></blockquote><p>print(d.mean())</p><h3 id="5-DataFrame二维数组对象"><a href="#5-DataFrame二维数组对象" class="headerlink" title="5.DataFrame二维数组对象"></a>5.DataFrame二维数组对象</h3><p>DataFrame是一个表格式的数据结构，含有一组有序的列（即：好几列）。DataFrame可以被看做是由Series组成的字典，并且共用一个索引。</p><h4 id="5-1-创建方式1：通过一个字典来创建"><a href="#5-1-创建方式1：通过一个字典来创建" class="headerlink" title="5.1 创建方式1：通过一个字典来创建"></a>5.1 创建方式1：通过一个字典来创建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = pd.DataFrame(&#123;<span class="string">'name'</span>: [<span class="string">'chd'</span>, <span class="string">'zyq'</span>, <span class="string">'fqt'</span>], <span class="string">'age'</span>: [<span class="number">18</span>, <span class="number">12</span>, <span class="number">15</span>]&#125;)</span><br><span class="line">print(a)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;a  结果为</span></span><br><span class="line"><span class="string">  name  age</span></span><br><span class="line"><span class="string">0  chd   18</span></span><br><span class="line"><span class="string">1  zyq   12</span></span><br><span class="line"><span class="string">2  fqt   15</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h4 id="5-2-index指定行索引"><a href="#5-2-index指定行索引" class="headerlink" title="5.2 index指定行索引"></a>5.2 index指定行索引</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;pd.DataFrame(&#123;&apos;name&apos;: [&apos;chd&apos;, &apos;zyq&apos;, &apos;fqt&apos;], &apos;age&apos;: [18, 12, 15]&#125;,index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;])</span><br><span class="line">  name  age</span><br><span class="line">a  chd   18</span><br><span class="line">b  zyq   12</span><br><span class="line">c  fqt   15</span><br></pre></td></tr></table></figure><h4 id="5-3-创建方式二：用Series来组成字典"><a href="#5-3-创建方式二：用Series来组成字典" class="headerlink" title="5.3 创建方式二：用Series来组成字典"></a>5.3 创建方式二：用Series来组成字典</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;pd.DataFrame(&#123;&apos;one&apos;:pd.Series([1,2,3],index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;]),&apos;two&apos;:pd.Series([5,6,7,8],index=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;])&#125;)</span><br><span class="line">   one  two</span><br><span class="line">a  1.0    5</span><br><span class="line">b  2.0    6</span><br><span class="line">c  3.0    7</span><br><span class="line">d  NaN    8</span><br></pre></td></tr></table></figure><h4 id="5-4-其它"><a href="#5-4-其它" class="headerlink" title="5.4 其它"></a>5.4 其它</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#　CSV文件的读写</span></span><br><span class="line"><span class="comment"># CSV文件的写入</span></span><br><span class="line">print(a2.to_csv(<span class="string">'demo.csv'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># CSV文件的读取</span></span><br><span class="line">print(pd.read_csv(<span class="string">'demo.csv'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># json数据的读取和存储</span></span><br><span class="line">df = pd.read_json(<span class="string">'demo2.json'</span>)</span><br><span class="line"><span class="comment"># 读取时可能乱序，需要对索引进行重新排序</span></span><br><span class="line">df = df.sort_index()</span><br><span class="line">print(df)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 存储为json数据</span></span><br><span class="line">df.to_json(<span class="string">'out.json'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Excel数据的读取</span></span><br><span class="line">df_excel = pd.read_excel(<span class="string">'inputs.xlsx'</span>)</span><br><span class="line"><span class="comment"># Excel的存储:需要用到openpyxl库</span></span><br><span class="line"><span class="comment"># sheet_name：设置工作表名，indexA=None不存储行索引</span></span><br><span class="line">df_excel.to_excel(<span class="string">'biao_name.xlsx'</span>,sheet_name=<span class="string">'biao_name'</span>,index = <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># DataFrame常用属性</span></span><br><span class="line"><span class="comment"># var.index获取行索引</span></span><br><span class="line">print(a2.index)</span><br><span class="line"></span><br><span class="line"><span class="comment"># var.columns:获取列索引</span></span><br><span class="line">print(a2.columns)</span><br><span class="line"></span><br><span class="line"><span class="comment"># values 获取取值数组（一般是二维数组）</span></span><br><span class="line">print(a2.values)</span><br><span class="line"></span><br><span class="line"><span class="comment"># T:装置</span></span><br><span class="line">print(a2.T)</span><br><span class="line"></span><br><span class="line"><span class="comment"># descriibe():获取统计数据</span></span><br><span class="line">print(a2.describe())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Data analysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript篇章六：js的数值保留指定有效位数</title>
      <link href="/2020/01/15/Javascript%E7%AF%87%E7%AB%A0%E5%85%AD/"/>
      <url>/2020/01/15/Javascript%E7%AF%87%E7%AB%A0%E5%85%AD/</url>
      
        <content type="html"><![CDATA[<p>在做数据分析处理时，往往会遇到float或double这类的数据，我们往往应要求会保留指定的小数点后位数，也有这种要求：将数值按照金额格式进行格式化，每三位数值用逗号分隔</p><a id="more"></a><h3 id="1-四舍五入相关"><a href="#1-四舍五入相关" class="headerlink" title="1.四舍五入相关"></a>1.四舍五入相关</h3><ul><li><p>toFixed(number):保留指定小数位数，<font color=#f26522>将数值类型转换为字符串类型</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.四舍五入</span></span><br><span class="line"><span class="keyword">var</span> num =<span class="number">2.446242342</span>;  </span><br><span class="line">num = num.toFixed(<span class="number">2</span>); </span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">//2.45</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num); <span class="comment">// string</span></span><br></pre></td></tr></table></figure></li><li><p>Math.floor()，不四舍五入，向下取整,不改变数据类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.不四舍五入 向下取整</span></span><br><span class="line">num = <span class="built_in">Math</span>.floor(num * <span class="number">100</span>) / <span class="number">100</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">//2.44</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num); <span class="comment">// number</span></span><br></pre></td></tr></table></figure></li><li><p>字符串匹配<br>注意，先将数据转换为字符串，最后再转为数值类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3.不四舍五入 字符串匹配再转换</span></span><br><span class="line">num = <span class="built_in">Number</span>(num.toString().match(<span class="regexp">/^\d+(?:\.\d&#123;0,2&#125;)?/</span>));</span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">//2.44</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num); <span class="comment">// number</span></span><br></pre></td></tr></table></figure></li><li><p>四舍五入保留2位小数（若第二位小数为0，则保留一位小数）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4.四舍五入保留2位小数（若第二位小数为0，则保留一位小数）  </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">keepTwoDecimal</span>(<span class="params">num</span>) </span>&#123;  </span><br><span class="line">     <span class="keyword">var</span> result = <span class="built_in">parseFloat</span>(num);  </span><br><span class="line">     <span class="keyword">if</span> (<span class="built_in">isNaN</span>(result)) &#123;  </span><br><span class="line">         alert(<span class="string">'传递参数错误，请检查！'</span>);  </span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">     &#125;  </span><br><span class="line">     result = <span class="built_in">Math</span>.round(num * <span class="number">100</span>) / <span class="number">100</span>;  </span><br><span class="line">     <span class="keyword">return</span> result;  </span><br><span class="line">&#125;</span><br><span class="line"> keepTwoDecimal(num);</span><br><span class="line"> <span class="built_in">console</span>.log(num); <span class="comment">//2.44</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="keyword">typeof</span> num); <span class="comment">//number</span></span><br></pre></td></tr></table></figure></li><li><p>四舍五入保留2位小数（不够位数，则用0替补）<br>注意，数据类型变为字符串类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//5.四舍五入保留2位小数（不够位数，则用0替补）  </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">keepTwoDecimalFull</span>(<span class="params">num</span>) </span>&#123;  </span><br><span class="line">     <span class="keyword">var</span> result = <span class="built_in">parseFloat</span>(num);  </span><br><span class="line">     <span class="keyword">if</span> (<span class="built_in">isNaN</span>(result)) &#123;  </span><br><span class="line">         alert(<span class="string">'传递参数错误，请检查！'</span>);  </span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">     &#125;  </span><br><span class="line">     result = <span class="built_in">Math</span>.round(num * <span class="number">100</span>) / <span class="number">100</span>;  </span><br><span class="line">     <span class="keyword">var</span> s_x = result.toString(); <span class="comment">//将数字转换为字符串</span></span><br><span class="line">     </span><br><span class="line">     <span class="keyword">var</span> pos_decimal = s_x.indexOf(<span class="string">'.'</span>); <span class="comment">//小数点的索引值</span></span><br><span class="line">     </span><br><span class="line"></span><br><span class="line">     <span class="comment">// 当整数时，pos_decimal=-1 自动补0  </span></span><br><span class="line">     <span class="keyword">if</span> (pos_decimal &lt; <span class="number">0</span>) &#123;  </span><br><span class="line">         pos_decimal = s_x.length;  </span><br><span class="line">         s_x += <span class="string">'.'</span>;  </span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 当数字的长度&lt; 小数点索引+2时，补0  </span></span><br><span class="line">     <span class="keyword">while</span> (s_x.length &lt;= pos_decimal + <span class="number">2</span>) &#123;  </span><br><span class="line">         s_x += <span class="string">'0'</span>;  </span><br><span class="line">     &#125;  </span><br><span class="line">     <span class="keyword">return</span> s_x;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"> <span class="built_in">console</span>.log(keepTwoDecimalFull(<span class="number">120.5</span>)); <span class="comment">//120.50</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="keyword">typeof</span> keepTwoDecimalFull(<span class="number">120.5</span>)); <span class="comment">//string</span></span><br><span class="line"> <span class="built_in">console</span>.log(keepTwoDecimalFull(<span class="number">2.446242342</span>)); <span class="comment">//2.45</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="keyword">typeof</span> keepTwoDecimalFull(<span class="number">2.446242342</span>)); <span class="comment">//string</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-浮点数保留两位小数"><a href="#2-浮点数保留两位小数" class="headerlink" title="2.浮点数保留两位小数"></a>2.浮点数保留两位小数</h3><ul><li><p>将浮点数四舍五入，取小数点后2位(数据类型不变) </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//浮点数保留两位小数   </span></span><br><span class="line">  <span class="comment">//1.功能：将浮点数四舍五入，取小数点后2位   </span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">toDecimal</span>(<span class="params">x</span>) </span>&#123;   </span><br><span class="line">   <span class="keyword">var</span> f = <span class="built_in">parseFloat</span>(x);   </span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">isNaN</span>(f)) &#123;   </span><br><span class="line">    <span class="keyword">return</span>;   </span><br><span class="line">   &#125;   </span><br><span class="line">   f = <span class="built_in">Math</span>.round(x*<span class="number">100</span>)/<span class="number">100</span>;   </span><br><span class="line">   <span class="keyword">return</span> f;   </span><br><span class="line">  &#125;   </span><br><span class="line">  <span class="built_in">console</span>.log(toDecimal(<span class="number">3.1465926</span>)); <span class="comment">// 3.15</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">typeof</span> toDecimal(<span class="number">3.1415926</span>)); <span class="comment">//number</span></span><br></pre></td></tr></table></figure></li><li><p>强制保留2位小数，如：2，会在2后面补上00.即2.00<br>注意，数据类型变为字符串类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.强制保留2位小数，如：2，会在2后面补上00.即2.00   </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toDecimal2</span>(<span class="params">x</span>) </span>&#123;   </span><br><span class="line">    <span class="keyword">var</span> f = <span class="built_in">parseFloat</span>(x);   </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isNaN</span>(f)) &#123;   </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;   </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">var</span> f = <span class="built_in">Math</span>.round(x*<span class="number">100</span>)/<span class="number">100</span>;   </span><br><span class="line">    <span class="keyword">var</span> s = f.toString();   </span><br><span class="line">    <span class="keyword">var</span> rs = s.indexOf(<span class="string">'.'</span>);   </span><br><span class="line">    <span class="keyword">if</span> (rs &lt; <span class="number">0</span>) &#123;   </span><br><span class="line">    rs = s.length;   </span><br><span class="line">    s += <span class="string">'.'</span>;   </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">while</span> (s.length &lt;= rs + <span class="number">2</span>) &#123;   </span><br><span class="line">    s += <span class="string">'0'</span>;   </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">return</span> s;   </span><br><span class="line">&#125;   </span><br><span class="line"><span class="built_in">console</span>.log(toDecimal2(<span class="number">3.1</span>)); <span class="comment">// 3.10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> toDecimal2(<span class="number">3.1415926</span>)); <span class="comment">//string</span></span><br></pre></td></tr></table></figure></li><li><p>保留两位小数 浮点数四舍五入 位数不够 不补0<br>注意，数据类型不变</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3.保留两位小数 浮点数四舍五入 位数不够 不补0</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fomatFloat</span>(<span class="params">src,pos</span>)</span>&#123;    </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.round(src*<span class="built_in">Math</span>.pow(<span class="number">10</span>, pos))/<span class="built_in">Math</span>.pow(<span class="number">10</span>, pos);    </span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">console</span>.log(fomatFloat(<span class="number">3.12645</span>,<span class="number">2</span>)); <span class="comment">// 3.13</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> fomatFloat(<span class="number">3.1415926</span>)); <span class="comment">//number</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="3-JS数字，金额-，用逗号隔开（数字格式化）"><a href="#3-JS数字，金额-，用逗号隔开（数字格式化）" class="headerlink" title="3.JS数字，金额 ，用逗号隔开（数字格式化）"></a>3.JS数字，金额 ，用逗号隔开（数字格式化）</h3><p>JS将数字，金额，用逗号隔开（数字格式化），并按照需求保留规定小数位数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">format_number</span>(<span class="params">s, n</span>) </span>&#123;</span><br><span class="line">n = n &gt; <span class="number">0</span> &amp;&amp; n &lt;= <span class="number">20</span> ? n : <span class="number">2</span>;</span><br><span class="line">s = <span class="built_in">parseFloat</span>((s + <span class="string">""</span>).replace(<span class="regexp">/[^\d\.-]/g</span>, <span class="string">""</span>)).toFixed(n) + <span class="string">""</span>;</span><br><span class="line"><span class="keyword">let</span> l = s.split(<span class="string">"."</span>)[<span class="number">0</span>].split(<span class="string">""</span>).reverse(), r = s.split(<span class="string">"."</span>)[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> t = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; l.length; i++) &#123;</span><br><span class="line">t += l[i] + ((i + <span class="number">1</span>) % <span class="number">3</span> == <span class="number">0</span> &amp;&amp; (i + <span class="number">1</span>) != l.length ? <span class="string">","</span> : <span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> t.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>) + <span class="string">"."</span> + r;</span><br><span class="line">&#125;</span><br><span class="line">format_number(<span class="number">589455642.2598</span>,<span class="number">3</span>);</span><br><span class="line"><span class="comment">// "589,455,642.260"</span></span><br></pre></td></tr></table></figure><p>format_number(s,n):s代表传入的数值，n代表保留的小数位数</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>union和union all（联合查询）</title>
      <link href="/2020/01/14/sql%E7%B3%BB%E5%88%97%E6%9B%B4%E6%96%B0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2020/01/14/sql%E7%B3%BB%E5%88%97%E6%9B%B4%E6%96%B0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>如果我们需要将两个select语句的结果作为一个整体显示出来，我们就需要用到union或者union all关键字。union(或称为联合)的作用是将多个结果合并在一起显示出来。</p><a id="more"></a><h3 id="1-基础概念"><a href="#1-基础概念" class="headerlink" title="1.基础概念"></a>1.基础概念</h3><p>union和union all的区别是,union会自动压缩多个结果集合中的重复结果，而union all则将所有的结果全部显示出来，不管是不是重复。</p><ul><li>Union：对两个结果集进行并集操作，不包括重复行，同时进行默认规则的排序；</li><li>Union All：对两个结果集进行并集操作，包括重复行，不进行排序；</li><li>Intersect：对两个结果集进行交集操作，不包括重复行，同时进行默认规则的排序；</li><li>Minus：对两个结果集进行差操作，不包括重复行，同时进行默认规则的排序。</li></ul><p><strong>注意的是</strong>：<br><font color=#f47920>UNION 、UNION ALL内部的 SELECT 语句必须拥有相同数量的列。列也必须拥有相似的数据类型。同时，每条 SELECT 语句中的列的顺序必须相同。</font></p><h3 id="2-使用方法"><a href="#2-使用方法" class="headerlink" title="2.使用方法"></a>2.使用方法</h3><p>基本语法：</p><ul><li>union：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> employee_id,job_id <span class="keyword">from</span> employees </span><br><span class="line"><span class="keyword">union</span> </span><br><span class="line"><span class="keyword">select</span> employee_id,job_id <span class="keyword">from</span> job_history</span><br></pre></td></tr></table></figure></li><li>union all：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> employee_id,job_id <span class="keyword">from</span> employees </span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> employee_id,job_id <span class="keyword">from</span> job_history</span><br></pre></td></tr></table></figure><h3 id="3-FAQ"><a href="#3-FAQ" class="headerlink" title="3.FAQ"></a>3.FAQ</h3></li></ul><p>1.union 和 union all都可以将多个结果集合并，而不仅仅是两个，你可以将多个结果集串起来。</p><p>2.使用union和union all必须保证各个select 集合的结果有相同个数的列，并且每个列的类型是一样的。但列名则不一定需要相同，<code>oracle会将第一个结果的列名作为结果集的列名</code>。例如下面是一个例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> empno,ename <span class="keyword">from</span> emp </span><br><span class="line"><span class="keyword">union</span> </span><br><span class="line"><span class="keyword">select</span> deptno,dname <span class="keyword">from</span> dept</span><br></pre></td></tr></table></figure><p>3.没有必要在每一个select结果集中使用order by子句来进行排序，我们可以在最后使用一条order by来对整个结果进行排序。例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> empno,ename <span class="keyword">from</span> emp </span><br><span class="line"><span class="keyword">union</span> </span><br><span class="line"><span class="keyword">select</span> deptno,dname <span class="keyword">from</span> dept </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> ename;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> union </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GNE v0.1 正式发布： 4 行代码开发新闻网站通用爬虫</title>
      <link href="/2020/01/12/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89/"/>
      <url>/2020/01/12/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>GNE（GeneralNewsExtractor）是一个通用新闻网站正文抽取模块，输入一篇新闻网页的 HTML， 输出正文内容、标题、作者、发布时间、正文中的图片地址和正文所在的标签源代码。GNE在提取今日头条、网易新闻、游民星空、 观察者网、凤凰网、腾讯新闻、ReadHub、新浪新闻等数百个中文新闻网站上效果非常出色，几乎能够达到100%的准确率。</p><a id="more"></a><h3 id="1-简单使用方式"><a href="#1-简单使用方式" class="headerlink" title="1.简单使用方式"></a>1.简单使用方式</h3><p><font color="#009ad6">GNE的输入是经过js渲染后的HTML代码，所以GNE往往需要配合selenium或Pyppeteer 使用。</font><br>安装GNE：pip install gne<br>使用简单案例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gne <span class="keyword">import</span> GeneralNewsExtractor</span><br><span class="line">extractor = GeneralNewsExtractor()</span><br><span class="line">html = <span class="string">'网站源代码'</span></span><br><span class="line">result = extractor.extract(html)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>GNE配合selenium实现的一个小demo</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> gne <span class="keyword">import</span> GeneralNewsExtractor</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.toutiao.com/a6766986211736158727/'</span>)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">extractor = GeneralNewsExtractor()</span><br><span class="line">result = extractor.extract(browser.page_source)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p><fancybox><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2020-01-01-17-51-47.png" alt=""></fancybox></p><h3 id="2-功能特性"><a href="#2-功能特性" class="headerlink" title="2.功能特性"></a>2.功能特性</h3><h4 id="2-1-获取正文源代码"><a href="#2-1-获取正文源代码" class="headerlink" title="2.1 获取正文源代码"></a>2.1 获取正文源代码</h4><p>在extract()方法只传入网页源代码，不添加任何额外参数时，GNE 返回如下字段：</p><ul><li>title：新闻标题</li><li>publish_time：新闻发布时间</li><li>author：新闻作者</li><li>content：新闻正文</li><li>images: 正文中的图片（相对路径或者绝对路径）</li></ul><p>可能有些朋友希望获取新闻正文所在标签的源代码，此时可以给extract()方法传入with_body_html参数，设置为 True：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">extractor = GeneralNewsExtractor()</span><br><span class="line">extractor.extract(html, with_body_html=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>返回数据中将会增加一个字段body_html，它的值就是正文对应的 HTML 源代码。</p><p>运行效果如下图所示：<br><fancybox><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2020-01-01-18-16-25.png" alt=""></fancybox></p><h4 id="2-2-总是返回图片的绝对路径"><a href="#2-2-总是返回图片的绝对路径" class="headerlink" title="2.2 总是返回图片的绝对路径"></a>2.2 总是返回图片的绝对路径</h4><p>默认情况下，如果新闻中的图片使用的是相对路径，那么 GNE 返回的images字段对应的值也是图片相对路径的列表。</p><p>如果你想始终让 GNE 返回绝对路径，那么你可以给extract()方法增加host参数，这个参数的值是图片的域名，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">extractor = GeneralNewsExtractor()</span><br><span class="line">extractor.extract(html, host=<span class="string">'https://AhriLove.top'</span>)</span><br></pre></td></tr></table></figure><p>这样，如果新闻中的图片是/images/pic.png，那么 GNE 返回时会自动把它变为<a href="https://AhriLove.top/images/pic.png。">https://AhriLove.top/images/pic.png。</a></p><h4 id="2-3-指定新闻标题所在的-XPath"><a href="#2-3-指定新闻标题所在的-XPath" class="headerlink" title="2.3 指定新闻标题所在的 XPath"></a>2.3 指定新闻标题所在的 XPath</h4><p>GNE 预定义了一组 XPath 和正则表达式用于提取新闻的标题。但某些特殊的新闻网站可能无法提取标题，此时，你可以给extract()方法指定title_xpath参数，用于提取新闻标题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">extractor = GeneralNewsExtractor()</span><br><span class="line">extractor.extract(html, title_xpath=<span class="string">'//title/text()'</span>)</span><br></pre></td></tr></table></figure><h4 id="2-4-提前移除噪声标签"><a href="#2-4-提前移除噪声标签" class="headerlink" title="2.4 提前移除噪声标签"></a>2.4 提前移除噪声标签</h4><p>某些新闻下面可能会存在长篇大论的评论，这些评论看起来比新闻正文“更像”正文，为了防止他们干扰新闻的提取，可以通过给extract()方法传入noise_node_list参数，提前把这些噪声节点移除。noise_node_list的值是一个列表，里面是一个或多个 XPath：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">extractor = GeneralNewsExtractor()</span><br><span class="line">extractor.extract(html, noise_node_list=[<span class="string">'//div[@class="comment-list"]'</span>, <span class="string">'//*[@style="display:none"]'</span>])</span><br></pre></td></tr></table></figure><h3 id="2-5使用配置文件"><a href="#2-5使用配置文件" class="headerlink" title="2.5使用配置文件"></a>2.5使用配置文件</h3><p>API 中的参数 title_xpath、 host、 noise_node_list、 with_body_html除了直接写到 extract() 方法中外，还可以通过一个配置文件来设置。<br>请在项目的根目录创建一个文件 .gne，配置文件可以用 YAML 格式，也可以使用 JSON 格式。</p><ul><li>YAML格式配置文件<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span></span><br><span class="line"><span class="attr">   xpath:</span> <span class="string">//title/text()</span></span><br><span class="line"><span class="attr">host:</span> <span class="attr">https://www.xxx.com</span></span><br><span class="line"><span class="attr">noise_node_list:</span></span><br><span class="line"><span class="bullet">   -</span> <span class="string">//div[@class=\"comment-list\"]</span></span><br><span class="line"><span class="bullet">   -</span> <span class="string">//*[@style=\"display:none\"]</span></span><br><span class="line"><span class="attr">with_body_html:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li>json格式配置文件（习惯性用json）<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"title"</span>: &#123;</span><br><span class="line">       <span class="attr">"xpath"</span>: <span class="string">"//title/text()"</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">"host"</span>: <span class="string">"https://www.xxx.com"</span>,</span><br><span class="line">   <span class="attr">"noise_node_list"</span>: [<span class="string">"//div[@class=\"comment-list\"]"</span>,</span><br><span class="line">                       <span class="string">"//*[@style=\"display:none\"]"</span>],</span><br><span class="line">   <span class="attr">"with_body_html"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-FAQ"><a href="#3-FAQ" class="headerlink" title="3.FAQ"></a>3.FAQ</h3><h4 id="GeneralNewsExtractor-以下简称GNE-是爬虫吗？"><a href="#GeneralNewsExtractor-以下简称GNE-是爬虫吗？" class="headerlink" title="GeneralNewsExtractor(以下简称GNE)是爬虫吗？"></a>GeneralNewsExtractor(以下简称GNE)是爬虫吗？</h4>GNE不是爬虫，它的项目名称General News Extractor表示通用新闻抽取器。它的输入是HTML，输出是一个包含新闻标题，新闻正文，作者，发布时间的字典。你需要自行设法获取目标网页的HTML。</li></ul><p>GNE 现在不会，将来也不会提供请求网页的功能。</p><h4 id="GNE支持翻页吗？"><a href="#GNE支持翻页吗？" class="headerlink" title="GNE支持翻页吗？"></a>GNE支持翻页吗？</h4><p>GNE不支持翻页。因为GNE不会提供网页请求的功能，所以你需要自行获取每一页的HTML，并分别传递给GNE。</p><h4 id="GNE支持哪些版本的Python？"><a href="#GNE支持哪些版本的Python？" class="headerlink" title="GNE支持哪些版本的Python？"></a>GNE支持哪些版本的Python？</h4><p>不小于Python 3.6.0</p><h4 id="我用requests-Scrapy获取的HTML传入GNE，为什么不能提取正文？"><a href="#我用requests-Scrapy获取的HTML传入GNE，为什么不能提取正文？" class="headerlink" title="我用requests/Scrapy获取的HTML传入GNE，为什么不能提取正文？"></a>我用requests/Scrapy获取的HTML传入GNE，为什么不能提取正文？</h4><p><font color=#33a3dc>GNE是基于HTML来提取正文的，所以传入的HTML一定要是经过JavaScript渲染以后的HTML。而requests和Scrapy获取的只是JavaScript渲染之前的源代码，所以无法正确提取。</font></p><p>另外，有一些网页，例如今日头条，它的新闻正文实际上是以JSON格式直接写在网页源代码的，当页面在浏览器上面打开的时候，JavaScript把源代码里面的正文解析为HTML。这种情况下，你在Chrome上面就看不到Ajax请求。</p><p>所以<font color=#33a3dc>建议你使用Puppeteer/Pyppeteer/Selenium之类的工具获取经过渲染的HTML再传入GNE</font>。</p><h4 id="GNE-支持非新闻类网站吗（例如博客、论坛……）"><a href="#GNE-支持非新闻类网站吗（例如博客、论坛……）" class="headerlink" title="GNE 支持非新闻类网站吗（例如博客、论坛……）"></a>GNE 支持非新闻类网站吗（例如博客、论坛……）</h4><p>不支持。</p><h3 id="4-关于-GNE"><a href="#4-关于-GNE" class="headerlink" title="4.关于 GNE"></a>4.关于 GNE</h3><p>GNE 官方文档：<a href="https://generalnewsextractor.readthedocs.io/" target="_blank" rel="noopener">https://generalnewsextractor.readthedocs.io/</a></p><p>GNE 的项目源代码在：<a href="https://github.com/kingname/GeneralNewsExtractor。" target="_blank" rel="noopener">https://github.com/kingname/GeneralNewsExtractor。</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> re </tag>
            
            <tag> GNE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python全栈系列章节更新（十一）：某openLaw网站</title>
      <link href="/2020/01/11/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89/"/>
      <url>/2020/01/11/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p>目标网站：<a href="http://openlaw.cn/" target="_blank" rel="noopener">某openLaw裁判文书</a><br>反爬机制：<font color=#d71345>js逆向爬虫，密码加密</font><br>相关技术：js逆向爬虫<br>技术难度：<font color=#d71345>★★★☆☆☆</font><br>爬取目标：模拟登录官网，抓取相关裁判文书<br>源代码：<a href="https://github.com/FioraLove/Python/tree/master/js%E9%80%86%E5%90%91%E7%88%AC%E8%99%AB/openLaw%E7%BD%91%E7%AB%99" target="_blank" rel="noopener">https://github.com/FioraLove/Python/tree/master/js%E9%80%86%E5%90%91%E7%88%AC%E8%99%AB/openLaw%E7%BD%91%E7%AB%99</a><br>说明：先get请求，正则获取csrf，在post携带账号密码来模拟登录</p></blockquote><a id="more"></a><h3 id="1-解析思路："><a href="#1-解析思路：" class="headerlink" title="1.解析思路："></a>1.解析思路：</h3><p><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200111113736.png" alt=""></fancybox></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;按照常规步骤进行抓包：输入错误的账号密码，找到post/get请求地址---&gt;看请求表单数据是否加密---&gt;全局搜索加密关键字---&gt;找到与之相关联的js加密函数，扣出js代码<br><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200111113935.png" alt=""></fancybox><br>这里我们可以看到，有四个参数，其中_csrf是未知的，password是经过加密的，其余两个字段是很简单的。</p><h3 id="2-csrf关键字"><a href="#2-csrf关键字" class="headerlink" title="2. _csrf关键字"></a>2. _csrf关键字</h3><p>我们先全局搜索一下，可以找到_csrf其实就在网页中，是在网页中生成的，所以我们就需要抓取“login.jsp?$=deny”这个数据包,这里是get请求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re,requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先请求一次网页，获取页面中的csrf</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_csrf</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        csrfUrl = <span class="string">"http://openlaw.cn/login.jsp?$=deny"</span></span><br><span class="line">        session = requests.session()</span><br><span class="line">        response = session.get(csrfUrl, headers=headers, timeout=<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">if</span> (response.status_code == <span class="number">200</span>):</span><br><span class="line">            <span class="comment"># 编译正则表达式，带上re.S</span></span><br><span class="line">            pattern = re.compile(<span class="string">'name="_csrf" value="(.*?)"/&gt;'</span>, re.S)</span><br><span class="line">            <span class="comment"># findall是将返回结果以元组型列表</span></span><br><span class="line">            result = re.findall(pattern, response.text)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br></pre></td></tr></table></figure><blockquote><p>拓展：我第一次写的时候就出现了如下的错误提示，其实是re.S在使用compile编译时没有编译到,以后要注意这点</p></blockquote><p>在爬取网页数据时，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p=re.compile(<span class="string">'&lt;div class="card-title"&gt;(.*?)&lt;/div&gt;'</span>)</span><br><span class="line">data=re.findall(p,html.text,re.S)</span><br></pre></td></tr></table></figure><p>出现错误：<br><font color=#d71345>ValueError: Cannot process flags argument with a compiled pattern</font><br>原因：如果re.findall() 中有flags项，如re.S(正则中‘.’代表在每行中的任意字符，每一行遇到换行符‘\n’结束，re.S作用是将‘\n’当成是普通字符，这样就把整个html文档看成了一个字符串。<br>正确写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p=re.compile(<span class="string">'&lt;div class="card-title"&gt;(.*?)&lt;/div&gt;'</span>,re.S)</span><br><span class="line">data=re.findall(p,html.text)</span><br></pre></td></tr></table></figure><h3 id="3-password加密"><a href="#3-password加密" class="headerlink" title="3.password加密"></a>3.password加密</h3><p>依旧全局搜索这个关键字，找到password这个关键字，发现这个generateEncryptPassword(生成加密密码)很可疑，最终输出加密密码的函数其实是keyEncrypt函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $publicKey = <span class="string">'-----BEGIN PUBLIC KEY-----\n\</span></span><br><span class="line"><span class="string">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0zI8aibR9ZN57QObFxvI\n\</span></span><br><span class="line"><span class="string">wiRTmELItVVBLMrLd71ZqakR6oWUKkcAGgmxad2TCy3UeRe4A0Dduw97oXlbl5rK\n\</span></span><br><span class="line"><span class="string">RGISzpLO8iMSYtsim5aXZX9SB5x3S9ees4CZ6MYD/4XQOTrU0r1TMT6wXlhVvwNb\n\</span></span><br><span class="line"><span class="string">fMNYHm3vkY0rhfxBCVPFJoHjAGDFWNCAhf4KfalfvWsGL32p8N/exG2S4yXVHuV6\n\</span></span><br><span class="line"><span class="string">cHDyFJAItKVmyuTmB62pnPs5KvNv6oPmtmhMxxsvBOyh7uLwB5TonxtZpWZ3A1wf\n\</span></span><br><span class="line"><span class="string">43ByuU7F3qGnFqL0GeG/JuK+ZR40LARyevHy9OZ5pMa0Nwqb8PwfK810Bc8PxD8N\n\</span></span><br><span class="line"><span class="string">EwIDAQAB\n\</span></span><br><span class="line"><span class="string">-----END PUBLIC KEY-----\n\</span></span><br><span class="line"><span class="string">'</span>;</span><br><span class="line"><span class="keyword">var</span> encryptPassChars = <span class="string">"0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz*&amp;-%/!?*+=()"</span>;</span><br><span class="line"><span class="keyword">var</span> rsaEncrypt = <span class="keyword">new</span> JSEncrypt();</span><br><span class="line">rsaEncrypt.setPublicKey($publicKey);</span><br><span class="line"><span class="keyword">var</span> keyEncrypt = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> passPhrase = generateEncryptPassword(<span class="number">32</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> iv = CryptoJS.lib.WordArray.random(<span class="number">128</span> / <span class="number">8</span>).toString(CryptoJS.enc.Hex);</span><br><span class="line">    <span class="keyword">var</span> salt = CryptoJS.lib.WordArray.random(<span class="number">128</span> / <span class="number">8</span>).toString(CryptoJS.enc.Hex);</span><br><span class="line">    <span class="keyword">var</span> key = CryptoJS.PBKDF2(passPhrase, CryptoJS.enc.Hex.parse(salt), &#123;</span><br><span class="line">        keySize: <span class="number">128</span> / <span class="number">32</span>,</span><br><span class="line">        iterations: <span class="number">1000</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> aesEncrypted = CryptoJS.AES.encrypt(data, key, &#123;</span><br><span class="line">        iv: CryptoJS.enc.Hex.parse(iv)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">var</span> aesKey = passPhrase + <span class="string">":::"</span> + salt + <span class="string">":::"</span> + aesEncrypted.iv;</span><br><span class="line">    <span class="keyword">var</span> encryptedMessage = aesEncrypted.ciphertext.toString(CryptoJS.enc.Base64);</span><br><span class="line">    <span class="keyword">var</span> encryptedKey = rsaEncrypt.encrypt(aesKey);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> encrypted = encryptedKey + <span class="string">":::"</span> + encryptedMessage;</span><br><span class="line">    <span class="keyword">return</span> encrypted;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> generateEncryptPassword = <span class="function"><span class="keyword">function</span>(<span class="params">length</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> randomstring = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> rnum = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * encryptPassChars.length);</span><br><span class="line">        randomstring += encryptPassChars.substring(rnum, rnum + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> randomstring;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="4-完整代码"><a href="#4-完整代码" class="headerlink" title="4.完整代码"></a>4.完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求登录url</span></span><br><span class="line">url = <span class="string">"http://openlaw.cn/login"</span></span><br><span class="line"><span class="comment"># 构造请求头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">"Origin"</span>: <span class="string">"http://openlaw.cn"</span>,</span><br><span class="line">    <span class="string">"Referer"</span>: <span class="string">"http://openlaw.cn/login.jsp"</span>,</span><br><span class="line">    <span class="string">"Upgrade-Insecure-Requests"</span>: <span class="string">"1"</span>,</span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.88 Safari/537.36"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先请求一次网页，获取页面中的csrf</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_csrf</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        csrfUrl = <span class="string">"http://openlaw.cn/login.jsp?$=deny"</span></span><br><span class="line">        session = requests.session()</span><br><span class="line">        response = session.get(csrfUrl, headers=headers, timeout=<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">if</span> (response.status_code == <span class="number">200</span>):</span><br><span class="line">            pattern = re.compile(<span class="string">'name="_csrf" value="(.*?)"/&gt;'</span>, re.S)</span><br><span class="line">            result = re.findall(pattern, response.text)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_pwd</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'main.js'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        js_code = f.read()</span><br><span class="line">    <span class="comment"># 编译js函数</span></span><br><span class="line">    ctx = execjs.compile(js_code)</span><br><span class="line">    <span class="comment"># 执行js中的getPassword函数，参数为password</span></span><br><span class="line">    result = ctx.call(<span class="string">'getPassword'</span>, <span class="string">'a123456'</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二次post请求模拟登录openLaw网站</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">"_csrf"</span>: (get_csrf())[<span class="number">0</span>],</span><br><span class="line">        <span class="string">"username"</span>: <span class="string">"badwoman"</span>,</span><br><span class="line">        <span class="string">"password"</span>: get_pwd(),</span><br><span class="line">        <span class="string">"_spring_security_remember_me"</span>: <span class="string">"true"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 模拟登录openLaw</span></span><br><span class="line">        response = requests.post(url=url, headers=headers, data=data, timeout=<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">if</span> (response.status_code == <span class="number">200</span>):</span><br><span class="line">            <span class="keyword">return</span> response.text</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    login()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> re </tag>
            
            <tag> js逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python全栈系列章节更新（十）：headers处理小脚本</title>
      <link href="/2020/01/07/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E5%8D%81%EF%BC%89/"/>
      <url>/2020/01/07/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E5%8D%81%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在写python爬虫脚本时，常常需要处理请求头headers，将其转换为字典格式，如果一个个的加单双引号，往往很费劲，所以我们可以借用正则表达式，直接将其替换掉。</p><a id="more"></a><h3 id="1-python字典与js的对象"><a href="#1-python字典与js的对象" class="headerlink" title="1.python字典与js的对象"></a>1.python字典与js的对象</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;兄弟萌，我懵了，最近有点迷糊，刚刚说起字典（值可以取任何数据类型，但键必须是不可变的，如字符串，数字或元组。），这就可以联想到js的对象写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字典</span></span><br><span class="line">dicts = &#123;<span class="string">'Alice'</span>: <span class="string">'2341'</span>, <span class="number">9527</span>: <span class="string">'9102'</span>, (<span class="number">2</span>,<span class="number">3</span>): <span class="string">'3258'</span>&#125;</span><br></pre></td></tr></table></figure><p>js的对象提供多个内建对象，比如 Object、String、Date、Array,Number,Function 等等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name : <span class="string">"xiaoming"</span>,</span><br><span class="line">    age : <span class="number">18</span>,</span><br><span class="line">    show : <span class="function"><span class="keyword">function</span> (<span class="params">girlfriend</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"的女朋友是"</span> + girlfriend);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="headers字符串处理"><a href="#headers字符串处理" class="headerlink" title="headers字符串处理"></a>headers字符串处理</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们从chrome里面的截取到的headers往往是需要我们二次处理的，而我一般喜欢加双引号，构造成json格式，一劳永逸。<br><font color=#ed1941>源代码：</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">headers_str = <span class="string">"""</span></span><br><span class="line"><span class="string">sec-fetch-mode: navigate</span></span><br><span class="line"><span class="string">sec-fetch-site: same-origin</span></span><br><span class="line"><span class="string">sec-fetch-user: ?1</span></span><br><span class="line"><span class="string">upgrade-insecure-requests: 1</span></span><br><span class="line"><span class="string">user-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.88 Safari/537.36</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">pattern = re.compile(<span class="string">"^(.*?): (.*)$"</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> headers_str.splitlines():</span><br><span class="line">    print(re.sub(pattern, <span class="string">"\"\\1\": \"\\2\","</span>, line))</span><br></pre></td></tr></table></figure><p>这里的headers_str存放我们的目标headers字符串，运行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;sec-fetch-mode&quot;: &quot;navigate&quot;,</span><br><span class="line">&quot;sec-fetch-site&quot;: &quot;same-origin&quot;,</span><br><span class="line">&quot;sec-fetch-user&quot;: &quot;?1&quot;,</span><br><span class="line">&quot;upgrade-insecure-requests&quot;: &quot;1&quot;,</span><br><span class="line">&quot;user-agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.88 Safari/537.36&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> re </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析章节（二）：matplotlib</title>
      <link href="/2020/01/02/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%AB%A0%E8%8A%82%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2020/01/02/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%AB%A0%E8%8A%82%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Matplotlib 是 Python 的绘图库。 它可与 NumPy 一起使用，提供了一种有效的 MatLab 开源替代方案。 它也可以和图形工具包一起使用，如 PyQt 和 wxPython。！</p><blockquote><p><font size=4 color=#FF0000>本文要点：</font><br>struct模块<br>科学运算基本三大库Matplotlib<br>图形</p></blockquote><a id="more"></a><h2 id="1-import-struct库"><a href="#1-import-struct库" class="headerlink" title="1.import struct库"></a>1.import struct库</h2><p>1.1 struct模块:</p><p>在Python中，『一切皆对象』，基本数据类型也不列外<br>C语言的数组int a[3] = {1, 2, 4};存储的是真正的值<br>Python的列表list = [1, 2, 4]，存储的是元素的指针 </p><p>1.2 pack(),unpack()函数:</p><p>struct模块最重要的两个函数就是pack()、unpack()方法：打包函数：pack(fmt, v1, v2, v3, …)；解包函数：unpack(fmt, buffer)，其中，fmt是格式字符（format的谐音），struct模块支持的格式化字符如下表</p><h2 id="2-matplotlib库"><a href="#2-matplotlib库" class="headerlink" title="2.matplotlib库"></a>2.matplotlib库</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;在python的matplotlib库中分别可用bar、barh、plot函数来构建它们，再使用xticks与yticks（设置坐标轴刻度）、xlabel与ylabel（设置坐标轴标签）、title（标题）、legend（图例）、xlim与ylim（设置坐标轴数据范围）、grid（设置网格线）等命令来装饰图形</p><h4 id="2-1导入库文件"><a href="#2-1导入库文件" class="headerlink" title="2.1导入库文件"></a>2.1导入库文件</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;from matplotlib import pyplot as plt<br>&nbsp;&nbsp;&nbsp;&nbsp;import numpy as np</p><h4 id="2-2-简单figure图像生成案例："><a href="#2-2-简单figure图像生成案例：" class="headerlink" title="2.2 简单figure图像生成案例："></a>2.2 简单figure图像生成案例：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用import导入模块matplotlib.pyplot，并简写成plt 使用import导入模块numpy，并简写成np</span></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用np.linspace定义x：范围是(-1,1);个数是50</span></span><br><span class="line">x = np.linspace(<span class="number">-1</span>, <span class="number">1</span>, <span class="number">50</span>)</span><br><span class="line"><span class="comment"># 函数y=x^3</span></span><br><span class="line">y = x ** <span class="number">3</span></span><br><span class="line">y1 = x ** <span class="number">2</span></span><br><span class="line"><span class="comment"># 使用plt.figure定义一个图像窗口.num代表图像窗口编号，figsize表示窗口大小</span></span><br><span class="line">plt.figure(num=<span class="number">3</span>, figsize=(<span class="number">8</span>, <span class="number">5</span>), )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用plt.plot画(x ,y1)曲线，曲线的颜色属性(color)为红色;</span></span><br><span class="line"><span class="comment"># 曲线的宽度(linewidth)为1.0；曲线的类型(linestyle)为虚线. 使用plt.show显示图像</span></span><br><span class="line"></span><br><span class="line">plt.plot(x, y1, color=<span class="string">'red'</span>, linewidth=<span class="string">'1.0'</span>, linestyle=<span class="string">'--'</span>)</span><br><span class="line"><span class="comment"># 使用plt.plot画(x ,y1)曲线.</span></span><br><span class="line">plt.plot(x, y)</span><br><span class="line"><span class="comment"># 展示绘制图像</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="2-3坐标轴以及line："><a href="#2-3坐标轴以及line：" class="headerlink" title="2.3坐标轴以及line："></a>2.3坐标轴以及line：</h4><blockquote><p>设置坐标轴不同的名字、刻度以及范围：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用plt.xlim设置x坐标轴范围：(-2, 2)</span></span><br><span class="line">plt.xlim((<span class="number">-2</span>,<span class="number">2</span>))</span><br><span class="line"><span class="comment"># 使用plt.ylim设置x坐标轴范围：(-2, 2)</span></span><br><span class="line">plt.ylim((<span class="number">-2</span>,<span class="number">2</span>))</span><br><span class="line"><span class="comment"># 定义x轴名称</span></span><br><span class="line">plt.xlabel(<span class="string">'x轴'</span>)</span><br><span class="line"><span class="comment"># 定义y轴名称</span></span><br><span class="line">plt.ylabel(<span class="string">'y轴'</span>)</span><br><span class="line"></span><br><span class="line">new_ticks = np.linspace(<span class="number">-2</span>, <span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line">print(new_ticks)</span><br><span class="line"><span class="comment"># 使用plt.xticks设置x轴刻度：范围是(-2,2);个数是8.</span></span><br><span class="line">plt.xticks(new_ticks)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用plt.yticks设置y轴刻度以及名称：刻度为[-2, -1.8, -1, 1.22, 3]</span></span><br><span class="line"><span class="comment"># 对应刻度的名称为[‘really bad’,’bad’,’normal’,’good’, ‘really good’]</span></span><br><span class="line">plt.yticks([<span class="number">-2</span>, <span class="number">-1.8</span>, <span class="number">-1</span>, <span class="number">1.22</span>, <span class="number">2</span>],[<span class="string">r'$really\ bad$'</span>, <span class="string">r'$bad$'</span>, <span class="string">r'$normal$'</span>, <span class="string">r'$good$'</span>, <span class="string">r'$really\ good$'</span>])</span><br></pre></td></tr></table></figure><blockquote><p>坐标轴移至中心：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">plt.gca获取当前坐标轴信息. 使用.spines设置边框；使用.set_color设置边框颜色</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 坐标轴中移：</span></span><br><span class="line">ax = plt.gca()</span><br><span class="line"><span class="comment"># 隐藏上边和右边</span></span><br><span class="line">ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">ax.spines[<span class="string">'right'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line"><span class="comment"># 移动另外两个轴</span></span><br><span class="line">ax.xaxis.set_ticks_position(<span class="string">'bottom'</span>)</span><br><span class="line">ax.spines[<span class="string">'bottom'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br><span class="line">ax.yaxis.set_ticks_position(<span class="string">'left'</span>)</span><br><span class="line">ax.spines[<span class="string">'left'</span>].set_position((<span class="string">'data'</span>,<span class="number">0</span>))</span><br></pre></td></tr></table></figure><blockquote><p>图例legend</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># set line syles</span></span><br><span class="line">l1, = plt.plot(x, y1, label=<span class="string">'linear line'</span>)</span><br><span class="line">l2, = plt.plot(x, y2, color=<span class="string">'red'</span>, linewidth=<span class="number">1.0</span>, linestyle=<span class="string">'--'</span>, label=<span class="string">'square line'</span>)</span><br><span class="line"><span class="comment"># legend将要显示的信息来自于上面代码中的 label(表示图例的名称). 所以我们只需要简单写下一下代码, plt 就能自动的为我们添加图例.</span></span><br><span class="line"><span class="comment"># 图例展示</span></span><br><span class="line">plt.legend(loc=<span class="string">'upper right'</span>) <span class="comment"># loc属性表示图例放置位置：upper，right，bottom，left</span></span><br></pre></td></tr></table></figure><blockquote><p>annotate标注</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 标注具体某点</span></span><br><span class="line">x0 = <span class="number">0.5</span></span><br><span class="line">y0 = x0**<span class="number">2</span></span><br><span class="line">plt.plot([x0, x0,], [<span class="number">0</span>, y0,], <span class="string">'k--'</span>, linewidth=<span class="number">2.5</span>)</span><br><span class="line"><span class="comment"># set dot styles</span></span><br><span class="line">plt.scatter([x0, ], [y0, ], s=<span class="number">50</span>, color=<span class="string">'b'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注释annotate，对(x0,y0)这个点进行标注</span></span><br><span class="line">plt.annotate(<span class="string">r'$x**2=%s$'</span> % x0, xy=(x0, y0), xycoords=<span class="string">'data'</span>, xytext=(+<span class="number">10</span>, <span class="number">-10</span>),</span><br><span class="line">             <span class="comment"># xytext=(+10, -10) 和 textcoords='offset points' 对于标注位置的描述 和 xy 偏差值</span></span><br><span class="line">             textcoords=<span class="string">'offset points'</span>, fontsize=<span class="number">10</span>,</span><br><span class="line">             arrowprops=dict(arrowstyle=<span class="string">'-&gt;'</span>, connectionstyle=<span class="string">"arc3,rad=.2"</span>))</span><br></pre></td></tr></table></figure><blockquote><p>matplotlib的颜色及线条控制（linestyle，color）</p></blockquote><p>linestyle:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&apos;-&apos;       solid line style</span><br><span class="line">&apos;--&apos;      dashed line style</span><br><span class="line">&apos;-.&apos;      dash-dot line style</span><br><span class="line">&apos;:&apos;       dotted line styl</span><br></pre></td></tr></table></figure><p>color:<a href="https://matplotlib.org/examples/color/named_colors.html" target="_blank" rel="noopener">【参考此篇文章】</a><br><fancybox><img src="https://matplotlib.org/mpl_examples/color/named_colors.png" alt=""></fancybox></p><blockquote><p>多图分区展示</p></blockquote><p>语法格式：subplot(a,b,c)表示a行，b列，第c个图像区域</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 规则图形：</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个图形窗口</span></span><br><span class="line">plt.figure()</span><br><span class="line"><span class="comment"># subplot(m,n,x):代表创建m*n个小图，x代表第i个图</span></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment"># 绘制折线图</span></span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">y = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">plt.plot(x, y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># plt.subplot(2,2,2)表示将整个图像窗口分为2行2列, 当前位置为2</span></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">data = np.arange(<span class="number">1</span>, <span class="number">4</span>, <span class="number">.25</span>)</span><br><span class="line">plt.scatter(data, data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># plt.subplot(2,2,3)表示将整个图像窗口分为2行2列,当前位置为3</span></span><br><span class="line">plt.subplot(<span class="number">223</span>)</span><br><span class="line">plt.plot([<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># plt.subplot(2,2,4)表示将整个图像窗口分为2行2列,当前位置为4</span></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">plt.plot([<span class="number">0</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><blockquote><p>plt.text()给图形添加数据标签</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#创建带数字标签的直方图</span></span><br><span class="line">numbers = list(range(<span class="number">1</span>,<span class="number">11</span>))</span><br><span class="line"><span class="comment">#np.array()将列表转换为存储单一数据类型的多维数组</span></span><br><span class="line">x = np.array(numbers)</span><br><span class="line">y = np.array([a**<span class="number">2</span> <span class="keyword">for</span> a <span class="keyword">in</span> numbers])</span><br><span class="line">plt.bar(x,y,width=<span class="number">0.5</span>,align=<span class="string">'center'</span>,color=<span class="string">'c'</span>)</span><br><span class="line">plt.title(<span class="string">'Square Numbers'</span>,fontsize=<span class="number">24</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Value'</span>,fontsize=<span class="number">14</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Square of Value'</span>,fontsize=<span class="number">14</span>)</span><br><span class="line">plt.tick_params(axis=<span class="string">'both'</span>,labelsize=<span class="number">14</span>)</span><br><span class="line">plt.axis([<span class="number">0</span>,<span class="number">11</span>,<span class="number">0</span>,<span class="number">110</span>])</span><br><span class="line"><span class="keyword">for</span> a,b <span class="keyword">in</span> zip(x,y):</span><br><span class="line">    <span class="comment"># 用%.2f保留两位小数，横向居中对齐ha='center'，纵向底部（顶部）对齐va='bottom'</span></span><br><span class="line">    plt.text(a,b+<span class="number">0.1</span>,<span class="string">'%.2f'</span>%b,ha = <span class="string">'center'</span>,va = <span class="string">'bottom'</span>,fontsize=<span class="number">7</span>)</span><br><span class="line">plt.savefig(<span class="string">'images\squares.png'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;首先，前边设置的x、y值其实就代表了不同柱子在图形中的位置（坐标），通过for循环找到每一个x、y值的相应坐标——a、b，再使用plt.text在对应位置添文字说明来生成相应的数字标签，而for循环也保证了每一个柱子都有标签。其中，<font color=#FF0000>a+0.5, b+0.05(表示位置高度)表示在每一柱子对应x值、y值上方0.05处标注文字说明，&#39;%.2f’ % b,代表标注的文字，即每个柱子对应的y值</font>，其中0表示不显示小数后面的数值，1就表示显示小数后面一位，以此类推； ha=’center’, va= ‘bottom’代表horizontalalignment（水平对齐）、verticalalignment（垂直对齐）的方式，fontsize则是文字大小。条形图、折线图也是如此设置，饼图则在pie命令中有数据标签的对应参数。对于累积柱状图、双轴柱状图则需要用两个for循环，同时通过a与b的不同加减来设置数据标签位置。</p><h2 id="3-图形"><a href="#3-图形" class="headerlink" title="3.图形"></a>3.图形</h2><p>未完待续：<br>  -3.1 散点图<br>  -3.2 柱形图</p>]]></content>
      
      
      <categories>
          
          <category> Data analysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> numpy </tag>
            
            <tag> matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python全栈系列章节更新（九）：极验滑动二维码</title>
      <link href="/2019/12/30/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E4%B9%9D%EF%BC%89/"/>
      <url>/2019/12/30/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E4%B9%9D%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;现在的反爬措施越来越复杂，一些常见的反爬措施有Headers and referer反爬机制、语音动作识别、各种变态二维码（12306）、字符js加密、Ajax动态加载、模拟登录和cookie限制。。。</p><blockquote><p>目标网站：<a href="https://www.geetest.com/" target="_blank" rel="noopener">极验官网</a> <a href="https://www.bilibili.com/" target="_blank" rel="noopener">哔哩哔哩</a><br>反爬机制：<font color=#d71345>极验滑动3.0版本</font><br>相关技术：selenium<br>技术难度：<font color=#d71345>★★☆☆☆☆</font><br>爬取目标：模拟登录官网，破解滑动二维码<br>源代码：本页面<br>说明：找到相关节点DOM，其他网站则可复用此源代码</p></blockquote><a id="more"></a><h3 id="1-识别思路"><a href="#1-识别思路" class="headerlink" title="1.识别思路"></a>1.识别思路</h3><p>目标网站：哔哩哔哩动画<br>&nbsp;&nbsp;&nbsp;但是对于应用了极验验证码的网站，识别并不是没有办法的。如果我们直接模拟表单提交的话，加密参数的构造是个问题，参数构造有问题服务端就会校验失败，所以在这里我们采用直接模拟浏览器动作的方式来完成验证，在 Python 中我们就可以使用 Selenium 来通过完全模拟人的行为的方式来完成验证，此验证成本相对于直接去识别加密算法容易不少。<br><fancybox><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A56/01.png" alt=""></fancybox></p><ul><li>模拟登录，找到入口url</li><li>模拟点击验证按钮</li><li>识别滑动缺口的位置</li><li>模拟拖动滑块<br>&nbsp;&nbsp;&nbsp;&nbsp;可以看到缺口的四周边缘有明显的断裂边缘，而且边缘和边缘周围有明显的区别，我们可以实现一个边缘检测算法来找出缺口的位置。对于极验来说，我们可以利用和原图对比检测的方式来识别缺口的位置，因为在没有滑动滑块之前，缺口其实是没有呈现的.<br>&nbsp;&nbsp;&nbsp;&nbsp;所以我们可以同时获取两张图片，设定一个对比阈值，然后遍历两张图片找出相同位置像素 RGB 差距超过此阈值的像素点位置，那么此位置就是缺口的位置。<br>&nbsp;&nbsp;&nbsp;&nbsp;第四步操作看似简单，但是其中的坑比较多，极验验证码增加了机器轨迹识别，匀速移动、随机速度移动等方法都是不行的，只有完全模拟人的移动轨迹才可以通过验证，而人的移动轨迹一般是先加速后减速的，这又涉及到物理学中加速度的相关问题，我们需要模拟这个过程才能成功。<h3 id="2-初始化"><a href="#2-初始化" class="headerlink" title="2.初始化"></a>2.初始化</h3>&nbsp;&nbsp;&nbsp;&nbsp;首先这次我们选定的链接为：<a href="https://account.geetest.com/login，也就是极验的管理后台登录页面，在这里我们首先初始化一些配置，如" target="_blank" rel="noopener">https://account.geetest.com/login，也就是极验的管理后台登录页面，在这里我们首先初始化一些配置，如</a> Selenium 对象的初始化及一些参数的配置：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 极验账号</span></span><br><span class="line">EMAIL = <span class="string">'test@test.com'</span></span><br><span class="line"><span class="comment"># 极验密码</span></span><br><span class="line">PASSWORD = <span class="string">'123456'</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrackGeetest</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.url = <span class="string">'https://account.geetest.com/login'</span></span><br><span class="line">        self.browser = webdriver.Chrome()</span><br><span class="line">        self.wait = WebDriverWait(self.browser, <span class="number">20</span>)</span><br><span class="line">        self.email = EMAIL</span><br><span class="line">        self.password = PASSWORD</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-模拟点击"><a href="#3-模拟点击" class="headerlink" title="3.模拟点击"></a>3.模拟点击</h3><p>随后我们需要实现第一步的操作，也就是模拟点击初始的验证按钮，弹出滑动二维码，所以我们定义一个方法来获取这个按钮，利用显式等待的方法来实现：<br><fancybox><img src="https://qiniu.cuiqingcai.com/2019-08-02-054912.jpg" alt="斗鱼登录页面"></fancybox></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_geetest_button</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    获取初始验证按钮（点击就会弹出验证码滑块，这一步按实际情况出发，</span></span><br><span class="line"><span class="string">                   有些验证码滑块是直接存在，不用再点击一次来触发生成滑块）</span></span><br><span class="line"><span class="string">    :return: 按钮对象</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    button = self.wait.until(EC.element_to_be_clickable((By.CLASS_NAME, <span class="string">'geetest_radar_tip'</span>)))</span><br><span class="line">    <span class="keyword">return</span> button</span><br></pre></td></tr></table></figure><p>这里返回一个网页节点对象，直接调用click()方法即可模拟点击</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">button = self.get_geetest_button()</span><br><span class="line">button.click()</span><br></pre></td></tr></table></figure><p>到这里就完成了第一步，点击一下就会弹出极验滑动二维码界面</p><h3 id="4-识别缺口"><a href="#4-识别缺口" class="headerlink" title="4.识别缺口"></a>4.识别缺口</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;接下来我们需要识别缺口的位置，首先我们需要将前后的两张比对图片获取下来，然后比对二者的不一致的地方即为缺口。首先我们需要获取不带缺口的图片，利用 Selenium 选取图片元素，然后得到其所在位置和宽高，随后获取整个网页的截图，再从截图中裁切出来即可，代码实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_position</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    获取验证码位置</span></span><br><span class="line"><span class="string">    :return: 验证码位置元组</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    img = self.wait.until(EC.presence_of_element_located((By.CLASS_NAME, <span class="string">'geetest_canvas_img'</span>)))</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    location = img.location</span><br><span class="line">    size = img.size</span><br><span class="line">    top, bottom, left, right = location[<span class="string">'y'</span>], location[<span class="string">'y'</span>] + size[<span class="string">'height'</span>], location[<span class="string">'x'</span>], location[<span class="string">'x'</span>] + size[</span><br><span class="line">        <span class="string">'width'</span>]</span><br><span class="line">    <span class="keyword">return</span> (top, bottom, left, right)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_geetest_image</span><span class="params">(self, name=<span class="string">'captcha.png'</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    获取验证码图片</span></span><br><span class="line"><span class="string">    :return: 图片对象</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    top, bottom, left, right = self.get_position()</span><br><span class="line">    print(<span class="string">'验证码位置'</span>, top, bottom, left, right)</span><br><span class="line">    screenshot = self.get_screenshot()</span><br><span class="line">    captcha = screenshot.crop((left, top, right, bottom))</span><br><span class="line">    <span class="keyword">return</span> captcha</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;在这里 get_position() 函数首先获取了图片对象，然后获取了它的位置和宽高，随后返回了其左上角和右下角的坐标。而 get_geetest_image() 方法则是获取了网页截图，然后调用了 crop() 方法将图片再裁切出来，返回的是 Image 对象。<br>&nbsp;&nbsp;&nbsp;&nbsp;随后我们需要获取第二张图片，也就是带缺口的图片，要使得图片出现缺口，我们只需要点击一下下方的滑块即可，触发这个动作之后，图片中的缺口就会显现，实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_slider</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    获取滑块</span></span><br><span class="line"><span class="string">    :return: 滑块对象</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    slider = self.wait.until(EC.element_to_be_clickable((By.CLASS_NAME, <span class="string">'geetest_slider_button'</span>)))</span><br><span class="line">    <span class="keyword">return</span> slider</span><br></pre></td></tr></table></figure><p>利用 get_slider() 方法获取滑块对象，接下来调用其 click() 方法即可触发点击，缺口图片即可呈现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 点击呼出缺口</span></span><br><span class="line">slider = self.get_slider()</span><br><span class="line">slider.click()</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;随后还是调用 get_geetest_image() 方法将第二张图片获取下来即可。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;到现在我们就已经得到了两张图片对象了，分别赋值给变量 image1 和 image2，接下来对比图片获取缺口即可。要对比图片的不同之处，我们在这里遍历图片的每个坐标点，获取两张图片对应像素点的 RGB 数据，然后判断二者的 RGB 数据差异，如果差距超过在一定范围内，那就代表两个像素相同，继续比对下一个像素点，如果差距超过一定范围，则判断像素点不同，当前位置即为缺口位置，代码实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_pixel_equal</span><span class="params">(self, image1, image2, x, y)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    判断两个像素是否相同</span></span><br><span class="line"><span class="string">    :param image1: 图片1</span></span><br><span class="line"><span class="string">    :param image2: 图片2</span></span><br><span class="line"><span class="string">    :param x: 位置x</span></span><br><span class="line"><span class="string">    :param y: 位置y</span></span><br><span class="line"><span class="string">    :return: 像素是否相同</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 取两个图片的像素点</span></span><br><span class="line">    pixel1 = image1.load()[x, y]</span><br><span class="line">    pixel2 = image2.load()[x, y]</span><br><span class="line">    threshold = <span class="number">60</span></span><br><span class="line">    <span class="keyword">if</span> abs(pixel1[<span class="number">0</span>] - pixel2[<span class="number">0</span>]) &lt; threshold <span class="keyword">and</span> abs(pixel1[<span class="number">1</span>] - pixel2[<span class="number">1</span>]) &lt; threshold <span class="keyword">and</span> abs(</span><br><span class="line">            pixel1[<span class="number">2</span>] - pixel2[<span class="number">2</span>]) &lt; threshold:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gap</span><span class="params">(self, image1, image2)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    获取缺口偏移量</span></span><br><span class="line"><span class="string">    :param image1: 不带缺口图片</span></span><br><span class="line"><span class="string">    :param image2: 带缺口图片</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    left = <span class="number">60</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(left, image1.size[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(image1.size[<span class="number">1</span>]):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.is_pixel_equal(image1, image2, i, j):</span><br><span class="line">                left = i</span><br><span class="line">                <span class="keyword">return</span> left</span><br><span class="line">    <span class="keyword">return</span> left</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;get_gap() 方法即为获取缺口位置的方法，此方法的参数为两张图片，一张为带缺口图片，另一张为不带缺口图片，在这里遍历两张图片的每个像素，然后利用 is_pixel_equal() 方法判断两张图片同一位置的像素是否相同，比对的时候比较了两张图 RGB 的绝对值是否均小于定义的阈值 threshold，如果均在阈值之内，则像素点相同，继续遍历，否则遇到不相同的像素点就是缺口的位置。</p><h3 id="5-模拟拖动"><a href="#5-模拟拖动" class="headerlink" title="5.模拟拖动"></a>5.模拟拖动</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_track</span><span class="params">(self, distance)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    根据偏移量获取移动轨迹</span></span><br><span class="line"><span class="string">    :param distance: 偏移量</span></span><br><span class="line"><span class="string">    :return: 移动轨迹</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 移动轨迹</span></span><br><span class="line">    track = []</span><br><span class="line">    <span class="comment"># 当前位移</span></span><br><span class="line">    current = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 减速阈值</span></span><br><span class="line">    mid = distance * <span class="number">4</span> / <span class="number">5</span></span><br><span class="line">    <span class="comment"># 计算间隔</span></span><br><span class="line">    t = <span class="number">0.2</span></span><br><span class="line">    <span class="comment"># 初速度</span></span><br><span class="line">    v = <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span> current &lt; distance:</span><br><span class="line">        <span class="keyword">if</span> current &lt; mid:</span><br><span class="line">            <span class="comment"># 加速度为正2</span></span><br><span class="line">            a = <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 加速度为负3</span></span><br><span class="line">            a = <span class="number">-3</span></span><br><span class="line">        <span class="comment"># 初速度v0</span></span><br><span class="line">        v0 = v</span><br><span class="line">        <span class="comment"># 当前速度v = v0 + at</span></span><br><span class="line">        v = v0 + a * t</span><br><span class="line">        <span class="comment"># 移动距离x = v0t + 1/2 * a * t^2</span></span><br><span class="line">        move = v0 * t + <span class="number">1</span> / <span class="number">2</span> * a * t * t</span><br><span class="line">        <span class="comment"># 当前位移</span></span><br><span class="line">        current += move</span><br><span class="line">        <span class="comment"># 加入轨迹</span></span><br><span class="line">        track.append(round(move))</span><br><span class="line">    <span class="keyword">return</span> track</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move_to_gap</span><span class="params">(self, slider, tracks)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    拖动滑块到缺口处</span></span><br><span class="line"><span class="string">    :param slider: 滑块</span></span><br><span class="line"><span class="string">    :param tracks: 轨迹</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    ActionChains(self.browser).click_and_hold(slider).perform()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> tracks:</span><br><span class="line">        ActionChains(self.browser).move_by_offset(xoffset=x, yoffset=<span class="number">0</span>).perform()</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    ActionChains(self.browser).release().perform()</span><br></pre></td></tr></table></figure><p>在这里传入的参数为滑块对象和运动轨迹，首先调用ActionChains 的 click_and_hold() 方法按住拖动底部滑块，随后遍历运动轨迹获取每小段位移距离，调用 move_by_offset() 方法移动此位移，最后移动完成之后调用 release() 方法松开鼠标即可。</p><h3 id="6-完整源代码"><a href="#6-完整源代码" class="headerlink" title="6.完整源代码"></a>6.完整源代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line">EMAIL = <span class="string">'example@example.com'</span></span><br><span class="line">PASSWORD = <span class="string">''</span></span><br><span class="line">BORDER = <span class="number">6</span></span><br><span class="line">INIT_LEFT = <span class="number">60</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrackGeetest</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.url = <span class="string">'https://account.geetest.com/login'</span></span><br><span class="line">        self.browser = webdriver.Chrome()</span><br><span class="line">        self.wait = WebDriverWait(self.browser, <span class="number">20</span>)</span><br><span class="line">        self.email = EMAIL</span><br><span class="line">        self.password = PASSWORD</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.browser.close()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_geetest_button</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        获取初始验证按钮</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        button = self.wait.until(EC.element_to_be_clickable((By.CLASS_NAME, <span class="string">'geetest_radar_tip'</span>)))</span><br><span class="line">        <span class="keyword">return</span> button</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_position</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        获取验证码位置</span></span><br><span class="line"><span class="string">        :return: 验证码位置元组</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        img = self.wait.until(EC.presence_of_element_located((By.CLASS_NAME, <span class="string">'geetest_canvas_img'</span>)))</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        location = img.location</span><br><span class="line">        size = img.size</span><br><span class="line">        top, bottom, left, right = location[<span class="string">'y'</span>], location[<span class="string">'y'</span>] + size[<span class="string">'height'</span>], location[<span class="string">'x'</span>], location[<span class="string">'x'</span>] + size[</span><br><span class="line">            <span class="string">'width'</span>]</span><br><span class="line">        <span class="keyword">return</span> (top, bottom, left, right)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_screenshot</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        获取网页截图</span></span><br><span class="line"><span class="string">        :return: 截图对象</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        screenshot = self.browser.get_screenshot_as_png()</span><br><span class="line">        screenshot = Image.open(BytesIO(screenshot))</span><br><span class="line">        <span class="keyword">return</span> screenshot</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_slider</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        获取滑块</span></span><br><span class="line"><span class="string">        :return: 滑块对象</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        slider = self.wait.until(EC.element_to_be_clickable((By.CLASS_NAME, <span class="string">'geetest_slider_button'</span>)))</span><br><span class="line">        <span class="keyword">return</span> slider</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_geetest_image</span><span class="params">(self, name=<span class="string">'captcha.png'</span>)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        获取验证码图片</span></span><br><span class="line"><span class="string">        :return: 图片对象</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        top, bottom, left, right = self.get_position()</span><br><span class="line">        print(<span class="string">'验证码位置'</span>, top, bottom, left, right)</span><br><span class="line">        screenshot = self.get_screenshot()</span><br><span class="line">        captcha = screenshot.crop((left, top, right, bottom))</span><br><span class="line">        captcha.save(name)</span><br><span class="line">        <span class="keyword">return</span> captcha</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        打开网页输入用户名密码</span></span><br><span class="line"><span class="string">        :return: None</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.browser.get(self.url)</span><br><span class="line">        email = self.wait.until(EC.presence_of_element_located((By.ID, <span class="string">'email'</span>)))</span><br><span class="line">        password = self.wait.until(EC.presence_of_element_located((By.ID, <span class="string">'password'</span>)))</span><br><span class="line">        email.send_keys(self.email)</span><br><span class="line">        password.send_keys(self.password)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_gap</span><span class="params">(self, image1, image2)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        获取缺口偏移量</span></span><br><span class="line"><span class="string">        :param image1: 不带缺口图片</span></span><br><span class="line"><span class="string">        :param image2: 带缺口图片</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        left = <span class="number">60</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(left, image1.size[<span class="number">0</span>]):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(image1.size[<span class="number">1</span>]):</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> self.is_pixel_equal(image1, image2, i, j):</span><br><span class="line">                    left = i</span><br><span class="line">                    <span class="keyword">return</span> left</span><br><span class="line">        <span class="keyword">return</span> left</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_pixel_equal</span><span class="params">(self, image1, image2, x, y)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        判断两个像素是否相同</span></span><br><span class="line"><span class="string">        :param image1: 图片1</span></span><br><span class="line"><span class="string">        :param image2: 图片2</span></span><br><span class="line"><span class="string">        :param x: 位置x</span></span><br><span class="line"><span class="string">        :param y: 位置y</span></span><br><span class="line"><span class="string">        :return: 像素是否相同</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 取两个图片的像素点</span></span><br><span class="line">        pixel1 = image1.load()[x, y]</span><br><span class="line">        pixel2 = image2.load()[x, y]</span><br><span class="line">        threshold = <span class="number">60</span></span><br><span class="line">        <span class="keyword">if</span> abs(pixel1[<span class="number">0</span>] - pixel2[<span class="number">0</span>]) &lt; threshold <span class="keyword">and</span> abs(pixel1[<span class="number">1</span>] - pixel2[<span class="number">1</span>]) &lt; threshold <span class="keyword">and</span> abs(</span><br><span class="line">                pixel1[<span class="number">2</span>] - pixel2[<span class="number">2</span>]) &lt; threshold:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_track</span><span class="params">(self, distance)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        根据偏移量获取移动轨迹</span></span><br><span class="line"><span class="string">        :param distance: 偏移量</span></span><br><span class="line"><span class="string">        :return: 移动轨迹</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 移动轨迹</span></span><br><span class="line">        track = []</span><br><span class="line">        <span class="comment"># 当前位移</span></span><br><span class="line">        current = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 减速阈值</span></span><br><span class="line">        mid = distance * <span class="number">4</span> / <span class="number">5</span></span><br><span class="line">        <span class="comment"># 计算间隔</span></span><br><span class="line">        t = <span class="number">0.2</span></span><br><span class="line">        <span class="comment"># 初速度</span></span><br><span class="line">        v = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> current &lt; distance:</span><br><span class="line">            <span class="keyword">if</span> current &lt; mid:</span><br><span class="line">                <span class="comment"># 加速度为正2</span></span><br><span class="line">                a = <span class="number">2</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 加速度为负3</span></span><br><span class="line">                a = <span class="number">-3</span></span><br><span class="line">            <span class="comment"># 初速度v0</span></span><br><span class="line">            v0 = v</span><br><span class="line">            <span class="comment"># 当前速度v = v0 + at</span></span><br><span class="line">            v = v0 + a * t</span><br><span class="line">            <span class="comment"># 移动距离x = v0t + 1/2 * a * t^2</span></span><br><span class="line">            move = v0 * t + <span class="number">1</span> / <span class="number">2</span> * a * t * t</span><br><span class="line">            <span class="comment"># 当前位移</span></span><br><span class="line">            current += move</span><br><span class="line">            <span class="comment"># 加入轨迹</span></span><br><span class="line">            track.append(round(move))</span><br><span class="line">        <span class="keyword">return</span> track</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move_to_gap</span><span class="params">(self, slider, track)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        拖动滑块到缺口处</span></span><br><span class="line"><span class="string">        :param slider: 滑块</span></span><br><span class="line"><span class="string">        :param track: 轨迹</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        ActionChains(self.browser).click_and_hold(slider).perform()</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> track:</span><br><span class="line">            ActionChains(self.browser).move_by_offset(xoffset=x, yoffset=<span class="number">0</span>).perform()</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line">        ActionChains(self.browser).release().perform()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        登录</span></span><br><span class="line"><span class="string">        :return: None</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        submit = self.wait.until(EC.element_to_be_clickable((By.CLASS_NAME, <span class="string">'login-btn'</span>)))</span><br><span class="line">        submit.click()</span><br><span class="line">        time.sleep(<span class="number">10</span>)</span><br><span class="line">        print(<span class="string">'登录成功'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">crack</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 输入用户名密码</span></span><br><span class="line">        self.open()</span><br><span class="line">        <span class="comment"># 点击验证按钮</span></span><br><span class="line">        button = self.get_geetest_button()</span><br><span class="line">        button.click()</span><br><span class="line">        <span class="comment"># 获取验证码图片</span></span><br><span class="line">        image1 = self.get_geetest_image(<span class="string">'captcha1.png'</span>)</span><br><span class="line">        <span class="comment"># 点按呼出缺口</span></span><br><span class="line">        slider = self.get_slider()</span><br><span class="line">        slider.click()</span><br><span class="line">        <span class="comment"># 获取带缺口的验证码图片</span></span><br><span class="line">        image2 = self.get_geetest_image(<span class="string">'captcha2.png'</span>)</span><br><span class="line">        <span class="comment"># 获取缺口位置</span></span><br><span class="line">        gap = self.get_gap(image1, image2)</span><br><span class="line">        print(<span class="string">'缺口位置'</span>, gap)</span><br><span class="line">        <span class="comment"># 减去缺口位移</span></span><br><span class="line">        gap -= BORDER</span><br><span class="line">        <span class="comment"># 获取移动轨迹</span></span><br><span class="line">        track = self.get_track(gap)</span><br><span class="line">        print(<span class="string">'滑动轨迹'</span>, track)</span><br><span class="line">        <span class="comment"># 拖动滑块</span></span><br><span class="line">        self.move_to_gap(slider, track)</span><br><span class="line">        </span><br><span class="line">        success = self.wait.until(</span><br><span class="line">            EC.text_to_be_present_in_element((By.CLASS_NAME, <span class="string">'geetest_success_radar_tip_content'</span>), <span class="string">'验证成功'</span>))</span><br><span class="line">        print(success)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 失败后重试</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> success:</span><br><span class="line">            self.crack()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.login()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    crack = CrackGeetest()</span><br><span class="line">    crack.crack()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 极验滑动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript篇章一：TypeScript基本知识</title>
      <link href="/2019/12/23/TypeScript%E7%AF%87%E7%AB%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2019/12/23/TypeScript%E7%AF%87%E7%AB%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JS作为一门动态弱类型语言,对变量类型非常宽容,使得语言具有极大”灵活性”,同时这也是JS的一种”缺陷”.如果在一年前,可能TypeScript还不是刚需,但按目前的趋势看,不管是对于JS语言本身还是开发者类型思维的塑造,TypeScript已经是开发者的必备技能,ES6,TypeScript等也都是面试中经常会被问到的点.</p><blockquote><p><font size=4 color=#FF0000>本文要点：</font><br>1.TS变量及数据类型<br>2.TS变量声明<br>…</p></blockquote><a id="more"></a><h2 id="1-TS的数据类型"><a href="#1-TS的数据类型" class="headerlink" title="1.TS的数据类型"></a>1.TS的数据类型</h2><p>6种基本数据类型：boolean，number，string，symbol，undefined，null，void，any，never，元组，枚举，高级类型</p><p>3种引用类型：array，function，object</p><h2 id="2-变量声明"><a href="#2-变量声明" class="headerlink" title="2.变量声明"></a>2.变量声明</h2><blockquote><p>1.简单数据类型定义</p></blockquote><p>语法:变量修饰符 变量名/函数:数据类型 = value</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Boolean类型</span></span><br><span class="line"><span class="keyword">let</span> flag:<span class="built_in">boolean</span> =  <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// number数值类型</span></span><br><span class="line"><span class="keyword">let</span> age:<span class="built_in">number</span> = <span class="number">18</span>;</span><br><span class="line"><span class="comment">// string字符串类型</span></span><br><span class="line"><span class="keyword">let</span> username:<span class="built_in">string</span> = <span class="string">"chd"</span>;</span><br></pre></td></tr></table></figure><blockquote><p>2.数组类型</p></blockquote><p>数组定义方法:<br>let array1:Array&lt;number|string|object…&gt;;<br>let array2:number[];<br>let array3:any[];</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// arr:number[]要加一个[]表示一维数组，数组创建方式一：基本数组定义</span></span><br><span class="line"><span class="keyword">var</span> arr1:<span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> arr2:<span class="built_in">string</span>[] = [<span class="string">"chd"</span>,<span class="string">"sgx"</span>,<span class="string">"lmm"</span>];</span><br><span class="line"><span class="comment">// 数组创建方式二：数组泛型定义</span></span><br><span class="line"><span class="keyword">var</span> arr3:<span class="built_in">Array</span>&lt;<span class="built_in">number</span>|<span class="built_in">string</span>|object&gt; =[<span class="string">"蒙"</span>,<span class="number">18</span>,&#123;school:<span class="string">"Tinghua"</span>,height:<span class="number">1.75</span>&#125;];</span><br><span class="line"><span class="comment">// 数组创建方式三：any</span></span><br><span class="line"><span class="keyword">let</span> arr4:<span class="built_in">any</span>[] = [<span class="string">'Xcat Liu'</span>, <span class="number">25</span>, &#123; website: <span class="string">'http://xcatliu.com'</span>, port:<span class="number">3306</span>&#125;];</span><br></pre></td></tr></table></figure><blockquote><p>3.元组类型</p></blockquote><p>元组是一种限制数组的元素类型和个数的数组,此时,如果改变数组的元素类型或添加元素数量,编辑器都会报错:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tuple: [<span class="built_in">number</span>, <span class="built_in">string</span>,object] = [<span class="number">0</span>, <span class="string">'1'</span>, &#123; website: <span class="string">'http://xcatliu.com'</span>, port:<span class="number">3306</span>&#125;]</span><br></pre></td></tr></table></figure><p><font color=#FF0000>元组越界问题:</font><br>虽然元组限制了数组元素的类型和数量,过多的元素声明会报错,但TS允许向元组中使用数组的push方法插入新元素(但不允许访问)</p><blockquote><p>4.函数</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">a:<span class="built_in">number</span>,b:<span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"数值型a:"</span>,a);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"字符串型b:"</span>,b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = fun(<span class="number">18</span>,<span class="string">"hello world"</span>);</span><br></pre></td></tr></table></figure><blockquote><p>5.对象</p></blockquote><p>在JS中，可以任意修改对象属性，但在TS中不允许</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj: object = &#123;x: <span class="string">'a'</span>, y: <span class="string">'b'</span>&#125;;</span><br><span class="line">obj.x = <span class="number">3</span><span class="comment">// Property 'x' does not exist on type 'object'.</span></span><br></pre></td></tr></table></figure><blockquote><p>6.symbol</p></blockquote><p>具有唯一的值，可以显式声明，也可以创建</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> symbol1:Symbol = Symbol();  <span class="comment">// 显示声明</span></span><br><span class="line"><span class="keyword">let</span> symbol2 = Symbol() ; <span class="comment">// 直接创建</span></span><br><span class="line"><span class="comment">// 验证:是否是同一个对象</span></span><br><span class="line"><span class="built_in">console</span>.log(symbol1 === symbol2)    <span class="comment">// fasle</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue(三)：组件与webpack</title>
      <link href="/2019/12/22/Vue(%E4%B8%89)/"/>
      <url>/2019/12/22/Vue(%E4%B8%89)/</url>
      
        <content type="html"><![CDATA[<blockquote><p><font size=4 color=#FF0000>本文要点：</font><br>1.父子组件之间的访问方式<br>2.前端模块化<br>3.webpack</p></blockquote><a id="more"></a><h3 id="1-父子组件之间的访问方式"><a href="#1-父子组件之间的访问方式" class="headerlink" title="1.父子组件之间的访问方式"></a>1.父子组件之间的访问方式</h3><p><a href="https://ahrilove.top/2019/11/08/Vue/">Vue基础知识</a><br>&nbsp;&nbsp;&nbsp;&nbsp;之前我们已经了解到组件的创建方式（三种全局组件创建方式和两种局部组建方式），props属性使用以及接受动态数据和静态数据。那我们今天就要学习一下关于：</p><p>有时候我们需要父组件访问子组件，子组件直接访问父组件，或者是子组件访问跟组件</p><blockquote><p>父组件访问子组件：使用$children或$refs(reference引用之意)</p></blockquote><p>$refs =&gt; 对象类型，默认为空的对象，必须要加ref=”xxxx” ：在组件中使用ref（即<componentName ref="one">，即表示给组件添加唯一的id属性）相当于给标签添加一个id，使得开发者可以知道我们操作的是那个DOM，用来获取DOM元素和组建引用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">ref</span>=<span class="string">"aaa"</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"btnClick('hello woman')"</span> <span class="attr">value</span>=<span class="string">"click"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cpn"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                message:<span class="string">'hello man'</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                btnClick(hi)&#123;</span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(hi);</span></span><br><span class="line">                    /*</span><br><span class="line">                    *调用子组件的name返回值</span><br><span class="line"><span class="actionscript">                    * 经测试：<span class="keyword">this</span>必须添加，否则会出现$refs未定义的报错</span></span><br><span class="line"><span class="actionscript">                    * $refs.aaa.name中的aaa相当于id属性，也必须需要，否则会弹出name未定义的错误<span class="literal">undefined</span></span></span><br><span class="line">                    * */</span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.aaa.name);</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.aaa.num)</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            components:&#123;</span><br><span class="line"><span class="actionscript">                <span class="string">'cpn'</span>:&#123;</span></span><br><span class="line"><span class="actionscript">                   template:<span class="string">'#cpn'</span> ,</span></span><br><span class="line">                   data()&#123;</span><br><span class="line"><span class="actionscript">                       <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                           name:<span class="string">"我是子组件的name"</span>,</span></span><br><span class="line">                           num:18</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;,</span><br><span class="line">                   methods: &#123;</span><br><span class="line">                       showMessage()&#123;</span><br><span class="line"><span class="javascript">                           <span class="built_in">console</span>.log(<span class="string">"showMessage"</span>)</span></span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>子组件访问父组件：使用$parent（不常用）</p></blockquote><h3 id="2-前端模块化方式"><a href="#2-前端模块化方式" class="headerlink" title="2.前端模块化方式"></a>2.前端模块化方式</h3><blockquote><p>2.1 CommonJS的模块化实现,需要nodeJS的支持</p></blockquote><p><a href="https://ahrilove.top/2019/11/23/Javascript%E7%AF%87%E7%AB%A0%E5%9B%9B/">【参考之前的文章】</a></p><blockquote><p>2.2 ES6的模块化实现(可以直接在浏览器上直接运行) </p></blockquote><p>如何实现模块化，在html中需要使用type=’module’属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./aaa.js"</span> <span class="attr">type</span>=<span class="string">"module"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./bbb.js"</span> <span class="attr">type</span>=<span class="string">"module"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时表示aaa.js等是一个单独的模块，此模块是有作用域的。如果要使用aaa.js内的变量，需要在aaa.js中先导出变量，再在需要使用的地方导入变量。</p><p><font size=4 color=#FF0000>2.1 导出方式:这里推荐使用统一导出</font></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// aaa.js</span></span><br><span class="line"><span class="comment">// 这里推荐使用统一导出：</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">22</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(sum(<span class="number">10</span>, <span class="number">20</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.最后统一导出,导出sum函数，flag，age等属性值</span></span><br><span class="line"><span class="keyword">export</span> &#123;flag,sum,age&#125;</span><br></pre></td></tr></table></figure><p><font size=4 color=#FF0000>2.2 导入方式:</font><br>使用import {name,flag,sum} from &#39;./aaa.js&#39;导入多个变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bbb.js导入aaa.js中的sum函数，flag，name等属性值</span></span><br><span class="line"><span class="keyword">import</span> &#123;name,flag,sum&#125; <span class="keyword">from</span> <span class="string">'./aaa.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"小明是天才"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">20</span>,<span class="number">30</span>));</span><br></pre></td></tr></table></figure><p><font size=4 color=#FF0000>2.3 默认导入 export default:有且只有一个export default</font><br>导出：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  flag,sum,age</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导入：注意：使用默认导出会将所有需要导出的变量打包成一个对象，此时导出一个对象，此时我在bbb.js中导入变量时候命名为aaa，如果要调用变量需要使用aaa.变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认导入 export default</span></span><br><span class="line"><span class="keyword">import</span> aaa <span class="keyword">from</span> <span class="string">'./aaa.js'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(aaa.sum(<span class="number">10</span>,<span class="number">110</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用import * as aaa from './aaa.js'统一全部导入</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.统一全部导入</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> aaa <span class="keyword">from</span> <span class="string">'./aaa.js'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(aaa.flag);</span><br><span class="line"><span class="built_in">console</span>.log(aaa.name);</span><br></pre></td></tr></table></figure><h3 id="3-webpack"><a href="#3-webpack" class="headerlink" title="3.webpack"></a>3.webpack</h3><h4 id="3-1-webpack的安装"><a href="#3-1-webpack的安装" class="headerlink" title="3.1 webpack的安装"></a>3.1 webpack的安装</h4><ol><li>webpack依赖node环境。</li><li>node环境依赖众多包，所以需要npm，npm（node packages manager）node包管理工具</li><li>nvm是node管理工具可以自由切换node环境版本</li></ol><h4 id="3-2-webpack起步"><a href="#3-2-webpack起步" class="headerlink" title="3.2 webpack起步"></a>3.2 webpack起步</h4><p><a href="https://github.com/zhangtianyi0110/VueLearnNotes/blob/master/15-webpack/15-webpack.md" target="_blank" rel="noopener">【参考GitHub关于webpack的详细说明，这里不做重复累述】</a> 以及<a href="https://www.bilibili.com/video/av59594689?p=76" target="_blank" rel="noopener">【哔哩哔哩视频】</a></p><h3 id="未完待续。。。"><a href="#未完待续。。。" class="headerlink" title="未完待续。。。"></a>未完待续。。。</h3>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Frame与iFrame标签</title>
      <link href="/2019/12/20/frame%E4%B8%8Eiframe/"/>
      <url>/2019/12/20/frame%E4%B8%8Eiframe/</url>
      
        <content type="html"><![CDATA[<blockquote><p><font size=4 color=#FF0000>本文要点：</font><br>1.Frame 和 IFrame 对象<br>2.frame 和 iframe 的区别<br>3.frame<br>4.iframe</p></blockquote><a id="more"></a><h3 id="1-Frame-和-IFrame-对象"><a href="#1-Frame-和-IFrame-对象" class="headerlink" title="1. Frame 和 IFrame 对象"></a>1. <a href="https://www.cnblogs.com/showcase/p/11162091.html" target="_blank" rel="noopener">Frame 和 IFrame 对象</a></h3><p>其实就是在HTML页面中镶入了一个框架，并且框架可拆分为多个内容区。<br>Frame 对象代表一个 HTML 框架。&lt;frame&gt;标签定义了在框架中一个特定的窗口（框架）。在 HTML 文档中 &lt;frame&gt; 每出现一次，就会创建一个 Frame对象。</p><p>IFrame 对象代表一个 HTML 的内联框架。&lt;iframe&gt; 标签定义了包含另外一个文档的内联框架。在 HTML 文档中 &lt;iframe&gt; 每出现一次，一个 IFrame 对象就会被创建。</p><h3 id="2-frame-和-iframe-的区别"><a href="#2-frame-和-iframe-的区别" class="headerlink" title="2.frame 和 iframe 的区别"></a>2.frame 和 iframe 的区别</h3><p>　1、frame 不能脱离 frameset 单独使用，iframe 可以；</p><p>　2、frame 不能放到body中，否则将无法显示；</p><p>　3、iframe 也可以嵌套在frameset ，但是必须放到body中，不嵌套在frameset 中的iframe 可以随意使用；</p><p>　4、frame 的高度只能通过 frameset 控制，iframe 是自己本身控制，不能通过 frameset 设置；</p><p>　5、iframe 可以放到表格中；</p><h3 id="3-frame"><a href="#3-frame" class="headerlink" title="3.frame"></a>3.frame</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    noresize: 规定无法调整框架的大小</span></span><br><span class="line"><span class="comment">    frameborder: 规定是否显示框架周围的边框 0为无边框 1为有</span></span><br><span class="line"><span class="comment">    marginheight: 定义框架的上方和下方的边距</span></span><br><span class="line"><span class="comment">    marginwidth: 定义框架的左侧和右侧的边距</span></span><br><span class="line"><span class="comment">    noresize: 规定无法调整框架的大小</span></span><br><span class="line"><span class="comment">    scrolling: 规定是否在框架中显示滚动条 yes no auto</span></span><br><span class="line"><span class="comment">    src:      规定在框架中显示的文档的 URL。</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    cols: 定义框架集中列的数目和尺寸</span></span><br><span class="line"><span class="comment">    rows: 定义框架集中行的数目和尺寸</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">frameset</span> <span class="attr">cols</span>=<span class="string">"25%,50%,25%"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"frame_a.htm"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"frame_b.htm"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"frame_c.htm"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-iframe"><a href="#4-iframe" class="headerlink" title="4.iframe"></a>4.iframe</h3><p>126邮箱登陆框就涉及到iframe</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">"x-URS-iframe"</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">           ...</span><br><span class="line">           <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"email"</span> &gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/yangzhengquan19/article/details/83211285" target="_blank" rel="noopener">【iframe标签详解参考文章】</a><br>注：iframe是迫不得已才使用的，因为使用iframe会带来较多的问题，而有的浏览器可以设置将iframe当作广告屏蔽。 </p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python全栈系列章节更新（八）：js逆向爬虫的奇技淫巧</title>
      <link href="/2019/12/19/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0(%E5%85%AB)/"/>
      <url>/2019/12/19/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0(%E5%85%AB)/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;现在的反爬措施越来越复杂，一些常见的反爬措施有Headers and referer反爬机制、语音动作识别、各种变态二维码（12306）、字符js加密、Ajax动态加载、模拟登录和cookie限制。。。</p><blockquote><p>目标网站：<a href="https://mp.weixin.qq.com/" target="_blank" rel="noopener">微信公众平台</a><br>反爬机制：<font color=#d71345>用户名不变，密码加密</font><br>相关技术：selenium，requests，execjs<br>技术难度：<font color=#d71345>★★☆☆☆☆</font><br>爬取目标：模拟登陆公共号，获取页面的所有信息<br>源代码：本页面（selenium代码还在测试更新当中）<br>说明：第一次玩js逆向爬虫，如有不足，多多指教</p></blockquote><a id="more"></a><h3 id="1-分析js，找到目标接口函数"><a href="#1-分析js，找到目标接口函数" class="headerlink" title="1.分析js，找到目标接口函数"></a>1.分析js，找到目标接口函数</h3><p>F12打开 开发者工具, 按照一般逻辑步骤，先输入一个错误账号密码，找到真正的入口接口函数,案例如下：<br><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/D:/data/images20191219154415.png" alt=""></fancybox><br>继续向下翻动，我们可以看到请求参数表单数据的pwd密码是明显经过加密的<br><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/D:/data/images20191219154530.png" alt=""></fancybox></p><h3 id="2-破解"><a href="#2-破解" class="headerlink" title="2.破解"></a>2.破解</h3><p>在Search功能栏下搜索pwd 很快可以定位到以下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">_loginPost: <span class="function"><span class="keyword">function</span>(<span class="params">e, i</span>) </span>&#123;</span><br><span class="line">    n.post(&#123;</span><br><span class="line">        url: i.url,</span><br><span class="line">        data: &#123;</span><br><span class="line">            username: i.account,</span><br><span class="line">            pwd: o(i.pwd.substr(<span class="number">0</span>, <span class="number">16</span>)), <span class="comment">// 关键代码</span></span><br><span class="line">            imgcode: i.verify,</span><br><span class="line">            f: <span class="string">"json"</span>,</span><br><span class="line">            userlang: i.currentLang,</span><br><span class="line">            redire</span><br></pre></td></tr></table></figure><p>我们在pwd: o(i.pwd.substr(0, 16))行处下断点。然后步入进去.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">t.exports = <span class="function"><span class="keyword">function</span>(<span class="params">n, r, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> r ? t ? c(r, n) : <span class="function"><span class="keyword">function</span>(<span class="params">n, r</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> e(c(n, r))</span><br><span class="line">    &#125;(r, n) : t ? o(n) : <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> e(o(n)) <span class="comment">// *****</span></span><br><span class="line">    &#125;(n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续步入一次，代码最后会走到我标****的地方。这就是我们需要的关键函数,扣代码吧。</p><p>扣下代码。然后自己编写一个Js function</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">JsKiller</span>(<span class="params">pwd</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> e(o(pwd));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>js逆向加密源代码：pwd.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params">n, r</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> t = (<span class="number">65535</span> &amp; n) + (<span class="number">65535</span> &amp; r);</span><br><span class="line">    <span class="keyword">return</span> (n &gt;&gt; <span class="number">16</span>) + (r &gt;&gt; <span class="number">16</span>) + (t &gt;&gt; <span class="number">16</span>) &lt;&lt; <span class="number">16</span> | <span class="number">65535</span> &amp; t</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">n, r, t, e, u, o</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> d(<span class="function"><span class="keyword">function</span> (<span class="params">n, r</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n &lt;&lt; r | n &gt;&gt;&gt; <span class="number">32</span> - r</span><br><span class="line">    &#125;(d(d(r, n), d(e, o)), u), t)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params">n, r, t, e, u, o, c</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f(r &amp; t | ~r &amp; e, n, r, u, o, c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">l</span>(<span class="params">n, r, t, e, u, o, c</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f(r &amp; e | t &amp; ~e, n, r, u, o, c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">v</span>(<span class="params">n, r, t, e, u, o, c</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f(r ^ t ^ e, n, r, u, o, c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params">n, r, t, e, u, o, c</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f(t ^ (r | ~e), n, r, u, o, c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">n, r</span>) </span>&#123;</span><br><span class="line">    n[r &gt;&gt; <span class="number">5</span>] |= <span class="number">128</span> &lt;&lt; r % <span class="number">32</span>;</span><br><span class="line">        n[<span class="number">14</span> + (r + <span class="number">64</span> &gt;&gt;&gt; <span class="number">9</span> &lt;&lt; <span class="number">4</span>)] = r;</span><br><span class="line">    <span class="keyword">var</span> t, e, u, o, c, f = <span class="number">1732584193</span>, i = <span class="number">-271733879</span>, a = <span class="number">-1732584194</span>, h = <span class="number">271733878</span>;</span><br><span class="line">    <span class="keyword">for</span> (t = <span class="number">0</span>; t &lt; n.length; t += <span class="number">16</span>)</span><br><span class="line">        i = s(i = s(i = s(i = s(i = v(i = v(i = v(i = v(i = l(i = l(i = l(i = l(i = g(i = g(i = g(i = g(u = i, a = g(o = a, h = g(c = h, f = g(e = f, i, a, h, n[t], <span class="number">7</span>, <span class="number">-680876936</span>), i, a, n[t + <span class="number">1</span>], <span class="number">12</span>, <span class="number">-389564586</span>), f, i, n[t + <span class="number">2</span>], <span class="number">17</span>, <span class="number">606105819</span>), h, f, n[t + <span class="number">3</span>], <span class="number">22</span>, <span class="number">-1044525330</span>), a = g(a, h = g(h, f = g(f, i, a, h, n[t + <span class="number">4</span>], <span class="number">7</span>, <span class="number">-176418897</span>), i, a, n[t + <span class="number">5</span>], <span class="number">12</span>, <span class="number">1200080426</span>), f, i, n[t + <span class="number">6</span>], <span class="number">17</span>, <span class="number">-1473231341</span>), h, f, n[t + <span class="number">7</span>], <span class="number">22</span>, <span class="number">-45705983</span>), a = g(a, h = g(h, f = g(f, i, a, h, n[t + <span class="number">8</span>], <span class="number">7</span>, <span class="number">1770035416</span>), i, a, n[t + <span class="number">9</span>], <span class="number">12</span>, <span class="number">-1958414417</span>), f, i, n[t + <span class="number">10</span>], <span class="number">17</span>, <span class="number">-42063</span>), h, f, n[t + <span class="number">11</span>], <span class="number">22</span>, <span class="number">-1990404162</span>), a = g(a, h = g(h, f = g(f, i, a, h, n[t + <span class="number">12</span>], <span class="number">7</span>, <span class="number">1804603682</span>), i, a, n[t + <span class="number">13</span>], <span class="number">12</span>, <span class="number">-40341101</span>), f, i, n[t + <span class="number">14</span>], <span class="number">17</span>, <span class="number">-1502002290</span>), h, f, n[t + <span class="number">15</span>], <span class="number">22</span>, <span class="number">1236535329</span>), a = l(a, h = l(h, f = l(f, i, a, h, n[t + <span class="number">1</span>], <span class="number">5</span>, <span class="number">-165796510</span>), i, a, n[t + <span class="number">6</span>], <span class="number">9</span>, <span class="number">-1069501632</span>), f, i, n[t + <span class="number">11</span>], <span class="number">14</span>, <span class="number">643717713</span>), h, f, n[t], <span class="number">20</span>, <span class="number">-373897302</span>), a = l(a, h = l(h, f = l(f, i, a, h, n[t + <span class="number">5</span>], <span class="number">5</span>, <span class="number">-701558691</span>), i, a, n[t + <span class="number">10</span>], <span class="number">9</span>, <span class="number">38016083</span>), f, i, n[t + <span class="number">15</span>], <span class="number">14</span>, <span class="number">-660478335</span>), h, f, n[t + <span class="number">4</span>], <span class="number">20</span>, <span class="number">-405537848</span>), a = l(a, h = l(h, f = l(f, i, a, h, n[t + <span class="number">9</span>], <span class="number">5</span>, <span class="number">568446438</span>), i, a, n[t + <span class="number">14</span>], <span class="number">9</span>, <span class="number">-1019803690</span>), f, i, n[t + <span class="number">3</span>], <span class="number">14</span>, <span class="number">-187363961</span>), h, f, n[t + <span class="number">8</span>], <span class="number">20</span>, <span class="number">1163531501</span>), a = l(a, h = l(h, f = l(f, i, a, h, n[t + <span class="number">13</span>], <span class="number">5</span>, <span class="number">-1444681467</span>), i, a, n[t + <span class="number">2</span>], <span class="number">9</span>, <span class="number">-51403784</span>), f, i, n[t + <span class="number">7</span>], <span class="number">14</span>, <span class="number">1735328473</span>), h, f, n[t + <span class="number">12</span>], <span class="number">20</span>, <span class="number">-1926607734</span>), a = v(a, h = v(h, f = v(f, i, a, h, n[t + <span class="number">5</span>], <span class="number">4</span>, <span class="number">-378558</span>), i, a, n[t + <span class="number">8</span>], <span class="number">11</span>, <span class="number">-2022574463</span>), f, i, n[t + <span class="number">11</span>], <span class="number">16</span>, <span class="number">1839030562</span>), h, f, n[t + <span class="number">14</span>], <span class="number">23</span>, <span class="number">-35309556</span>), a = v(a, h = v(h, f = v(f, i, a, h, n[t + <span class="number">1</span>], <span class="number">4</span>, <span class="number">-1530992060</span>), i, a, n[t + <span class="number">4</span>], <span class="number">11</span>, <span class="number">1272893353</span>), f, i, n[t + <span class="number">7</span>], <span class="number">16</span>, <span class="number">-155497632</span>), h, f, n[t + <span class="number">10</span>], <span class="number">23</span>, <span class="number">-1094730640</span>), a = v(a, h = v(h, f = v(f, i, a, h, n[t + <span class="number">13</span>], <span class="number">4</span>, <span class="number">681279174</span>), i, a, n[t], <span class="number">11</span>, <span class="number">-358537222</span>), f, i, n[t + <span class="number">3</span>], <span class="number">16</span>, <span class="number">-722521979</span>), h, f, n[t + <span class="number">6</span>], <span class="number">23</span>, <span class="number">76029189</span>), a = v(a, h = v(h, f = v(f, i, a, h, n[t + <span class="number">9</span>], <span class="number">4</span>, <span class="number">-640364487</span>), i, a, n[t + <span class="number">12</span>], <span class="number">11</span>, <span class="number">-421815835</span>), f, i, n[t + <span class="number">15</span>], <span class="number">16</span>, <span class="number">530742520</span>), h, f, n[t + <span class="number">2</span>], <span class="number">23</span>, <span class="number">-995338651</span>), a = s(a, h = s(h, f = s(f, i, a, h, n[t], <span class="number">6</span>, <span class="number">-198630844</span>), i, a, n[t + <span class="number">7</span>], <span class="number">10</span>, <span class="number">1126891415</span>), f, i, n[t + <span class="number">14</span>], <span class="number">15</span>, <span class="number">-1416354905</span>), h, f, n[t + <span class="number">5</span>], <span class="number">21</span>, <span class="number">-57434055</span>), a = s(a, h = s(h, f = s(f, i, a, h, n[t + <span class="number">12</span>], <span class="number">6</span>, <span class="number">1700485571</span>), i, a, n[t + <span class="number">3</span>], <span class="number">10</span>, <span class="number">-1894986606</span>), f, i, n[t + <span class="number">10</span>], <span class="number">15</span>, <span class="number">-1051523</span>), h, f, n[t + <span class="number">1</span>], <span class="number">21</span>, <span class="number">-2054922799</span>), a = s(a, h = s(h, f = s(f, i, a, h, n[t + <span class="number">8</span>], <span class="number">6</span>, <span class="number">1873313359</span>), i, a, n[t + <span class="number">15</span>], <span class="number">10</span>, <span class="number">-30611744</span>), f, i, n[t + <span class="number">6</span>], <span class="number">15</span>, <span class="number">-1560198380</span>), h, f, n[t + <span class="number">13</span>], <span class="number">21</span>, <span class="number">1309151649</span>), a = s(a, h = s(h, f = s(f, i, a, h, n[t + <span class="number">4</span>], <span class="number">6</span>, <span class="number">-145523070</span>), i, a, n[t + <span class="number">11</span>], <span class="number">10</span>, <span class="number">-1120210379</span>), f, i, n[t + <span class="number">2</span>], <span class="number">15</span>, <span class="number">718787259</span>), h, f, n[t + <span class="number">9</span>], <span class="number">21</span>, <span class="number">-343485551</span>),</span><br><span class="line">            f = d(f, e);</span><br><span class="line">            i = d(i, u);</span><br><span class="line">            a = d(a, o);</span><br><span class="line">            h = d(h, c);</span><br><span class="line">    <span class="keyword">return</span> [f, i, a, h]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> r, t = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (r = <span class="number">0</span>; r &lt; <span class="number">32</span> * n.length; r += <span class="number">8</span>)</span><br><span class="line">        t += <span class="built_in">String</span>.fromCharCode(n[r &gt;&gt; <span class="number">5</span>] &gt;&gt;&gt; r % <span class="number">32</span> &amp; <span class="number">255</span>);</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">h</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> r, t = [];</span><br><span class="line">    <span class="keyword">for</span> (t[(n.length &gt;&gt; <span class="number">2</span>) - <span class="number">1</span>] = <span class="keyword">void</span> <span class="number">0</span>,</span><br><span class="line">             r = <span class="number">0</span>; r &lt; t.length; r += <span class="number">1</span>)</span><br><span class="line">        t[r] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (r = <span class="number">0</span>; r &lt; <span class="number">8</span> * n.length; r += <span class="number">8</span>)</span><br><span class="line">        t[r &gt;&gt; <span class="number">5</span>] |= (<span class="number">255</span> &amp; n.charCodeAt(r / <span class="number">8</span>)) &lt;&lt; r % <span class="number">32</span>;</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> r, t, e = <span class="string">"0123456789abcdef"</span>, u = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (t = <span class="number">0</span>; t &lt; n.length; t += <span class="number">1</span>)</span><br><span class="line">        r = n.charCodeAt(t);</span><br><span class="line">            u += e.charAt(r &gt;&gt;&gt; <span class="number">4</span> &amp; <span class="number">15</span>) + e.charAt(<span class="number">15</span> &amp; r);</span><br><span class="line">    <span class="keyword">return</span> u</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">u</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">unescape</span>(<span class="built_in">encodeURIComponent</span>(n))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a(i(h(n), <span class="number">8</span> * n.length))</span><br><span class="line">    &#125;(u(n))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">n, r</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">n, r</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> t, e, u = h(n), o = [], c = [];</span><br><span class="line">        <span class="keyword">for</span> (o[<span class="number">15</span>] = c[<span class="number">15</span>] = <span class="keyword">void</span> <span class="number">0</span>,</span><br><span class="line">             <span class="number">16</span> &lt; u.length &amp;&amp; (u = i(u, <span class="number">8</span> * n.length)),</span><br><span class="line">                 t = <span class="number">0</span>; t &lt; <span class="number">16</span>; t += <span class="number">1</span>)</span><br><span class="line">            o[t] = <span class="number">909522486</span> ^ u[t];</span><br><span class="line">                c[t] = <span class="number">1549556828</span> ^ u[t];</span><br><span class="line">        <span class="keyword">return</span> e = i(o.concat(h(r)), <span class="number">512</span> + <span class="number">8</span> * r.length);</span><br><span class="line">            a(i(c.concat(e), <span class="number">640</span>))</span><br><span class="line">    &#125;(u(n), u(r))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">JsKiller</span>(<span class="params">pwd</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> e(o(pwd))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-执行破解出的js"><a href="#3-执行破解出的js" class="headerlink" title="3.执行破解出的js"></a>3.执行破解出的js</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseJS</span><span class="params">(pwd)</span>:</span></span><br><span class="line">    <span class="comment"># 读取pwd.js文件内容</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"pwd.js"</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        js_code = f.read()</span><br><span class="line">    <span class="comment"># 编译js函数</span></span><br><span class="line">    ctx = execjs.compile(js_code)</span><br><span class="line">    <span class="comment"># 执行js中的JsKiller函数，参数为pwd</span></span><br><span class="line">    result = ctx.call(<span class="string">'JsKiller'</span>, pwd)</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>比如我们来执行一下这个python代码，测试一下结果：令pwd=”Github”<br> ctx.call(‘JsKiller’, pwd) ==&gt; &quot;e1adbcbb92c622d0b3e619f9d0730abf”,即将GitHub加密成32位。</p><h3 id="4-模拟登陆"><a href="#4-模拟登陆" class="headerlink" title="4.模拟登陆"></a>4.模拟登陆</h3><p> 这里直接列出来模拟登录的源代码，这里需要注意一定要加referer<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"https://mp.weixin.qq.com/cgi-bin/bizlogin?action=startlogin"</span>  <span class="comment"># 这就是真正的入口url</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_content</span><span class="params">(username, pwd)</span>:</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">"referer"</span>: <span class="string">"https://mp.weixin.qq.com/"</span>,  <span class="comment"># 必须要写</span></span><br><span class="line">        <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36"</span></span><br><span class="line">    &#125;</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">"username"</span>: username,</span><br><span class="line">        <span class="string">"pwd"</span>: pwd,</span><br><span class="line">        <span class="string">"f"</span>: <span class="string">"json"</span>,</span><br><span class="line">        <span class="string">"imgcode"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"userlang"</span>: <span class="string">"zh_CN"</span>,</span><br><span class="line">        <span class="string">"lang"</span>: <span class="string">"zh_CN"</span>,</span><br><span class="line">        <span class="string">"ajax"</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.post(url=url, headers=headers, data=data, timeout=<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">if</span> (response.status_code == <span class="number">200</span>):</span><br><span class="line">            <span class="keyword">return</span> response.text</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseJS</span><span class="params">(pwd)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"pwd.js"</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        js_code = f.read()</span><br><span class="line"></span><br><span class="line">    ctx = execjs.compile(js_code)</span><br><span class="line">    result = ctx.call(<span class="string">'JsKiller'</span>, pwd)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    username = <span class="string">"980710425@qq.com"</span></span><br><span class="line">    pwd = <span class="string">"XXXXXXXX"</span></span><br><span class="line">    pwd = parseJS(pwd)</span><br><span class="line">    print(get_content(username, pwd))</span><br></pre></td></tr></table></figure></p><h3 id="5-结果分析"><a href="#5-结果分析" class="headerlink" title="5.结果分析"></a>5.结果分析</h3><p>得到返回结果：这里返回了一个json格式数据，并且我们可以得知，这里其实是重定向到了这个新的URL地址</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"base_resp"</span>:&#123;</span><br><span class="line">      <span class="attr">"err_msg"</span>:<span class="string">"ok"</span>,</span><br><span class="line">      <span class="attr">"ret"</span>:<span class="number">0</span>&#125;,</span><br><span class="line">  <span class="attr">"redirect_url"</span>:<span class="string">"/cgi-bin/bizlogin?action=validate&amp;lang=zh_CN&amp;account=980710425%40qq.com"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <a href="https://mp.weixin.qq.com/cgi-bin/bizlogin?action=validate&amp;lang=zh_CN&amp;account=980710425%40qq.com" target="_blank" rel="noopener">https://mp.weixin.qq.com/cgi-bin/bizlogin?action=validate&amp;lang=zh_CN&amp;account=980710425%40qq.com</a><br><font color=#00ced1>这个链接其实是需要微信扫码登陆认证的链接，我也不知道怎么去绕过这个扫码认证，如果有大神巨佬知道，请带带我。我的笨办法是通过selenium自动化测试，还是不可避免要扫码，然后扫码登陆，获取目标数据</font></p><h3 id="未完待续。。。"><a href="#未完待续。。。" class="headerlink" title="未完待续。。。"></a>未完待续。。。</h3>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript篇章五：常见函数和属性</title>
      <link href="/2019/12/18/Javascript%E7%AF%87%E7%AB%A0%E4%BA%94/"/>
      <url>/2019/12/18/Javascript%E7%AF%87%E7%AB%A0%E4%BA%94/</url>
      
        <content type="html"><![CDATA[<blockquote><p>1.isFinite()函数<br>2.jQuery中的$.inArray()<br>3.Math(算术对象)<br>4.数据类型判断<br>5.arguments参数属性</p></blockquote><a id="more"></a><h3 id="1-isFinite-函数"><a href="#1-isFinite-函数" class="headerlink" title="1.isFinite()函数"></a>1.isFinite()函数</h3><p>isFinite() 函数用于检查其参数是否是无穷大。（如果 number 是 NaN（非数字），或者是正、负无穷大的数，则返回 false。）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="built_in">isFinite</span>(<span class="number">123</span>)+ <span class="string">"&lt;br&gt;"</span>);   <span class="comment">//true</span></span><br><span class="line"><span class="built_in">document</span>.write(<span class="built_in">isFinite</span>(<span class="number">-1.23</span>)+ <span class="string">"&lt;br&gt;"</span>);    <span class="comment">// true</span></span><br><span class="line"><span class="built_in">document</span>.write(<span class="built_in">isFinite</span>(<span class="number">5</span><span class="number">-2</span>)+ <span class="string">"&lt;br&gt;"</span>);      <span class="comment">// true</span></span><br><span class="line"><span class="built_in">document</span>.write(<span class="built_in">isFinite</span>(<span class="number">0</span>)+ <span class="string">"&lt;br&gt;"</span>);        <span class="comment">// true</span></span><br><span class="line"><span class="built_in">document</span>.write(<span class="built_in">isFinite</span>(<span class="string">"Hello"</span>)+ <span class="string">"&lt;br&gt;"</span>);  <span class="comment">// false</span></span><br><span class="line"><span class="built_in">document</span>.write(<span class="built_in">isFinite</span>(<span class="string">"2005/12/12"</span>)+ <span class="string">"&lt;br&gt;"</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="2-jQuery中的-inArray（）"><a href="#2-jQuery中的-inArray（）" class="headerlink" title="2.jQuery中的$.inArray（）"></a>2.jQuery中的$.inArray（）</h3><p>$.inArray( value, array)判断参数值是否存在数组中，并返回索引值（默认从0开始）如果不存在就返回-1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">var</span> arr = [ <span class="number">4</span>, <span class="string">"Pete"</span>, <span class="number">8</span>, <span class="string">"John"</span> ];</span><br><span class="line">    <span class="keyword">var</span> $spans = $( <span class="string">"span"</span> );</span><br><span class="line">    $spans.eq( <span class="number">0</span> ).text( jQuery.inArray( <span class="string">"John"</span>, arr ) );</span><br><span class="line">    $spans.eq( <span class="number">1</span> ).text( jQuery.inArray( <span class="number">4</span>, arr ) );</span><br><span class="line">    $spans.eq( <span class="number">2</span> ).text( jQuery.inArray( <span class="string">"Karl"</span>, arr ) );</span><br><span class="line">    $spans.eq( <span class="number">3</span> ).text( jQuery.inArray( <span class="string">"Pete"</span>, arr, <span class="number">2</span> ) );</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-Math-算术对象"><a href="#3-Math-算术对象" class="headerlink" title="3.Math(算术对象)"></a>3.Math(算术对象)</h3><p>Math对象，提供科学数学计算，也同样具有属性与方法，案例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> mypi = <span class="built_in">Math</span>.PI;</span><br><span class="line">    <span class="keyword">let</span> myabs = <span class="built_in">Math</span>.abs(<span class="number">-15.88963</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(mypi);</span><br><span class="line">    <span class="built_in">console</span>.log(myabs);    </span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"kajima"</span>).innerHTML=mypi;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"bady"</span>).innerHTML=myabs;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Math对象属性</p></blockquote><p><fancybox><img src="http://img.mukewang.com/532fe7cf0001e7b505170269.jpg" alt=""></fancybox></p><blockquote><p>Math 对象方法</p></blockquote><p><fancybox><img src="http://img.mukewang.com/532fe841000174db05160622.jpg" alt=""></fancybox></p><h3 id="4-数据类型判断"><a href="#4-数据类型判断" class="headerlink" title="4.数据类型判断"></a>4.数据类型判断</h3><p>PS:typeof无法判断数组，null和对象，因为他会把这些都判断为Object，其余都可以正常判断。<br>最完美的检测数组类型的方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArrayFn</span> (<span class="params">o</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o) === <span class="string">'[object Array]'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>];</span><br><span class="line">alert(isArrayFn(arr));<span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>其实这个函数可以改进一下，使得同样能够判断其它数据类型：数组，null，function，String，object等等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArrayFn</span> (<span class="params">o</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>实例</th><th align="center">测试结果</th></tr></thead><tbody><tr><td>[1,2,3,1]</td><td align="center">[object Array]</td></tr><tr><td>{a:”chenhaodong”,age:18}</td><td align="center">[object Object]</td></tr><tr><td>function a(){return null}</td><td align="center">[object Function]</td></tr><tr><td>“hello world”</td><td align="center">[object String]</td></tr><tr><td>null</td><td align="center">[object Null]</td></tr></tbody></table><h3 id="5-arguments参数属性"><a href="#5-arguments参数属性" class="headerlink" title="5.arguments参数属性"></a>5.arguments参数属性</h3><p>arguments.length 属性返回函数调用过程接收到的参数个数<br>arguments[0]:获取传入的第一个参数值<br>arguments[1]:获取传入的第二个参数值</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue(二)：生命周期函数</title>
      <link href="/2019/12/17/Vue(%E4%BA%8C)/"/>
      <url>/2019/12/17/Vue(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<blockquote><p><font size=4 color=#FF0000>本文要点：</font><br>1.生命周期函数<br>2.Watch方法<br>3.计算属性computed</p></blockquote><a id="more"></a><h3 id="1-生命周期函数（与el，data，methods，computed等等同级）"><a href="#1-生命周期函数（与el，data，methods，computed等等同级）" class="headerlink" title="1.生命周期函数（与el，data，methods，computed等等同级）"></a>1.生命周期函数（与el，data，methods，computed等等同级）</h3><blockquote><p>创建阶段</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.beforeCreate():表示实例完全被创建时，会执行它</span><br><span class="line">    /ps：在beforCreate生命周期函数执行时，data和methods中的数据均未被初始化</span><br><span class="line"></span><br><span class="line">2.created():在created中，data与methods都已经被实例化了，</span><br><span class="line"></span><br><span class="line">3.beforeMount(): 表示模板已经在内存中编译好了，只是未渲染到真正要展示的页面上</span><br><span class="line"></span><br><span class="line">4.mounted():是实例创建期间最后一个生命周期函数，当执行完mounted就表示，实例已经完全创建好了，</span><br><span class="line">            此时，如果没有其它操作的话，这个实例就静静地躺在内存中</span><br></pre></td></tr></table></figure><blockquote><p>组件运行阶段：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.beforeUpdate(): 表示我们的界面还没有更新，但数据肯定被更新了 </span><br><span class="line">        结论：运行beforeUpdate，页面上显示的数据还没有被更新，但数据已经更新了，页面与数据更新不同步</span><br><span class="line"></span><br><span class="line">2.updated():页面都data数据已经保持同步了，都是最新的</span><br></pre></td></tr></table></figure><blockquote><p>销毁过程</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.beforeDestroy：Vue示例已经从运行阶段，进入到销毁阶段，实例身上的所有data，methods以及过滤器，指令都处于可用状态，未执行真正的销毁动作</span><br><span class="line"></span><br><span class="line">2.destroyed：组件已经完全销毁了，一切data，方法，指令，过滤器均不可使用</span><br></pre></td></tr></table></figure><h3 id="2-Watch属性"><a href="#2-Watch属性" class="headerlink" title="2.Watch属性"></a>2.Watch属性</h3><p>Watch，可以监听data属性域中的数据变化，主要有handler方法，immediate属性，deep属性<br>handler方法就是你watch中需要具体执行的方法；<br>immediate为true时则立即触发回调函数；如果为false，则和上面的例子一样，不会立即执行回调<br>deep顾名思义就是深入监听，也就是在对象中层层遍历，并在监听对象上的每一个属性上都添加监听，固然也会损耗性能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">    orgBarChartData: &#123;      <span class="comment">//  监听的目标属性</span></span><br><span class="line">        handler(newVal,oldVal)&#123;</span><br><span class="line">            <span class="keyword">this</span>.renderOrgBarChart();       <span class="comment">//重设图表，这两个都是动作体</span></span><br><span class="line">            <span class="keyword">this</span>.orgBarChart.resize();     <span class="comment">//重新设置图表高宽</span></span><br><span class="line">        &#125;,</span><br><span class="line">        deep: <span class="literal">true</span>  <span class="comment">// deep:true </span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-methods与computed的区别："><a href="#3-methods与computed的区别：" class="headerlink" title="3.methods与computed的区别："></a>3.methods与computed的区别：</h3><blockquote><p>computed 和 methods虽然都可以实现对数据的计算,但两者有一定的区别:</p></blockquote><p> methods:使用methods方法可以接受外部传参,使用更加灵活；computed:计算属性，computed的亮点在于:它能够依赖缓存，当计算属性所依赖的数据发生改变时，才会重新触发计算属性方法执行。所以对于较复杂或消耗效率的计算,一定要采用计算属性。<br>计算属性computed里面也可以写函数，并且调用函数时使用的mustache语法不用加括号，案例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;!--这里的mustache语法调用函数时没有声明括号---&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;fullName&#125;&#125;&lt;<span class="regexp">/p&gt;  </span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;script &gt;</span><br><span class="line">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">'#app'</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            firstName:<span class="string">"浩东"</span>,</span><br><span class="line">            lastName:<span class="string">"陈"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        computed:&#123;</span><br><span class="line">            fullname () &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">this</span>.lastName+<span class="keyword">this</span>.firstName;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>使用methods的方法,每次页面刷新都会触发方法的执行，使用计算属性,只要依赖的数据没有变化,就会直接从缓存中读取结果,不需要重新计算,这种做法可以提升效率更可以带来更好的用户体验</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThinkPHP项目（三）：常见函数和属性</title>
      <link href="/2019/12/16/ThinkPHP(%E4%B8%89)/"/>
      <url>/2019/12/16/ThinkPHP(%E4%B8%89)/</url>
      
        <content type="html"><![CDATA[<p>还是紧接前面的知识展开，本章节列举出遇到的一些项目相关函数与属性</p><blockquote><p>1.条件判断以及prompt() 方法<br>2.循环<br>3.Map与Reduce<br>4.全局作用域与浏览器对象<br>5.高阶函数与操作表单</p></blockquote><a id="more"></a><h3 id="1-is-array-search-value-array-type"><a href="#1-is-array-search-value-array-type" class="headerlink" title="1. is_array(search_value,array,type)"></a>1. is_array(search_value,array,type)</h3><p>in_array() 函数搜索数组中是否存在指定的值。type是可选的，如果设置该参数为true，则又要检查搜索的数据与数组的值的类型是否相同</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">    $people = <span class="keyword">array</span>(<span class="string">"Bill"</span>, <span class="string">"Steve"</span>, <span class="string">"Mark"</span>, <span class="string">"David"</span>);</span></span><br><span class="line"><span class="php">    </span></span><br><span class="line"><span class="php">    <span class="keyword">if</span> (in_array(<span class="string">"Mark"</span>, $people))&#123;</span></span><br><span class="line"><span class="php">      <span class="keyword">echo</span> <span class="string">"匹配已找到"</span>;&#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="php">      <span class="keyword">echo</span> <span class="string">"匹配未找到"</span>;&#125;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ThinkPHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> thinkPHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析章节（一）：初始数学之美</title>
      <link href="/2019/12/15/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%AB%A0%E8%8A%82%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2019/12/15/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%AB%A0%E8%8A%82%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数学是一门美丽的学科，是美丽的，也充满悲剧的！</p><blockquote><p><font size=4 color=#FF0000>本文要点：</font><br>直角坐标系与极坐标方程<br>科学运算基本三大库Matplotlib，Numpy，Pandas<br>一个浪漫又悲情的爱情故事——笛卡尔心形线<br>执子之魂，与子共生——玫瑰线<br>给我一个支点——阿基米德螺线</p></blockquote><a id="more"></a><h2 id="1-直角坐标与极坐标方程"><a href="#1-直角坐标与极坐标方程" class="headerlink" title="1.直角坐标与极坐标方程"></a>1.直角坐标与极坐标方程</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比较直角坐标系方程y=x，它表示平面上的一条线，而极坐标方程ρ=θ表示螺线。用极坐标系描述的曲线方程称作极坐标方程，通常用来表示ρ为自变量θ的函数(ρ,θ)=0。</p><blockquote><p>两坐标系之间的转换</p></blockquote><p>极坐标系中的两个坐标r和θ可以由下面的公式转换为直角坐标系下的坐标值。<br>x = rcos（θ），<br>y = rsin（θ），<br>由上述二公式，可得到从直角坐标系中x和y两坐标如何计算出极坐标下的坐标：<br><fancybox><img src="https://gss0.bdstatic.com/94o3dSag_xI4khGkpoWK1HF6hhy/baike/pic/item/a2cc7cd98d1001e9b122d01bba0e7bec54e7978c.jpg" alt=""></fancybox>角度θ = arctan(y/x)<br>总结如下：</p><p><fancybox><img src="https://gss0.baidu.com/9fo3dSag_xI4khGko9WTAnF6hhy/zhidao/wh%3D600%2C800/sign=70d3a907c095d143da23ec2543c0ae3a/9d82d158ccbf6c81b27e69ecb43eb13533fa406c.jpg" alt=""></fancybox></p><h2 id="2-科学运算三大基本库"><a href="#2-科学运算三大基本库" class="headerlink" title="2.科学运算三大基本库"></a>2.科学运算三大基本库</h2><p><a href="https://github.com/FioraLove/Deep-learning-Best-AI/tree/Dev" target="_blank" rel="noopener">基本知识点参考我的GitHub</a><br>补充一点：PYTHON使用MATPLOTLIB绘图时出现的中文乱码问题,设置代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'SimHei'</span>]  <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="literal">False</span>  <span class="comment"># 用来正常显示负号</span></span><br></pre></td></tr></table></figure><h2 id="3-一个浪漫又悲情的爱情故事——笛卡尔心形线"><a href="#3-一个浪漫又悲情的爱情故事——笛卡尔心形线" class="headerlink" title="3.一个浪漫又悲情的爱情故事——笛卡尔心形线"></a>3.一个浪漫又悲情的爱情故事——笛卡尔心形线</h2><p><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/D:/data/imagesaa.gif" alt=""></fancybox><br><a href="https://blog.csdn.net/qq_35379989/article/details/89707176" target="_blank" rel="noopener">【转载】</a><br>1650年，斯德哥尔摩的街头，52岁的笛卡尔邂逅了18岁的瑞典公主克里斯汀。<br><fancybox><img src="https://img-blog.csdnimg.cn/2019043012470316.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1Mzc5OTg5,size_16,color_FFFFFF,t_70" alt=""></fancybox></p><p>那时，落魄、一文不名的笛卡尔过着乞讨的生活，全部的财产只有身上穿的破破烂烂的衣服和随身所带的几本数学书籍。生性清高的笛卡尔从来不开口请求路人施舍，他只是默默地低头在纸上写写画画，潜心于他的数学世界。</p><p>一个宁静的午后，笛卡尔照例坐在街头，沐浴在阳光中研究数学问题。他如此沉溺于数学世界，身边过往的人群，喧闹的车马队伍。都无法对他造成干扰。 </p><p>突然，有人来到他旁边，拍了拍他的肩膀，“你在干什么呢？”扭过头，笛卡尔看到一张年轻秀丽的睑庞，一双清澈的眼睛如湛蓝的湖水，楚楚动人，长长的睫毛一眨一眨的，期待着他的回应。她就是瑞典的小公主，国王最宠爱的女儿克里斯汀。</p><p>她蹲下身，拿过笛卡尔的数学书和草稿纸，和他交谈起来。言谈中，他发现，这个小女孩思维敏捷，对数学有着浓厚的兴趣。</p><p>和女孩道别后，笛卡尔渐渐忘却了这件事，依旧每天坐在街头写写画画。</p><p>几天后，他意外地接到通知，国王聘请他做小公主的数学老师。满心疑惑的笛卡尔跟随前来通知的侍卫一起来到皇宫，在会客厅等候的时候，他听到了从远处传来的银铃般的笑声。转过身，他看到了前儿天在街头偶遇的女孩子。慌忙中，他赶紧低头行礼。</p><p>从此，他当上了公主的数学老师。</p><p>公主的数学在笛卡尔的悉心指导下突飞猛进，他们之间也开始变得亲密起来。笛卡尔向她介绍了他研究的新领域——直角坐标系。通过它，代数与几何可以结合起来，也就是日后笛卡尔创立的解析几何学的雏形。</p><p>在笛卡尔的带领下，克里斯汀走进了奇妙的坐标世界，她对曲线着了迷。每天的形影不离也使他们彼此产生了爱慕之心。</p><p>在瑞典这个浪漫的国度里，一段纯粹、美好的爱情悄然萌发。</p><p>然而，没过多久，他们的恋情传到了国王的耳朵里。国王大怒，下令马上将笛卡尔处死。在克里斯汀的苦苦哀求下，国王将他放逐回国，公主被软禁在宫中。</p><p>当时，欧洲大陆正在流行黑死病。身体孱弱的笛卡尔回到法国后不久，便染上重病。在生命进入倒计时的那段日子，他日夜思念的还是街头偶遇的那张温暖的笑脸。他每天坚持给她写信，盼望着她的回音。然而，这些信都被国王拦截下来，公主一直没有收到他的任何消息。</p><p>在笛卡尔给克里斯汀寄出第十三封信后，他永远地离开了这个世界。此时，被软禁在宫中的小公主依然徘徊在皇宫的走廊里，思念着远方的情人。</p><p>这最后一封信上没有写一句话，只有一个方程：<font color=#009ad6>r=a(1-sinθ)</font>。</p><p>国王看不懂，以为这个方程里隐藏着两个人不可告人的秘密，便把全城的数学家召集到皇宫，但是没有人能解开这个函数式。他不忍看着心爱的女儿每天闷闷不乐，便把这封信给了她。</p><p>拿到信的克里斯汀欣喜若狂，她立即明白了恋人的意图，找来纸和笔，着手把方程图形画了出来，一颗心形图案出现在眼前，克里斯汀不禁流下感动的泪水，这条曲线就是著名的“心形线”。</p><p>国王去世后，克里斯汀继承王位，登基后，她便立刻派人去法国寻找心上人的下落，收到的却是笛卡尔去世的消息，留下了一个永远的遗憾……</p><p>这封享誉世界的另类情书，至今，还保存在欧洲笛卡尔的纪念馆里。<br>————————————————</p><h2 id="4-三大曲线图像展示"><a href="#4-三大曲线图像展示" class="headerlink" title="4.三大曲线图像展示"></a>4.三大曲线图像展示</h2><blockquote><p>极坐标方程：</p></blockquote><p>心形线：r=a(1-cosθ) (a&gt;0)<br>玫瑰线：r=asin(3θ) (a&gt;0)<br>阿基米德螺线：r=aθ(a&gt;0,θ&gt;=0)</p><blockquote><p>成品展示</p></blockquote><p><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/D:/data/imagesmath.png" alt=""></fancybox></p><blockquote><p>源代码：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'SimHei'</span>]  <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="literal">False</span>  <span class="comment"># 用来正常显示负号</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw</span><span class="params">()</span>:</span></span><br><span class="line">    plt.title(<span class="string">"数学其实很美"</span>)</span><br><span class="line">    pi = np.pi</span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    <span class="comment"># 生成0到2pi的数据集</span></span><br><span class="line">    datas = np.linspace(<span class="number">0</span>, <span class="number">2</span> * pi, <span class="number">100</span>)</span><br><span class="line">    <span class="comment"># 绘制极坐标r = a(1-cosθ)(a&gt;0)的心形图</span></span><br><span class="line">    x = a * (<span class="number">1</span> - np.cos(datas)) * (np.cos(datas))</span><br><span class="line">    y = a * (<span class="number">1</span> - np.cos(datas)) * (np.sin(datas))</span><br><span class="line">    plt.plot(x, y, label=<span class="string">'心形线'</span>, color=<span class="string">'red'</span>, linewidth=<span class="string">'1.0'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 绘制极坐标r = a(1-cosθ)(a&gt;0)的心形图</span></span><br><span class="line">    x1 = a * (np.sin(<span class="number">3</span> * datas)) * (np.cos(datas))</span><br><span class="line">    y1 = a * (np.sin(<span class="number">3</span> * datas)) * (np.sin(datas))</span><br><span class="line">    plt.plot(x1, y1, label=<span class="string">'玫瑰线'</span>, color=<span class="string">'blue'</span>, linewidth=<span class="string">'2.0'</span>, linestyle=<span class="string">"--"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 绘制极坐标r = a(1-cosθ)(a&gt;0)的阿基米德螺线图</span></span><br><span class="line">    x2 = a * datas * (np.cos(datas))</span><br><span class="line">    y2 = a * datas * (np.sin(datas))</span><br><span class="line">    plt.plot(x2, y2, label=<span class="string">'阿基米德螺线'</span>, color=<span class="string">'black'</span>, linewidth=<span class="string">'1.0'</span>, linestyle=<span class="string">"-."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># # 使用plt.xlim设置x坐标轴范围：</span></span><br><span class="line">    <span class="comment"># plt.ylim((-10, 10))</span></span><br><span class="line">    <span class="comment"># # 使用plt.ylim设置x坐标轴范围：</span></span><br><span class="line">    <span class="comment"># plt.ylim((-10, 10))</span></span><br><span class="line">    <span class="comment"># 定义x轴名称</span></span><br><span class="line">    plt.xlabel(<span class="string">'x轴'</span>)</span><br><span class="line">    <span class="comment"># 定义y轴名称</span></span><br><span class="line">    plt.ylabel(<span class="string">'y轴'</span>)</span><br><span class="line">    new_ticks = np.arange(<span class="number">-5</span>, <span class="number">10</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 使用plt.xticks设置x轴刻度：范围是(-2,2);个数是8.</span></span><br><span class="line">    plt.xticks(new_ticks)</span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    plt.gca获取当前坐标轴信息. 使用.spines设置边框；使用.set_color设置边框颜色</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 坐标轴中移</span></span><br><span class="line">    ax = plt.gca()</span><br><span class="line">    <span class="comment"># 隐藏上边和右边</span></span><br><span class="line">    ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">    ax.spines[<span class="string">'right'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">    <span class="comment"># 移动另外两个轴</span></span><br><span class="line">    ax.xaxis.set_ticks_position(<span class="string">'bottom'</span>)</span><br><span class="line">    ax.spines[<span class="string">'bottom'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br><span class="line">    ax.yaxis.set_ticks_position(<span class="string">'left'</span>)</span><br><span class="line">    ax.spines[<span class="string">'left'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.savefig(<span class="string">"math.png"</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    draw()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Data analysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装使用redis</title>
      <link href="/2019/12/12/docker%E7%9A%84redis/"/>
      <url>/2019/12/12/docker%E7%9A%84redis/</url>
      
        <content type="html"><![CDATA[<p><font color=#00CD00>docker系列章节更新（三），这一章节主要学习docker安装redis以及非关系型数据库redis学习</font></p><ul><li>docker安装redis</li><li>redis学习笔记</li></ul><a id="more"></a><h3 id="1-docker安装redis"><a href="#1-docker安装redis" class="headerlink" title="1.docker安装redis"></a>1.docker安装redis</h3><blockquote><p>拉取镜像</p></blockquote><p>docker search redis<br>docker pull redis:[version]</p><blockquote><p>创建容器</p></blockquote><p>docker run -di -p 6379:6379  -p指定端口,-d以守护式形式<br>-v /zzyyuse/myredis/data:/data<br>-v /zzyyuse/myredis/conf/redis.conf:/usr/local/etc/redis/redis.conf<br>redis-server /usr/local/etc/redis/redis.conf<br>redis:3.2 指定redis版本<br>--appendonly yes</p><blockquote><p>新建redis.conf文件</p></blockquote><p>在宿主机/zzyyuse/myredis/conf/redis.conf目录下新建redis.conf文件（<a href="https://cdn.jsdelivr.net/gh/FioraLove/CDN@v1.2.8.3/redis.conf" target="_blank" rel="noopener">文件内容</a>）</p><blockquote><p>进入容器并以命令行交互</p></blockquote><p>docker exec -it container_id redis-cli(区分其它容器的/bin/bash或者/bin/sh)</p><blockquote><p>退出命令</p></blockquote><p>SHUTDOWN</p><h3 id="2-redis的基础知识"><a href="#2-redis的基础知识" class="headerlink" title="2.redis的基础知识"></a>2.redis的基础知识</h3><p>【转载】<a href="http://andus.top/page/5/" target="_blank" rel="noopener">羊松林博客的redis讲解就很详细了，不重复造轮子，先抄他一手再说</a></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ALL MY LIFE</title>
      <link href="/2019/12/11/2020/"/>
      <url>/2019/12/11/2020/</url>
      
        <content type="html"><![CDATA[<p><font size=5>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;做她的战士，跟她一起经历&nbsp;&nbsp;&nbsp;失败！！</font><br><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/D:/data/imagesmaster.png" alt=""></fancybox></p><a id="more"></a><h3 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h3><p>&nbsp;&nbsp;&nbsp;兄弟萌，您们好，我叫陈浩东，浩东陈的陈，你也可以叫我<font color=#BF3EFF>陈某</font>。97年的四川绵阳人，于2019年6月5日毕业于中国计量大学信息与计算科学专业。虽然口头上一直在说~不会再爱了( ﹁ ﹁ ) ~→，但是我还是忘不了那个badwoman,<br>试问，如果不是真心喜欢，谁愿意当舔狗呢？☹ ☹ ☹<br><fancybox> <img src="https://cdn.jsdelivr.net/gh/FioraLove/CDN@1.2.1/badwoman.jpg" height="328px"></fancybox><br>她不是漂不漂亮的问题，她真的就是那种，很少见，很冷艳的漂亮…<br>&nbsp;&nbsp;&nbsp;你们有可能会说：<font color=#00CD00>你那叫喜欢吗？你那是馋她的身子，你下贱</font><br><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/CDN@1.2.1/a168c4cd7b899e511e931f114da7d933c8950d23.gif" alt=""></fancybox></p><p>&nbsp;&nbsp;&nbsp;作为一个正能量，儒雅随和的知识分子，兴趣爱好当然必不可少。喜欢羽毛球、乒乓球、登山、游泳（仅能浮起来☹ ☹）、钓鱼以及英雄联盟，当然作为一个<font color=#FF0000>资深的土味鉴定师,文艺复兴模仿者</font>,能够快速洞察每一个土味视频背后的正能量思想，有内味了。<br><img src="https://api.jikipedia.com/upload/c1bcbdc1a19f0d6bc225d03e88139c62_75.jpg" height="300px"></p><h3 id="2020年职业技术规划："><a href="#2020年职业技术规划：" class="headerlink" title="2020年职业技术规划："></a>2020年职业技术规划：</h3><ul><li>XXXXXXXXX(终极目标，可以决定是否可以改变未来轨迹的)</li><li>Python进阶，web框架以及爬虫框架~js逆向解密爬虫</li><li>Python爬取抓包app数据</li><li>Vue基础知识与微信小程序MVVM（两者大同小异）</li><li>java</li><li>ThinkPHP以及PHP学习</li><li>HTML+CSS+JavaScript</li><li>Jquery进阶以及bootstrap</li><li>Docker容器虚拟技术</li><li>Linux的Ubuntu要经常多用</li><li>数据库进阶以及存储过程</li><li>数据分析与深度学习</li><li>完成一个简单的健康指数的微信小程序</li><li>完成一个GitHub开源项目，暂时有一点想法</li></ul><h3 id="每日作息安排："><a href="#每日作息安排：" class="headerlink" title="每日作息安排："></a>每日作息安排：</h3><p>1.早上7:25-7:50起床<br>2.中午早点休息，下午一点上班<br>3.五点下班：会寝室吃饭并休息到6:00-6:30,继续学习<br>4.晚上10:40到11:00开始收拾收拾准备下班<br>5.回到寝室，做10-15分钟的Keep，锻炼胸肌腹肌<br>6.周六周日特殊安排：早上9-10点起床，其余正常安排</p><p><font color=#BF3EFF> 7.周而复始，学会坚持，每天多学一点，未来会好很多，兄弟萌，不甘碌碌无为，那就，冲，杀！！ </font></p><h3 id="推荐学习方法："><a href="#推荐学习方法：" class="headerlink" title="推荐学习方法："></a>推荐学习方法：</h3><blockquote><p>渗透科学学习法</p></blockquote><p>晚上睡觉前，把文献放在脑袋和枕头之间，知识会从浓度较高的的书本向浓度较低的脑袋渗透。书本越多，外界知识浓度越高，夜间复习的效果越好！</p><h3 id="奋斗目标"><a href="#奋斗目标" class="headerlink" title="奋斗目标"></a>奋斗目标</h3><blockquote><p>1.翻新/二手iPhone</p></blockquote><p> 16年买的iPhone6s 32G，现在内存不到5个G。可以买但没必要☹ ☹ ☹，还不卡，让手机再奋斗个两三年吧，先存钱买房吧</p><blockquote><p>2.翻新/二手Macbook Pro</p></blockquote><p>16年5月买的联想小新700，有点重，不方便携带，但换个内存条也超神。可以买，但没必要☹ ☹ ☹，让电脑再奋斗个三四年吧，存钱买房<br><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/D:/data/images744c5f8010b532b5635f1bbf1ce75c3b.jpg" alt=""></fancybox></p><blockquote><p>3.Audi</p></blockquote><p>直接想就完事了，买不起，也没必要☹ ☹ ☹<br><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/D:/data/images20191218151134.png" alt=""></fancybox></p><blockquote><p>4.买房</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font size=6>红颜一春树,流年一掷梭，一瞬为白骨</font></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python全栈系列章节更新（七）：爬虫解析库</title>
      <link href="/2019/12/10/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E4%B8%83%EF%BC%89/"/>
      <url>/2019/12/10/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E4%B8%83%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;列举几个常用的python爬虫解析库</p><blockquote><p>正则表达式<br>Xpath<br>BeautifulSoup<br>pyquery<br>Scrapy的selector的用法<br>Selenium自动测试库学习</p></blockquote><a id="more"></a><h2 id="1-正则表达式"><a href="#1-正则表达式" class="headerlink" title="1.正则表达式"></a>1.<a href="https://meethigher.top/blog/2019/11/29/regular-expression/" target="_blank" rel="noopener">正则表达式</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&apos;.&apos;     默认匹配除\n之外的任意一个字符，若指定flag DOTALL,则匹配任意字符，包括换行</span><br><span class="line">&apos;^&apos;     匹配字符串的开头，若指定flags MULTILINE,这种也可以匹配上(r&quot;^a&quot;,&quot;\nabc\neee&quot;,flags=re.MULTILINE)</span><br><span class="line">&apos;$&apos;     匹配字符结尾， 若指定flags MULTILINE ,re.search(&apos;foo.$&apos;,&apos;foo1\nfoo2\n&apos;,re.MULTILINE).group() 会匹配到foo1</span><br><span class="line">&apos;*&apos;     匹配*号前的字符0次或多次， re.search(&apos;a*&apos;,&apos;aaaabac&apos;)  结果&apos;aaaa&apos;</span><br><span class="line">&apos;+&apos;     匹配前一个字符1次或多次，re.findall(&quot;ab+&quot;,&quot;ab+cd+abb+bba&quot;) 结果[&apos;ab&apos;, &apos;abb&apos;]</span><br><span class="line">&apos;?&apos;     匹配前一个字符1次或0次 ,re.search(&apos;b?&apos;,&apos;alex&apos;).group() 匹配b 0次</span><br><span class="line">&apos;&#123;m&#125;&apos;   匹配前一个字符m次 ,re.search(&apos;b&#123;3&#125;&apos;,&apos;alexbbbs&apos;).group()  匹配到&apos;bbb&apos;</span><br><span class="line">&apos;&#123;n,m&#125;&apos; 匹配前一个字符n到m次，re.findall(&quot;ab&#123;1,3&#125;&quot;,&quot;abb abc abbcbbb&quot;) 结果&apos;abb&apos;, &apos;ab&apos;, &apos;abb&apos;]</span><br><span class="line">&apos;|&apos;     匹配|左或|右的字符，re.search(&quot;abc|ABC&quot;,&quot;ABCBabcCD&quot;).group() 结果&apos;ABC&apos;</span><br><span class="line">&apos;(...)&apos; 分组匹配， re.search(&quot;(abc)&#123;2&#125;a(123|45)&quot;, &quot;abcabca456c&quot;).group() 结果为&apos;abcabca45&apos;</span><br><span class="line">&apos;[...]&apos; 用来表示一组字符，单独列出，比如匹配[amk]匹配a,m或k</span><br><span class="line">&apos;[^...]&apos;  用来匹配不在[]里面的字符：如[^abc]匹配除了a，b，c之外的字符</span><br><span class="line"> </span><br><span class="line">&apos;\A&apos;    只从字符开头匹配，re.search(&quot;\Aabc&quot;,&quot;alexabc&quot;) 是匹配不到的，相当于re.match(&apos;abc&apos;,&quot;alexabc&quot;) 或^</span><br><span class="line">&apos;\Z&apos;    匹配字符结尾，同$</span><br><span class="line">&apos;\d&apos;    匹配数字0-9</span><br><span class="line">&apos;\D&apos;    匹配非数字</span><br><span class="line">&apos;\w&apos;    匹配[A-Za-z0-9],还包括下划线‘_’</span><br><span class="line">&apos;\W&apos;    匹配非[A-Za-z0-9]</span><br><span class="line">&apos;\s&apos;     匹配空白字符、\t、\n、\r , re.search(&quot;\s+&quot;,&quot;ab\tc1\n3&quot;).group() 结果 &apos;\t&apos;</span><br><span class="line">&apos;(.*?)&apos; 贪婪匹配，用来获取目标字符</span><br><span class="line">&apos;.*?&apos;   非贪婪匹配，用来替换任意非目标字符</span><br></pre></td></tr></table></figure><p>常用方法：</p><blockquote><p>re.match()</p></blockquote><p>re.match()方法会从字符串的起始位置开始匹配正则表达式，如果匹配，就返回匹配成功的结果，一旦开头不匹配，直接返回None，整个匹配失败</p><blockquote><p>re.search()</p></blockquote><p>re.search()：扫描整个字符串，然后返回第一个成功匹配的结果</p><blockquote><p>re.findall()</p></blockquote><p>re.findall()：把所有匹配到的字符放到以列表中的元素返回，返回的列表中的每一个元素都是元组类型</p><blockquote><p>re.sub()</p></blockquote><p>re.sub(‘a’,’b’,content) ,即在content中，用b替换a的内容</p><blockquote><p>re.compile()</p></blockquote><p>re.compile(正则表达式,修饰符re.S等)方法将正则表达式字符串编译成正则表达式对象，以便在后面的匹配中复用</p><blockquote><p>修饰符</p></blockquote><table><thead><tr><th>修饰符</th><th>描述</th></tr></thead><tbody><tr><td>re.I</td><td>使匹配对大小写不敏感</td></tr><tr><td>re.M</td><td>多行匹配</td></tr><tr><td>re.S</td><td>使.匹配包括换行在内的所有字符</td></tr></tbody></table><h2 id="2-xpath"><a href="#2-xpath" class="headerlink" title="2.xpath"></a>2.xpath</h2><p>1.导入相关库包<br>from lxml import etree<br>2.初始化<br>html = etree.HTML(response.text)<br>3.常用规则</p><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>nodename</td><td>选取此节点的所有子节点</td></tr><tr><td>/</td><td>从根节点选取</td></tr><tr><td>//</td><td>从匹配选择的当前节点选择文档的节点，而不考虑它们的位置</td></tr><tr><td>.</td><td>选取当前节点</td></tr><tr><td>..</td><td>选取当前节点的父节点</td></tr><tr><td>@</td><td>选取属性</td></tr></tbody></table><table><thead><tr><th>路径表达式</th><th>描述</th></tr></thead><tbody><tr><td>bookstore</td><td>选取 bookstore 元素的所有子节点</td></tr><tr><td>/bookstore</td><td>选取根元素 bookstore。注释：假如路径起始于正斜杠( / )，则此路径始终代表到某元素的绝对路径！</td></tr><tr><td>bookstore/book</td><td>选取属于 bookstore 的子元素的所有 book 元素</td></tr><tr><td>//book</td><td>选取所有 book 子元素，而不管它们在文档中的位置。</td></tr><tr><td>bookstore//book</td><td>选择属于 bookstore 元素的后代的所有 book 元素，而不管它们位于 bookstore 之下的什么位置。</td></tr><tr><td>//@lang</td><td>选取名为 lang 的所有属性。</td></tr><tr><td>/bookstore/book[1]</td><td>选取属于 bookstore 子元素的第一个 book 元素。索引默认从1开始</td></tr><tr><td>/bookstore/book[last()]</td><td>选取属于 bookstore 子元素的最后一个 book 元素。</td></tr><tr><td>/bookstore/book[last()-1]</td><td>选取属于 bookstore 子元素的倒数第二个 book 元素。</td></tr><tr><td>/bookstore/book[position()&lt;3]</td><td>选取最前面的两个属于 bookstore 元素的子元素的 book 元素。</td></tr><tr><td>//title[@lang]</td><td>选取所有拥有名为 lang 的属性的 title 元素。</td></tr><tr><td>//title[@lang=’eng’]</td><td>选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。</td></tr><tr><td>/bookstore/book[price&gt;35.00]</td><td>选取 bookstore 元素的所有 book 元素，且其中的 price 元素的值须大于 35.00。</td></tr><tr><td>/bookstore/book[price&gt;35.00]/title</td><td>选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须大于 35.00。</td></tr></tbody></table><p>举例说明如何使用xpath：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.指定url</span></span><br><span class="line">url = <span class="string">'https://ishuo.cn/joke'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.发起请求</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(url=url, headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.获取页面内容</span></span><br><span class="line">page_text = response.text</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.数据解析</span></span><br><span class="line">tree = etree.HTML(page_text)</span><br><span class="line"><span class="comment"># 获取所有的li标签（已经经过了xpath插件验证）</span></span><br><span class="line">li_list = tree.xpath(<span class="string">'//div[@id="list"]/ul/li'</span>)</span><br><span class="line"><span class="comment"># 这段话的意思是：选择所有子孙节点是id="list"的div标签，在选择子节点ul标签，再选择子节点li标签</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[&lt;Element li at 0x10e32c248&gt;, &lt;Element li at 0x10e30ae88&gt;,...,&lt;Element li at 0x10ef5bfc8&gt;]</span></span><br><span class="line"><span class="string"># 注意：Element类型的对象可以继续调用xpath函数，对该对象表示的局部内容进行指定内容的解析</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">fp = open(<span class="string">'./duanZi.txt'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>)  <span class="comment"># 一次打开多次写入</span></span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">    content = li.xpath(<span class="string">'./div[@class="content"]/text()'</span>)[<span class="number">0</span>]  <span class="comment"># 调用text()函数取得段子内容</span></span><br><span class="line">    title = li.xpath(<span class="string">'./div[@class="info"]/a/text()'</span>)[<span class="number">0</span>]   <span class="comment"># 获得a标签文本内容</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 5.持久化</span></span><br><span class="line">    fp.write(title + <span class="string">":"</span> + content + <span class="string">"\n\n"</span>)  <span class="comment"># 段子换行分隔</span></span><br><span class="line">    print(<span class="string">"一条数据写入成功"</span>)</span><br></pre></td></tr></table></figure><h2 id="3-pyquery"><a href="#3-pyquery" class="headerlink" title="3.pyquery"></a>3.pyquery</h2><blockquote><p>导入相关库包</p></blockquote><p>from pyquery import PyQuery as pq</p><blockquote><p>初始化工作</p></blockquote><p>doc = pq(html)字符串初始化<br>doc = pq(url)URL初始化<br>doc = pq(filename=””)文件初始化<br>item = doc(&#39;li&#39;))  获取li标签的变量为item</p><blockquote><p>css选择器</p></blockquote><table><thead><tr><th>表达式</th><th>说明</th></tr></thead><tbody><tr><td>id选择器</td><td>使用#</td></tr><tr><td>class选择器</td><td>使用.</td></tr><tr><td>标签选择器</td><td>直接使用标签，什么都不加</td></tr><tr><td>*</td><td>选择所有元素</td></tr><tr><td>p</td><td>选择所有p标签</td></tr><tr><td>div,p</td><td>选择所有的div和p标签（并集）</td></tr><tr><td>div p</td><td>选择div下的所有p标签（子集），空格代表嵌套关系</td></tr></tbody></table><blockquote><p>pyquery获取信息(跟jQuery用法一样)</p></blockquote><p>1.获取属性值：变量名.attr(属性名) 或者 变量名.attr.属性名<br>2.获取文本内容：变量名.text()<br>3.获取html： 变量名.html()<br>4.获取父节点： 变量名.parent()<br>5.获取所有的祖先节点： 变量名.parents()<br>6.获取所有的兄弟元素： 变量名.siblings()<br>7.过滤选择器：li = doc(&quot;li:first-child&quot;)#第一个子节点<br>8.过滤选择器：li = doc(&quot;li:gt(2)&quot;)#索引值大于2的<br>9.<font color=#ef4136><strong>找寻某一特定标签：变量名.find(标签名).eq(n) n从0开始，表示find某标签，并选择第n个目标值</strong></font></p><p>举例说明：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">doc = pq(html)</span><br><span class="line"><span class="comment">#首先选class=“.list”，空格即使选择list里面的标签，再选class=“item-0”，并列active（实际就是一个整体）</span></span><br><span class="line">li = doc(<span class="string">'.list .item-0.active'</span>)</span><br><span class="line"><span class="comment">#获取所有的兄弟元素</span></span><br><span class="line">print(li.siblings())</span><br><span class="line"></span><br><span class="line"><span class="comment">#在向其中筛选</span></span><br><span class="line">print(li.siblings(<span class="string">'.active'</span>))</span><br></pre></td></tr></table></figure><h2 id="4-Selenium库学习"><a href="#4-Selenium库学习" class="headerlink" title="4.Selenium库学习"></a>4.<a href="https://blog.csdn.net/weixin_36279318/article/details/79475388" target="_blank" rel="noopener">Selenium库学习</a></h2><p>动态渲染页面不仅仅涉及到Ajax技术，绝大多数的网页是通过Javascript计算生成新页面的，比如说百度Echarts，淘宝，中国青年网。。。</p><blockquote><p> 4.1基本库导入</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdrive</span><br><span class="line"><span class="keyword">from</span> selenium.webdrive.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="comment"># 若想要模拟键盘，就需要导入keys()类</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdrive.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="comment"># 等待条件类</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdrive.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="comment"># 等待条件</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdrive.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="comment"># 监听鼠标事件,声明动作链</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdrive <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="comment"># 导入下拉选择框Select类</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.select <span class="keyword">import</span> Select</span><br></pre></td></tr></table></figure><blockquote><p>4.2 声明浏览器对象</p></blockquote><p>browser = webdriver.Chrome()/Firefox()/PhantomJS() 等等</p><blockquote><p>4.3 访问目标页面</p></blockquote><p><font color=#FF0000>browser.page_source:打印网页源代码</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 访问目标网址</span></span><br><span class="line">browser.get(<span class="string">"https://www.taobao.com"</span>)</span><br><span class="line"><span class="comment"># 打印页面源代码</span></span><br><span class="line">print(browser.page_source)</span><br><span class="line"><span class="comment"># 关闭浏览器</span></span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><blockquote><p>4.4 获取单个节点的方法</p></blockquote><p>语法：find_element(By.xx,”XXX”)或者是find_elements(By.xx,”XXX”)<br>一般常用的是(By.ID,id_name),(By.XPath,xpath_path),(By.CSS_SELECTOR,css_selector_path)</p><blockquote><p>4.5 节点交互</p></blockquote><p>Selenium可以驱动浏览器执行一些列操作，可以模仿一些列简单的人的动作：<br>nodeName.send_keys(“content”)：输入目标节点框文字<br>nodeName.clear()：清空目标节点框文字<br>nodeName.click()：点击目标节点</p><table><thead><tr><th>控制浏览器的操作方法</th><th>说明</th></tr></thead><tbody><tr><td>click()</td><td>点击目标节点</td></tr><tr><td>set_window_size()</td><td>设置浏览器的大小</td></tr><tr><td>back()</td><td>控制浏览器后退</td></tr><tr><td>forward()</td><td>控制浏览器前进</td></tr><tr><td>refresh()</td><td>刷新当前页面</td></tr><tr><td>clear()</td><td>清除文本</td></tr><tr><td>send_keys (value)</td><td>模拟按键输入</td></tr><tr><td>close()</td><td>关闭浏览器</td></tr><tr><td>quit()</td><td>关闭所有窗口</td></tr><tr><td>submit()</td><td>用于提交表单</td></tr><tr><td>get_attribute(name)</td><td>获取元素属性值</td></tr><tr><td>is_displayed()</td><td>设置该元素是否用户可见</td></tr><tr><td>size</td><td>返回元素的尺寸</td></tr><tr><td>location</td><td>返回元素在浏览器中的位置，以字典的形式返回</td></tr><tr><td>text</td><td>获取元素的文本</td></tr></tbody></table><p><font color=#FF0000>2019-12-30：新增关于location和size方法的说明</font><br>先看示例源代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示等待图片节点加载出来</span></span><br><span class="line">img = self.wait.until(EC.presence_of_element_located((By.CLASS_NAME, <span class="string">'geetest_canvas_img'</span>)))</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">location = img.location</span><br><span class="line">size = img.size</span><br></pre></td></tr></table></figure><p>这里用了显示等待获取到了我要识别的滑动验证码图片对象，接下来调用该对象的location属性和size属性。<br>location属性可以返回该图片对象(既这张图片)在浏览器中的位置(坐标轴是以屏幕左上角为原点，x轴向右递增，y轴像下递增)，以字典的形式返回</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;x&quot;:30,</span><br><span class="line"> &quot;y&quot;:30  </span><br><span class="line">&#125;</span><br><span class="line"># 这里我们假设图片的位置是（30,30)</span><br><span class="line"></span><br><span class="line">size属性同样返回一个字典，size属性是图片对象的高度，宽度。</span><br><span class="line">&#123;</span><br><span class="line">&quot;height&quot;:30,</span><br><span class="line">&quot;width&quot;:30</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>4.6 鼠标事件</p></blockquote><p>在WebDriver中，将这些关于鼠标操作的方法封装在 ActionChains 类提供。</p><table><thead><tr><th>鼠标监听方法</th><th>说明</th></tr></thead><tbody><tr><td>ActionChains(driver)</td><td>构造ActionChains对象</td></tr><tr><td>move_to_element(above)</td><td>执行鼠标悬停操作</td></tr><tr><td>context_click()</td><td>右击</td></tr><tr><td>double_click()</td><td>双击</td></tr><tr><td>drag_and_drop()</td><td>拖动</td></tr><tr><td>move_to_element(above)</td><td>执行鼠标悬停操作</td></tr><tr><td>context_click()</td><td>用于模拟鼠标右键操作， 在调用时需要指定元素定位</td></tr><tr><td>perform()</td><td>执行所有 ActionChains 中存储的行为，可以理解成是对整个操作的提交动作</td></tr></tbody></table><p>————————————————</p><blockquote><p>4.7 多表单切换，<a href="https://ahrilove.top/2019/12/20/frame与iframe/">点击详情</a></p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;在Web应用中经常会遇到frame/iframe表单嵌套页面的应用，WebDriver只能在一个页面上对元素识别与定位，对于frame/iframe表单内嵌页面上的元素无法直接定位。这时就需要通过switch_to.frame()方法将当前定位的主体切换为frame/iframe表单的内嵌页面中。</p><table><thead><tr><th>鼠标监听方法</th><th>说明</th></tr></thead><tbody><tr><td>switch_to.frame()</td><td>将当前定位的主体切换为frame/iframe表单的内嵌页面中</td></tr><tr><td>switch_to.default_content()</td><td>跳回最外层的页面</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(&quot;http://www.126.com&quot;)</span><br><span class="line"># 切换到id为x-URS-iframe的iframe表单</span><br><span class="line">driver.switch_to.frame(&apos;x-URS-iframe&apos;)</span><br><span class="line">driver.find_element_by_name(&quot;email&quot;).clear()</span><br><span class="line">driver.find_element_by_name(&quot;email&quot;).send_keys(&quot;username&quot;)</span><br><span class="line">driver.find_element_by_name(&quot;password&quot;).clear()</span><br><span class="line">driver.find_element_by_name(&quot;password&quot;).send_keys(&quot;password&quot;)</span><br><span class="line">driver.find_element_by_id(&quot;dologin&quot;).click()</span><br><span class="line">driver.switch_to.default_content()</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><blockquote><p>switch_to.frame() 默认可以直接取表单的id 或name属性。如果iframe没有可用的id和name属性，则可以通过下面的方式进行定位。</p></blockquote><p>先通过xpth定位到iframe<br>xf = driver.find_element_by_xpath(‘//*[@id=”x-URS-iframe”]’)</p><p>再将定位对象传给switch_to.frame()方法<br>driver.switch_to.frame(xf)</p><p>driver.switch_to.parent_frame()</p><blockquote><p>4.8 <a href="http://www.testclass.net/selenium_python/element-wait/" target="_blank" rel="noopener">设置元素等待</a></p></blockquote><p>元素等待分为显示等待（推荐：显式等待使WebdDriver等待某个条件成立时继续执行，否则在达到最大时长时抛出超时异常（TimeoutException））与隐式等待<br><strong>selenium.webdriver.support.ui 和selenium.webdriver.support.wait都是用来做显式等待的，但两者没有任何一丢丢的区别，将ui换成了wait，这样更直接易懂。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="comment"># 导入时间等待库文件</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line"><span class="comment"># 最长超时时间为10s，检测间隔为0.5s</span></span><br><span class="line">wait = WebDriverWait(driver,<span class="number">10</span>,<span class="number">0.5</span>)</span><br><span class="line">element = wait.until(</span><br><span class="line">                      <span class="comment"># 等待节点出现的含义</span></span><br><span class="line">                      EC.presence_of_element_located((By.ID, <span class="string">"kw"</span>))</span><br><span class="line">                      )</span><br><span class="line"><span class="comment"># 输入文本                      </span></span><br><span class="line">element.send_keys(<span class="string">'selenium'</span>)</span><br><span class="line">time.sleep(<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 浏览器退出</span></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p><font color=#d71345>2020-1-11 新增：</font></p><blockquote><p>4.9 下拉框选择操作</p></blockquote><p>导入选择下拉框Select类，使用该类处理下拉框操作<br>方法：select_by_value(“选择值”)：相当于我们使用鼠标选择下拉框的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.select <span class="keyword">import</span> Select</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#1.鼠标悬停至“设置”链接</span></span><br><span class="line">driver.find_element_by_link_text(<span class="string">'设置'</span>).click()</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#2.打开搜索设置</span></span><br><span class="line">driver.find_element_by_link_text(<span class="string">"搜索设置"</span>).click()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.搜索结果显示条数</span></span><br><span class="line">sel = driver.find_element_by_xpath(<span class="string">"//select[@id='nr']"</span>)</span><br><span class="line">Select(sel).select_by_value(<span class="string">'50'</span>)  <span class="comment"># 显示50条</span></span><br><span class="line"></span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><blockquote><p>4.10 警告框处理</p></blockquote><p>在WebDriver中处理JavaScript所生成的alert、confirm以及prompt十分简单，具体做法是使用 switch_to.alert 方法定位到 alert/confirm/prompt，然后使用text/accept/dismiss/ send_keys等方法进行操作。</p><table><thead><tr><th>鼠标监听方法</th><th>说明</th></tr></thead><tbody><tr><td>text</td><td>返回 alert/confirm/prompt 中的文字信息</td></tr><tr><td>accept()</td><td>接受现有警告框</td></tr><tr><td>dismiss()</td><td>解散现有警告框</td></tr><tr><td>send_keys(keysToSend)</td><td>发送文本至警告框。keysToSend：将文本发送至警告框</td></tr></tbody></table><h3 id="未完待续。。。"><a href="#未完待续。。。" class="headerlink" title="未完待续。。。"></a>未完待续。。。</h3>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 解析库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>兄弟萌！枯啦，要恰不了饭了</title>
      <link href="/2019/12/08/%E6%81%B0%E9%A5%AD%E5%8D%B1%E6%9C%BA/"/>
      <url>/2019/12/08/%E6%81%B0%E9%A5%AD%E5%8D%B1%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;兄弟萌，怎么办？我要枯啦，要恰不了饭了，要吃红牌出场了</p><a id="more"></a><p>最近一直没有什么活干，每天就是混吃等死，建彬哥说也没有什么我能做的项目，呀！糟了呀，以前一直打趣说“你有你的好果子吃”，现在才明白过来，原来是我才没有好果子吃。<br>而且就目前的市场和我最近咸鱼，我也感觉我要直接吃红牌了，看不到生活的希望（55555。。。）<br>算了吧！！走一步算一步，做好心理准备，每天使劲多学一些，也不至于打包回家的时候那么狼狈，现在回想起来，15年做决定的时候是不是选对了？是当时脑瘫了？</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>探究密码加salt原理以及PHP防止SQL注入</title>
      <link href="/2019/12/08/%E6%B5%85%E8%B0%88%E5%AF%86%E7%A0%81%E5%8A%A0%E7%9B%90%E5%8E%9F%E7%90%86/"/>
      <url>/2019/12/08/%E6%B5%85%E8%B0%88%E5%AF%86%E7%A0%81%E5%8A%A0%E7%9B%90%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般来说，一些小网站，小公司对于用户的账号密码很大概率是对其进行散列处理。我们知道，如果直接对密码进行散列，那么黑客可以对通过获得这个密码散列值，然后通过查散列值字典（例如某MD5密码破解网站），得到某用户的密码。</p><a id="more"></a><h3 id="1-加salt原理"><a href="#1-加salt原理" class="headerlink" title="1.加salt原理"></a>1.加salt原理</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;所谓加Salt方法，就是加点“佐料”。其基本想法是这样的：<font color=#5CACEE>当用户首次提供密码时（通常是注册时），由系统自动往这个密码里撒一些“佐料”，然后再散列。而当用户登录时，系统为用户提供的代码撒上同样的“佐料”，然后散列，再比较散列值，以确定密码是否正确。</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里的“佐料”被称作“Salt值”，这个值是由系统随机生成的，并且只有系统知道。这样，即便两个用户使用了同一个密码，由于系统为它们生成的salt值不同，他们的散列值也是不同的。即便黑客可以通过自己的密码和自己生成的散列值来找具有特定密码的用户，但这个几率太小了（密码和salt值都得和黑客使用的一样才行）。</p><h3 id="2-加密示例（以PHP为例，python同理调用hashlib库）"><a href="#2-加密示例（以PHP为例，python同理调用hashlib库）" class="headerlink" title="2.加密示例（以PHP为例，python同理调用hashlib库）"></a>2.加密示例（以PHP为例，python同理调用hashlib库）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> <span class="title">hash</span><span class="params">($a)</span> </span>&#123;</span></span><br><span class="line"><span class="php">    $salt=”Random_KUGBJVY”;  <span class="comment">//定义一个salt值，程序员规定下来的随机字符串</span></span></span><br><span class="line"><span class="php">    $b=$a.$salt;  <span class="comment">//把密码和salt连接,</span></span></span><br><span class="line"><span class="php">    $b=md5($b);  <span class="comment">//执行MD5散列</span></span></span><br><span class="line"><span class="php">    <span class="keyword">return</span> $b;  <span class="comment">//返回散列   </span></span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>这里的加salt处理方式有很多种，程序员按要求自定义，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$salt=”Random_KUGBJVY”;</span><br><span class="line">$b=$a.$salt;</span><br><span class="line">$b1=$salt.$a.$salt;</span><br><span class="line">$b2=$salt.md5($a.$salt);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>调用方式：$new_password=hash($_POST[password]);   //这里接受表单提交值，并进行加密</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下面详细介绍一下加Salt散列的过程。介绍之前先强调一点，前面说过，验证密码时要使用和最初散列密码时使用“相同的”佐料。所以Salt值是要存放在数据库里的。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用户注册时：用户输入【账号】和【密码】（以及其他用户信息）；系统为用户生成【Salt值】；系统将【Salt值】和【用户密码】连接到一起；对连接后的值进行散列，得到【Hash值】；将【Hash值1】和【Salt值】分别放到数据库中。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用户登录时：用户输入【账号】和【密码】；系统通过用户名找到与之对应的【Hash值】和【Salt值】；系统将【Salt值】和【用户输入的密码】连接到一起；对连接后的值进行散列，得到【Hash值2】（注意是即时运算出来的值）；比较【Hash值1】和【Hash值2】是否相等，相等则表示密码正确，否则表示密码错误。<br><font color=#5CACEE>有时候，为了减轻开发压力，程序员会统一使用一个salt值（储存在某个地方），而不是每个用户都生成私有的salt值</font></p><h3 id="3-php基本语法知识-参考FioraLove的GitHub"><a href="#3-php基本语法知识-参考FioraLove的GitHub" class="headerlink" title="3.php基本语法知识,参考FioraLove的GitHub"></a>3.php基本语法知识,<a href="https://github.com/FioraLove/HTML-CSS-JavaScript/blob/master/PHP/README.md" target="_blank" rel="noopener">参考FioraLove的GitHub</a></h3><blockquote><p>1.为什么要使用PDO：增加数据库连接扩展，是程序连接数据库的方法之一</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PDO是PHP5新加入的一个重大功能，我们的数据库服务器为MySQL，所有的程序代码的数据库操作全是一mysql(）或者mysqli()函数来操作，当我们的数据库 需要更换时比如换成，SQL、SERVER、PostgreSQL、MS 等，我们不可能去修改所有的程序代码！所以就要用到PDO，PDO很好的帮我们解决了这个问题，使用PDO操作非常方便，只需要修改数据源格式，和加载相应的驱动文件到PHP.ini即可；</p><blockquote><p>2.PDO连接数据库`<a href="https://blog.csdn.net/jia_1418422386/article/details/80394840" target="_blank" rel="noopener">PDO(php data object)</a>连接MySQL</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">    方式一：借由mysqli</span><br><span class="line">    <span class="php"><span class="meta">&lt;?php</span> </span></span><br><span class="line"><span class="php">        $servername = <span class="string">'localhost'</span>;</span></span><br><span class="line"><span class="php">        $username = <span class="string">'username'</span>;</span></span><br><span class="line"><span class="php">        $password = <span class="string">'password'</span>;</span></span><br><span class="line"><span class="php">        $db_name = <span class="string">'NMSL'</span>;</span></span><br><span class="line"><span class="php">        <span class="comment">// 创建连接</span></span></span><br><span class="line"><span class="php">        $conn = mysqli($servername, $username, $password,$db_name); </span></span><br><span class="line"><span class="php">        <span class="comment">// 检测连接</span></span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> (!$conn) &#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">die</span>(<span class="string">"Connection failed: "</span> . mysqli_error());</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> <span class="string">"连接成功"</span>;</span></span><br><span class="line"><span class="php">    <span class="meta">?&gt;</span></span></span><br><span class="line">    方式二：PDO   </span><br><span class="line">    $DSN = 'mysql:host=localhost;dbname=demo;charset=utf-8';</span><br><span class="line">    $pdo = new PDO($DSN,'username','password');  // 表示已连接了数据库</span><br><span class="line"> ```   </span><br><span class="line">&gt;3.设置PDO在处理数据的过程中采用什么方式去处理</span><br><span class="line"> ```html</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    setAttribute()方法是设置部分属性，主要属性有：PDO::ATTR_CASE、PDO::ATTR_ERRMODE等，我们设置的是PDO::ATTR_CASE(使用关联索引获取数据)</span><br><span class="line">    </span><br><span class="line">    PDO::ATTR_CASE：强制列名为指定的大小写。他的$value可为：</span><br><span class="line">    </span><br><span class="line">    　　PDO::CASE_LOWER：强制列名小写。</span><br><span class="line">    </span><br><span class="line">    　　PDO::CASE_NATURAL：保留数据库驱动返回的列名。</span><br><span class="line">    </span><br><span class="line">    　　PDO::CASE_UPPER：强制列名大写。</span><br><span class="line">   </span><br><span class="line">    PDO::ATTR_ERRMODE：错误报告。他的$value可为：</span><br><span class="line">    </span><br><span class="line">    　　PDO::ERRMODE_SILENT： 仅设置错误代码。</span><br><span class="line">    </span><br><span class="line">    　　PDO::ERRMODE_WARNING: 引发 E_WARNING 错误</span><br><span class="line">    </span><br><span class="line">    　　PDO::ERRMODE_EXCEPTION: 抛出 exceptions 异常。</span><br><span class="line">    </span><br><span class="line">    PDO::ATTR_ORACLE_NULLS （在所有驱动中都可用，不仅限于Oracle）： 转换 NULL 和空字符串。他的$value可为：</span><br><span class="line">    </span><br><span class="line">    　　PDO::NULL_NATURAL: 不转换。</span><br><span class="line">    </span><br><span class="line">    　　PDO::NULL_EMPTY_STRING： 将空字符串转换成 NULL 。</span><br><span class="line">    </span><br><span class="line">    　　PDO::NULL_TO_STRING: 将 NULL 转换成空字符串。</span><br><span class="line">``` </span><br><span class="line">&gt; 4.数据库操作：exec(不返回数据集，即insert，update，delete)与query(仅执行带结果返回的，即select)方法</span><br><span class="line">```html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">    <span class="comment">/* 连接数据库*/</span></span></span><br><span class="line"><span class="php">    $DSN = <span class="string">'mysql:host=localhost;dbname=demo;charset=utf-8'</span>;</span></span><br><span class="line"><span class="php">    $pdo = <span class="keyword">new</span> PDO($DSN,<span class="string">'username'</span>,<span class="string">'password'</span>); </span></span><br><span class="line"><span class="php">    </span></span><br><span class="line"><span class="php">    <span class="comment">/*  删除 FRUIT 数据表中满足条件的所有行~exec方法 */</span></span></span><br><span class="line"><span class="php">    $count = $pdo-&gt;exec(<span class="string">"DELETE FROM fruit WHERE colour = 'red'"</span>);</span></span><br><span class="line"><span class="php">    </span></span><br><span class="line"><span class="php">    <span class="comment">/* 返回被删除的行数 */</span></span></span><br><span class="line"><span class="php">    <span class="keyword">print</span>(<span class="string">"Deleted $count rows.\n"</span>);</span></span><br><span class="line"><span class="php">    <span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="未完待续。。。"><a href="#未完待续。。。" class="headerlink" title="未完待续。。。"></a>未完待续。。。</h3>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> salt </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML+CSS易忘点</title>
      <link href="/2019/12/06/html%E4%B8%8Ecss/"/>
      <url>/2019/12/06/html%E4%B8%8Ecss/</url>
      
        <content type="html"><![CDATA[<p>HTML是网页内容的载体,CSS样式是表现,JavaScript是用来实现网页上的特效效果与交互。总结自己遇到的一些知识点，查漏补缺，<strong>学习犹如逆水行舟，不进则退</strong>。<br><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/29a76b455d18153b5a5a2f141fee8bee.jpeg" alt=""></fancybox></p><a id="more"></a><h3 id="1-HTML的音视频播放"><a href="#1-HTML的音视频播放" class="headerlink" title="1.HTML的音视频播放"></a>1.HTML的音视频播放</h3><h4 id="1-1-HTML视频Video播放"><a href="#1-1-HTML视频Video播放" class="headerlink" title="1.1 HTML视频Video播放"></a>1.1 HTML视频Video播放</h4><p>最好的 HTML 解决方法：以下实例中使用了 4 种不同的视频格式。HTML 5 &lt;video&gt; 元素会尝试播放以 mp4、ogg 或 webm 格式中的一种来播放视频。如果均失败，则回退到 &lt;embed&gt; 元素。</p><p>HTML5 + &lt;object&gt; +&lt;embed&gt;<strong>mp3文件路径为相对路径</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--创建固定宽高的播放器标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">width</span>=<span class="string">"320"</span> <span class="attr">height</span>=<span class="string">"240"</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"movie.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"movie.ogg"</span> <span class="attr">type</span>=<span class="string">"video/ogg"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"movie.webm"</span> <span class="attr">type</span>=<span class="string">"video/webm"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">object</span> <span class="attr">data</span>=<span class="string">"movie.mp4"</span> <span class="attr">width</span>=<span class="string">"320"</span> <span class="attr">height</span>=<span class="string">"240"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">"movie.swf"</span> <span class="attr">width</span>=<span class="string">"320"</span> <span class="attr">height</span>=<span class="string">"240"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line">拓展：js与DOM操作设置视频播放器的功能（视频暂停，缩小，放大）</span><br><span class="line">```html</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align:center"</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"playPause()"</span>&gt;</span>播放/暂停<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"makeBig()"</span>&gt;</span>放大<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"makeSmall()"</span>&gt;</span>缩小<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"makeNormal()"</span>&gt;</span>普通<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">"video1"</span> <span class="attr">width</span>=<span class="string">"420"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"mov_bbb.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"mov_bbb.ogg"</span> <span class="attr">type</span>=<span class="string">"video/ogg"</span>&gt;</span></span><br><span class="line">        您的浏览器不支持 HTML5 video 标签。</span><br><span class="line">      <span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> myVideo=<span class="built_in">document</span>.getElementById(<span class="string">"video1"</span>); </span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">playPause</span><span class="params">()</span></span></span></span><br><span class="line">    &#123; </span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (myVideo.paused) </span></span><br><span class="line">          myVideo.play(); </span><br><span class="line"><span class="actionscript">        <span class="keyword">else</span> </span></span><br><span class="line">          myVideo.pause(); </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">makeBig</span><span class="params">()</span></span></span></span><br><span class="line">    &#123; </span><br><span class="line">        myVideo.width=560; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">makeSmall</span><span class="params">()</span></span></span></span><br><span class="line">    &#123; </span><br><span class="line">        myVideo.width=320; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">makeNormal</span><span class="params">()</span></span></span></span><br><span class="line">    &#123; </span><br><span class="line">        myVideo.width=420; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-audio音频文件的播放设置"><a href="#1-2-audio音频文件的播放设置" class="headerlink" title="1.2 audio音频文件的播放设置"></a>1.2 audio音频文件的播放设置</h4><p>src:MP3文件为相对路径</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span> <span class="attr">style</span>=<span class="string">"height:100px; width=100px"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"../static_audio/yiluxiangbei.mp3"</span> <span class="attr">type</span>=<span class="string">"audio/mpeg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"../static_audio/yiluxiangbei.ogg"</span> <span class="attr">type</span>=<span class="string">"audio/ogg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">embed</span> <span class="attr">height</span>=<span class="string">"50"</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">src</span>=<span class="string">"../static_audio/yiluxiangbei.mp3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&lt;audio&gt;标签的属性值有：</p><ul><li>autoplay：如果设置该属性，音频将自动播放，值为：autoplay；</li><li>controls：如果设置该属性，则显示音频控件（播放/暂停按钮），值：controls；</li><li>loop：如果设置该属性，则音频重复播放，值为：loop；</li><li>muted：如果设置该属性，则音频输出为静音，值：muted；</li><li>preload：规定当网页加载时，音频是否默认被加载以及如何被加载。值：auto/metadata/none；</li><li>src：规定音频文件的地址；</li></ul><h3 id="2-CSS的易混易错点"><a href="#2-CSS的易混易错点" class="headerlink" title="2.CSS的易混易错点"></a>2.CSS的易混易错点</h3><blockquote><p>-1.css样式的overflow-x：对边框中的溢出的内容进行隐藏</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">    overflow-x:hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>-2. -webkit-text-size-adjust:none :禁用Webkit内核浏览器的文字大小调整功能</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">故-webkit-text-size-adjust的用法如下：</span><br><span class="line">1、当样式表里font-size&lt;12px时，中文版chrome浏览器里字体显示仍为12px，这时可以用 html&#123;-webkit-text-size-adjust:none;&#125;</span><br><span class="line">2、-webkit-text-size-adjust放在body上会导致页面缩放失效</span><br><span class="line">3、body会继承定义在html的样式</span><br><span class="line">4、用-webkit-text-size-adjust不要定义成可继承的或全局的</span><br><span class="line">————————————————</span><br></pre></td></tr></table></figure><blockquote><p>-3. display用于设置元素的外部或者内部显示类型</p></blockquote><p>外部定义了在流式布局中如何展示，内部显示类型定义了元素内子元素的布局方式。</p><blockquote><p>-4. CSS中, padding: 0px 0px 0px 0px; 四个0px分别代表什么?</p></blockquote><p>padding: 0px 0px 0px 0px; 按顺序分别表示上填充、右填充、下填充、左填充为0px。<br>对应着：<br>padding-top:0px;<br>padding-right:0px;<br>padding-bottom:0px;<br>padding-left:0px;</p><blockquote><p>-5. css:background背景样式</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">background-color：背景颜色</span><br><span class="line">background-image：背景图片</span><br><span class="line">            -- body&#123;</span><br><span class="line">                    background-image:url(&apos;相对路径URL&apos;);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">background-repeat：背景样式是否重复</span><br><span class="line">            --background-repeat:repeat-x;水平方向重复</span><br><span class="line">            --background-repeat:repeat-y;垂直方向重复</span><br><span class="line"></span><br><span class="line">background-attachment：设置背景图像是否固定或者随着页面的其余部分滚动</span><br><span class="line">            --：scroll 默认值，背景随着滚动而滚动</span><br><span class="line">            --：fixed 固定图像，不随页面滚动而滚动</span><br><span class="line"></span><br><span class="line">background-position：right top left bottom (可多个组合)</span><br><span class="line">background-size: 规定背景图像的尺寸(100%表示全局展示图片)</span><br></pre></td></tr></table></figure><p>拓：背景图片自适应窗口大小案例        </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--背景图片自适应窗口大小--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    body&#123;</span><br><span class="line">        background-image: url(./public/images/5bbd6378a1fdc.jpg);</span><br><span class="line">        background-repeat: no-repeat;</span><br><span class="line">        background-attachment: fixed;</span><br><span class="line">        background-size: 100%;</span><br><span class="line">position: relative; // 可以选择不写</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>-6 CSS：text-align：文本对齐方式</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">text-align： left    把文本排列到左边。默认值：由浏览器决定。</span><br><span class="line">            right把文本排列到右边。</span><br><span class="line">            center把文本排列到中间。</span><br><span class="line">            justify实现两端对齐文本效果。</span><br><span class="line">            inherit规定应该从父元素继承 text-align 属性的值。</span><br></pre></td></tr></table></figure><blockquote><p>-7 设置字体大小：</p></blockquote><p>方式一：1em的默认大小是16px<br>方式二：px（像素）<br>方式三：百分比<br>————————————————<br>px : 我们最基础的单位（像素）<br>em : 相对于当前父节点字体的大小 —- 1em = 父节点字体大小<br>rem: 相对于当前根节点字体的大小 —- 1rem = 根（html）节点字体大小<br>vw: 当前视窗宽度 —- 1vw = 1%视窗宽度<br>vh: 可以理解成当前一个屏幕高度（一页高度） —- 1vh = 1%视窗宽度<br>vmin: vw和vh中较小的那个<br>vmax: vw和vh中较大的那个</p><blockquote><p>-8 overflow: 显示滚动条</p></blockquote><ul><li>visible 默认值。超出部分呈现在元素框外面</li><li>hidden 裁剪超出部分</li><li>scroll 一直显示滚动条，超出部分滚动可见</li><li>auto 当超出元素框后，显示滚动条，超出部分滚动可见</li><li>inherit 从父元素继承overflow属性<br>做一个简单的小demo：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">content</span>=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body&#123;</span><br><span class="line">            background-image: url("../public/images/5927f2c7269aa.jpg");</span><br><span class="line">            background-attachment: fixed;</span><br><span class="line">            background-size: 100%;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.ex1</span> &#123;</span></span><br><span class="line">            background-color: lightblue;</span><br><span class="line">            width: 110px;</span><br><span class="line">            height: 110px;</span><br><span class="line">            overflow: scroll;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.ex2</span> &#123;</span></span><br><span class="line">            background-color: lightblue;</span><br><span class="line">            width: 110px;</span><br><span class="line">            height: 110px;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.ex3</span> &#123;</span></span><br><span class="line">            background-color: lightblue;</span><br><span class="line">            width: 110px;</span><br><span class="line">            height: 110px;</span><br><span class="line">            overflow: auto;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.ex4</span> &#123;</span></span><br><span class="line">            background-color: lightblue;</span><br><span class="line">            width: 110px;</span><br><span class="line">            height: 110px;</span><br><span class="line">            overflow: visible;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>overflow 属性<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>如果元素中的内容超出了给定的宽度和高度属性，overflow 属性可以确定是否显示滚动条等行为。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>overflow: scroll:<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ex1"</span>&gt;</span>永州之野产异蛇：黑质而白章，触草木尽死；以啮人，无御之者。然得而腊之以为饵，可以已大风、挛踠、瘘疠，去死肌，杀三虫。其始太医以王命聚之，岁赋其二。募有能捕之者，当其租入。永之人争奔走焉。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>overflow: hidden:<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ex2"</span>&gt;</span>永州之野产异蛇：黑质而白章，触草木尽死；以啮人，无御之者。然得而腊之以为饵，可以已大风、挛踠、瘘疠，去死肌，杀三虫。其始太医以王命聚之，岁赋其二。募有能捕之者，当其租入。永之人争奔走焉。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>overflow: auto:<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ex3"</span>&gt;</span>永州之野产异蛇：黑质而白章，触草木尽死；以啮人，无御之者。然得而腊之以为饵，可以已大风、挛踠、瘘疠，去死肌，杀三虫。其始太医以王命聚之，岁赋其二。募有能捕之者，当其租入。永之人争奔走焉。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>overflow: visible (默认):<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ex4"</span>&gt;</span>永州之野产异蛇：黑质而白章，触草木尽死；以啮人，无御之者。然得而腊之以为饵，可以已大风、挛踠、瘘疠，去死肌，杀三虫。其始太医以王命聚之，岁赋其二。募有能捕之者，当其租入。永之人争奔走焉。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Demo展示：这里实现了背景图片的应用，以及css的overflow属性<br><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/20200117160229.png" alt=""></fancybox></p><blockquote><p>-9.&lt;img&gt;标签</p></blockquote><p>-和h系列标签/p标签还有hr标签不一样，img标签不会独占一行，如果我们手动指定了img标签显示的图片的宽度和高度，有可能会导致图片变形，那么如果又想指定宽度和高度，<br>&lt;img src=”当前电脑图片的路径” width=”200px” height=”200px” /&gt;</p><p>又不想让图片发生变形，我们可以只指定宽度或者高度其中的一个值即可</p><p>-只要指定了宽度，系统会自动根据宽度计算出高度，只要指定了高度，系统会自动根据高度计算出宽度，并且都是等比拉伸的，也就是说不会变形：<br>&lt;img src=”当前电脑图片的路径” width=”200px” /&gt;<br>&lt;img src=”当前电脑图片的路径” height=”200px” /&gt;</p><p>利用border属性来创建缩略图：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">40%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*&lt;img src="paris.jpg" alt="Paris"&gt;*/</span></span><br></pre></td></tr></table></figure><blockquote><p>10.postion属性</p></blockquote><p>postion:relative是相对定位:是相对于前面的容器定位的。这个时候不能用top left在定位,应该用margin。它可以随窗口大小变化。但大小仍然不会变。要是你设置成width:100%;height:100%;这样就会随着窗口变大变小<br>postion:absolute是绝对定位:是相对于浏览器的定位，释放自己的位置，以网页坐标原点做一个新的坐标，它不会随着窗口大小变化，只是固定在一个特定的坐标轴上<br>比如：position：absolute；left:20px;top:80px; 这个容器始终位于距离浏览器左20px,距离浏览器上80px的这个位置。</p><blockquote><p>11.CSS spirit css精灵</p></blockquote><p>CSS Image Sprites. ❮ Previous Next ❯:<br> An image sprite is a collection of images put into a single image.<br> A web page with many images can take a long time to load and generates multiple server requests.<br> Using image sprites will reduce the number of server requests and save bandwidth       </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*Code sample:*/</span></span><br><span class="line">    <span class="selector-class">.box</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">46px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">44px</span>;</span><br><span class="line">      <span class="attribute">background</span>: <span class="built_in">url</span>(img_navsprites.gif) -x <span class="built_in">-y</span>(这两个参数分别表示：向左，向上平移，均用负数表示); &#125;</span><br></pre></td></tr></table></figure><blockquote><p>12.HTML如何给网页添加ico图标:</p></blockquote><p>在head标签中添加：href表示ico文件的相对路径<br>&lt;link rel=”Bookmark” type=”image/x-icon” href=”b/img/icon/favicon.ico” /&gt;<br>&lt;link rel=”icon” type=”image/x-icon” href=”b/img/icon/favicon.ico” /&gt;<br>&lt;link rel=”shortcut icon” type=”image/x-icon” href=”b/img/icon/favicon.ico” /&gt;(推荐)</p><p>shortcut icon，特指浏览器中地址栏左侧显示的图标，一般大小为16x16，后缀名为.icon；<br>icon，指的是图标，格式可为PNG\GIF\JPEG，尺寸一般为16x16、24x24、36x36等。把这个图标放到网站的根目录下就可以了，页面加载时浏览器会自动检索这个图标然后把它加到标题上（当然也可以放在一个页面可以请求到的目录下）。<br>Bookmark，当网站收藏到收藏夹中时，显示在前面的图标。<br>————————————————</p><blockquote><p>13.readme文件的伪徽章样式,<a href="https://github.com/FioraLove/HTML-CSS-JavaScript/blob/master/html/readme%E7%9A%84%E4%BC%AA%E5%BE%BD%E7%AB%A0%E6%A0%B7%E5%BC%8F.html" target="_blank" rel="noopener">参考代码</a></p></blockquote><p><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/D:/data/images20191207103058.png" alt="实际样式"></fancybox></p><blockquote><p>14.表单form标签</p></blockquote><p>&lt;input&gt;标签 定义通用的表单元素,其type类型为：</p><ul><li>type=”text” 定义单行文本输入框</li><li>type=”password” 定义密码输入框</li><li>type=”radio” 定义单选框</li><li>type=”checkbox” 定义复选框</li><li>type=”file” 定义上传文件    form表单需要加上属性enctype=”multipart/form-data”</li><li>type=”submit” 定义提交按钮</li><li>type=”reset” 定义重置按钮</li><li>type=”button” 定义一个普通按钮</li></ul><p>相关属性介绍：</p><ul><li><strong>value属性： 定义表单元素的值,此值是数据提交时键的值</strong></li><li><strong>name属性： 定义表单元素的名称，此名称是提交数据时的键名</strong></li><li>checked:  radio 和 checkbox 默认被选中</li><li>readonly: 只读. text 和 password</li><li>disabled: 对所用input都好使.</li></ul><p>高级用法：<br><strong>placeholder：</strong><br>1.input类型的文本框提供一种提示（hint）<br>2.可以描述文本框期待用户输入何种内容<br>3.提示语默认显示，当文本框中输入内容时提示语消失<br>4.适合于input标签：text、search、url、email和password等类型</p><p><strong>required：</strong></p><p>1.规定文本框填写内容不能为空，否则不允许用户提交表单<br>2.适合于input标签：text、search、url、email、password、number、checkbox、radio、file等类型</p><p>举一个案例：比较标准的表单格式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--action 定义表单数据提交地址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://127.0.0.1:8000/post_info"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--单行文本框--&gt;</span> <span class="comment">&lt;!--设置了required就要求此表单为必填项--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">placeholder</span>=<span class="string">"请输入账号"</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!--密码框--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 邮箱Email--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">id</span>=<span class="string">"Email"</span> <span class="attr">placeholder</span>=<span class="string">"请输入邮箱"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--单选框--&gt;</span></span><br><span class="line">    性别：<span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--多选框--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    最喜欢的游戏：</span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fav"</span> <span class="attr">value</span>=<span class="string">"LOL"</span> <span class="attr">checked</span>&gt;</span>英雄联盟<span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="comment">&lt;!---默认选中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fav"</span> <span class="attr">value</span>=<span class="string">"shoot"</span> <span class="attr">disabled</span>&gt;</span>喷射战士<span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="comment">&lt;!---无法选择 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fav"</span> <span class="attr">value</span>=<span class="string">"zelda"</span>&gt;</span>塞尔达传说<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fav"</span> <span class="attr">value</span>=<span class="string">"mario"</span>&gt;</span>马里奥<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--上传图片--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"pic"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--多行文本框--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"text"</span> <span class="attr">cols</span>=<span class="string">"30"</span> <span class="attr">rows</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--下拉列表--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"city"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"gz"</span> <span class="attr">selected</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span>  <span class="comment">&lt;!-- 表示默认选中 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"sz"</span> <span class="attr">disabled</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span>  <span class="comment">&lt;!-- 表示无法选择 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"zh"</span>&gt;</span>中山<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"hz"</span>&gt;</span>杭州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"cd"</span>&gt;</span>成都<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--提交表单--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--重置表单--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">value</span>=<span class="string">"重置"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--- 点击提交到目标网址后：http://localhost:63343/FioraLove_Blog/demo.html?username=AhriLove&amp;password=chen654321&amp;sex=1&amp;fav=shoot&amp;pic=&amp;text=hello+world&amp;city=gz--&gt;</span></span><br></pre></td></tr></table></figure><p>tips：<br><strong>1.HTML下的表单标签中的&lt;input&gt;便签的value属性：定义表单元素的值,此值是数据提交时键的值</strong><br><strong>2.单选框radio与多选框checkbox的name，type属性必须要全部一样，value值可以不一样，因为value值定义表单元素的值,此值是数据提交时键的值</strong></p><blockquote><p>15.transform属性</p></blockquote><p>Transform属性应用于元素的2D或3D转换。这个属性允许你将元素旋转，缩放，移动，倾斜等。<br>语法：transform：none|transform-function (紧跟在 -webkit-, -ms- 或 -moz- 前的数字为支持该前缀属性的第一个浏览器版本号)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">transform</span>:<span class="built_in">rotate</span>(7deg);</span><br><span class="line">    <span class="attribute">-ms-transform</span>:<span class="built_in">rotate</span>(7deg); <span class="comment">/* 在IE 9 浏览器上生效 */</span></span><br><span class="line">    <span class="attribute">-webkit-transform</span>:<span class="built_in">rotate</span>(7deg); <span class="comment">/* 在Safari and Chrome上生效 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>-webkit、-ms-transform常见属性：</p><ul><li>none：定义不进行转换</li><li>rotate(30deg):旋转角度</li><li>translate(50px,200px);定义2D转换，进行平移</li><li>scale（）：进行缩放</li></ul><h3 id="3-PC与移动端响应式布局"><a href="#3-PC与移动端响应式布局" class="headerlink" title="3.PC与移动端响应式布局"></a>3.PC与移动端响应式布局</h3><p><a href="https://www.jb51.net/web/459394.html" target="_blank" rel="noopener">【转载：PC端和移动端自适应问题的快速解决方法】</a><br><a href="https://blog.csdn.net/dalqyou/article/details/87880895" target="_blank" rel="noopener">【转载：解决PC端和移动端自适应问题？】</a></p><h3 id="4-css知识点补充"><a href="#4-css知识点补充" class="headerlink" title="4.css知识点补充"></a>4.css知识点补充</h3><p>文本格式：</p><ul><li>text-align:center,right,justify :文本对齐方式</li><li>text-decoration :none 主要是用来删除链接的下划线</li><li>text-transform：uppercase，lowercase，capitalize 所有字句变成大写，小写或首字母大写     </li><li>text-indent：50px 用来指定文本的第一行的缩进</li></ul><p>css边框属性：</p><ul><li>border: 边框样式的简写，可同时包含颜色，宽度，样式</li><li>border-width ：属性为边框指定宽度</li><li>border-color ：设置边框的颜色</li><li>border-style： 定义边框样式（可以使得四个边框分别由四个不同样式，满足上右下左四个次序）</li><li>border-（top，right，bottom，left）-style: 设置某一边的具体属性</li><li>border-radius ：用于创建边框圆角（拓：四个值: 第一个值为左上角，第二个值为右上角，第三个值为右下角，第四个值为左下角。）</li><li>border-shadow： 在div中添加阴影属性，并设置阴影的颜色（10px 10px 5px #888888）</li></ul><p>css渐变属性：</p><ul><li>background-image：linear-gradient（direction，color1，color2… ）：线性渐变（linear-gradient(to bottom right, red , yellow)从左上方开始渐变）</li><li>background-image：radial-gradient（direction，color1，color2… ）：径向渐变</li></ul><p>css的透明度：</p><ul><li>rgba(a,b,c,d):rgba 是 CSS3 中的属性。rgba 括号中前 3 个数字代表着 red green blue 三种颜色的 rgb 值（0-255），最后一个是设定这个颜色的透明度即 alpha 值。范围从 0 到 1，越接近 1，代表透明度越低。</li><li>opacity: 0-1 设置透明度(<strong>&lt;body&gt;标签里面是不能直接设置背景图片的透明度的，要利用&lt;div&gt;标签</strong>)</li><li>filter:alpha(opacity=10-100) IE和更早的版本使用</li></ul><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><a href="https://blog.csdn.net/nanjinzhu/article/details/82251110?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">HTML-表单（非常详细）原创 北方的南先生</a></li><li><a href="https://blog.csdn.net/cooooooooco/article/details/79656358" target="_blank" rel="noopener">关于设置背景图片的透明度（html+css）</a></li><li><a href="https://www.runoob.com/try/try.php?filename=trycss_ex_images_thumbnail" target="_blank" rel="noopener">HTML创建图片缩略图</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python全栈系列章节更新（六）：装饰器</title>
      <link href="/2019/12/05/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E5%85%AD%EF%BC%89%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
      <url>/2019/12/05/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E5%85%AD%EF%BC%89%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;让爬虫像人一样打卡工作，工作还得有快有慢，wtf，想了半天，写个装饰器算了，也顺便复习下装饰器，也能基本能满足需求：<br>其实也可以使用<br><font color=#ef4136><br>1.轻量级的Python定时任务调度框架（<a href="https://www.cnblogs.com/Neeo/p/10435059.html" target="_blank" rel="noopener">APSchedule库</a>）<br>2.Linux的定时任务<br>3.文件数多，还要做监控和扩展之类的话，用 Flask 写一个服务，将 Apscheduler 和 Scrapyd 继承到服务中，这样就是一个完整的爬虫项目部署和调度管理平台了<br></font></p><a id="more"></a><p>装饰器原理：不修改已实现的功能代码块，不改变原函数调用方式，只对现有功能进行扩展</p><h2 id="装饰器案例"><a href="#装饰器案例" class="headerlink" title="装饰器案例"></a>装饰器案例</h2><p>举一个简单的装饰器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(func)</span>:</span>  <span class="comment"># 装饰器接受一个函数作为参数，并返回一个函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span>  <span class="comment"># (*args, **kwargs)表示带参数的装饰器</span></span><br><span class="line">        print(<span class="string">'call %s(): '</span> % func.__name__)  <span class="comment"># 魔法函数，返回函数名</span></span><br><span class="line">        func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@test  # 运用@语法把装饰器放置在函数定义处</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    print(<span class="string">"%s:%s"</span>%(a,b))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    now(<span class="string">"hello"</span>,<span class="string">"world"</span>)</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :return</span></span><br><span class="line"><span class="string">    call now(): </span></span><br><span class="line"><span class="string">    hello:world </span></span><br><span class="line"><span class="string">    """</span></span><br></pre></td></tr></table></figure><h2 id="爬虫波动性工作装饰器函数"><a href="#爬虫波动性工作装饰器函数" class="headerlink" title="爬虫波动性工作装饰器函数"></a>爬虫波动性工作装饰器函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time,datetime,random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jobstatus</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    爬虫的工作状态装饰器</span></span><br><span class="line"><span class="string">    周一至周五</span></span><br><span class="line"><span class="string">    09:00-18:00</span></span><br><span class="line"><span class="string">    小时数是偶数</span></span><br><span class="line"><span class="string">    每分钟请求30次左右</span></span><br><span class="line"><span class="string">    小时数是奇数</span></span><br><span class="line"><span class="string">    每分钟请求10次左右</span></span><br><span class="line"><span class="string">    其余时间等待</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">            week_now = datetime.datetime.now().weekday()</span><br><span class="line">            hour_now = datetime.datetime.now().hour  <span class="comment"># 14</span></span><br><span class="line">            <span class="comment"># 判断当前星期是否为工作日</span></span><br><span class="line">            <span class="keyword">if</span> week_now <span class="keyword">in</span> list(range(<span class="number">1</span>,<span class="number">6</span>)):</span><br><span class="line">            <span class="comment"># 判断当前时间是否为工作时间</span></span><br><span class="line">                <span class="keyword">if</span> <span class="number">9</span> &lt;= hour_now &lt;= <span class="number">18</span>:</span><br><span class="line">                    <span class="keyword">if</span> hour_now % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                        time.sleep(random.choice([<span class="number">1</span>,<span class="number">2</span>]))</span><br><span class="line">                        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        time.sleep(random.choice([<span class="number">3</span>,<span class="number">4</span>]))</span><br><span class="line">                        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment">#</span></span><br><span class="line">                    time.sleep(<span class="number">3600</span>*<span class="number">16</span>)</span><br><span class="line">            <span class="comment"># 休眠24小时</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                time.sleep(<span class="number">86400</span>)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 装饰器 </tag>
            
            <tag> 定时任务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Echarts</title>
      <link href="/2019/12/05/echarts/"/>
      <url>/2019/12/05/echarts/</url>
      
        <content type="html"><![CDATA[<p><font color=#ef4136>简而言之，百度Echarts真的是数据展示的神器，官方给出的实例就能够满足实际基本要求</font></p><blockquote><p>1.echarts创建实例<br>2.<br><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/D:/data/imagesecharts.JPG" style="height:300px"></p></blockquote><a id="more"></a><h3 id="1-引入ECharts"><a href="#1-引入ECharts" class="headerlink" title="1.引入ECharts"></a>1.引入ECharts</h3><p>通过标签方式直接引入构建好的 echarts 文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 ECharts 文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"echarts.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-为-ECharts-准备一个具备高宽的-DOM-容器"><a href="#2-为-ECharts-准备一个具备高宽的-DOM-容器" class="headerlink" title="2.为 ECharts 准备一个具备高宽的 DOM 容器"></a>2.为 ECharts 准备一个具备高宽的 DOM 容器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 为 ECharts 准备一个具备大小（宽高）的 DOM --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span> <span class="attr">style</span>=<span class="string">"width: 600px;height:400px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-echarts-init-方法初始化一个-echarts-实例并通过-setOption-方法生成一个简单的柱状图"><a href="#3-echarts-init-方法初始化一个-echarts-实例并通过-setOption-方法生成一个简单的柱状图" class="headerlink" title="3. echarts.init 方法初始化一个 echarts 实例并通过 setOption 方法生成一个简单的柱状图"></a>3. echarts.init 方法初始化一个 echarts 实例并通过 setOption 方法生成一个简单的柱状图</h3><p>完整案例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>ECharts<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 echarts.js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"echarts.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 为ECharts准备一个具备大小（宽高）的Dom --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span> <span class="attr">style</span>=<span class="string">"width: 600px;height:400px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 基于准备好的dom，初始化echarts实例</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> myChart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'main'</span>));</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 指定图表的配置项和数据</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> option = &#123;</span></span><br><span class="line">            title: &#123;</span><br><span class="line"><span class="actionscript">                text: <span class="string">'ECharts 入门示例'</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            tooltip: &#123;&#125;,</span><br><span class="line">            legend: &#123;</span><br><span class="line"><span class="actionscript">                data:[<span class="string">'销量'</span>]</span></span><br><span class="line">            &#125;,</span><br><span class="line">            xAxis: &#123;</span><br><span class="line"><span class="actionscript">                data: [<span class="string">"衬衫"</span>,<span class="string">"羊毛衫"</span>,<span class="string">"雪纺衫"</span>,<span class="string">"裤子"</span>,<span class="string">"高跟鞋"</span>,<span class="string">"袜子"</span>]</span></span><br><span class="line">            &#125;,</span><br><span class="line">            yAxis: &#123;&#125;,</span><br><span class="line">            series: [&#123;</span><br><span class="line"><span class="actionscript">                name: <span class="string">'销量'</span>,</span></span><br><span class="line"><span class="actionscript">                type: <span class="string">'bar'</span>,</span></span><br><span class="line">                data: [5, 20, 36, 10, 10, 20]</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 使用刚指定的配置项和数据显示图表。</span></span></span><br><span class="line"><span class="vbscript">        myChart.setOption(<span class="keyword">option</span>);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-异步加载"><a href="#4-异步加载" class="headerlink" title="4.异步加载"></a>4.异步加载</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 ECharts 文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"echarts.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"pie"</span> <span class="attr">style</span>=<span class="string">"width: 600px;height:400px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> myChart1 = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'pie'</span>));</span></span><br><span class="line">myChart1.showLoading();</span><br><span class="line"><span class="actionscript">setInterval(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line">    myChart1.hideLoading();</span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="comment">&lt;!---这里面进行数据绑定与实例化图表 --&gt;</span></span></span></span><br><span class="line">    myChart1.setOption(&#123;</span><br><span class="line">            series : [</span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                    name: <span class="string">'访问来源'</span>,</span></span><br><span class="line"><span class="actionscript">                    type: <span class="string">'pie'</span>,</span></span><br><span class="line"><span class="actionscript">                    radius: <span class="string">'55%'</span>,</span></span><br><span class="line">                    data:[</span><br><span class="line"><span class="actionscript">                        &#123;value:<span class="number">235</span>, name:<span class="string">'视频广告'</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                        &#123;value:<span class="number">274</span>, name:<span class="string">'联盟广告'</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                        &#123;value:<span class="number">310</span>, name:<span class="string">'邮件营销'</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                        &#123;value:<span class="number">335</span>, name:<span class="string">'直接访问'</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                        &#123;value:<span class="number">400</span>, name:<span class="string">'搜索引擎'</span>&#125;</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,1000);    </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-移动端自适应"><a href="#5-移动端自适应" class="headerlink" title="5.移动端自适应"></a>5.移动端自适应</h3><p>1.为Echarts准备一个具有宽高(有一个即可)的DOM，推荐使用bootstrap的栅栏系统来设置布局<br>2.大部分的组件和系列的left/right/top/bottom/width/height的定位方式</p><ul><li>绝对值，用number形式书写（已经固定写死了浏览器的像素）</li><li>百分比，表示占DOM容器的宽高的百分之多少，用string形式书写</li><li>位置描述，即center（水平居中），middle（垂直居中）</li></ul><h3 id="6-Echarts的标题title设置大全"><a href="#6-Echarts的标题title设置大全" class="headerlink" title="6.Echarts的标题title设置大全"></a>6.Echarts的标题title设置大全</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">var option = &#123;</span><br><span class="line">    //标题</span><br><span class="line">    title : &#123;</span><br><span class="line">        show:true,//显示策略，默认值true,可选为：true（显示） | false（隐藏）</span><br><span class="line">        text: &apos;主标题&apos;,//主标题文本，&apos;\n&apos;指定换行</span><br><span class="line">        link:&apos;&apos;,//主标题文本超链接,默认值true</span><br><span class="line">        target: null,//指定窗口打开主标题超链接，支持&apos;self&apos; | &apos;blank&apos;，不指定等同为&apos;blank&apos;（新窗口）</span><br><span class="line">        subtext: &apos;副标题&apos;,//副标题文本，&apos;\n&apos;指定换行</span><br><span class="line">        sublink: &apos;&apos;,//副标题文本超链接</span><br><span class="line">        subtarget: null,//指定窗口打开副标题超链接，支持&apos;self&apos; | &apos;blank&apos;，不指定等同为&apos;blank&apos;（新窗口）</span><br><span class="line">        x:&apos;center&apos;//水平安放位置，默认为&apos;left&apos;，可选为：&apos;center&apos; | &apos;left&apos; | &apos;right&apos; | &#123;number&#125;（x坐标，单位px）</span><br><span class="line">        y: &apos;top&apos;,//垂直安放位置，默认为top，可选为：&apos;top&apos; | &apos;bottom&apos; | &apos;center&apos; | &#123;number&#125;（y坐标，单位px）</span><br><span class="line">        textAlign: null,//水平对齐方式，默认根据x设置自动调整，可选为： left&apos; | &apos;right&apos; | &apos;center</span><br><span class="line">        backgroundColor: &apos;rgba(0,0,0,0)&apos;,//标题背景颜色，默认&apos;rgba(0,0,0,0)&apos;透明</span><br><span class="line">        borderColor: &apos;#ccc&apos;,//标题边框颜色,默认&apos;#ccc&apos;</span><br><span class="line">        borderWidth: 0,//标题边框线宽，单位px，默认为0（无边框）</span><br><span class="line">        padding: 5,//标题内边距，单位px，默认各方向内边距为5，接受数组分别设定上右下左边距</span><br><span class="line">        itemGap: 10,//主副标题纵向间隔，单位px，默认为10</span><br><span class="line">        textStyle: &#123;//主标题文本样式&#123;&quot;fontSize&quot;: 18,&quot;fontWeight&quot;: &quot;bolder&quot;,&quot;color&quot;: &quot;#333&quot;&#125;</span><br><span class="line">            fontFamily: &apos;Arial, Verdana, sans...&apos;,</span><br><span class="line">            fontSize: 12,</span><br><span class="line">            fontStyle: &apos;normal&apos;,</span><br><span class="line">            fontWeight: &apos;normal&apos;,</span><br><span class="line">        &#125;,</span><br><span class="line">        subtextStyle: &#123;//副标题文本样式&#123;&quot;color&quot;: &quot;#aaa&quot;&#125;</span><br><span class="line">            fontFamily: &apos;Arial, Verdana, sans...&apos;,</span><br><span class="line">            fontSize: 12,</span><br><span class="line">            fontStyle: &apos;normal&apos;,</span><br><span class="line">            fontWeight: &apos;normal&apos;,</span><br><span class="line">        &#125;,</span><br><span class="line">        zlevel: 0,//一级层叠控制。默认0,每一个不同的zlevel将产生一个独立的canvas，相同zlevel的组件或图标将在同一个canvas上渲染。zlevel越高越靠顶层，canvas对象增多会消耗更多的内存和性能，并不建议设置过多的zlevel，大部分情况可以通过二级层叠控制z实现层叠控制。</span><br><span class="line">        z: 6,//二级层叠控制，默认6,同一个canvas（相同zlevel）上z越高约靠顶层。</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="7-echarts小知识点"><a href="#7-echarts小知识点" class="headerlink" title="7.echarts小知识点"></a>7.echarts小知识点</h3><blockquote><p>legend默认不显示某些图例(selected属性)</p></blockquote><ol><li><p>selected属性将目标图例设置为false</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">legend: &#123;</span><br><span class="line">　　show: &apos;&apos;,</span><br><span class="line">　　icon:&quot;circle&quot;,　　//更改图列的默认样式    （ &apos;circle&apos;, &apos;rect&apos;, &apos;roundRect&apos;, &apos;triangle&apos;, &apos;diamond&apos;, &apos;pin&apos;, &apos;arrow&apos;）（全部的图例类型改变）</span><br><span class="line">　　selected:&#123;</span><br><span class="line">　　　　&quot;上期增长率&quot;:false  //图例为‘上期增长率’的一项默认置灰</span><br><span class="line">　　　　&quot;同比增长率&quot;:false  //图例为‘同比增长率’的一项默认置灰</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>图例的列表布局与文本对齐方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">legend: &#123;</span><br><span class="line">    orient:&apos;horizontal&apos; 或 &apos;vertical&apos;  // 图例列表的布局朝向。</span><br><span class="line">    align: &apos;auto&apos;或 &apos;left&apos; 或&apos;right&apos;   // 图例标记和文本的对齐</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是legend.align由right变为left的效果<br><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/demo.png" alt=""></p></li><li><p>legend的其它参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">legend: &#123;</span><br><span class="line">    orient: &apos;vertical&apos;,</span><br><span class="line">    x:&apos;right&apos;,      //可设定图例在左、右、居中</span><br><span class="line">    y:&apos;center&apos;,     //可设定图例在上、下、居中</span><br><span class="line">    padding:[0,50,0,0],   //可设定图例[距上方距离，距右方距离，距下方距离，距左方距离]</span><br><span class="line">    data: [&apos;直接访问&apos;,&apos;微信&apos;,&apos;百度&apos;,&apos;其他文章&apos;,&apos;网页&apos;]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>①x : 可以设定图例在—-左（left）、右（right）、居中（center）、填写数字（如:100px）<br>②y : 可以设定图例在—-上（top）、下（bottom）、居中（center）、填写数字（如:100px）<br>③另外，可使用padding:<br>padding:[0,50,0,0] [（距离上方距离），（距离右方距离）、（距离下方距离）、（距离左方距离）]</p></li></ol><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li>Echarts图例位置 - legend属性：<a href="https://blog.csdn.net/woteafuck/article/details/91986313" target="_blank" rel="noopener">https://blog.csdn.net/woteafuck/article/details/91986313</a></li><li>ECharts图例组件配置: <a href="https://www.w3cschool.cn/echarts_tutorial/echarts_tutorial-vnga2cgx.html" target="_blank" rel="noopener">https://www.w3cschool.cn/echarts_tutorial/echarts_tutorial-vnga2cgx.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> echarts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python全栈系列章节更新（五）：并发编程~多线程</title>
      <link href="/2019/12/04/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E4%BA%94%EF%BC%89/"/>
      <url>/2019/12/04/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>线程顾名思义，就是一条流水线工作的过程（流水线的工作需要电源，电源就相当于cpu），而一条流水线必须属于一个车间，一个车间的工作过程是一个进程，车间负责把资源整合到一起，是一个资源单位，而一个车间内至少有一条流水线。<br>所以，<font color=#ef4136>进程只是用来把资源集中到一起（进程只是一个资源单位，或者说资源调度集合），而线程才是cpu上的执行单位</font></p><blockquote><p>1.线程与进程的区别<br>2.为何会选择多线程<br>3.创建多线程的方式<br>4.线程对象的属性和方法<br>5.守护线程<br>6.线程池与进程池<br>7.多线程，到底该设置多少个线程？</p></blockquote><a id="more"></a><h3 id="1-线程与进程的区别"><a href="#1-线程与进程的区别" class="headerlink" title="1.线程与进程的区别"></a>1.线程与进程的区别</h3><p>1、每启动一个进程，进程内都至少有一个线程。</p><p>　　2、进程本身只是一个资源调度集合，并不能真正执行，进程内开的线程才是真正的运行单位。</p><p>　　3、一个进程内可以启动多个线程，同一进程内线程间共享资源。</p><p><font color=#ef4136>4、启动线程的开销远远小于开进程。</font></p><p>　　5、线程可以相当程度控制相同进程下的线程，进程只能控制其子进程。</p><p>　　6、对主线程的更改（取消、优先级更改等）可能会进程的其他线程的行为；对父进程的修改则不会影响子进程。</p><p>   7、进程之间是竞争关系，线程之间是协作关系 </p><h3 id="2-为何会选择多线程？"><a href="#2-为何会选择多线程？" class="headerlink" title="2.为何会选择多线程？"></a>2.为何会选择多线程？</h3><ol><li><p>同一个进程内的多个线程共享该进程内的地址资源</p></li><li><p>线程比进程更轻量级，线程比进程更容易创建可撤销</p></li></ol><h3 id="3-创建线程的方式"><a href="#3-创建线程的方式" class="headerlink" title="3.创建线程的方式"></a>3.创建线程的方式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time, random</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">piao</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'%s piaoing'</span> % name)</span><br><span class="line">    time.sleep(random.randrange(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line">    print(<span class="string">'%s piao end'</span> % name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t1 = Thread(target=piao, args=(<span class="string">'egon'</span>, ))</span><br><span class="line">    t1.start()  <span class="comment"># 主线程向操作系统发信号，又开了一个线程</span></span><br><span class="line">    print(<span class="string">"主线程"</span>)   <span class="comment"># 执行角度看是主线程，从资源角度看是主进程</span></span><br><span class="line"><span class="comment"># 这个程序总体是一个进程、两个线程</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">egon piaoing</span></span><br><span class="line"><span class="string">主线程</span></span><br><span class="line"><span class="string">egon piao end</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h3 id="4-线程对象的属性和方法"><a href="#4-线程对象的属性和方法" class="headerlink" title="4.线程对象的属性和方法"></a>4.线程对象的属性和方法</h3><blockquote><p>4.1 Thread实例对象的方法</p></blockquote><p>isAlive():返回线程是否活动的<br>getName():返回线程名<br>setName():设置线程名</p><h3 id="5-守护线程"><a href="#5-守护线程" class="headerlink" title="5.守护线程"></a>5.守护线程</h3><p>守护线程守护主线程，等到主线程死了才会被销毁。在有其他线程的情况下，主线程代码运行完后，等其他非守护线程结束，守护线程才会死掉。</p><p>　　无论是进程还是线程，都遵循：守护xxx会等待主xxx运行完毕后被销毁。需要强调的是：运行完毕并非终止运行。运行完毕的真正含义：<br><font color=#ef4136><br>　　1、对主进程来说，运行完毕指的是主进程代码运行完毕。</p><p>　　2、对主线程来说，运行完毕指的是主线程所在的进程内所有非守护线程统统运行完毕，主线程才能运行完毕。</font></p><h3 id="6-进程池和线程池"><a href="#6-进程池和线程池" class="headerlink" title="6.进程池和线程池"></a>6.进程池和线程池</h3><p>进程池和线程池的接口一模一样，用法也一样。池就是要对数目加以限制，保证机器一个可承受的范围，以一个健康的状态保证它的运行<br>基本方法：<br>1、submit(fn, <em>args, *</em>kwargs)<br>异步提交任务</p><p>2、map(func, *iterables, timeout=None, chunksize=1)<br>取代for循环submit的操作</p><p>3、shutdown(wait=True)<br>相当于进程池的pool.close()+pool.join()操作<br>wait=True，等待池内所有任务执行完毕回收完资源后才继续<br>wait=False，立即返回，并不会等待池内的任务执行完毕<br>但不管wait参数为何值，整个程序都会等到所有任务执行完毕<br>submit和map必须在shutdown之前</p><p>4、result(timeout=None)<br>取得结果</p><p>5、add_done_callback(fn)<br>回调函数</p><blockquote><p>进程池</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ProcessPoolExecutor,ThreadPoolExecutor</span><br><span class="line"><span class="keyword">import</span> os, time, random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">"name: %s pid: %s run"</span> % (name, os.getpid()))</span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    pool = ProcessPoolExecutor(<span class="number">4</span>)    <span class="comment"># 指定进程池大小，最大进程数，如果不指定默认是CPU核数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        <span class="string">"""从始至终四个进程解决这10个任务，谁没事了接新任务"""</span></span><br><span class="line">        pool.submit(task, <span class="string">'egon%s'</span> %i)   <span class="comment"># 提交任务的方式————异步调用：提交完任务，不用在原地等任务执行拿到结果。</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"主进程"</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">name: egon0 pid: 12445 run</span></span><br><span class="line"><span class="string">name: egon1 pid: 12444 run</span></span><br><span class="line"><span class="string">name: egon2 pid: 12446 run</span></span><br><span class="line"><span class="string">name: egon3 pid: 12447 run</span></span><br><span class="line"><span class="string">主进程</span></span><br><span class="line"><span class="string">name: egon4 pid: 12445 run</span></span><br><span class="line"><span class="string">name: egon5 pid: 12444 run</span></span><br><span class="line"><span class="string">name: egon6 pid: 12446 run</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><blockquote><p>shutdown()方法的使用</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ProcessPoolExecutor,ThreadPoolExecutor</span><br><span class="line"><span class="keyword">import</span> os, time, random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">"name: %s pid: %s run"</span> % (name, os.getpid()))</span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    pool = ProcessPoolExecutor(<span class="number">4</span>)    <span class="comment"># 指定进程池大小，最大进程数，如果不指定默认是CPU核数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        <span class="string">"""从始至终四个进程解决这10个任务，谁没事了接新任务"""</span></span><br><span class="line">        pool.submit(task, <span class="string">'egon%s'</span> %i)   <span class="comment"># 提交任务的方式————异步调用：提交完任务，不用在原地等任务执行拿到结果。</span></span><br><span class="line"></span><br><span class="line">    pool.shutdown()   <span class="comment"># 把提交任务入口关闭，默认参数wait=True；同时还进行了pool.join()操作，等任务提交结束，再结束主进程</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"主进程"</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">name: egon0 pid: 12502 run</span></span><br><span class="line"><span class="string">name: egon1 pid: 12503 run</span></span><br><span class="line"><span class="string">....</span></span><br><span class="line"><span class="string">name: egon9 pid: 12505 run</span></span><br><span class="line"><span class="string">主进程</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h3 id="7-多线程，到底该设置多少个线程？"><a href="#7-多线程，到底该设置多少个线程？" class="headerlink" title="7.多线程，到底该设置多少个线程？"></a>7.多线程，到底该设置多少个线程？</h3><p>那我们如何分配线程？我们提供一个公式：</p><p><font color=#d71345>最佳线程数目 = （（线程等待时间+线程CPU时间）/线程CPU时间 ）* CPU数目</font></p><p>备注：这个公式也是前辈们分享的，当然之前看了淘宝前台系统优化实践的文章，和上面的公式很类似，不过在CPU数目那边，他们更细化了，上面的公式只是参考。不过不管什么公式，最终还是在生产环境中运行后，再优化调整。</p><p>我们继续上面的任务，我们的服务器CPU核数为4核，一个任务线程cpu耗时为20ms，线程等待（网络IO、磁盘IO）耗时80ms，那最佳线程数目：( 80 + 20 )/20 * 4 = 20。也就是设置20个线程数最佳。</p><p>从这个公式上面我们就得出，线程的等待时间越大，线程数就要设置越大，这个正好符合我们上面的分析，可提升CPU利用率。那从另一个角度上面说，线程数设置多大，是根据我们自身的业务的，需要自己去压力测试，设置一个合理的数值。</p><blockquote><p>基础常规标准</p></blockquote><p>我们可以尝试去猜想，因为很多业务集中到一个线程池中，不像上面的案例比较简单，事实上业务太多，怎么设置呢？这个就是要去压力测试去调整。不过我们的前辈已经帮我们总结了一个基础的值（最终还是要看运行情况自行调整）</p><p>1、CPU密集型：操作内存处理的业务，一般线程数设置为：CPU核数 + 1 或者 CPU核数*2。核数为4的话，一般设置 5 或 8</p><p>2、IO密集型：文件操作，网络操作，数据库操作，一般线程设置为：cpu核数 / (1-0.9)，核数为4的话，一般设置 40</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python全栈系列章节更新（四）：并发编程~多进程</title>
      <link href="/2019/12/04/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%EF%BC%88%E5%A4%9A%E8%BF%9B%E7%A8%8B%EF%BC%89/"/>
      <url>/2019/12/04/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%EF%BC%88%E5%A4%9A%E8%BF%9B%E7%A8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="1-进程与程序"><a href="#1-进程与程序" class="headerlink" title="1.进程与程序"></a>1.进程与程序</h2><p>程序仅仅是一堆代码，进程指的是程序的运行过程<br>注意：同一个程序执行两次，也是两个进程<br>进程：正在进行的一个过程，是一个任务，或者说是一个资源调度的集合。</p><h2 id="2-并发与并行"><a href="#2-并发与并行" class="headerlink" title="2.并发与并行"></a>2.并发与并行</h2><p>无论是并行还是并发，在用户看来都是’同时’运行的，不管是进程还是线程，都只是一个任务而已，真实干活的是cpu，cpu来做这些任务，而<font color=#1d953f>一个cpu同一时刻只能执行一个任务。</font><br><font color=#1d953f><br>　　一、并发：伪并行，即看起来多个进程像在同时运行。单个cpu+多道技术可实现并发。</p><p>　　二、并行：多个进程同时运行，只有具备多个cpu才能实现。</font><br><fancybox><img src="https://images2018.cnblogs.com/blog/1311506/201805/1311506-20180506164225499-509092524.png" alt="并发，并行，串行"></fancybox></p><h2 id="3-多进程的创建：Process类"><a href="#3-多进程的创建：Process类" class="headerlink" title="3.多进程的创建：Process类"></a>3.多进程的创建：Process类</h2><p><font color=#1d953f>注意：在windows中Process()必须放到# if __name__ == &#39;__main__&#39;:下</font><br>进程创建格式：target表示函数名，args=(参数一,参数二,…,)，参数最后一定要保留一个逗号<br>p = Process(target=task, args=(‘子进程1’,))</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">"%s is running"</span> % name)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">"%s is done"</span> % name)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 创建进程    </span></span><br><span class="line">    p = Process(target=task, args=(<span class="string">'子进程1'</span>,))  <span class="comment"># 得到对象</span></span><br><span class="line">    <span class="comment"># 启动进程</span></span><br><span class="line">    p.start()</span><br><span class="line">    print(<span class="string">"这是主进程"</span>)</span><br></pre></td></tr></table></figure><h3 id="3-1-Process类的方法和属性介绍"><a href="#3-1-Process类的方法和属性介绍" class="headerlink" title="3.1 Process类的方法和属性介绍"></a>3.1 Process类的方法和属性介绍</h3><table><thead><tr><th>方法</th><th align="center">详解</th></tr></thead><tbody><tr><td>p.start()：</td><td align="center">启动进程，并调用该子进程中的p.run()</td></tr><tr><td>p.run():</td><td align="center">进程启动时运行的方法，正是它去调用target指定的函数，我们自定义类的类中一定要实现该方法</td></tr><tr><td>p.terminate():</td><td align="center">强制终止进程p，不会进行任何清理操作，如果p创建了子进程，该子进程就成了僵尸进程，使用该方法需要特别小心这种情况。如果p还保存了一个锁那么也将不会被释放，进而导致死锁</td></tr><tr><td>p.is_alive():</td><td align="center">如果p仍然运行，返回True</td></tr><tr><td>p.join([timeout]):</td><td align="center">主线程等待p线程终止（强调：是主线程处于等的状态，而p是处于运行的状态）。timeout是可选的超时时间</td></tr><tr><td>Process属性</td><td align="center">详解</td></tr><tr><td>p.daemon：</td><td align="center">默认值为False，如果设为True，代表p为后台运行的守护进程，当p的父进程终止时，p也随之终止，并且设定为True后，p不能创建自己的新进程，必须在p.start()之前设置</td></tr><tr><td>p.name:</td><td align="center">进程的名称</td></tr><tr><td>p.pid：</td><td align="center">进程的pid</td></tr><tr><td>p.exitcode:</td><td align="center">进程在运行时为None、如果为–N，表示被信号N结束(了解即可)</td></tr><tr><td>p.authkey:</td><td align="center">进程的身份验证键,默认是由os.urandom()随机生成的32字符的字符串</td></tr></tbody></table><h3 id="3-2-进程之间的内存空间是隔离的"><a href="#3-2-进程之间的内存空间是隔离的" class="headerlink" title="3.2 进程之间的内存空间是隔离的"></a>3.2 进程之间的内存空间是隔离的</h3><h3 id="3-3-Process对象的join方法"><a href="#3-3-Process对象的join方法" class="headerlink" title="3.3 Process对象的join方法"></a>3.3 Process对象的join方法</h3><ol><li><p>join方法：优先运行子进程，主进程卡在原地，子进程结束后，运行主进程后面的代码。案例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time, os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'%s is running, parent id is &lt;%s&gt;'</span> % (os.getpid(), os.getppid()))   <span class="comment"># 进程和父进程查看方式</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">"%s is done, parent id is &lt;%s&gt;"</span> % (os.getpid(), os.getppid()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p = Process(target=task, )</span><br><span class="line">    p.start()</span><br><span class="line"></span><br><span class="line">    p.join()   <span class="comment"># 优先运行子进程，主进程卡在原地</span></span><br><span class="line">    print(<span class="string">'主进程'</span>, os.getpid(), <span class="string">'pycharm ID'</span>, os.getppid())</span><br><span class="line">    print(p.pid)  <span class="comment"># 子进程运行完，变为僵尸进程，主进程仍能够查到子进程的pid，当主进程结束后，所有僵尸子进程将被丢掉。</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">is running, parent id is &lt;827&gt;</span></span><br><span class="line"><span class="string">is done, parent id is &lt;827&gt;</span></span><br><span class="line"><span class="string">主进程 827 pycharm ID 504</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure></li><li><p>使用join方法实现并发执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(name ,n)</span>:</span></span><br><span class="line">    print(<span class="string">'%s is running'</span> % name)</span><br><span class="line">    time.sleep(n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    start = time.time()</span><br><span class="line">    p1 = Process(target=task, args=(<span class="string">"子进程1"</span>,<span class="number">5</span>,))</span><br><span class="line">    p2 = Process(target=task, args=(<span class="string">"子进程2"</span>,<span class="number">3</span>,))</span><br><span class="line">    p3 = Process(target=task, args=(<span class="string">"子进程3"</span>,<span class="number">2</span>,))</span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    p3.start()</span><br><span class="line">    <span class="comment"># 再添加join函数前，主程序的执行输出次序是完全随机的，需要加join()保证主程序等到在子进程之后执行完成</span></span><br><span class="line">    p1.join()</span><br><span class="line">    p2.join()</span><br><span class="line">    p3.join()</span><br><span class="line">    <span class="comment"># 以上并非串行执行，实际是并发执行，只是约束了主程序要等在子程序后结束</span></span><br><span class="line">    <span class="comment"># print('主进程', os.getpid(), 'pycharm ID', os.getppid())</span></span><br><span class="line">    print(<span class="string">"主进程"</span>, (time.time()-start))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">子进程1 is running</span></span><br><span class="line"><span class="string">子进程2 is running</span></span><br><span class="line"><span class="string">子进程3 is running</span></span><br><span class="line"><span class="string">主进程 5.010260343551636   # 主程序只等了5秒，说明确实是并发执行</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure></li><li><p>使用join方法实现多进程串行执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(name ,n)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    p1 = Process(target=task, args=(<span class="string">"子进程1"</span>,<span class="number">5</span>))</span><br><span class="line">    p2 = Process(target=task, args=(<span class="string">"子进程2"</span>,<span class="number">3</span>))</span><br><span class="line">    p3 = Process(target=task, args=(<span class="string">"子进程3"</span>,<span class="number">2</span>))</span><br><span class="line">    <span class="comment"># 串行执行</span></span><br><span class="line">    p1.start()</span><br><span class="line">    p1.join()</span><br><span class="line">    p2.start()</span><br><span class="line">    p2.join()</span><br><span class="line">    p3.start()</span><br><span class="line">    p3.join()</span><br><span class="line">    print(<span class="string">"我是主进程"</span>)</span><br></pre></td></tr></table></figure></li></ol><p>4.守护进程<br>主进程创建守护进程：<br>　　一：守护进程会在主进程代码执行结束后就终止，主进程代码运行结束，守护进程立即死亡</p><p>　　二：守护进程内无法再开启子进程,否则抛出异常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    p = Process(target=task, args=(&apos;子进程&apos;, ))</span><br><span class="line">    p.daemon=True    # 守护进程一定要在进程开启前,即p.start()开启前设置</span><br><span class="line">    p.start()</span><br><span class="line">    print(&quot;我是主进程&quot;)</span><br></pre></td></tr></table></figure><h2 id="4-互斥锁"><a href="#4-互斥锁" class="headerlink" title="4.互斥锁"></a>4.互斥锁</h2><p>进程之间数据不共享,但是共享同一套文件系统,所以访问同一个文件,或同一个打印终端,是没有问题的,而共享带来的是竞争，竞争带来的结果就是错乱<br>互斥锁的原理：就是把并发改成穿行，降低了效率，但保证了数据安全不错乱</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def task():</span><br><span class="line">    # 获得锁</span><br><span class="line">    lock.acquire()</span><br><span class="line">    ...</span><br><span class="line">    # 释放锁</span><br><span class="line">    lock.release()</span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    lock = Lock()   # 只实例化一次，并传给子进程，要保证所有进程用同一把锁</span><br><span class="line">    for i in range(3):</span><br><span class="line">        p = Process(target=task, args=(&apos;进程%s&apos; % i, lock,))  # 传递给子进程的锁</span><br><span class="line">        p.start()</span><br></pre></td></tr></table></figure><h2 id="5-队列"><a href="#5-队列" class="headerlink" title="5.队列"></a>5.队列</h2><p>进程彼此之间互相隔离，要实现进程间通信（IPC），multiprocessing模块支持两种形式：队列和管道，这两种方式都是使用消息传递的</p><blockquote><p>队列的创建</p></blockquote><p>Queue（maxsize）：创建队列中允许的最大项数</p><blockquote><p>队列的主要方法</p></blockquote><p>q.put(value)方法用以插入数据到队列中。<br>q.get(value)方法可以从队列读取并且删除一个元素。<br>q.empty():调用此方法时q为空则返回True，该结果不可靠，比如在返回True的过程中，如果队列中又加入了项目。<br>q.full()：调用此方法时q已满则返回True，该结果不可靠，比如在返回True的过程中，如果队列中的项目被取走。<br>q.qsize():返回队列中目前项目的正确数量，结果也不可靠，理由同q.empty()和q.full()一样<br>q.close():关闭队列<br>PS:使用q.get()从空队列中再取值时与使用q.put()在队列为满时继续插入数据，都会出现程序卡在原地的结果</p><blockquote><p>队列的使用</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"><span class="comment"># 队列中应该放消息，不应该放大文件大数据</span></span><br><span class="line"><span class="comment"># 队列可以不设置长度，但是队列是受制于内存大小的，不可能无限存放</span></span><br><span class="line">q = Queue(<span class="number">3</span>)  <span class="comment"># 指定队列大小</span></span><br><span class="line">q.put(<span class="string">'hello'</span>)</span><br><span class="line">q.put(&#123;<span class="string">'a'</span>: <span class="number">1</span>&#125;)</span><br><span class="line">q.put([<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,])</span><br><span class="line"></span><br><span class="line">print(q.full())   <span class="comment"># 查看队列是否满了  # True</span></span><br><span class="line"><span class="comment"># q.put(123)    # 队列满了再往里面放时，被锁住，只能在原地卡着。</span></span><br><span class="line"></span><br><span class="line">print(q.get())  <span class="comment"># hello</span></span><br><span class="line">print(q.get())  <span class="comment"># &#123;'a':1&#125;</span></span><br><span class="line">print(q.get())  <span class="comment"># [3,3,3]</span></span><br><span class="line">print(q.empty())   <span class="comment"># 判断队列是否全部清空  # True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(q.get())   # 由于已经空了，程序也卡在原处</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多进程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql语句关于时间的讨论</title>
      <link href="/2019/12/04/ThinkPHP(%E4%BA%8C)/"/>
      <url>/2019/12/04/ThinkPHP(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<p><font color=#ef4136>进程只是用来把资源集中到一起（进程只是一个资源单位，或者说资源调度集合），而线程才是cpu上的执行单位</font></p><blockquote><p>1.oracle时间和日期的处理<br>2.mysql 查询今天，昨天，本月，今年，本季度，上一年等的sql语句编写</p></blockquote><a id="more"></a><h3 id="1-oracle时间和日期的处理，详情请点击此处"><a href="#1-oracle时间和日期的处理，详情请点击此处" class="headerlink" title="1.oracle时间和日期的处理，详情请点击此处"></a>1.oracle时间和日期的处理，<a href="https://www.cnblogs.com/xuhai/p/9949464.html" target="_blank" rel="noopener">详情请点击此处</a></h3><blockquote><p>1.字符串转换为日期时分秒格式：to_date(字符串, ‘yyyy-mm-dd hh24:mi:ss’)</p></blockquote><p>select to_date(‘20180831154546’, ‘yyyy-mm-dd hh24:mi:ss’) from dual;<br>结果为：2018-08-31 15:45:46</p><blockquote><p>2.获取系统时间</p></blockquote><p>SELECT SYSDATE FROM  dual;  – 系统时间:2019-12-04 21:40:15</p><p>SELECT SYSTIMESTAMP FROM  dual;  – 当前系统时间戳:2019-12-04 21:40:41.328000 +08:00</p><blockquote><p>3.时间类型与字符串相互转换</p></blockquote><p>字符串转换为时间类型：to_date(字符串, ‘yyyy-mm-dd hh24:mi:ss’);</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 字符串转时间类型</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">to_date</span>(<span class="string">'2018-08-23 00:00:00'</span>,<span class="string">'yyyy-mm-dd hh24:mi:ss'</span>) <span class="keyword">FROM</span> dual;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 时间类型转字符串</span></span><br><span class="line"><span class="keyword">select</span> to_char(<span class="keyword">sysdate</span>,<span class="string">'yyyy-mm-dd hh24:mi:ss'</span>) <span class="keyword">from</span> dual;</span><br><span class="line"><span class="keyword">select</span> to_char(<span class="keyword">sysdate</span>,<span class="string">'yyyy-mm-dd'</span>) <span class="keyword">from</span> dual;</span><br><span class="line">``` </span><br><span class="line">&gt; 4.日期的加减</span><br><span class="line"></span><br><span class="line">如果时间要进行加减，和现在的时间或者某个目标时间进行比较。</span><br><span class="line"></span><br><span class="line">to_date(字符串, 'yyyy-mm-dd hh24:mi:ss')+1</span><br><span class="line"></span><br><span class="line">后面为1的时候就是加1天，2的时候就是加两天，如果加一个小时，就是为1/24，如果加一分钟，就是为1/24/60,...</span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line"><span class="comment">-- 案例：</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">to_date</span>(<span class="string">'2019-02-18 23:59:00'</span>,<span class="string">'yyyy-mm-dd hh24-mi-ss'</span>)+<span class="number">1</span> <span class="keyword">from</span> dual;</span><br><span class="line"><span class="comment">-- 加一天 2019-02-19 23:59:00</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">to_date</span>(<span class="string">'2019-02-18 23:59:00'</span>,<span class="string">'yyyy-mm-dd hh24-mi-ss'</span>)+<span class="number">1</span>/<span class="number">24</span> <span class="keyword">from</span> dual;</span><br><span class="line"><span class="comment">-- 加一个小时 2019-02-19 00:59:00</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">to_date</span>(<span class="string">'2019-02-18 23:59:00'</span>,<span class="string">'yyyy-mm-dd hh24-mi-ss'</span>)+<span class="number">1</span>/<span class="number">24</span>/<span class="number">60</span> <span class="keyword">from</span> dual;</span><br><span class="line"><span class="comment">-- 加一分钟 2019-02-19 00:00:00</span></span><br></pre></td></tr></table></figure><h3 id="2-MySQL的时间与日期的处理"><a href="#2-MySQL的时间与日期的处理" class="headerlink" title="2.MySQL的时间与日期的处理"></a>2.MySQL的时间与日期的处理</h3><blockquote><p>mysql 查询今天，昨天，本月，今年，本季度，上一年等的sql语句编写</p></blockquote><p>– 今天<br>SELECT 【想要的字段】 FROM 【表名】 WHERETO_DAYS(【时间字段名】) =TO_DAYS(now());</p><p>– 昨天<br>SELECT 【想要的字段】 FROM 【表名】 WHERE TO_DAYS( NOW( ) ) - TO_DAYS(【时间字段名】) = 1;</p><p>– 近七天<br>SELECT 【想要的字段】 FROM 【表名】 WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) &lt;=DATE(【时间字段名】);</p><p>– 本周内<br>SELECT 【想要的字段】 FROM 【表名】 WHERE YEARWEEK(DATE_FORMAT(【时间字段名】,’%Y-%m-%d’)) = YEARWEEK(now());</p><p>– 上一周<br>SELECT 【想要的字段】 FROM 【表名】 WHERE YEARWEEK(DATE_FORMAT(【时间字段名】,’%Y-%m-%d’)) = YEARWEEK(now())-1;</p><p>– 30天内 注意这个不是本月是从当天起向前推30天<br>SELECT 【想要的字段】 FROM 【表名】 WHERE DATE_SUB(CURDATE(), INTERVAL 30 DAY) &lt;=DATE(【时间字段名】);</p><p>– 本月<br>SELECT 【想要的字段】 FROM 【表名】 WHERE DATE_FORMAT( 【时间字段名】, ‘%Y%m’ ) = DATE_FORMAT( CURDATE( ) , ‘%Y%m’ );</p><p>– 上一个月<br>SELECT 【想要的字段】 FROM 【表名】 WHERE PERIOD_DIFF( DATE_FORMAT( now( ) , ‘%Y%m’ ) , DATE_FORMAT( 【时间字段名】, ‘%Y%m’ ) ) =1;</p><p>– 本季度<br>SELECT 【想要的字段】 FROM 【表名】 WHERE QUARTER(【时间字段名】)=QUARTER(now());</p><p>– 上一季度<br>SELECT 【想要的字段】 FROM 【表名】 WHERE QUARTER(【时间字段名】)=QUARTER(DATE_SUB(now(),interval 1 QUARTER));</p><p>– 本年度<br>SELECT 【想要的字段】 FROM 【表名】 WHERE YEAR(【时间字段名】)=YEAR(NOW());</p><p>– 上一年度<br>SELECT 【想要的字段】 FROM 【表名】 WHERE YEAR(【时间字段名】)=YEAR(date_sub(now(),interval 1 YEAR)); </p><h3 id="未完待续。。。"><a href="#未完待续。。。" class="headerlink" title="- 未完待续。。。"></a>- 未完待续。。。</h3>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python全栈系列章节更新（三）：数据库分批次处理和数据库通用连接函数</title>
      <link href="/2019/12/03/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2019/12/03/Python%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97%E7%AB%A0%E8%8A%82%E6%9B%B4%E6%96%B0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p>数据库分批次处理:execute,executemany<br>数据库通用连接函数<br>数据库插入百万级数据优化</p></blockquote><a id="more"></a><h2 id="1-数据库通用连接函数（连接模块视实际数据库决定，大同小异）"><a href="#1-数据库通用连接函数（连接模块视实际数据库决定，大同小异）" class="headerlink" title="1.数据库通用连接函数（连接模块视实际数据库决定，大同小异）"></a>1.数据库通用连接函数（连接模块视实际数据库决定，大同小异）</h2><p>将其封装成一个新的python文件，以便可以重复调用，命名为SqlConnectManage.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> DBUtils <span class="keyword">import</span> PooledDB</span><br><span class="line"><span class="keyword">import</span> pymssql</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sqlserverManager</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 构造函数，初始化连接</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, server, user, password, database, table)</span>:</span></span><br><span class="line">        self.server = server</span><br><span class="line">        self.user = user</span><br><span class="line">        self.password = password</span><br><span class="line">        self.database = database</span><br><span class="line">        self.table = table</span><br><span class="line">        self.conn = <span class="literal">None</span></span><br><span class="line">        self.cursor = <span class="literal">None</span></span><br><span class="line">        self.maxconnections = <span class="number">15</span> <span class="comment"># 设置最大连接数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存数据到SQL server</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connect_database</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.conn = PooledDB(creator=pymssql,</span><br><span class="line">                                 maxconnections=self.maxconnections,</span><br><span class="line">                                 server=self.server,</span><br><span class="line">                                 user=self.user,</span><br><span class="line">                                 password=self.password,</span><br><span class="line">                                 database=self.database,</span><br><span class="line">                                 charset=<span class="string">'utf8'</span>).connection()</span><br><span class="line">            <span class="comment"># 创建游标</span></span><br><span class="line">            self.cursor = self.conn.cursor()</span><br><span class="line">            print(<span class="string">"sql server had connected"</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">"the connect failed:"</span>, e)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dbclose</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.cursor.close()</span><br><span class="line">        self.conn.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dbcommit</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.conn.commit()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(self, sql)</span>:</span></span><br><span class="line">        print(<span class="string">"-----插入数据-----"</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.cursor.execute(sql)</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">'\033[1;31;0m\t4---插入更新失败，msg：\033[0m'</span>, e, sql.replace(<span class="string">"\n"</span>, <span class="string">""</span>))</span><br><span class="line">            self.conn.rollback()</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">executemany</span><span class="params">(self, sql,*args)</span>:</span></span><br><span class="line">        print(<span class="string">"-----插入数据-----"</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.cursor.executemany(sql,*args)</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">'\033[1;31;0m\t4---插入更新失败，msg：\033[0m'</span>, e, sql.replace(<span class="string">"\n"</span>, <span class="string">""</span>))</span><br><span class="line">            self.conn.rollback()</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="2-数据分批次处理"><a href="#2-数据分批次处理" class="headerlink" title="2.数据分批次处理"></a>2.数据分批次处理</h2><p>数据库分批次处理可以使用两种方法：execute()与executemany()方法</p><h3 id="2-1-executemany"><a href="#2-1-executemany" class="headerlink" title="2.1 executemany()"></a>2.1 executemany()</h3><p><font color=#f15a22>在使用executemany方法时，需要注意的几个问题：</font></p><blockquote><p>1.在写sql语句时，不管字段为什么类型，占位符统一使用%s,且不能加上引号。例如</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sql="<span class="keyword">insert</span> <span class="keyword">into</span> tablename (<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span> (%s,%s)<span class="string">"</span></span><br></pre></td></tr></table></figure><blockquote><p>2.添加的数据的格式必须为元组型列表或元组型元组(并不是无限添加):list[tuple(),tuple(),tuple()]或者tuple(tuple(),tuple(),tuple())例如</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">values</span>=[(<span class="number">1</span>,<span class="string">"zhangsan"</span>),(<span class="number">2</span>,<span class="string">"lisi"</span>)]</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line"><span class="keyword">values</span>=((<span class="number">1</span>,<span class="string">"zhangsan"</span>),(<span class="number">2</span>,<span class="string">"lisi"</span>))</span><br></pre></td></tr></table></figure><blockquote><p>3.最后通过executemany插入</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cursor.executemany(sql,<span class="keyword">values</span>)</span><br><span class="line">connect.commit()</span><br></pre></td></tr></table></figure><h3 id="2-2-execute"><a href="#2-2-execute" class="headerlink" title="2.2 execute()"></a>2.2 execute()</h3><p>execute()语法一次只能执行一个sql语句，分批次处理的原理是：循环执行批量语句，然后在commit，如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for i in range(10):</span><br><span class="line">    sql = "<span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">users</span>(<span class="keyword">id</span>,grand) <span class="keyword">values</span>(i,i+<span class="number">10</span>)<span class="string">"</span></span><br><span class="line"><span class="string">    cursor.execute(sql)</span></span><br><span class="line"><span class="string"># 批量执行数据后，然后提交    </span></span><br><span class="line"><span class="string">connect.commit()</span></span><br></pre></td></tr></table></figure><h2 id="3-数据库插入百万级数据优化-参考此文章：Python3-多线程-连接池-操作MySQL插入数据"><a href="#3-数据库插入百万级数据优化-参考此文章：Python3-多线程-连接池-操作MySQL插入数据" class="headerlink" title="3.数据库插入百万级数据优化,参考此文章：Python3 多线程(连接池)操作MySQL插入数据"></a>3.数据库插入百万级数据优化,<a href="https://www.cnblogs.com/insane-Mr-Li/p/11634417.html" target="_blank" rel="noopener">参考此文章：Python3 多线程(连接池)操作MySQL插入数据</a></h2><p>最近做一个项目，需要插入和读取很多数据，所以就需要对数据库大量插入操作进行优化，还是以python为基石，不过在开始动工前，需要明确以下几点：<br>1.考虑是一条线程完整地执行数据库的连接、创建游标、然后插入数据、commit数据、断开连接这一系列操作，还是使用多线程执行获取数据的操作，然后单线程来插入整理好的数据？<br>2.考虑是每执行一次insert，update或者delete，就执行一次commit，还是批量处理数据后，才执行一次commit<br>3.数据执行语句execute()与executemany()的选择</p><p>对我而言，我的设计是<font color=#ef5b9c>调用数据库的通用数据池连接文件SqlConnectManage.py，将数据库的连接和关闭函数作为全局使用，放在程序的首尾（就相当于不会重复连接数据库，减少IO开销）<br>然后创建多线程+队列的方式获取数据，以单线程形式来插入数据，批量处理数据后，才commit提交。</font><br>案例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> SqlConnectManage <span class="keyword">import</span> sqlserverManager</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建全局连接和游标(这里暂时不用DBUtils库)</span></span><br><span class="line">DB_CONN = pymssql.connect(SERVER , USER , PASSWORD, DATABASE)</span><br><span class="line">DB_CURSOR = DB_CONN.cursor()</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># ... </span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开始时间戳</span></span><br><span class="line">    s_time = time.time()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设定最大队列数和线程数</span></span><br><span class="line">    q = Queue(maxsize=<span class="number">10</span>)</span><br><span class="line">    threads = []</span><br><span class="line">    starttime, endtime = get_date()</span><br><span class="line">    <span class="comment"># print(starttime,endtime)  # 经测试，获取查询时间段成功</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取所有用户组列表</span></span><br><span class="line">    userid_all_list = get_user_list()</span><br><span class="line">    <span class="comment"># print(userid_all_list) # 经测试，获取所有用户组成功</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 循环每一个用户组列表并开启多线程采集企业微信考勤数据</span></span><br><span class="line">    <span class="keyword">while</span> userid_all_list:</span><br><span class="line">        user_list = userid_all_list.pop()</span><br><span class="line">        t = Thread(target=gatherData, args=(starttime, endtime, user_list, ))</span><br><span class="line">        q.put(t)</span><br><span class="line">        <span class="keyword">if</span> (q.full() == <span class="literal">True</span> <span class="keyword">or</span> len(userid_all_list) == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">while</span> q.empty() == <span class="literal">False</span>:</span><br><span class="line">                t = q.get()</span><br><span class="line">                threads.append(t)</span><br><span class="line">                t.start()</span><br><span class="line">            <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">                t.join()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 单线程插入数据</span></span><br><span class="line">    insert_sql()</span><br></pre></td></tr></table></figure><h2 id="4-python-一个-py文件如何调用另一个-py文件中的类和函数"><a href="#4-python-一个-py文件如何调用另一个-py文件中的类和函数" class="headerlink" title="4.python 一个.py文件如何调用另一个.py文件中的类和函数"></a>4.<a href="https://blog.csdn.net/winycg/article/details/78512300" target="_blank" rel="noopener">python 一个.py文件如何调用另一个.py文件中的类和函数</a></h2><p>类和文件名相同</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库分批次处理 </tag>
            
            <tag> 数据库通用连接函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于数据库返回值的讨论</title>
      <link href="/2019/12/02/%E5%85%B3%E4%BA%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E8%AE%A8%E8%AE%BA/"/>
      <url>/2019/12/02/%E5%85%B3%E4%BA%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E8%AE%A8%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;每到深夜，打开音乐，带上耳机，周围很安静，只有到这个时候我才感觉到自己是一个学者，而此刻头脑中只有两件事罢了：1.记下今天所用到的知识 2.安安静静听歌<br>最近做一个python获取考勤数据的小脚本，一直没有怎么用到数据库，今天就来探讨一下获取数据库的返回值</p><blockquote><p>关于数据库返回值的讨论<br>python文件打开方式详解<br>fetchall(),fetchone()</p></blockquote><a id="more"></a><h2 id="1-关于数据库返回值的讨论"><a href="#1-关于数据库返回值的讨论" class="headerlink" title="1.关于数据库返回值的讨论"></a>1.关于数据库返回值的讨论</h2><h3 id="1-1-构造简单sql语句"><a href="#1-1-构造简单sql语句" class="headerlink" title="1.1.构造简单sql语句"></a>1.1.构造简单sql语句</h3><p>假设存在这样一个简单的数据库,获取每一行的数据，并保存为txt格式<br><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/D:/data/imagesdatabase_resp.JPG" alt=""></fancybox></p><blockquote><p>构造sql语句</p></blockquote><p>select  * from dbo.userlist where user_serial&lt;100010</p><h3 id="1-2-python连接数据库（SQL-server）"><a href="#1-2-python连接数据库（SQL-server）" class="headerlink" title="1.2.python连接数据库（SQL server）"></a>1.2.python连接数据库（SQL server）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> pymssql</span><br><span class="line"><span class="comment"># 获取考勤系统数据</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">()</span>:</span></span><br><span class="line">    server = <span class="string">""</span></span><br><span class="line">    user = <span class="string">""</span></span><br><span class="line">    password = <span class="string">""</span></span><br><span class="line">    database = <span class="string">""</span></span><br><span class="line">    conn = pymssql.connect(</span><br><span class="line">        server=server,</span><br><span class="line">        user=user,</span><br><span class="line">        password=password,</span><br><span class="line">        database=database</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 创建游标</span></span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    <span class="comment"># 构造查询sql语句</span></span><br><span class="line">    sql =<span class="string">"select  * from dbo.kt_dev where user_serial&lt;100010"</span></span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    numbers = cursor.fetchall()</span><br><span class="line">    print(numbers[<span class="number">0</span>])  <span class="comment"># 元组(100002, '0010014', '00101')</span></span><br><span class="line">    print(type(numbers[<span class="number">0</span>])) <span class="comment"># tuple元组类型</span></span><br><span class="line">    <span class="comment"># 元组访问方式与拼接</span></span><br><span class="line">    print(str(str(numbers[<span class="number">1</span>][<span class="number">0</span>]))+<span class="string">":"</span>+str(numbers[<span class="number">1</span>][<span class="number">1</span>]))  <span class="comment"># 100002:0010002</span></span><br><span class="line">    print(type(numbers))  <span class="comment"># list 列表</span></span><br><span class="line">    print(<span class="string">'总列表：'</span>,numbers)</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    loan_count = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 获取所有的查询数据(1.区别于fetchone() 2.fetchall/fetchone()的返回值均为元组型列表，即[(第一行数据),(第二行数据),...()])</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"test_demo.txt"</span>,<span class="string">'a+'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> number <span class="keyword">in</span> numbers:</span><br><span class="line">            f.write(str(number[<span class="number">0</span>])+<span class="string">"  "</span>+str(number[<span class="number">1</span>]) + <span class="string">"  "</span>+str(number[<span class="number">2</span>]+<span class="string">"\n"</span>)) <span class="comment"># 元组数据number=("考勤卡号”，"刷卡时间")</span></span><br><span class="line">            loan_count += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 断开连接</span></span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br><span class="line">    print(<span class="string">"写入完成,共写入%d条数据！"</span> % loan_count)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    demo()</span><br></pre></td></tr></table></figure><p>数据库查询后返回的所有数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 总列表： </span></span><br><span class="line">[(<span class="number">100002</span>, <span class="string">'0010014'</span>, <span class="string">'00101'</span>), (<span class="number">100002</span>, <span class="string">'0010002'</span>, <span class="string">'00101'</span>),..., (<span class="number">100006</span>, <span class="string">'0010014'</span>, <span class="string">'00101'</span>)]</span><br></pre></td></tr></table></figure><p>由上式案列可知：<br><font color=#ed1941><br>1.fetchall():表示返回查询到的所有数据；fetchone():表示返回查询到的第一行数据<br>2.python查询返回的所有数据类型为元组型列表，即[(),(),...()]<br>3.元组的访问方式为：元组名[&quot;index&quot;]<br></font></p><h2 id="2-python文件打开方式详解"><a href="#2-python文件打开方式详解" class="headerlink" title="2.python文件打开方式详解"></a>2.python文件打开方式详解</h2><table><thead><tr><th>打开方式</th><th align="center">详解</th></tr></thead><tbody><tr><td>b</td><td align="center">二进制模式。</td></tr><tr><td>+</td><td align="center">打开一个文件进行更新(可读可写)。</td></tr><tr><td>r</td><td align="center">以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td>rb</td><td align="center">以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。</td></tr><tr><td>r+</td><td align="center">打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td>rb+</td><td align="center">以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。</td></tr><tr><td>w</td><td align="center">打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td>wb</td><td align="center">以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td>w+</td><td align="center">打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td>wb+</td><td align="center">以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td>a</td><td align="center">打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td>a+</td><td align="center">打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td>ab+</td><td align="center">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fetchall() </tag>
            
            <tag> fetchone() </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python全栈系列章节更新（二）：常见库模块</title>
      <link href="/2019/11/29/python(%E4%BA%8C)%E5%B8%B8%E8%A7%81%E5%BA%93%E5%87%BD%E6%95%B0/"/>
      <url>/2019/11/29/python(%E4%BA%8C)%E5%B8%B8%E8%A7%81%E5%BA%93%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>Python是一个“优雅”、“明确”、“简单”的编程语言,主要流行于网络爬虫、数据分析挖掘、机器学习、人工智能以及运维等等</p><blockquote><p>1.time模块<br>2.DBUtils管理数据库连接池<br>3.ftplib模块<br>4.os模块<br>5.datetime模块<br>6.tqdm模块<br>7.控制台输出带颜色文字的方法<br>8.random模块</p></blockquote><a id="more"></a><h2 id="1-time模块"><a href="#1-time模块" class="headerlink" title="1.time模块"></a>1.time模块</h2><h3 id="Unix时间戳转与时间的转换"><a href="#Unix时间戳转与时间的转换" class="headerlink" title="Unix时间戳转与时间的转换"></a>Unix时间戳转与时间的转换</h3><blockquote><p>将时间戳转换成时间，首先需要将时间戳转换成localtime，再转换成时间的具体格式：</p></blockquote><p>利用localtime()函数将时间戳转化成localtime的格式<br>利用strftime()函数重新格式化时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 将时间戳转化为目标时间格式</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timestamp_datatime</span><span class="params">(value)</span>:</span></span><br><span class="line">    format = <span class="string">'%Y-%m-%d %H:%M'</span></span><br><span class="line">    <span class="comment"># format = '%Y-%m-%d %H:%M:%S'</span></span><br><span class="line">    <span class="comment"># value 为时间戳值,如:1460073600.0</span></span><br><span class="line">    value = time.localtime(value)</span><br><span class="line">    dt = time.strftime(format, value)</span><br><span class="line">    <span class="keyword">return</span> dt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将目标时间格式转化为时间戳</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">datetime_timestamp</span><span class="params">(dt)</span>:</span></span><br><span class="line">    newTime = time.strptime(dt, <span class="string">'%Y-%m-%d %H:%M'</span>)</span><br><span class="line">    s = time.mktime(newTime)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = timestamp_datatime(<span class="number">1460073600.0</span>)</span><br><span class="line">    print(s)  <span class="comment"># 2016-04-08 08:00</span></span><br><span class="line">    d = datetime_timestamp(<span class="string">'2019-06-05 08:00'</span>)</span><br><span class="line">    print(d)  <span class="comment"># 1559692800.0</span></span><br></pre></td></tr></table></figure><h3 id="按指定的格式获取当前时间"><a href="#按指定的格式获取当前时间" class="headerlink" title="按指定的格式获取当前时间"></a>按指定的格式获取当前时间</h3><p>利用time()获取当前时间，再利用localtime()函数转换为localtime，最后利用strftime()函数重新格式化时间。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:UTF-8</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取当前时间</span></span><br><span class="line">time_now = int(time.time())</span><br><span class="line"><span class="comment">#转换成localtime</span></span><br><span class="line">time_local = time.localtime(time_now)</span><br><span class="line"><span class="comment">#转换成新的时间格式(2016-05-09 18:59:20),时间连接符号可改变</span></span><br><span class="line">dt = time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>,time_local)</span><br><span class="line"></span><br><span class="line">print(dt)</span><br></pre></td></tr></table></figure><h2 id="2-DBUtils管理数据库连接池"><a href="#2-DBUtils管理数据库连接池" class="headerlink" title="2.DBUtils管理数据库连接池"></a>2.DBUtils管理数据库连接池</h2><p>当使用多线程，多进程将海量数据存入数据库时，每次执行一个sql的时候都单独建立一个mysql连接，执行完就close掉，很明显这样的问题在于，频繁连接，断开mysql，这样是相当消耗系统资源的，而且增加了mysql连接失败的几率，所以万一哪个线程没有连接成功 这个线程也over了。</p><h3 id="2-1-连接池原理"><a href="#2-1-连接池原理" class="headerlink" title="2.1 连接池原理"></a>2.1 连接池原理</h3><p><fancybox><img src="https://img-blog.csdn.net/20180816112104584?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21vdWRheQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></fancybox><br>1.在程序创建连接的时候，可以从一个空闲的连接中获取，不需要重新初始化连接，提升获取连接的速度<br>2.关闭连接的时候，把连接放回连接池，而不是真正的关闭，所以可以减少频繁地打开和关闭连接</p><blockquote><p>安装DBUtils库</p></blockquote><p>pip install DBUtils</p><blockquote><p>参数解释</p></blockquote><table><thead><tr><th>参数</th><th align="center">详解</th></tr></thead><tbody><tr><td>creator,</td><td align="center"># 使用链接数据库的模块(必须：pymssql，pymysql，cx_oralce,…)</td></tr><tr><td>mincached=0,</td><td align="center"># 初始化时，链接池中至少创建的空闲的链接，0表示不创建</td></tr><tr><td>maxcached=0,</td><td align="center"># 链接池中最多闲置的链接，0和None不限制</td></tr><tr><td>maxshared=0,</td><td align="center"># 链接池中最多共享的链接数量，0和None表示全部共享。PS: 无用</td></tr><tr><td>maxconnections=0,</td><td align="center"># 连接池允许的最大连接数，0和None表示不限制连接数</td></tr><tr><td>blocking=False,</td><td align="center"># 连接池中如果没有可用连接后，是否阻塞等待。True，等待；False，不等待然后报错</td></tr><tr><td>maxusage=None,</td><td align="center"># 一个链接最多被重复使用的次数，None表示无限制</td></tr><tr><td>setsession=None,</td><td align="center"># 开始会话前执行的命令列表。如：[“set datestyle to …”, “set time zone …”]</td></tr><tr><td>reset=True,</td><td align="center"></td></tr><tr><td>failures=None,</td><td align="center"></td></tr><tr><td>ping=1,</td><td align="center"># ping MySQL服务端，检查是否服务可用</td></tr></tbody></table><blockquote><p>数据库设置(数据库连接模块不一样，其参数名也不同)</p></blockquote><p>如creator=pymysql：<br>host=&#39;localhost&#39;, port=3306,db=&#39;mydata&#39;,user=&quot;root&quot;,passwd=&quot;123456&quot;,charset=&#39;utf8&#39;</p><blockquote><p>数据库通用连接函数（连接模块视实际数据库决定）</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> DBUtils <span class="keyword">import</span> PooledDB</span><br><span class="line"><span class="keyword">import</span> pymssql</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sqlserverManager</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 构造函数，初始化连接</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, server, user, password, database, table)</span>:</span></span><br><span class="line">        self.server = server</span><br><span class="line">        self.user = user</span><br><span class="line">        self.password = password</span><br><span class="line">        self.database = database</span><br><span class="line">        self.table = table</span><br><span class="line">        self.conn = <span class="literal">None</span></span><br><span class="line">        self.cursor = <span class="literal">None</span></span><br><span class="line">        self.maxconnections = <span class="number">15</span> <span class="comment"># 设置最大连接数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存数据到SQL server</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connect_database</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.conn = PooledDB(creator=pymssql,</span><br><span class="line">                                 maxconnections=self.maxconnections,</span><br><span class="line">                                 server=self.server,</span><br><span class="line">                                 user=self.user,</span><br><span class="line">                                 password=self.password,</span><br><span class="line">                                 database=self.database,</span><br><span class="line">                                 charset=<span class="string">'utf8'</span>).connection()</span><br><span class="line">            <span class="comment"># 创建游标</span></span><br><span class="line">            self.cursor = self.conn.cursor()</span><br><span class="line">            print(<span class="string">"sql server had connected"</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">"the connect failed:"</span>, e)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dbclose</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.cursor.close()</span><br><span class="line">        self.conn.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dbcommit</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.conn.commit()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(self, sql)</span>:</span></span><br><span class="line">        print(<span class="string">"-----插入数据-----"</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.cursor.execute(sql)</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">'\033[1;31;0m\t4---插入更新失败，msg：\033[0m'</span>, e, sql.replace(<span class="string">"\n"</span>, <span class="string">""</span>))</span><br><span class="line">            self.conn.rollback()</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="2-2-多线程（连接池）操作MySQL插入数据"><a href="#2-2-多线程（连接池）操作MySQL插入数据" class="headerlink" title="2.2 多线程（连接池）操作MySQL插入数据"></a>2.2 <a href="https://www.cnblogs.com/insane-Mr-Li/p/11634417.html" target="_blank" rel="noopener">多线程（连接池）操作MySQL插入数据</a></h3><blockquote><p>启动线程任务</p></blockquote><p>每调用一次插入函数就从连接池中取出一个链接操作,完成后关闭链接;<br>executemany 批量操作,减少 commit 次数,提升效率;</p><h2 id="3-ftplib操作ftp实现上传和下载的"><a href="#3-ftplib操作ftp实现上传和下载的" class="headerlink" title="3.ftplib操作ftp实现上传和下载的"></a>3.ftplib操作ftp实现上传和下载的</h2><p>ftplib模块是系统默认安装的，实现文件的上传与下载</p><h3 id="3-1-ftp登陆连接"><a href="#3-1-ftp登陆连接" class="headerlink" title="3.1 ftp登陆连接"></a>3.1 ftp登陆连接</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> ftplib <span class="keyword">import</span> FTP            <span class="comment">#加载ftp模块</span></span><br><span class="line">ftp=FTP()                         <span class="comment">#设置变量</span></span><br><span class="line">ftp.set_debuglevel(<span class="number">2</span>)             <span class="comment">#打开调试级别2，显示详细信息</span></span><br><span class="line">ftp.connect(<span class="string">"IP"</span>,<span class="string">"port"</span>)          <span class="comment">#连接的ftp sever和端口</span></span><br><span class="line">ftp.login(<span class="string">"user"</span>,<span class="string">"password"</span>)      <span class="comment">#连接的用户名，密码</span></span><br><span class="line">print(ftp.getwelcome())            <span class="comment">#打印出欢迎信息</span></span><br><span class="line"></span><br><span class="line">bufsize=<span class="number">1024</span>                      <span class="comment">#设置的缓冲区大小</span></span><br><span class="line">filename=<span class="string">"filename.txt"</span>           <span class="comment">#需要下载的文件</span></span><br><span class="line">file_handle=open(filename,<span class="string">"wb"</span>).write <span class="comment">#以写模式在本地打开文件</span></span><br><span class="line">ftp.retrbinaly(<span class="string">"RETR filename.txt"</span>,file_handle,bufsize) <span class="comment">#接收服务器上文件并写入本地文件</span></span><br><span class="line">ftp.set_debuglevel(<span class="number">0</span>)             <span class="comment">#关闭调试模式</span></span><br><span class="line">ftp.quit()                        <span class="comment">#退出ftp</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># ftp相关命令操作</span></span><br><span class="line">ftp.cwd(pathname)                 <span class="comment">#设置FTP当前操作的路径</span></span><br><span class="line">ftp.dir()                         <span class="comment">#显示目录下所有目录信息</span></span><br><span class="line">ftp.nlst()                        <span class="comment">#获取目录下的文件</span></span><br><span class="line">ftp.mkd(pathname)                 <span class="comment">#新建远程目录</span></span><br><span class="line">ftp.pwd()                         <span class="comment">#返回当前所在位置</span></span><br><span class="line">ftp.rmd(dirname)                  <span class="comment">#删除远程目录</span></span><br><span class="line">ftp.delete(filename)              <span class="comment">#删除远程文件</span></span><br><span class="line">ftp.rename(fromname, toname)<span class="comment">#将fromname修改名称为toname。</span></span><br><span class="line">ftp.storbinary(<span class="string">"STOR filename.txt"</span>,file_content,bufsize)  <span class="comment">#上传目标文件</span></span><br><span class="line">ftp.retrbinary(<span class="string">"RETR filename.txt"</span>,file_content,bufsize)  <span class="comment">#下载FTP文件</span></span><br></pre></td></tr></table></figure><h3 id="3-2-ftp上传或下载文件-目录"><a href="#3-2-ftp上传或下载文件-目录" class="headerlink" title="3.2 ftp上传或下载文件/目录"></a>3.2 ftp上传或下载文件/目录</h3><h2 id="4-os模块"><a href="#4-os模块" class="headerlink" title="4.os模块"></a>4.os模块</h2><p>记下常用的os模块的操作指令</p><table><thead><tr><th>命令</th><th align="center">含义</th></tr></thead><tbody><tr><td>os.getcwd()</td><td align="center">获取当前工作目录，即当前python脚本工作的目录路径,相当于shell的pwd</td></tr><tr><td>os.chdir(“dirname”)</td><td align="center">改变当前脚本工作目录；相当于shell下cd</td></tr><tr><td>os.curdir</td><td align="center">返回当前目录: (‘.’)</td></tr><tr><td>os.pardir</td><td align="center">获取当前目录的父目录字符串名：(‘..’)</td></tr><tr><td>os.makedirs(‘dirname1/dirname2’)</td><td align="center">可生成多层递归目录</td></tr><tr><td>os.removedirs(‘dirname1’)</td><td align="center">若目录为空，则删除，并递归到上一级目录，如若也为空，则删除，依此类推</td></tr><tr><td>os.mkdir(‘dirname’)</td><td align="center">生成单级目录；相当于shell中mkdir dirname</td></tr><tr><td>os.rmdir(‘dirname’)</td><td align="center">删除单级空目录，若目录不为空则无法删除，报错；相当于shell中rmdir dirname</td></tr><tr><td>os.listdir(‘dirname’)</td><td align="center">列出指定目录下的所有文件和子目录，包括隐藏文件，并以列表方式打印</td></tr><tr><td>os.remove()</td><td align="center">删除一个文件</td></tr><tr><td>os.rename(“oldname”,”newname”)</td><td align="center">重命名文件/目录</td></tr><tr><td>os.stat(‘path/filename’)</td><td align="center">获取文件/目录信息</td></tr><tr><td>os.name</td><td align="center">输出字符串指示当前使用平台。win-&gt;’nt’; Linux-&gt;’posix’</td></tr><tr><td>os.system(“执行的命令”)</td><td align="center">运行shell命令，直接显示,相当于直接在cmd命令中执行</td></tr><tr><td>os.environ</td><td align="center">获取系统环境变量</td></tr><tr><td>os.path.abspath(path)</td><td align="center">返回path规范化的绝对路径</td></tr><tr><td>os.path.split(path)</td><td align="center">将path分割成目录和文件名二元组返回</td></tr><tr><td>os.path.dirname(path)</td><td align="center">返回path的目录。其实就是os.path.split(path)的第一个元素</td></tr><tr><td>os.path.basename(path)</td><td align="center">返回path最后的文件名。如何path以／或\结尾，那么就会返回空值。即os.path.split(path)的第二个元素</td></tr><tr><td>os.path.exists(path/file)</td><td align="center">如果路径或文件存在，返回True；如果path不存在，返回False</td></tr><tr><td>os.path.isabs(path)</td><td align="center">如果path是绝对路径，返回True</td></tr><tr><td>os.path.isfile(path)</td><td align="center">如果path是一个存在的文件，返回True。否则返回False</td></tr><tr><td>os.path.join(path1,path2,…,pathn)</td><td align="center">将多个路径组合后返回</td></tr></tbody></table><p>简要样例说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.split(&quot;/Users/hqs/PycharmProjects/startMyPython3.0&quot;)             </span><br><span class="line">(&apos;/Users/hqs/PycharmProjects&apos;, &apos;startMyPython3.0&apos;)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; os.path.dirname(&apos;/Users/hqs/PycharmProjects/startMyPython3.0&apos;)</span><br><span class="line">&apos;/Users/hqs/PycharmProjects&apos;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;os.system(&quot;ping 127.0.0.1&quot;)</span><br><span class="line">正在 Ping 127.0.0.1 具有 32 字节的数据:</span><br><span class="line">来自 127.0.0.1 的回复: 字节=32 时间&lt;1ms TTL=64</span><br><span class="line">来自 127.0.0.1 的回复: 字节=32 时间&lt;1ms TTL=64</span><br><span class="line">来自 127.0.0.1 的回复: 字节=32 时间&lt;1ms TTL=64</span><br><span class="line">来自 127.0.0.1 的回复: 字节=32 时间&lt;1ms TTL=64</span><br><span class="line"></span><br><span class="line">127.0.0.1 的 Ping 统计信息:</span><br><span class="line">    数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)，</span><br><span class="line">往返行程的估计时间(以毫秒为单位):</span><br><span class="line">    最短 = 0ms，最长 = 0ms，平均 = 0ms</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;os.path.abspath(__file__) </span><br><span class="line">当前文件的绝对路径</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">当前文件的上一层目录的绝对路径</span><br><span class="line"></span><br><span class="line">os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line">当前文件的上上层目录的绝对路径</span><br></pre></td></tr></table></figure><p>BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(_ _file_ _)))</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">__file__：表示当前文件名称</span><br><span class="line">os.path.abspath(__file__)：表示运行当前文件的完整绝对路径</span><br><span class="line">os.path.dirname：表示文件的上一级目录</span><br><span class="line">eg：目录结构：</span><br><span class="line">app|</span><br><span class="line">   | ---core.py</span><br><span class="line">   |---settings.json</span><br><span class="line">   | ---mangage.py</span><br><span class="line">    运行core.py文件十，调用settings.py文件为:</span><br><span class="line">    BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) # 获取了app目录的相对目录</span><br><span class="line">    dir =os.path.join(BASE.DIR,&apos;settings.py&apos;) # app目录拼接就为settings.py文件目录：app/settings.py</span><br></pre></td></tr></table></figure><p>python路径拼接os.path.join()函数的用法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">os.path.join()函数：连接两个或更多的路径名组件</span><br><span class="line"></span><br><span class="line"> 1.如果各组件名首字母不包含’/’，则函数会自动加上</span><br><span class="line"></span><br><span class="line"> 2.如果有一个组件是一个绝对路径，则在它之前的所有组件均会被舍弃</span><br><span class="line"></span><br><span class="line"> 3.如果最后一个组件为空，则生成的路径以一个’/’分隔符结尾</span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">Path1 = &apos;home&apos;</span><br><span class="line">Path2 = &apos;develop&apos;</span><br><span class="line">Path3 = &apos;code&apos;</span><br><span class="line"></span><br><span class="line">Path10 = Path1 + Path2 + Path3</span><br><span class="line">Path20 = os.path.join(Path1,Path2,Path3)</span><br><span class="line">print (&apos;Path10 = &apos;,Path10)</span><br><span class="line">print (&apos;Path20 = &apos;,Path20)</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line"></span><br><span class="line">Path10 = homedevelopcode</span><br><span class="line">Path20 = home\develop\code</span><br></pre></td></tr></table></figure><h2 id="5-datetime模块"><a href="#5-datetime模块" class="headerlink" title="5 datetime模块"></a>5 <a href="https://blog.csdn.net/qq_24753293/article/details/80954840" target="_blank" rel="noopener">datetime模块</a></h2><p>1.datetime.date：表示日期的类<br>2.datetime.datetime：表示日期时间的类<br>3.datetime.time：表示时间的类<br>4.datetime.timedelta：表示时间间隔，即两个时间点的间隔<br>5.datetime.tzinfo：时区的相关信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;datetime.datetime.now()</span><br><span class="line">当前系统时间：datetime.datetime(2019, 12, 3, 20, 31, 10, 740869)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;datetime.datetime.now().year/month/day</span><br><span class="line">分别为：2019，12，3</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;datetime.datetime.now().weekday()</span><br><span class="line">1 表示在第几周</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;time1 = datetime.datetime(2016, 10, 20)</span><br><span class="line">&gt;&gt;&gt;time2 = datetime.datetime(2015, 11, 2)</span><br><span class="line"> </span><br><span class="line">&quot;&quot;&quot;计算天数差值&quot;&quot;&quot;</span><br><span class="line">print(time1-time2).days</span><br><span class="line"> </span><br><span class="line">&quot;&quot;&quot;计算两个日期之间相隔的秒数&quot;&quot;&quot;</span><br><span class="line">print (time1-time2).total_seconds()</span><br><span class="line"></span><br><span class="line"># 获取当前时间,并转化为字符串型</span><br><span class="line">&gt;&gt;&gt;time_new = str(datetime.datetime.now().date())  # &apos;2019-12-4&apos;</span><br><span class="line"></span><br><span class="line"># 以当天的09：00为开始时间（时间戳格式）</span><br><span class="line">&gt;&gt;&gt;time_on = time.mktime(time.strptime(time_new+ &apos; 09:00&apos;, &apos;%Y-%m-%d %H:%M&apos;))</span><br><span class="line"></span><br><span class="line"># 以当天的18：00为结束时间（时间戳格式）</span><br><span class="line">&gt;&gt;&gt;time_off = time.mktime(time.strptime(time_new+ &apos; 18:00&apos;, &apos;%Y-%m-%d %H:%M&apos;))</span><br><span class="line"></span><br><span class="line"># 当前星期几</span><br><span class="line">&gt;&gt;&gt;week_now = datetime.datetime.now().weekday()</span><br><span class="line"></span><br><span class="line"># 当前时间</span><br><span class="line">&gt;&gt;&gt;time_now = datetime.datetime.now()  # datetime.datetime(2019, 12, 4, 14, 57, 48, 988520)</span><br><span class="line"></span><br><span class="line"># 当前第几小时（24小时制）</span><br><span class="line">&gt;&gt;&gt;hour_now = datetime.datetime.now().hour  # 14</span><br></pre></td></tr></table></figure><h2 id="5-tqdm模块（最优雅的进度条）"><a href="#5-tqdm模块（最优雅的进度条）" class="headerlink" title="5.tqdm模块（最优雅的进度条）"></a>5.tqdm模块（最优雅的进度条）</h2><p>from tqdm import tqdm<br>使用方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> tqdm(range(<span class="number">1000</span>)):</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><h2 id="6-控制台输出带颜色文字的方法"><a href="#6-控制台输出带颜色文字的方法" class="headerlink" title="6.控制台输出带颜色文字的方法"></a>6.<a href="https://www.jianshu.com/p/6610b0abb2ea" target="_blank" rel="noopener">控制台输出带颜色文字的方法</a></h2><p>设置颜色开始 ：\033[显示方式;前景色;背景色m 文本内容 \033[0m（此处为结束语）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'\033[1;31m我以我血荐轩辕\033[0m'</span>)</span><br><span class="line">print(<span class="string">'\033[4;35m我以我血荐轩辕\033[0m'</span>)</span><br><span class="line">print(<span class="string">'\033[5;37;40m我以我血荐轩辕\033[0m'</span>)</span><br><span class="line">print(<span class="string">'\033[0;32m我以我血荐轩辕\033[0m'</span>)</span><br><span class="line">print(<span class="string">'\033[1;32m我以我血荐轩辕\033[0m'</span>)</span><br></pre></td></tr></table></figure><h2 id="7-random模块"><a href="#7-random模块" class="headerlink" title="7.random模块"></a>7.random模块</h2><table><thead><tr><th>函数</th><th align="center">说明</th></tr></thead><tbody><tr><td>randint(a, b)</td><td align="center">生成一个[a, b]之间的整数</td></tr><tr><td>randrange(m, n[, k])</td><td align="center">生成一个[m, n)之间以k为步长的随机整数</td></tr><tr><td>getrandbits(k)</td><td align="center">生成一个k比特长的随机整数</td></tr><tr><td>uniform(a, b)</td><td align="center">生成一个[a, b]之间的随机小数</td></tr><tr><td>choice(seq)</td><td align="center">从序列seq中随机选择一个元素</td></tr><tr><td>shuffle(seq)</td><td align="center">将序列seq中元素随机排列，返回打乱后的序列(类似于洗牌)</td></tr><tr><td>random()</td><td align="center">生成一个[0.0, 1.0)之间的随机小数</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line"></span><br><span class="line">random.random()</span><br><span class="line">0.5</span><br><span class="line">random.randint(10, 100)</span><br><span class="line">64</span><br><span class="line">random.randrange(10, 100, 10)</span><br><span class="line">80</span><br><span class="line">random.getrandbits(16)</span><br><span class="line">37885</span><br><span class="line">random.uniform(10, 100)</span><br><span class="line">13.096321648808136</span><br><span class="line">random.choice([1,2,3,4,5,6,7,8,9])</span><br><span class="line">8 </span><br><span class="line">s=[1,2,3,4,5,6,7,8,9];</span><br><span class="line">random.shuffle(s);</span><br><span class="line">print(s) # [3, 5, 8, 9, 6, 1, 2, 7, 4]</span><br></pre></td></tr></table></figure><h2 id="未完待续。。。"><a href="#未完待续。。。" class="headerlink" title="未完待续。。。"></a>未完待续。。。</h2>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> time </tag>
            
            <tag> datetime </tag>
            
            <tag> DBUtils </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术小白教你如何定位照片拍摄位置</title>
      <link href="/2019/11/28/%E7%85%A7%E7%89%87%E7%9A%84GPS%E4%BF%A1%E6%81%AF%E5%AE%9A%E4%BD%8D/"/>
      <url>/2019/11/28/%E7%85%A7%E7%89%87%E7%9A%84GPS%E4%BF%A1%E6%81%AF%E5%AE%9A%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;某些情况，我们需要照片显示记录位置信息，那么当下最便捷的拍照工具就是手机。手机拍摄的照片如何记录详细的位置信息，本经验以华为Mate9为例，展示如何从手机照片定位至拍摄地点。<font color=#c85d44>（同时，经测试，定位精度较高，为保护隐私，请关闭手机拍照功能中记录地理信息的功能，或者保护好照片避免外泄，以免被他人用于非法活动）</font></p><a id="more"></a><h2 id="1-获取GPS信息"><a href="#1-获取GPS信息" class="headerlink" title="1.获取GPS信息"></a>1.获取GPS信息</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;将照片复制至电脑。点击照片，右键--“右键菜单”--“属性”--“详细信息”，下拉至“GPS”，将会看到经纬度信息。如下图所示：<br><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/D:/data/imagespostion.JPG" alt=""></fancybox></p><h2 id="2-经纬度计算方法"><a href="#2-经纬度计算方法" class="headerlink" title="2.经纬度计算方法"></a>2.经纬度计算方法</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;我们可以看到经纬度信息，<font color=#c85d44>是以度分秒的格式展示的（度分秒之间以“；”间隔），为了方便定位，我们需要将度分秒转换为度的格式。</font><br>计算方法：经纬度同理（本例为32；49；49.942932000005413）<br>经度：度+（分+秒/60）/60，即32+(49+49.9429/60)/60=32.8305;</p><h2 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h2><p>在<a href="http://www.gpsov.com/cn/main.php" target="_blank" rel="noopener">奥维地图</a>上将计算后的经纬度（以英文格式书写）代入其中，就可以获得地理位置信息。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 定位照片拍摄位置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx（二）：Nginx的命令和配置文件</title>
      <link href="/2019/11/27/Nginx(%E4%BA%8C)/"/>
      <url>/2019/11/27/Nginx(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<p><font size=5 color=#00ced1 size=5 face="黑体">与众不同的生活方式很累人呢，因为找不到借口</font></p><p>&nbsp;&nbsp;&nbsp;&nbsp;在上一章节中，我们以及了解到正向、反向代理、负载均衡和动静分离的基本概念，安装教程，而在本节中将会了解到在</p><blockquote><p><font size=4 color=#FF0000>本文要点：</font><br>1.理清概念<br>2.Linux下Nginx的常用命令<br>3.Nginx的基本配置文件nginx.conf<br>4.Nginx 配置实例-反向代理实例 1 </p></blockquote><a id="more"></a><h3 id="1-理清概念"><a href="#1-理清概念" class="headerlink" title="1.理清概念"></a>1.理清概念</h3><p>docker创建Nginx容器很简单：共享数据卷，外部访问端口映射<br>window下运行nginx，只需简单式一直点击“NEXT”安装，然后添加到环境变量即可<br><font color=#00ced1 size=5 face="黑体">在Linux下启动nginx相对比较麻烦，如果你采用其它两种方式，可以跳过本节，本节主要是介绍Linux下的运行命令</font><br>无论哪种方式启动Nginx，其核心的配置文件以及接下来的几个配置实例都是通用的</p><h3 id="2-Linux下Nginx的常用命令"><a href="#2-Linux下Nginx的常用命令" class="headerlink" title="2.Linux下Nginx的常用命令"></a>2.Linux下Nginx的常用命令</h3><p><a href="http://ahrilove.top/2019/11/10/docker容器虚拟技术/">先关闭防火墙或者是开放目标端口</a></p><blockquote><p>进入nginx目录中 </p></blockquote><p>cd  /usr/local/nginx/sbin (前面路径有可能不同，主要是nginx内的nginx/sbin路径)</p><blockquote><p>1、查看nginx版本号  </p></blockquote><p>./nginx -v </p><blockquote><p>2、启动nginx </p></blockquote><p>./nginx </p><blockquote><p>3、停止nginx  </p></blockquote><p>./nginx  -s  stop </p><blockquote><p>4、重新加载nginx  </p></blockquote><p>./nginx -s reload </p><h3 id="3-ginx的基本配置文件nginx-conf"><a href="#3-ginx的基本配置文件nginx-conf" class="headerlink" title="3.ginx的基本配置文件nginx.conf"></a>3.ginx的基本配置文件nginx.conf</h3><h4 id="3-1、nginx-配置文件位置"><a href="#3-1、nginx-配置文件位置" class="headerlink" title="3.1、nginx 配置文件位置"></a>3.1、nginx 配置文件位置</h4><p>cd /usr/local/nginx/conf/nginx.conf </p><h4 id="3-2、配置文件中的内容-包含三部分内容"><a href="#3-2、配置文件中的内容-包含三部分内容" class="headerlink" title="3.2、配置文件中的内容 包含三部分内容"></a>3.2、配置文件中的内容 包含三部分内容</h4><p>（1）全局块：配置服务器整体运行的配置指令 比如 worker_processes  1;处理并发数的配置 </p><p>（2）events 块：影响 Nginx 服务器与用户的网络连接 比如 worker_connections  1024; 支持的最大连接数为 1024 </p><p>（3）http 块 还包含两部分： http 全局块 server 块</p><h4 id="3-3-默认的nginx-conf"><a href="#3-3-默认的nginx-conf" class="headerlink" title="3.3 默认的nginx.conf"></a>3.3 默认的nginx.conf</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line"><span class="string">worker_processes</span>  <span class="number">1</span><span class="string">;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"><span class="string">events</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">worker_connections</span>  <span class="number">1024</span><span class="string">;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">http</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">include</span>       <span class="string">mime.types;</span></span><br><span class="line">    <span class="string">default_type</span>  <span class="string">application/octet-stream;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">    <span class="comment">#                  '$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">    <span class="comment">#                  '"$http_user_agent" "$http_x_forwarded_for"';</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/access.log  main;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">sendfile</span>        <span class="string">on;</span></span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    <span class="string">keepalive_timeout</span>  <span class="number">65</span><span class="string">;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">server</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">listen</span>       <span class="number">80</span><span class="string">;</span></span><br><span class="line">        <span class="string">server_name</span>  <span class="string">localhost;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">        <span class="string">location</span> <span class="string">/</span> <span class="string">&#123;</span></span><br><span class="line">            <span class="string">root</span>   <span class="string">html;</span></span><br><span class="line">            <span class="string">index</span>  <span class="string">index.html</span> <span class="string">index.htm;</span></span><br><span class="line">        <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="number">404.</span><span class="string">md</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="string">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  <span class="string">/50x.html;</span></span><br><span class="line">        <span class="string">location</span> <span class="string">=</span> <span class="string">/50x.html</span> <span class="string">&#123;</span></span><br><span class="line">            <span class="string">root</span>   <span class="string">html;</span></span><br><span class="line">        <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    proxy_pass   http://127.0.0.1;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    root           html;</span></span><br><span class="line">        <span class="comment">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class="line">        <span class="comment">#    fastcgi_index  index.php;</span></span><br><span class="line">        <span class="comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class="line">        <span class="comment">#    include        fastcgi_params;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># deny access to .htaccess files, if Apache's document root</span></span><br><span class="line">        <span class="comment"># concurs with nginx's one</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ /\.ht &#123;</span></span><br><span class="line">        <span class="comment">#    deny  all;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># another virtual host using mix of IP-, name-, and port-based configuration</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       8000;</span></span><br><span class="line">    <span class="comment">#    listen       somename:8080;</span></span><br><span class="line">    <span class="comment">#    server_name  somename  alias  another.alias;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># HTTPS server</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       443 ssl;</span></span><br><span class="line">    <span class="comment">#    server_name  localhost;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_certificate      cert.pem;</span></span><br><span class="line">    <span class="comment">#    ssl_certificate_key  cert.key;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_session_cache    shared:SSL:1m;</span></span><br><span class="line">    <span class="comment">#    ssl_session_timeout  5m;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span><br><span class="line">    <span class="comment">#    ssl_prefer_server_ciphers  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="4-Nginx-配置实例-反向代理实例-1"><a href="#4-Nginx-配置实例-反向代理实例-1" class="headerlink" title="4.Nginx 配置实例-反向代理实例 1"></a>4.Nginx 配置实例-反向代理实例 1</h3><h4 id="4-1、实现效果"><a href="#4-1、实现效果" class="headerlink" title="4.1、实现效果"></a>4.1、实现效果</h4><p>（1）打开浏览器，在浏览器地址栏输入地址 <a href="http://www.123.com，跳转到" target="_blank" rel="noopener">www.123.com，跳转到</a> liunx 系统 tomcat 主页 面中 </p><h4 id="4-2、准备工作"><a href="#4-2、准备工作" class="headerlink" title="4.2、准备工作"></a>4.2、准备工作</h4><p>（1）在 liunx 系统安装 tomcat，使用默认端口 8080 * tomcat 安装文件放到 liunx 系统中，解压 * 进入 tomcat 的 bin 目录中，./startup.sh 启动 tomcat 服务器 </p><p>（2）对外开放访问的端口<br>firewall-cmd --add-port=8080/tcp --permanent<br>firewall-cmd --reload </p><p>（3）查看已经开放的端口号<br>firewall-cmd –list-all </p><p>（4）在 windows 系统中通过浏览器访问 tomcat 服务器(linux_IP + tomcat_Port)</p><h4 id="4-3、访问过程分析"><a href="#4-3、访问过程分析" class="headerlink" title="4.3、访问过程分析"></a>4.3、访问过程分析</h4><blockquote><p>映射IP</p></blockquote><p>假设域名<a href="http://www.123.com映射的IP为Linux上的nginx的ip地址（比如我的是192.168.17.129:80）,nginx也相当于一个分发器，将请求发送至tomcat服务器" target="_blank" rel="noopener">www.123.com映射的IP为Linux上的nginx的ip地址（比如我的是192.168.17.129:80）,nginx也相当于一个分发器，将请求发送至tomcat服务器</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">访问过程分析</span><br><span class="line">windows端   ----------&gt;Nginx（linux_IP：80）------&gt;tomcat(127.0.0.1:8080)</span><br><span class="line">（假设访问www.123.com）</span><br></pre></td></tr></table></figure><blockquote><p>在 nginx 进行请求转发的配置（反向代理配置）</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">server&#123;</span></span><br><span class="line">    <span class="string">listen</span> <span class="number">80</span><span class="string">;</span> <span class="comment"># 监听端口</span></span><br><span class="line">    <span class="string">server_name</span>   <span class="string">www.123.com;</span>  <span class="comment"># 配置域名</span></span><br><span class="line">    </span><br><span class="line">    <span class="string">location</span> <span class="string">/&#123;</span></span><br><span class="line">        <span class="string">proxy_pass</span> <span class="attr">http://127.0.0.1:8080;</span>  <span class="comment"># 跳转到127.0.0.1：8080路径</span></span><br><span class="line">        <span class="string">index</span> <span class="string">index.html</span> <span class="string">index.htm</span> <span class="string">index.jsp;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>如上配置，我们监听 80 端口，访问域名为 <a href="http://www.123.com，不加端口号时默认为" target="_blank" rel="noopener">www.123.com，不加端口号时默认为</a> 80 端口，故 访问该域名时会跳转到 127.0.0.1:8080 路径上。在浏览器端输入 <a href="http://www.123.com后，成功后直接跳转到tomcat主页" target="_blank" rel="noopener">www.123.com后，成功后直接跳转到tomcat主页</a></p>]]></content>
      
      
      <categories>
          
          <category> 服务器架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx.conf </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx（一）：基本概念</title>
      <link href="/2019/11/25/Nginx/"/>
      <url>/2019/11/25/Nginx/</url>
      
        <content type="html"><![CDATA[<p><font size=5 color=#00ced1 size=5 face="黑体">守住一方平安，尽力而为，问心无愧就好。</font></p><p>&nbsp;&nbsp;&nbsp;&nbsp;Nginx同Apache一样都是一种WEB服务器，Nginx是一款自由的、开源的、高性能的HTTP服务器和反向代理服务器；同时也是一个IMAP、POP3、SMTP代理服务器；Nginx可以作为一个HTTP服务器进行网站的发布处理，另外Nginx可以作为反向代理进行负载均衡的实现。</p><blockquote><p><font size=4 color=#FF0000>本文要点：</font><br>正向代理<br>反向代理<br>负载均衡<br>动静分离<br>Nginx安装教程</p></blockquote><a id="more"></a><h2 id="1-正向代理"><a href="#1-正向代理" class="headerlink" title="1.正向代理"></a>1.正向代理</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在如今的网络环境下，我们如果由于技术需要要去访问国外的某些网站，此时你会发现位于国外的某网站我们通过浏览器是没有办法访问的，此时大家可能都会用一个操作FQ进行访问，FQ的方式主要是找到一个可以访问国外网站的代理服务器，我们将请求发送给代理服务器，代理服务器去访问国外的网站，然后将访问到的数据传递给我们！<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上述这样的代理模式称为正向代理，正向代理最大的特点是<font size=#FF0000>客户端非常明确要访问的服务器地址；服务器只清楚请求来自哪个代理服务器，而不清楚来自哪个具体的客户端；正向代理模式屏蔽或者隐藏了真实客户端信息。</font>来看个示意图（我把客户端和正向代理框在一块，同属于一个环境，后面我有介绍）：<br><fancybox><img src="https://img2018.cnblogs.com/blog/1202586/201812/1202586-20181211123717325-1261206014.png" alt=""></fancybox><br><font size=#FF0000>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;客户端必须设置正向代理服务器，当然前提是要知道正向代理服务器的IP地址</font>，还有代理程序的端口。如图。<br><fancybox><img src="https://img2018.cnblogs.com/blog/1202586/201812/1202586-20181211121039404-1910765480.png" alt=""></fancybox><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;总结来说：正向代理，”它代理的是客户端，代客户端发出请求”，是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端必须要进行一些特别的设置才能使用正向代理<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;正向代理的用途：<br>（1）访问原来无法访问的资源，如Google<br>（2） 可以做缓存，加速访问资源<br>（3）对客户端访问授权，上网进行认证<br>（4）代理可以记录用户访问记录（上网行为管理），对外隐藏用户信息</p><h2 id="2-反向代理"><a href="#2-反向代理" class="headerlink" title="2.反向代理"></a>2.反向代理</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;明白了什么是正向代理，我们继续看关于反向代理的处理方式，举例如我大天朝的某宝网站，每天同时连接到网站的访问人数已经爆表，单个服务器远远不能满足人民日益增长的购买欲望了，此时就出现了一个大家耳熟能详的名词：分布式部署；也就是通过部署多台服务器来解决访问人数限制的问题；某宝网站中大部分功能也是直接使用Nginx进行反向代理实现的，并且通过封装Nginx和其他的组件之后起了个高大上的名字：Tengine，有兴趣的童鞋可以访问Tengine的官网查看具体的信息：<a href="http://tengine.taobao.org/。" target="_blank" rel="noopener">http://tengine.taobao.org/。</a><br><fancybox><img src="https://images2018.cnblogs.com/blog/1202586/201804/1202586-20180406175939873-925019958.png" alt="反向代理"></fancybox><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过上述的图解大家就可以看清楚了，多个客户端给服务器发送的请求，Nginx服务器接收到之后，按照一定的规则分发给了后端的业务处理服务器进行处理了。此时~请求的来源也就是客户端是明确的，但是请求具体由哪台服务器处理的并不明确了，Nginx扮演的就是一个反向代理角色。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;客户端是无感知代理的存在的，反向代理对外都是透明的，访问者并不知道自己访问的是一个代理。因为客户端不需要任何配置就可以访问。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;反向代理，”它代理的是服务端，代服务端接收请求”，主要用于服务器集群分布式部署的情况下，反向代理隐藏了服务器的信息。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;反向代理的作用：<br>（1）保证内网的安全，通常将反向代理作为公网访问地址，Web服务器是内网<br>（2）负载均衡，通过反向代理服务器来优化网站的负载</p><h2 id="3-项目场景以及两者区别"><a href="#3-项目场景以及两者区别" class="headerlink" title="3.项目场景以及两者区别"></a>3.项目场景以及两者区别</h2><p>通常情况下，我们在实际项目操作时，正向代理和反向代理很有可能会存在在一个应用场景中，正向代理代理客户端的请求去访问目标服务器，目标服务器是一个反向单利服务器，反向代理了多台真实的业务处理服务器。具体的拓扑图如下：<br><fancybox><img src="https://images2018.cnblogs.com/blog/1202586/201804/1202586-20180406180130452-1246060303.png" alt="反向代理"></fancybox><br>两者区别：<br><fancybox><img src="https://img2018.cnblogs.com/blog/1202586/201812/1202586-20181211122806997-940664368.png" alt="两者区别"></fancybox><br>图解：</p><p>在正向代理中，Proxy和Client同属于一个LAN（图中方框内），隐藏了客户端信息；</p><p>在反向代理中，Proxy和Server同属于一个LAN（图中方框内），隐藏了服务端信息；</p><p>实际上，Proxy在两种代理中做的事情都是替服务器代为收发请求和响应，不过从结构上看正好左右互换了一下，所以把后出现的那种代理方式称为反向代理了</p><h2 id="4-负载均衡"><a href="#4-负载均衡" class="headerlink" title="4.负载均衡"></a>4.负载均衡</h2><p>我们已经明确了所谓代理服务器的概念，那么接下来，Nginx扮演了反向代理服务器的角色，它是以依据什么样的规则进行请求分发的呢？不用的项目应用场景，分发的规则是否可以控制呢？</p><p>　　这里提到的客户端发送的、Nginx反向代理服务器接收到的请求数量，就是我们说的负载量。</p><p>　　请求数量按照一定的规则进行分发到不同的服务器处理的规则，就是一种均衡规则。</p><p>　　所以，将服务器接收到的请求按照规则分发的过程，称为负载均衡。</p><p>　　负载均衡在实际项目操作过程中，有硬件负载均衡和软件负载均衡两种，硬件负载均衡也称为硬负载，如F5负载均衡，相对造价昂贵成本较高，但是数据的稳定性安全性等等有非常好的保障，如中国移动中国联通这样的公司才会选择硬负载进行操作；更多的公司考虑到成本原因，会选择使用软件负载均衡，软件负载均衡是利用现有的技术结合主机硬件实现的一种消息队列分发机制。<br><fancybox><img src="https://images2018.cnblogs.com/blog/1202586/201804/1202586-20180406180405961-333776342.png" alt=""></fancybox><br>Nginx支持的负载均衡调度算法方式如下：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.weight轮询(默认，常用)：接收到的请求按照权重分配到不同的后端服务器，即使在使用过程中，某一台后端服务器宕机，Nginx会自动将该服务器剔除出队列，请求受理情况不会受到任何影响。 这种方式下，可以给不同的后端服务器设置一个权重值(weight)，用于调整不同的服务器上请求的分配率；权重数据越大，被分配到请求的几率越大；该权重值，主要是针对实际工作环境中不同的后端服务器硬件配置进行调整的。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.ip_hash（常用）：每个请求按照发起客户端的ip的hash结果进行匹配，这样的算法下一个固定ip地址的客户端总会访问到同一个后端服务器，这也在一定程度上解决了集群部署环境下session共享的问题。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.fair：智能调整调度算法，动态的根据后端服务器的请求处理到响应的时间进行均衡分配，响应时间短处理效率高的服务器分配到请求的概率高，响应时间长处理效率低的服务器分配到的请求少；结合了前两者的优点的一种调度算法。但是需要注意的是Nginx默认不支持fair算法，如果要使用这种调度算法，请安装upstream_fair模块。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.url_hash：按照访问的url的hash结果分配请求，每个请求的url会指向后端固定的某个服务器，可以在Nginx作为静态服务器的情况下提高缓存效率。同样要注意Nginx默认不支持这种调度算法，要使用的话需要安装Nginx的hash软件包。</p><h2 id="5-动静分离"><a href="#5-动静分离" class="headerlink" title="5.动静分离"></a>5.动静分离</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度。降低原来单个服务器的压力。 </p><h2 id="6-nginx安装"><a href="#6-nginx安装" class="headerlink" title="6.nginx安装"></a>6.nginx安装</h2><p><i class="fas fa-hand-point-right"></i><a href="https://www.cnblogs.com/wcwnina/p/8728430.html" target="_blank" rel="noopener">windows下安装与部署Nginx</a><br><i class="fas fa-hand-point-right"></i><a href="https://www.cnblogs.com/wcwnina/p/8728430.html" target="_blank" rel="noopener">Linux下安装与部署Nginx</a><br><i class="fas fa-hand-point-right"></i>以后都推荐再docker下安装各式各样的环境<a href="http://ahrilove.top/2019/11/10/docker容器虚拟技术/">Ubuntu+docker下安装与部署Nginx</a></p>]]></content>
      
      
      <categories>
          
          <category> 服务器架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> apache </tag>
            
            <tag> 负载均衡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript篇章四：快速入门</title>
      <link href="/2019/11/23/Javascript%E7%AF%87%E7%AB%A0%E5%9B%9B/"/>
      <url>/2019/11/23/Javascript%E7%AF%87%E7%AB%A0%E5%9B%9B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>1.条件判断以及prompt() 方法<br>2.循环<br>3.Map与Reduce<br>4.全局作用域与浏览器对象<br>5.高阶函数与操作表单<br>6.前端模块化</p></blockquote><a id="more"></a><h3 id="1-条件判断以及prompt-方法"><a href="#1-条件判断以及prompt-方法" class="headerlink" title="1.条件判断以及prompt() 方法"></a>1.条件判断以及prompt() 方法</h3><p>多条件判断：if…else if…else if…else<br>prompt(text,defaultText)方法用于显示可提示用户进行输入的对话框（即输入数据）,参数一表示提示文本，参数二表示默认值<br>var name=prompt(“Please enter your name”,”ritian zhao”)</p><h3 id="2-循环"><a href="#2-循环" class="headerlink" title="2.循环"></a>2.循环</h3><ol><li>for(i=1;i&lt;=1000;i++){}</li></ol><p>2.for (item in items){} (不推荐)</p><p>3.while(){} </p><h3 id="3-return终止函数"><a href="#3-return终止函数" class="headerlink" title="3. return终止函数"></a>3. return终止函数</h3><p>1.return后面的语句不执行<br>2.JavaScript里的return只能返回一个数值（区别于python可以返回多个）</p><h3 id="4-Map与Set运用"><a href="#4-Map与Set运用" class="headerlink" title="4.Map与Set运用"></a>4.Map与Set运用</h3><h4 id="Map是一组键值对的结构，具有很快的查找速度"><a href="#Map是一组键值对的结构，具有很快的查找速度" class="headerlink" title="Map是一组键值对的结构，具有很快的查找速度"></a>Map是一组键值对的结构，具有很快的查找速度</h4><p>举个例子，假设要根据同学的名字查找对应的成绩，如果用Array实现，需要两个Array：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>];</span><br><span class="line"><span class="keyword">var</span> scores = [<span class="number">95</span>, <span class="number">75</span>, <span class="number">85</span>];</span><br></pre></td></tr></table></figure><p>给定一个名字，要查找对应的成绩，就先要在names中找到对应的位置，再从scores取出对应的成绩，Array越长，耗时越长。</p><p>如果用Map实现，只需要一个“名字”-“成绩”的对照表，直接根据名字查找成绩，无论这个表有多大，查找速度都不会变慢。用JavaScript写一个Map如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'Michael'</span>, <span class="number">95</span>], [<span class="string">'Bob'</span>, <span class="number">75</span>], [<span class="string">'Tracy'</span>, <span class="number">85</span>]]);</span><br><span class="line">m.get(<span class="string">'Michael'</span>); <span class="comment">// 95</span></span><br></pre></td></tr></table></figure><blockquote><p>Map的方法（初始化Map需要一个二维数组，或者直接初始化一个空Map）</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>(); <span class="comment">// 空Map</span></span><br><span class="line">m.set(<span class="string">'Adam'</span>, <span class="number">67</span>); <span class="comment">// 添加新的key-value</span></span><br><span class="line">m.set(<span class="string">'Bob'</span>, <span class="number">59</span>);</span><br><span class="line">m.has(<span class="string">'Adam'</span>); <span class="comment">// 是否存在key 'Adam': true</span></span><br><span class="line">m.get(<span class="string">'Adam'</span>); <span class="comment">// 67,获取值</span></span><br><span class="line">m.delete(<span class="string">'Adam'</span>); <span class="comment">// 删除key 'Adam'</span></span><br><span class="line">m.get(<span class="string">'Adam'</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>由于一个key只能对应一个value，所以，多次对一个key放入value，map函数会把后面的值会把前面的值冲掉</p><h4 id="Set"><a href="#Set" class="headerlink" title="Set()"></a>Set()</h4><blockquote><p>Set和Map类似，也是一组key的集合，但不存储value。</p></blockquote><p>由于key不能重复，所以，在Set中，没有重复的key。要创建一个Set，需要提供一个Array作为输入，或者直接创建一个空Set</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> <span class="built_in">Set</span>(); <span class="comment">// 空Set</span></span><br><span class="line"><span class="keyword">var</span> s2 = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">//一个Array含1, 2, 3</span></span><br></pre></td></tr></table></figure><blockquote><p>重复元素在Set中自动被过滤：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="string">'3'</span>]);</span><br><span class="line">s; <span class="comment">// Set &#123;1, 2, 3, "3"&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>通过add(key)方法可以添加元素到Set中，可以重复添加，但不会有效果：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s.add(<span class="number">4</span>);</span><br><span class="line">s; <span class="comment">// Set &#123;1, 2, 3, 4&#125;</span></span><br><span class="line">s.add(<span class="number">4</span>);</span><br><span class="line">s; <span class="comment">// 仍然是 Set &#123;1, 2, 3, 4&#125;</span></span><br></pre></td></tr></table></figure><h4 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h4><p>1.不在任何函数内定义的变量就具有全局作用域，实际上，JavaScript默认有一个全局对象window，全局作用域的变量实际上被绑定到window的一个属性。<br>window.属性/window.方法<br>2.ES6引入了新的关键字let，用let替代var可以申明一个块级作用域的变量<br>3.ES6标准引入了新的关键字const来定义常量，const与let都具有块级作用域</p><p>浏览器对象：window,navigator,screen,Location，document</p><blockquote><p>window对象不仅充当全局作用域，而且表示浏览器的窗口</p></blockquote><p>window.innerWidth和window.innerHeight:可以获取浏览器窗口的内部宽度和高度。内部宽高是指除去菜单栏、工具栏、边框等占位元素后，用于显示网页的净宽高</p><p>windows.outerWidth和outerHeight属性，可以获取浏览器窗口的整个宽高</p><p>拓：<strong>window.onresize()监听浏览器窗口高宽变化，注意要使用箭头函数</strong>：<br>window.onresize()官方定义为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">window.onresize=function()&#123;</span><br><span class="line">    SomeJavaScriptCode</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>但是最近的一个项目（Vue+ThinkPHP）中，监听浏览器窗口变化时，不适用箭头函数就会报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    //重设图表高宽</span><br><span class="line">    resizeChart()&#123;</span><br><span class="line">        //监听窗口高宽变化，注意要使用箭头函数</span><br><span class="line">        window.onresize = () =&gt; &#123;</span><br><span class="line">            this.formTableMain2Chart.resize();     //重设费用报销单图表的高宽</span><br><span class="line">            this.formTableMain147Chart.resize();     //重设147招待费用报销单图表的高宽</span><br><span class="line">            this.formTableMain58Chart.resize();     //重设58差旅费用报销单图表的高宽</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>navigator对象表示浏览器信息</p></blockquote><p>navigator.appName：浏览器名称；<br>navigator.appVersion：浏览器版本；<br>navigator.language：浏览器设置的语言；<br>navigator.platform：操作系统类型；<br>navigator.userAgent：浏览器设定的User-Agent字符串</p><blockquote><p>screen表示屏幕信息</p></blockquote><p>screen.width：屏幕宽度，以像素为单位；<br>screen.height：屏幕高度，以像素为单位；<br>screen.colorDepth：返回颜色位数，如8、16、24。</p><blockquote><p>Location对象表示当前页面的URL信息</p></blockquote><p>location.protocol; // ‘http’<br>location.host; // ‘<a href="http://www.example.com&#39;" target="_blank" rel="noopener">www.example.com&#39;</a><br>location.port; // ‘8080’<br>location.pathname; // ‘/path/index.html’<br>location.search; // ‘?a=1&amp;b=2’<br>location.hash; // ‘TOP’<br>location.href 获取完整url<br>window.location.href=&quot;新的跳转url”：跳转到指定的页面<br>location.assign()：加载一个新页面，可以调用<br>location.reload()：如果要重新加载当前页面</p><blockquote><p>document对象表示当前页面</p></blockquote><h4 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h4><blockquote><p>map/reduce函数，与python的map，reduce作用相同</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">var</span> results = arr.map(pow); <span class="comment">// [1, 4, 9, 16, 25, 36, 49, 64, 81]</span></span><br><span class="line"><span class="comment">// 对于reduce函数：函数必须接收两个参数，reduce()把结果继续和序列的下一个元素做累积计算</span></span><br><span class="line">[x1, x2, x3, x4].reduce(f) = f(f(f(x1, x2), x3), x4)</span><br></pre></td></tr></table></figure><blockquote><p>instanceof关键字</p></blockquote><p>这个关键字的用法是：A instanceof B ，返回值为boolean类型。用来判断A是否是B的实例对象或者B子类的实例对象。如果是则返回true,否则返回false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Man是Person的子类</span></span><br><span class="line">p = <span class="keyword">new</span> Person() ; <span class="comment">//</span></span><br><span class="line">m = <span class="keyword">new</span> Man() ; </span><br><span class="line">a = <span class="keyword">new</span> Animal() ;</span><br><span class="line">m <span class="keyword">instanceof</span> Man <span class="comment">//返回true</span></span><br><span class="line">m <span class="keyword">instanceof</span> Animal<span class="comment">//返回false</span></span><br><span class="line">m <span class="keyword">instanceof</span> Person<span class="comment">//返回true</span></span><br></pre></td></tr></table></figure><h4 id="操作表单"><a href="#操作表单" class="headerlink" title="操作表单"></a>操作表单</h4><p>文本框，对应的&lt;input type=”text”&gt;，用于输入文本；</p><p>口令框，对应的&lt;input type=”password”&gt;，用于输入口令；</p><p>单选框，对应的&lt;input type=”radio”&gt;，用于选择一项；</p><p>复选框，对应的&lt;input type=”checkbox”&gt;，用于选择多项；</p><p>下拉框，对应的&lt;select&gt;，用于选择一项；</p><p>隐藏文本，对应的&lt;input type=”hidden”&gt;，用户不可见，但表单提交时会把隐藏文本发送到服务器。</p><blockquote><p>获取值</p></blockquote><p>如果我们获得了一个&lt;input&gt;节点的引用，就可以直接调用value获得对应的用户输入值，使用样例：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;变量名.value可以应用于text、password、hidden以及select。但是，对于单选框和复选框，value属性返回的永远是HTML预设的值，而我们需要获得的实际是用户是否“勾上了”选项，所以应该用checked判断：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;label&gt;&lt;input type="radio" name="weekday" id="monday" value="1"&gt; Monday&lt;/label&gt;</span></span><br><span class="line"><span class="comment">// &lt;label&gt;&lt;input type="radio" name="weekday" id="tuesday" value="2"&gt; Tuesday&lt;/label&gt;</span></span><br><span class="line"><span class="keyword">var</span> mon = <span class="built_in">document</span>.getElementById(<span class="string">'monday'</span>);</span><br><span class="line"><span class="keyword">var</span> tue = <span class="built_in">document</span>.getElementById(<span class="string">'tuesday'</span>);</span><br><span class="line">mon.value; <span class="comment">// '1'</span></span><br><span class="line">tue.value; <span class="comment">// '2'</span></span><br><span class="line">mon.checked; <span class="comment">// true或者false</span></span><br><span class="line">tue.checked; <span class="comment">// true或者false</span></span><br></pre></td></tr></table></figure><h4 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h4><blockquote><p>构造函数</p></blockquote><p>构造函数与普通函数的区别就是调用方式不同：普通函数是直接调用，而构造函数需要使用new关键字来调用<br>PS:构造函数的函数名一般默认首字母大写；构造函数里可以使用this;<a href="http://ahrilove.top/2019/12/03/python的executemany方法/">参考：本质与python的构造函数相同</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name)  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建一个对象per</span></span><br><span class="line"><span class="keyword">var</span> per = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(per);</span><br></pre></td></tr></table></figure><h4 id="indexOf-方法"><a href="#indexOf-方法" class="headerlink" title="indexOf()方法"></a>indexOf()方法</h4><p>strings.indexOf(“目标字符串”):可返回某个指定的字符串值在字符串中首次出现的位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"Hello world!"</span>;</span><br><span class="line"><span class="built_in">document</span>.write(str.indexOf(<span class="string">"Hello"</span>) + <span class="string">"&lt;br /&gt;"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(str.indexOf(<span class="string">"World"</span>) + <span class="string">"&lt;br /&gt;"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(str.indexOf(<span class="string">"world"</span>));</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 0</span></span><br><span class="line"><span class="comment">*-1</span></span><br><span class="line"><span class="comment">*6</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>indexOf() 方法对大小写敏感！:如果要检索的字符串值没有出现，则该方法返回 -1,而且索引值默认起始值为0</p><h4 id="Timing事件"><a href="#Timing事件" class="headerlink" title="Timing事件"></a>Timing事件</h4><p>setTimeout(function,milliseconds):等待指定的毫秒数后执行函数<br>setInterval(function,milliseconds):等同于setTimeout()，但在每个给定的时间间隔内重复执行该函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myVar = setInterval(myTimer, <span class="number">3000</span>);</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTimer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="built_in">console</span>.log(d.getFullYear())</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// setInterval在每隔3秒就打印一次当前的月份</span></span><br></pre></td></tr></table></figure><p>clearTimeout(变量名) 方法停止执行 setTimeout() 中规定的函数。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用setTimeout等待执行函数，clearTimeout停止执行函数---&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"myVar = setTimeout(myFunction, 3000)"</span>&gt;</span>试一试<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"clearTimeout(myVar)"</span>&gt;</span>停止执行<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-前端模块化-node-js"><a href="#5-前端模块化-node-js" class="headerlink" title="5.前端模块化(node.js)"></a>5.前端模块化(node.js)</h3><blockquote><p>1.模块暴露</p></blockquote><p>我们编写了一个hello.js文件，这个hello.js文件就是一个模块，模块的名字就是文件名（去掉.js后缀），所以hello.js文件就是名为hello的模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">'Hello'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(s + <span class="string">', '</span> + name + <span class="string">'!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = greet;</span><br></pre></td></tr></table></figure><p>module.exports把函数greet作为模块的输出暴露出去，这样其他模块就可以使用greet函数了</p><blockquote><p>2.模块引入</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入hello模块:</span></span><br><span class="line"><span class="keyword">var</span> greet = <span class="built_in">require</span>(<span class="string">'./hello'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">'Michael'</span>;</span><br><span class="line"></span><br><span class="line">greet(s); <span class="comment">// Hello, Michael!</span></span><br></pre></td></tr></table></figure><blockquote><p>3.多模块暴露</p></blockquote><p>我们不妨深入♂一下：将某个模块暴露出来，并访问该模块内的多个函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hello.js</span></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> s = <span class="string">"hello python"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">conn</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(s+<span class="string">','</span>+name+<span class="string">'!'</span>);</span><br><span class="line">    <span class="keyword">return</span>(s+<span class="string">","</span>+name+<span class="string">"!"</span>) </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printer</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ab = [];</span><br><span class="line">    <span class="keyword">if</span>(n&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            ab.push(i)&#125;</span><br><span class="line">        <span class="built_in">console</span>.log(ab)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"输入错误"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将模块暴露出来，以便于其它模块调用，采用对象的形式</span></span><br><span class="line"><span class="built_in">module</span>.exports =&#123;<span class="attr">conn</span>:conn,<span class="attr">printer</span>:printer&#125;;</span><br></pre></td></tr></table></figure><p>然后我们来访问hello模块，来玩♂一♀玩(注意模块里的函数调用方式)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主模块mian.js</span></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> greet = <span class="built_in">require</span>(<span class="string">'./hello'</span>);</span><br><span class="line"><span class="keyword">var</span> s = <span class="string">"chd"</span>;</span><br><span class="line">greet.conn(s);</span><br><span class="line">greet.printer(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Javascript篇章三：js数字，数组与日期</title>
      <link href="/2019/11/22/Javascript%E7%AF%87%E7%AB%A0%E4%B8%89/"/>
      <url>/2019/11/22/Javascript%E7%AF%87%E7%AB%A0%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<p><font size=5 color=#00ced1 size=5 face="黑体">关关雎鸠，在河之洲。窈窕淑女，君子好逑</font></p><blockquote><p><font size=4 color=#FF0000>本文要点：</font><br>1.数值方法<br>2.数组以及数组属性和方法<br>3.日期<br>4.js数据类型转换大全<br>5.js的休眠函数<br>6.js正则表达式（RegExp）<br><fancybox><img src="http://hd.wallpaperswide.com/thumbs/shhh_woman-t2.jpg" alt="一日不读书，我浑身难受"></fancybox></p></blockquote><a id="more"></a><h2 id="1-数值方法"><a href="#1-数值方法" class="headerlink" title="1.数值方法"></a>1.数值方法</h2><blockquote><p>number.toString():将数值型转化为字符串型</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">15</span>; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(n));  <span class="comment">// 为字数值类型number</span></span><br><span class="line">a = n.toString();  <span class="comment">// a为字符串类型</span></span><br></pre></td></tr></table></figure><blockquote><p>toFixed(number) 将数值保留为指定的小数位数，并再转化为String类型</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">9.656</span>;</span><br><span class="line">x.toFixed(<span class="number">0</span>);           <span class="comment">// 返回 10</span></span><br><span class="line">x.toFixed(<span class="number">2</span>);           <span class="comment">// 返回 9.66</span></span><br><span class="line">x.toFixed(<span class="number">4</span>);           <span class="comment">// 返回 9.6560</span></span><br><span class="line">x.toFixed(<span class="number">6</span>);           <span class="comment">// 返回 9.656000</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(x.toFixed(<span class="number">2</span>))) <span class="comment">// 返回"String"</span></span><br></pre></td></tr></table></figure><blockquote><p>把变量转换为数值</p></blockquote><p>这三种 JavaScript 方法可用于将变量转换为数字：</p><ul><li>Number() 方法</li><li>parseFloat(string) 方法:指定字符串的首个字符是否是数字。如果首字符为数字，则对其进行解析直到完整取出第一个数值，并返回首个数值，如果首字符不是数字则直接返回NaN</li><li>parseInt(string，radix) 方法:指定字符串的首个字符是否是数字。如果首字符为数字，将字符串取出首个完整数值，并转化为指定radix进制，如果首字符不是数字，就直接返回NaN</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">"10.008"</span>);      <span class="comment">// 返回 10</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"10.33"</span>);      <span class="comment">// 返回 10</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"10 20 30"</span>);   <span class="comment">// 返回 10</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"10 years"</span>);   <span class="comment">// 返回 10</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"years 10"</span>);   <span class="comment">// 返回 NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"30"</span>,<span class="number">8</span>);       <span class="comment">// 返回24，将30转化为8进制</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">"10"</span>);         <span class="comment">// 返回 10</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">"10.33"</span>);      <span class="comment">// 返回 10.33</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">"10 20 30"</span>);   <span class="comment">// 返回 10</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">"10 years"</span>);   <span class="comment">// 返回 10</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">"years 10"</span>);   <span class="comment">// 返回 NaN</span></span><br></pre></td></tr></table></figure><h2 id="2-数组"><a href="#2-数组" class="headerlink" title="2.数组"></a>2.数组</h2><p>创建方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种(推荐)</span></span><br><span class="line"><span class="keyword">let</span> A=[<span class="number">12</span>,<span class="number">78</span>,<span class="number">78</span>,<span class="number">78</span>,<span class="number">89</span>];</span><br><span class="line"><span class="built_in">console</span>.log(A);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line"><span class="keyword">let</span> B=<span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">B[<span class="number">0</span>]=<span class="number">12</span>;</span><br><span class="line">B[<span class="number">1</span>]=<span class="number">34</span>;</span><br><span class="line">B[<span class="number">2</span>]=<span class="number">56</span>;</span><br><span class="line"><span class="built_in">console</span>.log(B);</span><br><span class="line">  </span><br><span class="line"><span class="comment">//第三种</span></span><br><span class="line"><span class="keyword">let</span> C=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>);</span><br><span class="line">C[<span class="number">0</span>]=<span class="number">12</span>;</span><br><span class="line">C[<span class="number">1</span>]=<span class="number">34</span>;</span><br><span class="line">C[<span class="number">2</span>]=<span class="number">56</span>;</span><br><span class="line"><span class="built_in">console</span>.log(C);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//第四种</span></span><br><span class="line"><span class="keyword">let</span> D=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">45</span>,<span class="number">78</span>,<span class="number">89</span>,<span class="number">45</span>);</span><br><span class="line"><span class="built_in">console</span>.log(D);</span><br></pre></td></tr></table></figure><blockquote><p>数组是一种特殊的变量，它能够一次存放一个以上的值。</p></blockquote><p>var cars=[“Saab”,”Volov”,”BMW”];</p><blockquote><p>访问数组元素：通过索引（从0开始，下标号）来引用某个数组元素</p></blockquote><p>var name=car[0]  访问数组值<br>var car[0] = “Benz”  修改数组值，即新数组为[“Benz”,”Volvo”,”BMW”]</p><h3 id="数组属性和方法"><a href="#数组属性和方法" class="headerlink" title="数组属性和方法"></a>数组属性和方法</h3><ol><li><p>length:返回数组元素的数目</p></li><li><p>遍历数组元素：最安全是使用for循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits;</span><br><span class="line">fruits = [<span class="string">"Banana"</span>, <span class="string">"Orange"</span>, <span class="string">"Apple"</span>, <span class="string">"Mango"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; fruits.length; i++) &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(fruits[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>向数组添加新元素的最佳方法是使用 push() 方法，并返回新数组的元素个数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fruits = [<span class="string">"Banana"</span>, <span class="string">"Orange"</span>, <span class="string">"Apple"</span>, <span class="string">"Mango"</span>];</span><br><span class="line">fruits.push(<span class="string">"Lemon"</span>);   <span class="comment">// 向 fruits 添加一个新元素 (Lemon),并返回数组元素个数</span></span><br></pre></td></tr></table></figure></li><li><p>join() 方法也可将所有数组元素结合为一个字符串</p></li></ol><p>格式：数组名.join(“指定拼接符”)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">"Banana"</span>, <span class="string">"Orange"</span>,<span class="string">"Apple"</span>, <span class="string">"Mango"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(fruits.join(<span class="string">" * "</span>));</span><br><span class="line"><span class="comment">// Banana * Orange * Apple * Mango</span></span><br></pre></td></tr></table></figure><ol start="5"><li><p>pop()从数组中删除最后一个元素,并返回该值（shift()从数组中删除第一个元素,并返回该值）<br>var fruits = [“Banana”, “Orange”, “Apple”, “Mango”];<br>var x = fruits.pop();       // x 的值是 “Mango”</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">拓：</span><br><span class="line">push()+pop():可以构成栈方法，先进后出</span><br><span class="line">push()+shift()：可以构成队列方法，先进先出</span><br></pre></td></tr></table></figure></li><li><p>sort()方法以字母顺序对数组进行排序</p></li><li><p>reverse()反转数组中的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">"Banana"</span>, <span class="string">"Orange"</span>, <span class="string">"Apple"</span>, <span class="string">"Mango"</span>];</span><br><span class="line">fruits.sort();            <span class="comment">// 对 fruits 中的元素进行排序</span></span><br><span class="line">fruitS.reverse();         <span class="comment">// 对数组元素进行反转</span></span><br></pre></td></tr></table></figure></li><li><p>JavaScript的数组可以包含任意数据类型<br>创建方式一(推荐使用)：[1, 2, 3.14, ‘Hello’, null, true];<br>创建方式二：通过Array()函数实现b = new Array(1, 2, 3);<br><fancybox><img src="http://img.mukewang.com/533295ab0001dead05190599.jpg" alt=""></fancybox></p></li><li><p>js的栈与队列<br>栈：先进后出，利用push+pop<br>队列：先进先出，利用push+shift</p></li></ol><h2 id="3-日期"><a href="#3-日期" class="headerlink" title="3.日期"></a>3.日期</h2><p>使用方法：<br>var d = new Date(); 获取系统时间<br>d.getDate()/d.getFullYear()…</p><table><thead><tr><th align="right">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="right">getDate()</td><td align="left">以数值返回天数（1-31）</td></tr><tr><td align="right">getDay()</td><td align="left">以数值获取周几（0-6）</td></tr><tr><td align="right">getFullYear()</td><td align="left">获取四位的年（yyyy）</td></tr><tr><td align="right">getHours()</td><td align="left">获取小时（0-23）</td></tr><tr><td align="right">getMilliseconds()</td><td align="left">获取毫秒（0-999）</td></tr><tr><td align="right">getMinutes()</td><td align="left">获取分（0-59）</td></tr><tr><td align="right">getMonth()</td><td align="left">获取月（0-11）</td></tr><tr><td align="right">getSeconds()</td><td align="left">获取秒（0-59）</td></tr><tr><td align="right">getTime()</td><td align="left">获取时间戳（从 1970 年 1 月 1 日至今）</td></tr></tbody></table><h2 id="4-js数据类型转换大全"><a href="#4-js数据类型转换大全" class="headerlink" title="4.js数据类型转换大全"></a>4.js数据类型转换大全</h2><p>【转载】<a href="https://blog.csdn.net/weixin_41218855/article/details/89408233" target="_blank" rel="noopener">js数据类型转换</a></p><h2 id="5-js的休眠函数"><a href="#5-js的休眠函数" class="headerlink" title="5.js的休眠函数"></a>5.js的休眠函数</h2><p><font color=#FF0000>获取的时间戳是秒级还是毫秒级：js里面获取到的是毫秒级（十三位），而像python，php的时间戳是秒级的（十位数字）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">n</span>) </span>&#123; <span class="comment">//n表示的毫秒数</span></span><br><span class="line">     <span class="keyword">var</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">     <span class="keyword">while</span> (<span class="literal">true</span>) <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() - start &gt; n) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-js的正则表达式"><a href="#6-js的正则表达式" class="headerlink" title="6.js的正则表达式"></a>6.js的正则表达式</h2><p>【转载】<a href="https://blog.csdn.net/Bombas/article/details/80790274" target="_blank" rel="noopener">js正则表达式（RegExp）</a></p><h2 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a>未完待续…</h2>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 对象 </tag>
            
            <tag> 属性与方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript篇章二：js计算精度丢失</title>
      <link href="/2019/11/21/Javascript%E7%AF%87%E7%AB%A0%E4%BA%8C/"/>
      <url>/2019/11/21/Javascript%E7%AF%87%E7%AB%A0%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<p><font color=#00ced1 size=5 face="黑体">若教眼底无离恨，不信人间有白头</font></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于计算机是用二进制来存储和处理数字，不能精确表示浮点数，而JavaScript中没有相应的封装类来处理浮点数运算，直接计算会导致运算精度丢失。</p><blockquote><p><font size=4 color=#FF0000>本文要点：</font><br>1.js精确度丢失缘由<br>2.精确度丢失解决方案<br><fancybox><img src="http://hd.wallpaperswide.com/thumbs/tifa_lockhart_ff7-t2.jpg" alt="一日不读书，我浑身难受！！"></fancybox></p></blockquote><a id="more"></a><h2 id="js精确度丢失出现缘由"><a href="#js精确度丢失出现缘由" class="headerlink" title="js精确度丢失出现缘由"></a>js精确度丢失出现缘由</h2><blockquote><p>1.我们先看几个四舍五入的实例</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="built_in">Number</span>(<span class="number">0.009</span>).toFixed(<span class="number">2</span>));  </span><br><span class="line">alert(<span class="built_in">Number</span>(<span class="number">162.295</span>).toFixed(<span class="number">2</span>));</span><br></pre></td></tr></table></figure><p>按正常结果，应该分别弹出0.01和162.30。但实际测试结果却是在不同浏览器中得到的是不同的结果：<br>在ie6、7、8下得到0.00和162.30，第一个数截取不正确；<br>在firefox中得到0.01和162.29，第二个数截取不正确；<br>在opera下得到0.01和162.29，第二个数截取不正确</p><blockquote><p>2.再看有关于四则运算的实例</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="number">1</span>/<span class="number">3</span>);<span class="comment">//弹出: 0.3333333333333333  </span></span><br><span class="line">alert(<span class="number">0.1</span> + <span class="number">0.2</span>);<span class="comment">//弹出: 0.30000000000000004   </span></span><br><span class="line">alert(<span class="number">-0.09</span> - <span class="number">0.01</span>);<span class="comment">//弹出: -0.09999999999999999  </span></span><br><span class="line">alert(<span class="number">0.012345</span> * <span class="number">0.000001</span>);<span class="comment">//弹出: 1.2344999999999999e-8  </span></span><br><span class="line">alert(<span class="number">0.000001</span> / <span class="number">0.0001</span>);<span class="comment">//弹出: 0.009999999999999998</span></span><br></pre></td></tr></table></figure><p>按正常结果，除第一行外(因为其本身就不能除尽)，其他都应该要得到精确的结果，从弹出的结果我们却发现不是我们想要的正确结果。是因为没有转换成Number类型吗？我们转换成Number后再计算看看：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="built_in">Number</span>(<span class="number">1</span>)/<span class="built_in">Number</span>(<span class="number">3</span>));<span class="comment">//弹出: 0.3333333333333333       </span></span><br><span class="line">alert(<span class="built_in">Number</span>(<span class="number">0.1</span>) + <span class="built_in">Number</span>(<span class="number">0.2</span>));<span class="comment">//弹出: 0.30000000000000004      </span></span><br><span class="line">alert(<span class="built_in">Number</span>(<span class="number">-0.09</span>) - <span class="built_in">Number</span>(<span class="number">0.01</span>));<span class="comment">//弹出: -0.09999999999999999     </span></span><br><span class="line">alert(<span class="built_in">Number</span>(<span class="number">0.012345</span>) * <span class="built_in">Number</span>(<span class="number">0.000001</span>));<span class="comment">//弹出: 1.2344999999999999e-8     </span></span><br><span class="line">alert(<span class="built_in">Number</span>(<span class="number">0.000001</span>) / <span class="built_in">Number</span>(<span class="number">0.0001</span>));<span class="comment">//弹出: 0.009999999999999998</span></span><br></pre></td></tr></table></figure><p>还是一样的结果，看来javascript默认把数字识别为number类型。为了验证这一点，我们用typeof弹出类型看看：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="keyword">typeof</span>(<span class="number">1</span>));<span class="comment">//弹出: number  </span></span><br><span class="line">alert(<span class="keyword">typeof</span>(<span class="number">1</span>/<span class="number">3</span>));<span class="comment">//弹出: number  </span></span><br><span class="line">alert(<span class="keyword">typeof</span>(<span class="number">-0.09999999</span>));<span class="comment">//弹出: number</span></span><br></pre></td></tr></table></figure><blockquote><p>3.计算机原理</p></blockquote><p>回忆一下大学时学过的计算机原理，计算机执行的是二进制算术，当十进制数不能准确转换为二进制数时，这种精度误差就在所难免。从上述的推演过程我们知道，这种误差是难免的，c#的decimal和Java的BigDecimal之所以没有出现精度差异，只是因为在其内部作了相应处理，把这种精度差异给屏蔽掉了，而javascript是一种弱类型的脚本语言，本身并没有对计算精度做相应的处理，这就需要我们另外想办法处理了</p><h2 id="解决JS计算精确度丢失"><a href="#解决JS计算精确度丢失" class="headerlink" title="解决JS计算精确度丢失"></a>解决JS计算精确度丢失</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;创建calc.js文件，其调用方法参考&nbsp;&nbsp;<i class="far fa-hand-point-right"></i><a href="https://fioralove.github.io/2019/11/15/ThinkPHP/" target="_blank" rel="noopener">thinkphp项目调用Vue扩展函数方式</a></p><p><a href="https://www.cnblogs.com/wzl-learn/p/9790443.html" target="_blank" rel="noopener">参考文章</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.calc = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 千分位格式化函数</span></span><br><span class="line"><span class="comment">     * @param &#123;*&#125; number         要格式化的数字</span></span><br><span class="line"><span class="comment">     * @param &#123;*&#125; decimals       保留几位小数</span></span><br><span class="line"><span class="comment">     * @param &#123;*&#125; dec_point      小数点符号</span></span><br><span class="line"><span class="comment">     * @param &#123;*&#125; thousands_sep  千分位符号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    number_format(number, decimals, dec_point, thousands_sep) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">parseFloat</span>(number) == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">" - "</span>;</span><br><span class="line">        number = (number + <span class="string">''</span>).replace(<span class="regexp">/[^0-9+-Ee.]/g</span>, <span class="string">''</span>);</span><br><span class="line">        <span class="keyword">var</span> n = !<span class="built_in">isFinite</span>(+number) ? <span class="number">0</span> : +number,</span><br><span class="line">            decimals = (<span class="keyword">typeof</span> decimals === <span class="string">'undefined'</span>) ? <span class="number">2</span> : decimals,</span><br><span class="line">            prec = !<span class="built_in">isFinite</span>(+decimals) ? <span class="number">0</span> : <span class="built_in">Math</span>.abs(decimals),</span><br><span class="line">            sep = (<span class="keyword">typeof</span> thousands_sep === <span class="string">'undefined'</span>) ? <span class="string">','</span> : thousands_sep,</span><br><span class="line">            dec = (<span class="keyword">typeof</span> dec_point === <span class="string">'undefined'</span>) ? <span class="string">'.'</span> : dec_point,</span><br><span class="line">            s = <span class="string">''</span>,</span><br><span class="line">            toFixedFix = <span class="function"><span class="keyword">function</span> (<span class="params">n, prec</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> k = <span class="built_in">Math</span>.pow(<span class="number">10</span>, prec);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">''</span> + <span class="built_in">Math</span>.ceil(n * k) / k;</span><br><span class="line">            &#125;;</span><br><span class="line">     </span><br><span class="line">        s = (prec ? toFixedFix(n, prec) : <span class="string">''</span> + <span class="built_in">Math</span>.round(n)).split(<span class="string">'.'</span>);</span><br><span class="line">        <span class="keyword">var</span> re = <span class="regexp">/(-?\d+)(\d&#123;3&#125;)/</span>;</span><br><span class="line">        <span class="keyword">while</span> (re.test(s[<span class="number">0</span>])) &#123;</span><br><span class="line">            s[<span class="number">0</span>] = s[<span class="number">0</span>].replace(re, <span class="string">"$1"</span> + sep + <span class="string">"$2"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="keyword">if</span> ((s[<span class="number">1</span>] || <span class="string">''</span>).length &lt; prec) &#123;</span><br><span class="line">            s[<span class="number">1</span>] = s[<span class="number">1</span>] || <span class="string">''</span>;</span><br><span class="line">            s[<span class="number">1</span>] += <span class="keyword">new</span> <span class="built_in">Array</span>(prec - s[<span class="number">1</span>].length + <span class="number">1</span>).join(<span class="string">'0'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.join(dec);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加法函数，用来得到精确的加法结果</span></span><br><span class="line"><span class="comment">     * 说明：javascript的加法结果会有误差，在两个浮点数相加的时候会比较明显。这个函数返回较为精确的加法结果。</span></span><br><span class="line"><span class="comment">     * 调用：accAdd(arg1,arg2)</span></span><br><span class="line"><span class="comment">     * 返回值：arg1加上arg2的精确结果</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    accAdd: <span class="function"><span class="keyword">function</span>(<span class="params">arg1, arg2</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> r1, r2, m, c;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            r1 = arg1.toString().split(<span class="string">"."</span>)[<span class="number">1</span>].length;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            r1 = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            r2 = arg2.toString().split(<span class="string">"."</span>)[<span class="number">1</span>].length;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            r2 = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">Math</span>.abs(r1 - r2);</span><br><span class="line">        m = <span class="built_in">Math</span>.pow(<span class="number">10</span>, <span class="built_in">Math</span>.max(r1, r2));</span><br><span class="line">        <span class="keyword">if</span> (c &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> cm = <span class="built_in">Math</span>.pow(<span class="number">10</span>, c);</span><br><span class="line">            <span class="keyword">if</span> (r1 &gt; r2) &#123;</span><br><span class="line">                arg1 = <span class="built_in">Number</span>(arg1.toString().replace(<span class="string">"."</span>, <span class="string">""</span>));</span><br><span class="line">                arg2 = <span class="built_in">Number</span>(arg2.toString().replace(<span class="string">"."</span>, <span class="string">""</span>)) * cm;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                arg1 = <span class="built_in">Number</span>(arg1.toString().replace(<span class="string">"."</span>, <span class="string">""</span>)) * cm;</span><br><span class="line">                arg2 = <span class="built_in">Number</span>(arg2.toString().replace(<span class="string">"."</span>, <span class="string">""</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            arg1 = <span class="built_in">Number</span>(arg1.toString().replace(<span class="string">"."</span>, <span class="string">""</span>));</span><br><span class="line">            arg2 = <span class="built_in">Number</span>(arg2.toString().replace(<span class="string">"."</span>, <span class="string">""</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (arg1 + arg2) / m;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 减法函数，用来得到精确的减法结果</span></span><br><span class="line"><span class="comment">     * 说明：javascript的减法结果会有误差，在两个浮点数相减的时候会比较明显。这个函数返回较为精确的减法结果。</span></span><br><span class="line"><span class="comment">     * 调用：accSub(arg1,arg2)</span></span><br><span class="line"><span class="comment">     * 返回值：arg1加上arg2的精确结果</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    accSub: <span class="function"><span class="keyword">function</span>(<span class="params">arg1, arg2</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> r1, r2, m, n;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            r1 = arg1.toString().split(<span class="string">"."</span>)[<span class="number">1</span>].length;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            r1 = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            r2 = arg2.toString().split(<span class="string">"."</span>)[<span class="number">1</span>].length;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            r2 = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        m = <span class="built_in">Math</span>.pow(<span class="number">10</span>, <span class="built_in">Math</span>.max(r1, r2)); <span class="comment">//last modify by deeka //动态控制精度长度</span></span><br><span class="line">        n = (r1 &gt;= r2) ? r1 : r2;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">parseFloat</span>(((arg1 * m - arg2 * m) / m).toFixed(n));</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//乘法函数，用来得到精确的乘法结果 </span></span><br><span class="line">    <span class="comment">//说明：javascript的乘法结果会有误差，在两个浮点数相乘的时候会比较明显。这个函数返回较为精确的乘法结果。 </span></span><br><span class="line">    <span class="comment">//调用：accMul(arg1,arg2) </span></span><br><span class="line">    <span class="comment">//返回值：arg1乘以arg2的精确结果 </span></span><br><span class="line">    accMul: <span class="function"><span class="keyword">function</span>(<span class="params">arg1,arg2</span>) </span>&#123; </span><br><span class="line">        <span class="keyword">var</span> m = <span class="number">0</span>,</span><br><span class="line">            s1 = arg1.toString(),</span><br><span class="line">            s2 = arg2.toString();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m += s1.split(<span class="string">"."</span>)[<span class="number">1</span>].length</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m += s2.split(<span class="string">"."</span>)[<span class="number">1</span>].length</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Number</span>(s1.replace(<span class="string">"."</span>, <span class="string">""</span>)) * <span class="built_in">Number</span>(s2.replace(<span class="string">"."</span>, <span class="string">""</span>)) / <span class="built_in">Math</span>.pow(<span class="number">10</span>, m);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//除法函数，用来得到精确的除法结果 </span></span><br><span class="line">    <span class="comment">//说明：javascript的除法结果会有误差，在两个浮点数相除的时候会比较明显。这个函数返回较为精确的除法结果。 </span></span><br><span class="line">    <span class="comment">//调用：accDiv(arg1,arg2) </span></span><br><span class="line">    <span class="comment">//返回值：arg1除以arg2的精确结果 </span></span><br><span class="line">    accDiv: <span class="function"><span class="keyword">function</span>(<span class="params">arg1, arg2</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> t1 = <span class="number">0</span>,</span><br><span class="line">            t2 = <span class="number">0</span>,</span><br><span class="line">            r1, r2;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t1 = arg1.toString().split(<span class="string">"."</span>)[<span class="number">1</span>].length</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t2 = arg2.toString().split(<span class="string">"."</span>)[<span class="number">1</span>].length</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">        <span class="keyword">with</span>(<span class="built_in">Math</span>) &#123;</span><br><span class="line">            r1 = <span class="built_in">Number</span>(arg1.toString().replace(<span class="string">"."</span>, <span class="string">""</span>));</span><br><span class="line">            r2 = <span class="built_in">Number</span>(arg2.toString().replace(<span class="string">"."</span>, <span class="string">""</span>));</span><br><span class="line">            <span class="keyword">return</span> (r1 / r2) * pow(<span class="number">10</span>, t2 - t1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js精确度丢失 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript篇章一：JavaScript基本知识</title>
      <link href="/2019/11/20/Javascript%E7%AF%87%E7%AB%A0%E4%B8%80/"/>
      <url>/2019/11/20/Javascript%E7%AF%87%E7%AB%A0%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JavaScript是一种属于网络的脚本语言,已经被广泛用于Web应用开发,常用来为网页添加各式各样的动态功能,为用户提供更流畅美观的浏览效果。通常JavaScript脚本是通过嵌入在HTML中来实现自身的功能的，一个前端项目必离不开HTML+CSS+JavaScript。</p><blockquote><p><font size=4 color=#FF0000>本文要点：</font><br>1.变量及数据类型<br>2.对象<br>3.javascript的字符串</p></blockquote><p><fancybox><img src="http://hd.wallpaperswide.com/thumbs/pin_up_001-t2.jpg" alt="一日不读书，我浑身难受"></fancybox></p><a id="more"></a><h3 id="1-变量及数据类型：JavaScript变量是数据值的容器"><a href="#1-变量及数据类型：JavaScript变量是数据值的容器" class="headerlink" title="1. 变量及数据类型：JavaScript变量是数据值的容器"></a>1. 变量及数据类型：JavaScript变量是数据值的容器</h3><p><del>变量修饰符：var,let,const</del><br><font color=#ed1941>2020-01-22 修改：js的变量作用域</font><br>（1）局部变量：在函数中通过var声明的变量。</p><p>　　全局变量：在函数外通过var声明的变量。</p><p>　　没有声明就使用的变量，默认为全局变量，不论这个变量在哪被使用。</p><p>（2）var 可以先使用再定义。如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">5</span>; <span class="comment">// 变量 x 设置为 5</span></span><br><span class="line">elem = <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>); <span class="comment">// 查找元素 </span></span><br><span class="line">elem.innerHTML = x;                     <span class="comment">// 在元素中显示 x</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x; <span class="comment">// 声明 x</span></span><br></pre></td></tr></table></figure><p>(3)  let和const</p><p>　　let 声明的变量只在 let 命令所在的代码块内有效。</p><p>　　const 声明一个只读的常量，一旦声明，常量的值就不能改变。</p><blockquote><p>JavaScript数据类型分为：数值、字符串值、数组、对象等等</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> length = <span class="number">7</span>;                             <span class="comment">// 数字</span></span><br><span class="line"><span class="keyword">let</span> lastName = <span class="string">"Gates"</span>;                      <span class="comment">// 字符串</span></span><br><span class="line"><span class="keyword">let</span> cars = [<span class="string">"Porsche"</span>, <span class="string">"Volvo"</span>, <span class="string">"BMW"</span>];         <span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">let</span> x = &#123;<span class="attr">firstName</span>:<span class="string">"Bill"</span>, <span class="attr">lastName</span>:<span class="string">"Gates"</span>&#125;;    <span class="comment">// 对象</span></span><br></pre></td></tr></table></figure><h3 id="2-对象"><a href="#2-对象" class="headerlink" title="2.对象"></a>2.对象</h3><p>对象的值以名称:值对的方式来书写（名称和值由冒号分隔）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;  <span class="comment">//这里的person称为对象</span></span><br><span class="line">    firstName:<span class="string">"Bill"</span>,  <span class="comment">//  这是属性</span></span><br><span class="line">    lastName:<span class="string">"Gates"</span>, </span><br><span class="line">    age:<span class="number">62</span>, </span><br><span class="line">    eyeColor:<span class="string">"blue"</span>,</span><br><span class="line">    fullName : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  <span class="comment">// 这就是方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">" "</span> + <span class="keyword">this</span>.lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 对person对象中进行新增实例</span></span><br><span class="line">person.sex = <span class="string">"man"</span></span><br></pre></td></tr></table></figure><p>JavaScript中的this关键词</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在函数定义中，this 引用该函数的“拥有者”。</span><br><span class="line"></span><br><span class="line">在上面的例子中，this 指的是“拥有” fullName 函数的 person 对象。</span><br><span class="line"></span><br><span class="line">换言之，this.firstName 的意思是 this 对象的 firstName 属性。</span><br></pre></td></tr></table></figure><blockquote><p>对象的访问方式：</p></blockquote><p>对象名.属性名 或者<br>对象名[&quot;属性名&quot;]</p><h4 id="案例：数据集构造"><a href="#案例：数据集构造" class="headerlink" title="案例：数据集构造"></a>案例：数据集构造</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> dimensions = [];  <span class="comment">//维度</span></span><br><span class="line"><span class="keyword">let</span> source = [];      <span class="comment">//数据集</span></span><br><span class="line"><span class="keyword">let</span> series = [];        <span class="comment">//图系列</span></span><br><span class="line"></span><br><span class="line">dimensions.push(<span class="string">"groupcus_name"</span>);</span><br><span class="line">dimensions.push(<span class="string">"剩余发出商品"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;response.Rows.length;i++)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">    obj[<span class="string">"groupcus_name"</span>] = response.Rows[i].groupcus_name;  <span class="comment">// 对象的调用方式obj["key_name"]或obj.key_name</span></span><br><span class="line">    obj[<span class="string">"剩余发出商品"</span>] = response.Rows[i].surplusp;</span><br><span class="line"></span><br><span class="line">    source.push(obj);   <span class="comment">// 记住push只适用于数组的元素添加，并返回数组元素个数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-j字符串"><a href="#3-j字符串" class="headerlink" title="3.j字符串"></a>3.j字符串</h3><blockquote><p>函数语法</p></blockquote><p>function function_name(param1,param2,…){code}<br>PS:不使用 () 访问函数将返回函数声明而不是函数结果</p><blockquote><p>3.1 js字符串长度</p></blockquote><p>易混点：<br>JavaScript字符串长度：str.length<br>php的字符串长度：count(string)<br>Java的字符串的长度：str.length()<br>python的字符串长度：len(string)<br>jQuery中的length：表示query对象中元素个数 $(“div”).siblings().length=&gt;表示div标签的兄弟节点元素个数</p><blockquote><p>3.2 使用\ 转义字符</p></blockquote><p>\n表示换行</p><blockquote><p>3.3 比较运算符与逻辑运算符</p></blockquote><p>&quot;==&quot;:表示值相等<br>&quot;===&quot;:表示值相等基础上，数据类型也相同<br>&amp;&amp; :表示与运算<br>|| :表示或运算<br>! : 表示非运算 </p><blockquote><p>3.4字符串的截取</p></blockquote><ul><li><p>str.slice(start，end)方法：提取字符串的某个部分并在新字符串中返回被提取的部分(起始索引值为0，且满足左闭右开)。该方法设置两个参数：起始索引（开始位置），终止索引（结束位置）。</p></li><li><p>substring()方法：类似于 slice()，不同之处在于 substring() 无法接受负的索引</p></li><li><p>substr(start,length)：第二个参数规定被提取部分的长度，如果省略第二个参数，则该 substr() 将裁剪字符串的剩余部分。</p></li><li><p>str.replace(a,b) 在字符串str中用b替换a</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">"this girl that i fall in love with her sister is about 18 years old"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span>(name);   <span class="comment">// 判断数据类型："string"</span></span><br><span class="line">name.length;    <span class="comment">// 判断字符长度：67</span></span><br><span class="line">name.slice(<span class="number">0</span>,<span class="number">4</span>);    <span class="comment">// 满足左闭右开，索引值默认从0开始："this"</span></span><br><span class="line">name.slice(<span class="number">-3</span>,<span class="number">-1</span>);  <span class="comment">// 从右至左，索引值默认为-1开始："ol"</span></span><br><span class="line">name.substring(<span class="number">-8</span>,<span class="number">2</span>);   <span class="comment">//  不接受负索引值："th"</span></span><br><span class="line">name.substring(<span class="number">-8</span>,<span class="number">-2</span>);  <span class="comment">// ""</span></span><br><span class="line">name.substr(<span class="number">2</span>,<span class="number">5</span>);       <span class="comment">// "is gi"</span></span><br><span class="line">name.replace(<span class="string">"sister"</span>,<span class="string">"young sister"</span>);  <span class="comment">// 替换："this girl that i fall in love with her young sister ..."</span></span><br></pre></td></tr></table></figure><blockquote><p>3.5 转换为大小写</p></blockquote><p>str.toUpperCase()<br>str.toLowerCase()</p><blockquote><p>3.6 str.trim()</p></blockquote><p>str.trim() 方法仅能删除字符串两端的空白符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">" i love you"</span>;</span><br><span class="line">name.trim(<span class="string">"you"</span>) <span class="comment">// 返回结果"i love you"去除了首位的空格</span></span><br></pre></td></tr></table></figure><blockquote><p>3.7 str.split()：切割字符串，返回数组的形式</p></blockquote><p>这里有一个小知识点，<font color=#FF0000>当split()里面什么都不加时，会把整个字符串当作一个数组；当写法为split(“”)时，表示将原字符串的每一个字符进行切割；当写法为split(“指定字符串”)时，将原字符串按照指定字符串进行切割</font><br>举例说明：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> quote = <span class="string">"i love you because of you"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(quote.split());   <span class="comment">// ["i love you because of you"]</span></span><br><span class="line"><span class="built_in">console</span>.log(quote.split(<span class="string">""</span>));   </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">["i", " ", "l", "o", "v", "e", " ", "y", "o", "u", " ", "b", "e", </span></span><br><span class="line"><span class="comment">"c", "a", "u", "s", "e", " ", "o", "f", " ", "y", "o", "u"]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(quote.split(<span class="string">"you"</span>));    <span class="comment">//["i love ", " because of ", ""]</span></span><br></pre></td></tr></table></figure><blockquote><p>3.8 转换为字符串</p></blockquote><ul><li>Numbers.toFixed(number):保留小数点位数，并将数值型转换为字符串型</li><li>Numbers.toString():将数值型转换为字符串型<h3 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a>未完待续…</h3></li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> clone </tag>
            
            <tag> push </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Memcached</title>
      <link href="/2019/11/20/Memcache/"/>
      <url>/2019/11/20/Memcache/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Memcached是一个高性能的分布式的内存对象缓存系统，全世界有不少公司采用这个缓存项目来构建大负载的网站，来分担数据库的压力。<font color=#FF4500>适合使用Memcached：存储验证码（图形验证码、短信验证码）、登录session</font>等所有不是至关重要的数据(保存于内存中，关机后数据就会消失)</p><blockquote><p><font size=4 color=#FF0000>本文要点：</font><br>1.win，Linux安装memcached<br>2.docker创建memcached<br>3.测试并进入容器<br>4.telnet操作memcached<br>……<br><fancybox><img src="http://hd.wallpaperswide.com/thumbs/japanese_woman-t2.jpg" alt="浙江大学，冲！"></fancybox></p></blockquote><a id="more"></a><h2 id="1-安装memcached"><a href="#1-安装memcached" class="headerlink" title="1.安装memcached"></a>1.安装memcached</h2><p>&nbsp;&nbsp;&nbsp;Memcached是通过在内存里维护一个统一的巨大的hash表，memcached能存储各种各样的数据，包括图像、视频<font color=#FF4500>(但是极不推荐来保存二进制文件)</font>、文件、以及数据库检索的结果等。简单的说就是将数据调用到内存中，然后从内存中读取，从而大大提高读取速度。<br><a href="https://blog.csdn.net/qq_41717874/article/details/89472198" target="_blank" rel="noopener">参考docker创建memecached容器</a><br><a href="https://www.cnblogs.com/b-ruce/p/5639223.html" target="_blank" rel="noopener">windows下ThinkPHP3.2.3使用memcache缓存</a></p><h2 id="2-创建memcached镜像"><a href="#2-创建memcached镜像" class="headerlink" title="2.创建memcached镜像"></a>2.创建memcached镜像</h2><p>docker run -di –name=”memcached” -m 256m -p 11211:11211 memcached:[tag]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-d是启动一个守护进程；</span><br><span class="line">-m是分配给Memcache使用的内存数量，单位是MB；</span><br><span class="line">-u是运行Memcache的用户；</span><br><span class="line">-l是监听的服务器IP地址，可以有多个地址；</span><br><span class="line">-p是设置Memcache监听的端口，，最好是1024以上的端口；</span><br><span class="line">-c是最大运行的并发连接数，默认是1024；</span><br></pre></td></tr></table></figure><h2 id="3-测试并进入docker容器"><a href="#3-测试并进入docker容器" class="headerlink" title="3.测试并进入docker容器"></a>3.测试并进入docker容器</h2><blockquote><p>测试是否启动成功</p></blockquote><p>netstat -luntp|grep 11211或者docker ps</p><blockquote><p>安装telnet</p></blockquote><p>yum install -y telnet 或 sudo apt-get install telnet</p><blockquote><p>通过telnet方式连接memcached</p></blockquote><p>telnet 127.0.0.1 11211 或者使用 telnet ubuntu_ip docker_memcached_port</p><blockquote><p>设置值，age是key，0是标志位，900是生命周期，8代表所占字节数，回车之后的10是value</p></blockquote><p>set age 0 900 8<br>10</p><blockquote><p>获取值 </p></blockquote><p>get age</p><blockquote><p>退出</p></blockquote><p><del>exit</del><br>quit</p><h2 id="4-telnet操作memcached："><a href="#4-telnet操作memcached：" class="headerlink" title="4.telnet操作memcached："></a>4.telnet操作memcached：</h2><p>1.添加数据</p><ul><li>set语法：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> set key flas(是否压缩,默认为0，不压缩) timeout value_length</span><br><span class="line">  value</span><br><span class="line">示例：</span><br><span class="line">  set username 0 60 7</span><br><span class="line">  zhiliao</span><br><span class="line">``` </span><br><span class="line">  </span><br><span class="line">+ add语法：</span><br></pre></td></tr></table></figure>add key flas(0) timeout value_length<br>value<br>示例：<br>add username 0 60 7<br>xiaotuo<pre><code>set和add的区别：add是只负责添加数据，不会去修改数据。如果添加的数据的key已经存在了，则添加失败，如果添加的key不存在，则添加成功。而set不同，如果memcached中不存在相同的key，则进行添加，如果存在，则替换。</code></pre></li></ul><p>2.获取数据：get key_name</p><p>3.删除数据：delete key_name</p><p>4.删除memcached所有数据：flush_all</p><h2 id="5-memcached安全性"><a href="#5-memcached安全性" class="headerlink" title="5. memcached安全性"></a>5. memcached安全性</h2><p>memcached的操作不需要任何用户名和密码，只需要知道memcached服务器的ip地址和端口号即可。因此memcached使用的时候尤其要注意他的安全性。这里提供两种安全的解决方案。分别来进行讲解：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;1.使用-l参数设置为只有本地可以连接：这种方式，就只能通过本机才能连接，别的机器都不能访问，可以达到最好的安全性。<br>&nbsp;&nbsp;&nbsp;&nbsp;2.使用防火墙，关闭11211端口，外面也不能访问</p><h2 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a>未完待续…</h2>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Memcached </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker开发环境系列部署</title>
      <link href="/2019/11/19/docker%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
      <url>/2019/11/19/docker%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<p><font color=#00CD00>docker系列章节更新（二），这一章节主要收集并亲测docker部署各种各样的生产，开发环境。比如Nginx+Tomcat实现负载均衡，tomcat集群</font></p><ul><li>搭建python3+django+mysql开发环境</li><li>Docker实现Nginx和Tomcat负载均衡<a id="more"></a></li></ul><h2 id="1-python3-Django-MySQL部署Django项目集群"><a href="#1-python3-Django-MySQL部署Django项目集群" class="headerlink" title="1.python3+Django+MySQL部署Django项目集群"></a>1.<a href="https://blog.csdn.net/geek_xiong/article/details/92721957" target="_blank" rel="noopener">python3+Django+MySQL部署Django项目集群</a></h2><h4 id="1-1-宿主机上创建工程目录site，并进入该目录"><a href="#1-1-宿主机上创建工程目录site，并进入该目录" class="headerlink" title="1.1 宿主机上创建工程目录site，并进入该目录"></a>1.1 宿主机上创建工程目录site，并进入该目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">项目目录结构：</span><br><span class="line">site</span><br><span class="line">    |__achievements</span><br><span class="line">    |__db</span><br><span class="line">    |__Dockerfile</span><br><span class="line">    |__doocker-compose.yml</span><br><span class="line">    |__requirements.txt</span><br></pre></td></tr></table></figure><h4 id="1-2-参考两篇优秀博文"><a href="#1-2-参考两篇优秀博文" class="headerlink" title="1.2 参考两篇优秀博文"></a>1.2 参考两篇优秀博文</h4><p><a href="https://blog.csdn.net/geek_xiong/article/details/92721957" target="_blank" rel="noopener">离未罔两|Docker—-搭建python3+django+mysql开发环境</a><br><a href="https://blog.csdn.net/qq_25639809/article/details/78958647" target="_blank" rel="noopener">冰凉的枷锁lax|Docker搭建Python+Django+mysql开发环境</a></p><h2 id="2-Docker实现Nginx和Tomcat负载均衡"><a href="#2-Docker实现Nginx和Tomcat负载均衡" class="headerlink" title="2. Docker实现Nginx和Tomcat负载均衡"></a>2. Docker实现Nginx和Tomcat负载均衡</h2><p><a href="https://blog.csdn.net/u014106644/article/details/83152366" target="_blank" rel="noopener">暗夜猎手-大魔王|使用docker搭建高并发网站架构实践2–Docker实现Nginx和Tomcat负载均衡</a><br><fancybox><img src="https://img-blog.csdn.net/20181018202515672?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQxMDY2NDQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></fancybox></p><p><a href="https://blog.csdn.net/bbwangj/article/details/81005982" target="_blank" rel="noopener">菲宇|Docker下Nginx+Tomcat实现负载均衡</a><br><fancybox><img src="https://img-blog.csdn.net/20181012094800471?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Jid2FuZ2o=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></fancybox></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> python+Django+MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python模拟登录淘宝(Ⅰ)</title>
      <link href="/2019/11/18/requests%E5%BA%93%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95%E6%B7%98%E5%AE%9D(%E2%85%A0)/"/>
      <url>/2019/11/18/requests%E5%BA%93%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95%E6%B7%98%E5%AE%9D(%E2%85%A0)/</url>
      
        <content type="html"><![CDATA[<p>讲模拟登录淘宝之前，我们来回顾一下之前用requests库模拟登录GitHub和新浪微博的过程:<font color=#00CD00>这一类模拟登录是比较简单的登录，只需要在请求登录时将用户名和密码上传验证通过就成功了</font>，也就是说一步到位！而淘宝登录就比较复杂，为什么说复杂呢？因为淘宝登录涉及参数多且请求不止一次！</p><a id="more"></a><p><a href="https://blog.csdn.net/u014044812/article/details/99584382" target="_blank" rel="noopener">参考文章~裸睡的猪</a></p><pre>淘宝系列欲更新文章内容：    第一篇：Python模拟登录淘宝，详细讲解如何使用requests库登录淘宝pc端。    第二篇：淘宝自动登录2.0，新增Cookies序列化，教大家如何将cookies保存起来。    第三篇：Python爬取淘宝商品避孕套，教大家如何爬取淘宝pc端商品信息。    第四篇：Python分析2000款避孕套，教大家如何做数据分析得出结论。    ————————————————</pre><h4 id="1-淘宝登录流程"><a href="#1-淘宝登录流程" class="headerlink" title="1.淘宝登录流程"></a>1.淘宝登录流程</h4>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Requests </tag>
            
            <tag> POST请求 </tag>
            
            <tag> token </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git命令总结</title>
      <link href="/2019/11/18/git%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
      <url>/2019/11/18/git%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<p>总结一下自己常用的git命令<br><fancybox><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=1192836097,3318398259&fm=26&gp=0.jpg"></fancybox></p><a id="more"></a><ol><li><p>安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”</p></li><li><p>git config –global user.name “Your Name”<br>git config –global user.email “<a href="mailto:email@example.com" target="_blank" rel="noopener">email@example.com</a>“</p></li><li><p>cd F: (打开F盘)<br>mkdir <name> (创建子目录)<br>pwd (显示当前目录)</p></li><li><p>git init (把这个目录变成Git可以管理的仓库)</p></li><li><p>git add <file></p></li><li><p>git commit -m “说明”</p></li><li><p>git status (仓库当前的状态)</p></li><li><p>git diff (查看不同)</p></li><li><p>git log [–pretty=oneline  {缩略版,可选}] (查看历史记录)</p></li><li><p>git reset –hard HEAD^ (回退到上一个版本,HEAD后可以是 commit_id)</p></li><li><p>git reflog (用来记录你的每一次命令,找到commit_id回到未来某个版本)</p></li><li><p>git diff HEAD – <file> (查看工作区和版本库里面最新版本的区别)</p></li><li><p>git checkout – <file> (用版本库里的版本替换工作区的版本，无论工作区是修改还是删除)</p></li><li><p>git reset HEAD <file> (把暂存区的修改撤销掉（unstage），重新放回工作区. 用HEAD时，表示最新的版本)</p></li><li><p>git rm (用于删除一个文件)</p></li><li><p>ssh-keygen -t rsa -C “<a href="mailto:youremail@example.com" target="_blank" rel="noopener">youremail@example.com</a>“ (创建SSH Key)</p></li><li><p>git remote add origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:Bruce333/other.git (关联github远程库)</p></li><li><p>git push -u origin master/git push origin master<br>(推送到远程库,第一次用含有 -u 的命令,推送master分支的所有内容,此后用后面的命令推送最新修改)</p></li><li><p>git clone <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:Bruce333/other.git (克隆一个本地库)</p></li><li><p>git checkout -b dev<br>(创建dev分支，然后切换到dev分支,相当于以下两条命令:git branch dev[创建分支]/git checkout dev[切换分支])</p></li><li><p>git branch (列出所有分支，当前分支前面会标一个*号)</p></li><li><p>git checkout master (切换到master分支)</p></li><li><p>git merge dev (合并指定分支到当前分支)</p></li><li><p>git branch -d dev (删除dev分支)</p></li><li><p>git log –graph (查看分支合并图)</p></li><li><p>git merge –no-ff -m “merge with no-ff” dev<br>(通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息;–no-ff表示禁用Fast forward,用普通模式合并，合并后的历史有分支，能看出来曾经做过合并;-m参数，把commit描述写进去)</p></li><li><p>git stash (把当前工作现场“储藏”起来，等以后恢复现场后继续工作)</p></li><li><p>git stash list (查看工作现场) / git stash apply stash@{0} ()</p></li><li><p>git stash pop (恢复的同时把stash内容也删了,相当于:git stash apply[恢复]/git stash drop[删除])</p></li><li><p>git branch -D <name> (强行删除一个没有被合并过的分支)</p></li><li><p>git remote (查看远程库的信息) / git remote -v (显示更详细的信息)</p></li><li><p>git checkout -b branch-name origin/branch-name (在本地创建和远程分支对应的分支,本地和远程分支的名称最好一致)</p></li><li><p>从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交</p></li><li><p>git pull<br>(把最新的提交抓下来;如果提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，<br>用命令git branch –set-upstream branch-name origin/branch-name)</p></li><li><p>git tag <name> &lt;commit id 可无&gt;<br>(打一个新标签,默认标签是打在最新提交的commit上的;找到历史提交的commit id,可以给历史版本打标签)</p></li><li><p>git show <tagname> (查看标签信息)</p></li><li><p>git tag (查看所有标签)</p></li><li><p>git tag -a <tagname> -m “blablabla…” (指定标签信息)</p></li><li><p>git tag -s <tagname> -m “blablabla…” (用PGP签名标签)</p></li><li><p>git tag -d <name> (删除标签)</p></li><li><p>git push origin <tagname> (推送某个标签到远程)</p></li><li><p>git push origin –tags (一次性推送全部尚未推送到远程的本地标签)</p></li><li><p>git tag -d <tagname> (删除一个本地标签)</p></li><li><p>git push origin :refs/tags/<tagname> (删除一个远程标签)</p></li><li><p>git config –global color.ui true (让Git适当地显示不同的颜色)</p></li><li><p>忽略某些文件时，需要编写.gitignore；.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理</p></li><li><p>git config –global alias.st status<br>(告诉Git，以后st就表示status,配置别名;加上–global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用;每个仓库的Git配置文件都放在.git/config文件中,别名就在[alias]后面，要删除别名，直接把对应的行删掉即可;而当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中)</p></li></ol><p><font size=4 color=#FF0000>2019-12-16 新增：</font><br>当自己的账户有私人的GitHub和企业的gitlab时，不经意间就会将不同的用户名，邮箱搞混，幸得建彬哥真传，终于搞懂了。<br>1.在自己的项目文件下直接”git bash here”<br>2.查看当前项目所属的用户名与邮箱</p><p>git remote show origin查看当前仓库基本信息<br>git remote -v 查看当前项目远程地址<br>git branch -a 查看远程项目所有分支，红颜色分支代表当前所在分支<br>git config user.name 查看当前项目的用户名<br>git config user.email 查看当前项目的邮箱</p><p>3.设置用户名和邮件<br>git config [–global] user.name “用户名”<br>git config [–global] user.email “邮箱”<br><font color=#FF0000>git config命令的-- global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</font></p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> git pull/push </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThinkPHP</title>
      <link href="/2019/11/15/ThinkPHP/"/>
      <url>/2019/11/15/ThinkPHP/</url>
      
        <content type="html"><![CDATA[<p>最近一直在做一个有关于ThinkPHP的前后分离的移动报表项目。记录从建彬师傅那里学到的知识以及自己遇到的一些问题</p><p>涉及到的知识点包含：jQuery、Vue、PHP、Echarts、Bootstrap、HTML+CSS+JavaScript。。。</p><blockquote><p>js的push(),clone()<br>ThinkPHP的变量输出<br>memcached缓存机制<br>ThinkPHP通用项目结构</p></blockquote><a id="more"></a><p><a href="https://github.com/FioraLove/HTML-CSS-JavaScript/tree/master/ThinkPHP%203.2" target="_blank" rel="noopener">ThinkPHP3.2 笔记</a></p><h3 id="1-js的clone-与push函数的一些生活纠纷"><a href="#1-js的clone-与push函数的一些生活纠纷" class="headerlink" title="1.js的clone()与push函数的一些生活纠纷"></a>1.js的clone()与push函数的一些生活纠纷</h3><blockquote><p>push()函数：向数组的末尾添加一个或多个元素，并返回新的长度。返回值是把指定的值添加到数组后的新长度<br>语法：arrayObject.push(newelement1,newelement2,….)</p></blockquote><p>push() 方法可把它的参数顺序添加到 arrayObject（数组对象）的尾部。它直接修改 arrayObject，而不是创建一个新的数组，而是在原数组基础上修改。push() 方法和 pop() 方法使用数组提供的先进后出栈的功能，该方法会改变数组的长度。</p><p>案例1：push()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>);</span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">"chd"</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">"sjb"</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="string">"sgx"</span>;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//输出原素组 ['chd','sjb','sgx']</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.push(<span class="string">"badwoman"</span>));  <span class="comment">// 输出 4</span></span><br></pre></td></tr></table></figure><p>PS:来了，push添加元素之后没有直接输出添加元素之后的数组，只显示了数组的个数（长度）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 展示push后的新数组</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>);</span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">"chd"</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">"sjb"</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="string">"sgx"</span>;</span><br><span class="line">arr.push(<span class="string">'badwoman'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">//输出结果为：['chd','sjb','sgx','badwoman']</span></span><br></pre></td></tr></table></figure><blockquote><p>js的clone()函数</p></blockquote><p>js对象之间的赋值，如果直接用”=”会发现来两个对象还是同一个对象，改变其中一个另外的一个也会做出对应的改变。为了解决这个问题，可以利用java里面的clone的原理。<br>假设有这样一个场景：当存在一个公共数组(对象型)时，一个需要加{“name”:”chd”,”age”:18}另一个需要在数组尾加上{“name”:”sgx”,”age”:108}</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> commonCondition=[&#123;<span class="string">"id"</span>:<span class="number">15</span>&#125;];</span><br><span class="line"><span class="keyword">let</span> a=&#123;<span class="string">"name"</span>:<span class="string">"chd"</span>,<span class="string">"age"</span>:<span class="number">18</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> b=&#123;<span class="string">"name"</span>:<span class="string">"sgx"</span>,<span class="string">"age"</span>:<span class="number">108</span>&#125;;</span><br><span class="line"><span class="comment">// 当我们利用a = commonCondition.push(a)时，此时原来的commonCondition也会跟着改变</span></span><br><span class="line"><span class="comment">// 赋值b = commonCondition.push(b)。此时，b中也会包含a的数据，此刻js的clone函数就出现了</span></span><br></pre></td></tr></table></figure><p>js的clone()函数源代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">Obj</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> o;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> obj == <span class="string">"object"</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (obj === <span class="literal">null</span>) &#123;</span><br><span class="line">                o = <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">                    o = [];</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = obj.length; i &lt; len; i++) &#123;</span><br><span class="line">                        o.push(<span class="keyword">this</span>.clone(obj[i])); <span class="comment">// 有可能不要this</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    o = &#123;&#125;;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> j <span class="keyword">in</span> obj) &#123;</span><br><span class="line">                        o[j] = <span class="keyword">this</span>.clone(obj[j]);  <span class="comment">// 有可能不要this</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            o = obj;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>即此刻，我们才有如下最正确的式子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> new_a = clone(commonCondition);</span><br><span class="line">a = new_a.push(a);</span><br><span class="line"><span class="keyword">let</span> new_b = clone(commonCondition);</span><br><span class="line">b = new_b.push(b);</span><br></pre></td></tr></table></figure><h3 id="2-thinkphp项目调用Vue扩展函数方式"><a href="#2-thinkphp项目调用Vue扩展函数方式" class="headerlink" title="2. thinkphp项目调用Vue扩展函数方式"></a>2. thinkphp项目调用Vue扩展函数方式</h3><p>2.1 导入vue扩展包.js文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./cf.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.2 声明方法：新建一个与项目名同名的js文件，新增如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Vue.prototype.项目名 = &#123;</span><br><span class="line">    // 这里表示扩展函数</span><br><span class="line">    函数名一:function(obj)&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;,</span><br><span class="line">    函数名二:function(obj)&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.3 调用方法：<del>Vue实例化名.</del>  项目名.函数名()<br><del>Vue实力化名即：let app = new Vue({})中的app</del>,经过测试后，调用方法为 项目名.函数名（）</p><h3 id="3-thinkPHP的变量输出知识-lt-函数名-变量名-gt-中的冒号-quot-quot-表示引用调用函数，获取变量值"><a href="#3-thinkPHP的变量输出知识-lt-函数名-变量名-gt-中的冒号-quot-quot-表示引用调用函数，获取变量值" class="headerlink" title="3.thinkPHP的变量输出知识&lt;{:函数名/变量名}&gt; 中的冒号&quot;:&quot;表示引用调用函数，获取变量值"></a>3.thinkPHP的变量输出知识&lt;{:函数名/变量名}&gt; 中的冒号&quot;:&quot;表示引用调用函数，获取变量值</h3><blockquote><p>&lt;{:U(query)}&gt;:URL生成<a href="http://serverName/projectName/当前模块/当前控制器/声明的方法" target="_blank" rel="noopener">http://serverName/projectName/当前模块/当前控制器/声明的方法</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">默认的模板标签为：在config.php文件下更改设置</span><br><span class="line">&apos;TMPL_L_DELIM&apos;=&gt;&apos;&lt;&#123;&apos;,</span><br><span class="line">&apos;TMPL_R_DELIM&apos;=&gt;&apos;&#125;&gt;&apos;,</span><br></pre></td></tr></table></figure><blockquote><p>&lt;{:I(‘name’,’chd’)}&gt;中的I方法获取自定义参数值，不存在时，自定义默认值</p></blockquote><p>I(‘get.name’); // 相当于 $_GET[‘name’]支持默认值：</p><p><font color=#f05b72>2019-12-8 新增：<br>查看thinkphp3.2手册存在变量输出方式二：<br>在模板（即HTML文件）中输出变量的方式很简单，只需要我们在控制器给模板变量赋值：<br></font></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$name = <span class="string">"ThinkPHP"</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"><span class="doctag">@param</span> $this-&gt;assign() 绑定，分配数据</span></span><br><span class="line"><span class="comment"><span class="doctag">@param</span> （'name',$name）参数一：表示要在模板中引用的变量名，在不加$符号时，也要使用引号括起来</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">$this</span>-&gt;assign(<span class="string">'name'</span>,$name); </span><br><span class="line"><span class="keyword">$this</span>-&gt;display();  <span class="comment">// 将分配的数据在HTML页面展示</span></span><br></pre></td></tr></table></figure><p>然后再模板中使用（注意模板标签的{和$之间不能有任何的空格，否则标签无效,普通标签默认开始标记是{，结束标记是 }。也可以通过设置TMPL_L_DELIM和TMPL_R_DELIM进行更）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hello,<span class="tag">&lt;<span class="name">&#123;$name&#125;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在模板编译后结果为：--&gt;</span></span><br><span class="line">Hello,<span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span>($name);<span class="meta">?&gt;</span></span></span><br><span class="line"><span class="comment">&lt;!--这样就在HTML页面显示为：--&gt;</span></span><br><span class="line">hello,ThinkPHP</span><br></pre></td></tr></table></figure><h3 id="4-ThinkPHP的memcached缓存机制"><a href="#4-ThinkPHP的memcached缓存机制" class="headerlink" title="4. ThinkPHP的memcached缓存机制"></a>4. ThinkPHP的memcached缓存机制</h3><blockquote><p>4.1 下载安装memcached，并启动其服务</p></blockquote><p> <a href="https://blog.csdn.net/qq_41717874/article/details/89472198" target="_blank" rel="noopener">参考docker创建memecached容器</a><br> <a href="https://www.cnblogs.com/b-ruce/p/5639223.html" target="_blank" rel="noopener">windows下ThinkPHP3.2.3使用memcache缓存</a></p><blockquote><p>4.2thinkphp3.2中其实已经加入了memcached缓存机制，只需要在Conf/config.php配置数据缓存类型即可使用Memcache:</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span> php </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'DATA_CACHE_TYPE'</span> =&gt; <span class="string">'Memcache'</span>,  <span class="comment">// 数据缓存类型 </span></span><br><span class="line">    <span class="string">'MEMCACHE_HOST'</span>   =&gt; <span class="string">'tcp://127.0.0.1:11211'</span>, </span><br><span class="line">    <span class="string">'DATA_CACHE_TIME'</span> =&gt; <span class="string">'3600'</span></span><br><span class="line">    )</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-ThinkPHP项目模块结构，参考此文章"><a href="#5-ThinkPHP项目模块结构，参考此文章" class="headerlink" title="5.ThinkPHP项目模块结构，参考此文章"></a>5.ThinkPHP项目模块结构，<a href="https://www.cnblogs.com/xiaoliwang/p/7996540.html" target="_blank" rel="noopener">参考此文章</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">project项目名:</span><br><span class="line">    |---Application:应用模块</span><br><span class="line">        |Admin后台模块</span><br><span class="line">        |Home前台模块</span><br><span class="line">            |---Controller控制器</span><br><span class="line">                |---IndexController.class.php</span><br><span class="line">            |---Model模型</span><br><span class="line">                |---IndexModel.class.php</span><br><span class="line">            |---View视图</span><br><span class="line">                |---index.html</span><br><span class="line">        |Common公共配置模块（不能直接访问）</span><br><span class="line">        |Runtime缓存模块</span><br><span class="line">    |---Public静态资源文件</span><br><span class="line">    |---ThinkPHP框架</span><br><span class="line">    |---index.php：入口文件</span><br><span class="line">    |---favicon.ico：网站图标</span><br><span class="line">    |---.htaccess:Apache配置文件（重写URL，修改访问权限）</span><br></pre></td></tr></table></figure><h3 id="未完待续。。。"><a href="#未完待续。。。" class="headerlink" title="未完待续。。。"></a>未完待续。。。</h3>]]></content>
      
      
      <categories>
          
          <category> ThinkPHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> $.post() </tag>
            
            <tag> thinkPHP </tag>
            
            <tag> API </tag>
            
            <tag> Ajax </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSON通常用于与服务端交换数据,在向服务器发送数据时一般是字符串</title>
      <link href="/2019/11/14/json/"/>
      <url>/2019/11/14/json/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;json语法规则</p><ul><li>数据在名称/值对中</li><li>数据由逗号分隔</li><li>大括号保存对象</li><li>中括号保存数组<br>PS:json键值对一定要用双引号包裹起来<a id="more"></a></li></ul><h2 id="1-Python的json规则"><a href="#1-Python的json规则" class="headerlink" title="1.Python的json规则"></a>1.Python的json规则</h2><p>python程序中的json有一点点区别于JavaScript中的json，它是通过对象和数组的组合来表示数据</p><blockquote><p>1.1 对象型数组</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;它在JavaScript是使用花括号{}包裹起来的内容，数据结构为{key1:value1,key2:value2…}的键值对结构，key为对象的属性，value为对应的值。键名可以使用整数和字符串来表示，<br>所以，一个json对象跨用写作如下格式(对象型数组)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"chd"</span>,</span><br><span class="line">  <span class="attr">"age"</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">"sex"</span>: <span class="string">"man"</span></span><br><span class="line">  &#125;,&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"Monica"</span>,</span><br><span class="line">  <span class="attr">"gender"</span>: <span class="string">"woman"</span>,</span><br><span class="line">  <span class="attr">"birthday"</span>: <span class="string">"1997-1-25"</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><blockquote><p>调用方式:通过中括号加0索引，可以得到第一个字典元素，然后调用其键名即可得到相应的键值</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;调用方式一：中括号加键名<br>data[index][“键名”] =&gt; data[0][‘name’]，结果为‘chd’<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;调用方式二：get()方法传入键名，如果键名不存在，不会报错，会返回none（python中推荐使用）<br>data[index].get(‘键名’) =&gt; data[1].get(“birthday”),结果为”1997-1-25”</p><blockquote><p>1.2 键值对形式（类似于字典）</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"code"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"msg"</span>: <span class="string">"success"</span>,</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"pig"</span>,</span><br><span class="line">    <span class="attr">"age"</span>: <span class="string">"18"</span>,</span><br><span class="line">    <span class="attr">"sex"</span>: <span class="string">"man"</span>,</span><br><span class="line">    <span class="attr">"hometown"</span>: &#123;</span><br><span class="line">      <span class="attr">"province"</span>: <span class="string">"江西省"</span>,</span><br><span class="line">      <span class="attr">"city"</span>: <span class="string">"抚州市"</span>,</span><br><span class="line">      <span class="attr">"county"</span>: <span class="string">"崇仁县"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>1.3 需要注意到点</p></blockquote><p>JSON的键名和字符串都必须使用双引号引起来，而Python中单引号也可以表示为字符串，所以这是个比较容易犯的错误！<br>Python类型与JSON相互转换的时候到底是用load//dump还是用loads\dumps？<br>他们之间有什么区别？什么时候该加s什么时候不该加s？<br>这个我们可以通过查看源码找到答案：<br>不加s的方法入参多了一个fp表示filepath，最后多了一个写入文件的操作。<br>所以我们在记忆的时候可以这样记忆：<br><font color=#f05b72>加s表示转成字符串(str)，不加s表示转成文件。</font></p><h3 id="Python一般脚本文件编写流程"><a href="#Python一般脚本文件编写流程" class="headerlink" title="Python一般脚本文件编写流程"></a>Python一般脚本文件编写流程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">1.文件配置一般在config.json中，比如：用户名，账号，密码，人员信息等等</span><br><span class="line">2.在settings.py 文件中导入.json文件中的配置</span><br><span class="line">    # 载入配置文件</span><br><span class="line">    BASE_DIR = os.path.dirname(os.path.abspath(__file__)) # 返回当前path文件的上一级目录</span><br><span class="line">    with open(os.path.join(BASE_DIR,&quot;settings.json&quot;),&quot;r&quot;) as f:</span><br><span class="line">    SETTINGS = json.load(f)</span><br><span class="line"></span><br><span class="line">    #  配置文件的内容获取</span><br><span class="line">    SERVER = SETTINGS[&quot;DB_CONFIG&quot;][&quot;DB_SERVER&quot;]</span><br><span class="line">    # json格式新的调用方法：json.load(f)的变量名[&quot;对象名&quot;][&quot;键名&quot;]</span><br><span class="line"></span><br><span class="line">3.在主文件.py 中导入文件import settings</span><br><span class="line">    文本格式内容为：settings.SERVER，settings.PASSWORD等等</span><br><span class="line"></span><br><span class="line">脚本目录：</span><br><span class="line">    |</span><br><span class="line">    |--core.py</span><br><span class="line">    |</span><br><span class="line">    |--settings.py</span><br><span class="line">    |</span><br><span class="line">    |--config.json</span><br><span class="line">    |</span><br><span class="line">    |--a.py</span><br><span class="line">    |--b.py</span><br><span class="line">    |</span><br><span class="line">    |--.gitignore</span><br></pre></td></tr></table></figure><h2 id="2-javascript中的json"><a href="#2-javascript中的json" class="headerlink" title="2.javascript中的json"></a>2.javascript中的json</h2><p>javascript的访问方式与python大同小异，但也有细分之处<br>访问方式一：变量名[“键名”]<br>访问方式二：变量名.键名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let stu = &#123;&quot;student&quot;:           //stu 对象包含student的key,值为一个数组</span><br><span class="line">    [                  //数组的每一个值为一个具体的学生对象</span><br><span class="line">        &#123;&quot;name&quot;: &quot;Tom&quot;,&quot;Grade&quot;:1, &quot;age&quot;:11, &quot;gender&quot;: &quot;M&quot;&#125;,     //学生对象的键为名字,值为对应属性</span><br><span class="line">        &#123;&quot;name&quot;: &quot;Jerry&quot;, &quot;Grade&quot;:1, &quot;age&quot;:10, &quot;gender&quot;: &quot;M&quot;&#125;       //每个属性对应的是一个key,value对</span><br><span class="line">    ],</span><br><span class="line">    &quot;classroom&quot;: &#123;&quot;class1&quot;: &quot;room1&quot;, &quot;class2&quot;: &quot;room2&quot;&#125;         //对象的值,嵌套对象</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">stu[&quot;classroom&quot;][&quot;class1&quot;]:&quot;room1&quot;</span><br><span class="line">stu.classroom.class1 : &quot;room1&quot;</span><br></pre></td></tr></table></figure><blockquote><p>json.parse()：是从一个字符串中解析出 json 对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个字符串</span></span><br><span class="line"><span class="keyword">var</span> data=<span class="string">'&#123;"name":"goatling"&#125;'</span>;</span><br><span class="line"><span class="comment">//解析对象​</span></span><br><span class="line">​<span class="keyword">var</span> a = <span class="built_in">JSON</span>.parse(data);</span><br><span class="line"><span class="keyword">typeof</span>(a) <span class="comment">// 对象类型</span></span><br><span class="line"><span class="comment">/*结果是：</span></span><br><span class="line"><span class="comment">*Object</span></span><br><span class="line"><span class="comment">* &#123;name:"goatling"&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p>json.stringify() 是从一个对象中解析出字符串</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data=&#123;<span class="attr">name</span>:<span class="string">'goatling'</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="built_in">JSON</span>.stringify(data);</span><br><span class="line"><span class="keyword">typeof</span>(a) <span class="comment">// 对象类型</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 结果是：</span></span><br><span class="line"><span class="comment">* '&#123;"name":"goatling"&#125;'</span></span><br><span class="line"><span class="comment">* 字符串类型</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://www.cnblogs.com/zishengY/p/10994621.html" target="_blank" rel="noopener">10分钟学分js处理json常用方法</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> json </category>
          
      </categories>
      
      
        <tags>
            
            <tag> json.parse() </tag>
            
            <tag> json.stringify() </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库存储引擎与索引,视图</title>
      <link href="/2019/11/12/mysql(%E4%BA%8C)/"/>
      <url>/2019/11/12/mysql(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;MySQL支持多种存储引擎，以适用于不同领域的数据库应用需要，用户可以根据需要进行选择甚至是定制自己的引擎以提高应用效率。</p><ul><li>索引概述</li><li>索引作用</li><li>视图</li><li>视图的操作</li></ul><a id="more"></a><h3 id="1-索引概述"><a href="#1-索引概述" class="headerlink" title="1.索引概述"></a>1.索引概述</h3><p>索引在创建表的时候可以同时创建，也可以随时增加新的索引<br>创建新索引的语法为:<br>create [unique|fulltext|spatial] index index_name [using index_type] on table_name( col_name [(length)] [asc|desc])<br>删除索引： DROP INDEX index_name on table_name</p><h3 id="2-索引作用"><a href="#2-索引作用" class="headerlink" title="2.索引作用"></a>2.索引作用</h3><p>合理的创建索引是提高查询速度最有效的方式之一。<br>&nbsp;&nbsp;&nbsp;&nbsp;在没有建立索引的情况下，查询一条数据的过程是这样：<br>MySQL是从第一条记录开始查表，在某一个地方查到了匹配的数据，停止？NO，继续查询剩下的数据，直到查完整张表。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;在建立合适索引的情况下，查询一条数据的过程又是这样：<br>MySQL先根据索引快速到达一个位置去搜索数据文件，然后查出数据，而不必查看整张表的数据。<br>tips:<br><font color=#FF3030><br>1、索引的效率取决于索引列的值是否散列，即该列的值如果越互不相同，那么索引效率越高。<br>2、索引的优点是提高了查询效率，缺点是在插入、更新和删除记录时，需要同时修改索引，因此，索引越多，插入、更新和删除记录的速度就越慢。<br>3、通过创建唯一索引，可以保证某一列的值具有唯一性。</font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*添加唯一索引：*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students</span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> unique_name(<span class="keyword">name</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*只添加唯一约束而不添加唯一索引：*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students</span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> unique_name <span class="keyword">UNIQUE</span>(<span class="keyword">name</span>);</span><br></pre></td></tr></table></figure><p>因此，为了提高查询速度，合理建立索引是非常有必要的。</p><hr><table><thead><tr><th>类型</th><th align="center">描述</th></tr></thead><tbody><tr><td>普通索引</td><td align="center">基本的索引类型，允许定义索引的列中插入重复值和空值</td></tr><tr><td>唯一索引</td><td align="center">索引列值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一</td></tr><tr><td>主键索引</td><td align="center">特殊的唯一索引，不允许有空值</td></tr><tr><td>全文索引</td><td align="center">类型为FULLTEXT,支持值的全文查找，允许在索引列中插入重复值和空值</td></tr><tr><td>组合索引</td><td align="center">在表的多个字段组合上创建的索引</td></tr></tbody></table><h3 id="3-视图（5-0-1提供视图功能）"><a href="#3-视图（5-0-1提供视图功能）" class="headerlink" title="3.视图（5.0.1提供视图功能）"></a>3.视图（5.0.1提供视图功能）</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;视图是一种虚拟存在的表，它存储的是查询语句，显示出来的是查询的结果；更直白的说就是当我们需要从表中查询一些信息时需要编写相关SQL语句，将这些SQL语句存储为视图，那么我们调用这些视图的时候就相当于执行了SQL语句，从而可以得到想要的结果<br>eg:创建视图并执行查询操作<br> create view view_name as select qty,price,qty*price as value from temp;</p><h4 id="视图有什么作用"><a href="#视图有什么作用" class="headerlink" title="视图有什么作用"></a>视图有什么作用</h4><blockquote><p>1.视图就像是一个封装了很多功能的函数，我们把一系列复杂的查询语句存储为一个视图，这样在需要频繁使用这些语句时不必反复编写，直接使用视图代替即可</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">如果要频繁获取表user的name和表goods的name。就应该使用以下sql语句：</span><br><span class="line">select a.name as username, b.name as goodsname from user as a, goods as b, ug as c where a.id=c.userid and c.goodsid=b.id;</span><br><span class="line"></span><br><span class="line">但有了视图就不一样了，创建视图other。示例</span><br><span class="line">create view other as select a.name as username, b.name as goodsname from user as a, goods as b, ug as c where a.id=c.userid and c.goodsid=b.id;</span><br><span class="line"></span><br><span class="line">创建好视图后，就可以这样获取user的name和goods的name：</span><br><span class="line"> select * from other;</span><br></pre></td></tr></table></figure><blockquote><p>2.对数据库进行重构但仍不会影响程序运行</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">假如因为某种需求，需要将user表拆成表usera和表userb，该两张表的结构如下：</span><br><span class="line">        测试表:usera有id，name，age字段</span><br><span class="line">        测试表:userb有id，name，sex字段</span><br><span class="line">这时如果程序端一直使用的sql语句是：select * from user;那就会报错提示该表不存在，这时要么去更改程序的查询语句要么就创建视图。显然，创建视图更简单，成本更低。</span><br><span class="line">以下sql语句创建视图：</span><br><span class="line">create view user as select a.name,a.age,b.sex from usera as a, userb as b where a.name=b.name;</span><br><span class="line">以上假设name都是唯一的。</span><br><span class="line">这时程序端端使用的sql语句：select * from user;就不会报错。这就实现了更改数据库结构，而不用更改脚本程序的功能。</span><br></pre></td></tr></table></figure><h3 id="4-视图的操作"><a href="#4-视图的操作" class="headerlink" title="4.视图的操作"></a>4.视图的操作</h3><blockquote><p>4.1 创建或修改视图</p></blockquote><p>create [ or replace ] [ algorithm = { undefined | merge | temptable } ] view view_name [ (column_list) ] as select_statement [ with [ cascaded | local ] check option ]</p><ul><li>使用了OR REPLACE可以修改视图，或者直接就CREATE OR REPLACE 替换为ALTER 即变成修改语法；</li><li>UNDEFINED：未定义指定算法；MERGE：更新视图表数据的同时会更新真实表的数据（默认）；TEMPTABLE：只能查询不能更新；</li><li>CASCADED(默认)：必须满足所有针对该视图的所有视图的条件才可以更新；LOCAL：只需满足本视图的条件就可以更新；</li><li>WITH CHECK OPTION：需要满足相关的检查条件才能进行更新<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--常量视图</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">view</span> <span class="keyword">pi</span> <span class="keyword">as</span> <span class="keyword">select</span> <span class="number">3.1415926</span> <span class="keyword">as</span> <span class="keyword">pi</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">--select中包含子查询</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">view</span> city_view <span class="keyword">as</span> <span class="keyword">select</span> (<span class="keyword">select</span> city <span class="keyword">from</span> city <span class="keyword">where</span> city_id=<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>4.2 查看当前数据库下所有视图 show full tables where table_type like ‘view’;</p></blockquote><h3 id="5-优化SQL语句一般步骤"><a href="#5-优化SQL语句一般步骤" class="headerlink" title="5.优化SQL语句一般步骤"></a>5.优化SQL语句一般步骤</h3><blockquote><p>5.1 通过show status 查看各语句的频率</p></blockquote><h3 id="6-数据库Leetcode"><a href="#6-数据库Leetcode" class="headerlink" title="6.数据库Leetcode"></a>6.数据库Leetcode</h3><p>1.求薪水第二高，不存在就返回null</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">ifnull</span>((<span class="keyword">select</span> <span class="keyword">distinct</span>(Salary) </span><br><span class="line"><span class="keyword">from</span> Employee </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> Salary <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">1</span>,<span class="number">1</span>),<span class="literal">null</span>) <span class="keyword">as</span> SecondHighestSalary;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>超过5名学生的课(having用法)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">class</span></span><br><span class="line"><span class="keyword">from</span> courses</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">class</span></span><br><span class="line"><span class="keyword">having</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> student) &gt;= <span class="number">5</span></span><br></pre></td></tr></table></figure></li><li><p>DATEDIFF是两个日期的天数差集</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.Id <span class="keyword">as</span> newId</span><br><span class="line"><span class="keyword">from</span> Weather a <span class="keyword">left</span> <span class="keyword">join</span> Weather b </span><br><span class="line"><span class="keyword">on</span> <span class="keyword">datediff</span>(a.RecordDate,b.RecordDate)=<span class="number">1</span> <span class="keyword">where</span> a.Temperature&gt;b.Temperature</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> InnoDB </tag>
            
            <tag> MyISAM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库(一)：DDL，DML，DCL</title>
      <link href="/2019/11/11/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2019/11/11/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;最近严重记忆力下降加上一直没有怎么用到数据库，好多命令都回忆不起来了，做个小笔记，mark。<br>今天建彬师傅（他不是厉不厉害的问题，他真的就是那种，很少见，很牛逼的存在…）给我讲了一个非常有用的小知识点，使我茅塞顿开，放在摘要页，很有用：<a href="https://blog.csdn.net/gaoshuying/article/details/53410137" target="_blank" rel="noopener">跨用户访问数据表的方式</a><br><font color=#5CACEE>1.两个用户在同一个应用服务器上:select * from &#39;user_name&#39;&nbsp;.&nbsp;&#39;table_name&#39;;<br>2.两个用户不在同一个应用服务器上。。。<br><fancybox><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1573658629292&di=ed394bb8e9aadd1d0f439c0a4018a796&imgtype=0&src=http%3A%2F%2Fs11.51cto.com%2Fimages%2F201901%2F20%2Fdec97881d1e4071c6e51c2a30105835d.jpg" alt=""></fancybox><br></font></p><a id="more"></a><h3 id="1-启动服务"><a href="#1-启动服务" class="headerlink" title="1.启动服务"></a>1.启动服务</h3><p>net start 服务器名（Windows）<br>service start 服务器名（linux）</p><h3 id="2-登录与修改密码"><a href="#2-登录与修改密码" class="headerlink" title="2.登录与修改密码"></a>2.登录与修改密码</h3><table><thead><tr><th>命令</th><th align="center">含义</th></tr></thead><tbody><tr><td>mysql -u root -p -h localhost</td><td align="center">登录MySQL（p表示密码；u表示用户名；h表示主机地址）</td></tr><tr><td>mysqladmin -u用户名 -p旧密码 password新密码</td><td align="center">修改用户名密码</td></tr></tbody></table><h3 id="3-基本使用"><a href="#3-基本使用" class="headerlink" title="3.基本使用"></a>3.基本使用</h3><table><thead><tr><th>命令</th><th align="center">含义</th></tr></thead><tbody><tr><td>show databases;</td><td align="center">用于显示所有的数据库</td></tr><tr><td>use 数据库名;</td><td align="center">使用目标数据库</td></tr><tr><td>select database()/version()/now()/user();</td><td align="center">显示当前连接的信息</td></tr><tr><td>show tables;</td><td align="center">用于显示选中数据库下的所有的表</td></tr><tr><td>desc table_Name;</td><td align="center">查看表结构</td></tr><tr><td>show create table table_name \G;</td><td align="center">查看到创建时的SQL语句及更多详细信息  \G使记录按照字段竖向排列，易于阅读</td></tr></tbody></table><p>创建数据库并指定编码格式:create database if not exists 数据库名 character set utf8;<br>删除数据库：drop database [if exists] 数据库名;</p><h3 id="4-DDL-amp-DML"><a href="#4-DDL-amp-DML" class="headerlink" title="4.DDL&amp;DML"></a>4.DDL&amp;DML</h3><p>DDL:数据定义语言仅对数据库，表，列，索引起作用（create、drop、alter）<br>DML:数据操纵语言仅对table中的具体数据起作用（select、insert、delete、update）</p><h3 id="5-DDL"><a href="#5-DDL" class="headerlink" title="5.DDL"></a>5.DDL</h3><blockquote><p>1.创建表</p></blockquote><pre>创建表    create table 表名(    ​  列名 数据类型  列级约束,    ​  列名 数据类型  列级约束    ​ )【表类型】【表字符集】【表注释】</pre>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#创建学生表，并设置表类型、字符集</span><br><span class="line">CREATE TABLE `student` (</span><br><span class="line">  `id` INT(4) NOT NULL AUTO_INCREMENT COMMENT &apos;主键、学号&apos;,</span><br><span class="line">  `psd` VARCHAR(20) COLLATE utf8_estonian_ci NOT NULL DEFAULT &apos;123456&apos; COMMENT &apos;密码&apos;,</span><br><span class="line">  `name` VARCHAR(30) COLLATE utf8_estonian_ci NOT NULL DEFAULT &apos;匿名&apos; COMMENT &apos;学生姓名&apos;,</span><br><span class="line">  `sex` VARCHAR(2) COLLATE utf8_estonian_ci NOT NULL DEFAULT &apos;男&apos; COMMENT &apos;性别&apos;,</span><br><span class="line">  `birsday` DATETIME DEFAULT NULL,</span><br><span class="line">  `email` VARCHAR(20) COLLATE utf8_estonian_ci DEFAULT NULL,</span><br><span class="line">   PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=INNODB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 COLLATE=utf8_estonian_ci</span><br></pre></td></tr></table></figure><ul><li><p><i class="fas fa-hand-point-right"></i> <a href="https://www.w3school.com.cn/sql/sql_datatypes.asp" target="_blank" rel="noopener">数据类型</a> </p></li><li><p>约束条件：<br>  not null<br>  unique<br>  primary key 主键名<br>  foreign key (Id_P) references  Persons(Id_P) :一个表中的 FOREIGN KEY 指向另一个表中的 PRIMARY KEY<br>  default 默认值<br>  auto increment:在每次插入新记录时，自动地创建主键字段的值</p></li></ul><h4 id="5-1主键"><a href="#5-1主键" class="headerlink" title="5.1主键"></a>5.1主键</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;对主键的要求，最关键的一点是：记录一旦插入到表中，主键最好不要再修改，因为主键是用来唯一定位记录的，修改了主键，会造成一系列的影响。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;由于主键的作用十分重要，如何选取主键会对业务开发产生重要影响。如果我们以学生的身份证号作为主键，似乎能唯一定位记录。然而，身份证号也是一种业务场景，如果身份证号升位了，或者需要变更，作为主键，不得不修改的时候，就会对业务产生严重影响。<br>&nbsp;&nbsp;&nbsp;&nbsp;使用BIGINT，会占用更大的磁盘和内存空间，内存空间毕竟有限，无效的占用会导致更多的数据换入换出，额外增加了IO的压力，对性能是不利的。<br><font color=#FF4040>因此推荐自增主键使用int unsigned类型，但不建议使用bigint。</font><br>&nbsp;&nbsp;&nbsp;&nbsp;所以，选取主键的一个基本原则是：<font color=#FF4040>不使用任何业务相关的字段作为主键,而应该使用INT UNSINGED自增或者GUID类型。主键也不应该允许NULL。可以使用多个列作为联合主键，但联合主键并不常用。</font><br>&nbsp;&nbsp;&nbsp;&nbsp;如果使用INT自增类型，那么当一张表的记录数超过2147483647（约21亿）时，会达到上限而出错。使用BIGINT自增类型则可以最多约922亿亿条记录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table user(</span><br><span class="line">    id INT UNSIGNED NOT NULL AUTO_INCREMENT primary key , /*数据类型 非空 自增 主码约束*/</span><br><span class="line">    name varchar(200)</span><br><span class="line">    /*主码，外码约束条件写法二：primary key(id) */           </span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>2.删除表：drop table table_name</p></blockquote><blockquote><p>3.修改表</p></blockquote><table><thead><tr><th>命令</th><th align="center">含义</th></tr></thead><tbody><tr><td>修改表中列的数据类型</td><td align="center">alter table table_name modify 列名 column_definition</td></tr><tr><td>增加表字段</td><td align="center">alter table table_name add [column] 列名 column_definition</td></tr><tr><td>删除表字段表字段</td><td align="center">alter table table_name drop [column] 列名</td></tr><tr><td>表的字段改名</td><td align="center">alter table table_name change [column] old_col_name new_col_name</td></tr><tr><td>表字段改名同时也可修改字段类型</td><td align="center">alter table table_name change [column] old_col_name new_col_name column_definition</td></tr><tr><td>更改表名</td><td align="center">alter table table_name rename [to] new_tablename</td></tr></tbody></table><h3 id="6-DML语句"><a href="#6-DML语句" class="headerlink" title="6.DML语句"></a>6.DML语句</h3><table><thead><tr><th>命令</th><th align="center">含义</th></tr></thead><tbody><tr><td>插入数据</td><td align="center">insert into table_name ( field1, field2,…) values (value1,value2,….);</td></tr><tr><td>一次性插入多条数据</td><td align="center">insert into table_name ( field1, field2,…) values (value1,value2,..),(value1,value2,..)…;</td></tr><tr><td>更新记录</td><td align="center">update table_name set field1=value1，field2=value2，… [ WHERE CONDITION ]</td></tr><tr><td>删除某一项记录</td><td align="center">delete from table_name [WHERE CONDITION ]</td></tr><tr><td>排序和限制</td><td align="center">select * from table_name [ WHERE CONDITION ] [ order by field1 [ DESC\ASC ], field2 [ DESC\ASC], ..]</td></tr><tr><td>表连接</td><td align="center">select ename,deptname from emp1 left join dept on emp1.deptno=dept.deptno;</td></tr><tr><td>子查询</td><td align="center">关键字主要有in、not in、=、!=、exists、not exists,between and等等</td></tr></tbody></table><p>1.可以不用指定字段名称，但此时后面的values应该与表的字段顺序保持一致<br>2.对于某些字段允许空值、非空但是有指定的默认值、自增长等，这些字段在insert时如果没有指定value，那么将会右系统自动配置</p><h3 id="7-DCL语句"><a href="#7-DCL语句" class="headerlink" title="7.DCL语句"></a>7.<a href="https://blog.csdn.net/ywk_hax/article/details/83351552" target="_blank" rel="noopener">DCL语句</a></h3><blockquote><ol><li>创建数据库用户，并声明权限</li></ol></blockquote><p>创建操作数据库的专用用户，格式：<br>grant 权限 on 数据库名.数据表名 to 用户名@主机IP IDENTIFIED BY 密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">说明：</span><br><span class="line">权限：ALL PRIVILEGES(所有权限),select,insert,update,delete,create,alter,drop</span><br><span class="line">主机IP： &apos;%&apos; 匹配所有主机，localhost</span><br><span class="line">表名： * 表示所有表</span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>刷新权限</li></ol></blockquote><p>flush privileges</p><p><font color=#FF6347>这里向大家拓展一个知识点，那就是主机IP指的是该用户只能在对应的主机IP上进行登录。例如：假如user用户设置的主机IP为localhost，那么其他人就将无法从本地以外的地方使用user用户进行登录。</font></p><h3 id="8-查询记录"><a href="#8-查询记录" class="headerlink" title="8.查询记录"></a>8.查询记录</h3><blockquote><p>8.1 distinct 查询不重复的记录</p></blockquote><p>select distinct id from emp1; 加distinct关键字使得查出的结果中去掉了重复记录</p><blockquote><p>8.2 条件查询</p></blockquote><p>判断条件可以使用=、&gt;、&lt;、&gt;=、&lt;=、!=等等，同时多个条件还可以使用and、or等进行连接</p><blockquote><p>8.3 聚合</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">select [ field1, field2,...,fieldn] fun_name from tablename [ where condition ] </span><br><span class="line"></span><br><span class="line">      [ group by field1, field2,..., fieldn  [ with rollup ] ]  [ having  condition ]</span><br><span class="line"></span><br><span class="line">参数说明：fun_name 聚合函数，表示要做的聚合操作，常用的有sum（求和）、count(*)（计数）、max、min等。</span><br><span class="line"></span><br><span class="line">        GROUP BY  表示对后面的字段进行分类聚合（也常叫分组）；</span><br><span class="line"></span><br><span class="line">        WITH ROLLUP 可选语法，在ORDER BY 语句内出现，表示是否对分类聚合后的结果进行再汇总；</span><br><span class="line"></span><br><span class="line">        HAVING 表示对分类后的结果再进行条件过滤；</span><br></pre></td></tr></table></figure><p><font color=#FF3030>同样是条件过滤，having和where的区别在于，having是对聚合后的结果进行条件过滤，而where是在聚合前就对记录进行过滤。因此，为了提高聚合效率，一般先用where过滤不相干的记录后，在进行聚合，最后再用having进行二次过滤</font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> gender，<span class="keyword">count</span>(gender) <span class="keyword">from</span> tab_teacher <span class="keyword">group</span> <span class="keyword">by</span> gender <span class="keyword">having</span> gender=<span class="string">"woman"</span>;</span><br><span class="line"><span class="comment">-- 含义为：按性别分组，查询出女老师人数的总数:先执行group by，再聚合函数，最后having筛选</span></span><br></pre></td></tr></table></figure><h3 id="9-注意要点"><a href="#9-注意要点" class="headerlink" title="9.注意要点"></a>9.注意要点</h3><blockquote><p>9.1 避免使用通配符“*”</p></blockquote><p>实际开发中，要避免使用通配符”*”（通配符代表所有字段），因为系统要先解析出所有的字段名，将其还原为真实的名字，然后再进行操作。如果记录数据库内容特别多，会影响效率。</p><blockquote><p>9.2 查询表的总记录数(推荐使用主键的方式查询)</p></blockquote><p>因为主键唯一，且不能为空,此时id总数则代表总记录数<br>select count(id) from table_teacher;</p><blockquote><p>9.3 别名<code>as</code>的用法</p></blockquote><p>列的别名 select count(id) as new_number from table_teacher;</p><p>使用别名来代替表的名字(使用<code>as</code>作为表的别名时，通常情况下不要省略，方便代码的阅读性，但是<strong>在Oracle数据库中，一定要省略，不然会出现<code>ORA-00933: SQL command not properly ended</code>错误</strong>)<br>select t.name,t.age from tab_teacher t;</p><p>参考StackOverflow的问题回复：<br><font color = #694d9f><br>You can use <code>AS</code> for table aliasing on many SQL servers (at least MsSQL, MySQL, PostrgreSQL) but it’s always optional and on Oracle it’s illegal. so just remove the <code>as</code></font></p><blockquote><p>9.4 分页查询方式</p></blockquote><p>查询老师记录的前三条（从0位置开始找出3条）： limit后面有两个参数：第一个参数是起始位置，第二个参数是偏移量<br>select * from tab_teacher limit 0,3;</p><font color=#694d9f>oracle的sql语句中没有limit,limit是mysql中特有的,在oracle中可用rownum来表示,用于查询结果中的前N行数据。如要查询emp表中的前5行数据,可用如下语句: &nbsp;&nbsp;select * from emp where rownum<=5;</font><blockquote><p>9.5 Oracle 使用<code>||</code> 将多列合并成一列,字符串连接</p></blockquote><p>使用方法：<code>字段A || &#39;连接符&#39; || 字段B || &#39;连接符&#39; || 字段C</code> ：将多列拼接成一列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Oracle 将多列合并成一列,字符串连接,直接上查询语句</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    STU.XH,</span><br><span class="line">    STU.XM,</span><br><span class="line">    GRA. <span class="keyword">NAME</span> || <span class="string">'-'</span> || CLA.BJ <span class="keyword">AS</span> <span class="keyword">CLASS</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    CYT_BASE_STUDENT STU,</span><br><span class="line">    CYT_BASE_GRADE GRA,</span><br><span class="line">    CYT_BASE_CLASS CLA</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    STU.GRADE_ID = GRA. <span class="keyword">ID</span></span><br><span class="line"><span class="keyword">AND</span> STU.CLASS_ID = CLA. <span class="keyword">ID</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/20181017094408908?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3podWxpdWZ1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></p><blockquote><p>9.6 sql的select查询添加一个虚拟字段进去</p></blockquote><p>需求：<strong>像下面需要取多张表的数据存合并成一张表的时候，有时候为了区分哪些数据是出自于具体的哪张表，可以加一个表的标识字段进去，这样就方便明了多了</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> ( </span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">id</span>,title,uId,fabuTime,<span class="string">'招商'</span> <span class="keyword">AS</span> <span class="keyword">name</span>  <span class="keyword">from</span> zhaoshangInfo </span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">id</span>,title,userId <span class="keyword">AS</span> uId,createTime <span class="keyword">AS</span> fabuTime,<span class="string">'求职'</span> <span class="keyword">AS</span> <span class="keyword">name</span> <span class="keyword">from</span> <span class="keyword">resume</span> </span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">id</span>,title,uId,fabutime <span class="keyword">AS</span> fabuTime,<span class="string">'招聘'</span> <span class="keyword">AS</span> <span class="keyword">name</span> <span class="keyword">from</span> zhaopin</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">id</span>,title,uId,fabuTime,<span class="string">'加盟'</span> <span class="keyword">AS</span> <span class="keyword">name</span> <span class="keyword">from</span> jiamengInfo</span><br><span class="line">    )  </span><br><span class="line"><span class="keyword">WHERE</span> uId <span class="keyword">IN</span>(<span class="number">1</span>,<span class="number">349</span>) <span class="keyword">ORDER</span> <span class="keyword">BY</span> fabuTime <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure><p>即在zhangsanInfo表中添加name字段，赋初值为‘招商’<br>在resume表中添加name字段，赋初值为‘求职’<br>…<br>在jiamengInfo表添加name字段，赋初值为‘加盟’。</p><blockquote><p>9.7 sql实现替换功能</p></blockquote><ul><li>方式一：replace()字符串替换函数</li><li>方式二：case…when…then…end 函数</li></ul><p>replace函数定义：replace(original-string，str_a，str_b):查询在sql的字段，用b替换目标字段中的a</p><p>参数：</p><ol><li>original-string： 被搜索的字符串。可为任意长度。</li><li>search-string： 要搜索并被 replace-string 替换的字符串。该字符串的长度不应超过 255 个字节。如果 search-string 是空字符串，则按原样返回原始字符串。</li><li>replace-string： 该字符串用于替换 search-string。可为任意长度。如果 replacement-string 是空字符串，则删除出现的所有 search-string。</li></ol><p>说明：<br>用字符串表达式3替换字符串表达式1中出现的所有字符串表达式2的匹配项。返回新的字符串。如果有某个参数为 NULL，此函数返回 NULL</p><p>方式二：<a href="https://www.cnblogs.com/HDK2016/p/8134802.html" target="_blank" rel="noopener">Case…when..then…else…end</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--简单Case函数(推荐)</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">(<span class="keyword">CASE</span> sex</span><br><span class="line"><span class="keyword">WHEN</span> <span class="string">'1'</span> <span class="keyword">THEN</span> <span class="string">'男'</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="string">'2'</span> <span class="keyword">THEN</span> <span class="string">'女'</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="string">'其他'</span> <span class="keyword">END</span>) <span class="keyword">as</span> gender</span><br><span class="line"></span><br><span class="line"><span class="comment">--Case搜索函数</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> sex = <span class="string">'1'</span> <span class="keyword">THEN</span> <span class="string">'男'</span></span><br><span class="line"><span class="keyword">WHEN</span> sex = <span class="string">'2'</span> <span class="keyword">THEN</span> <span class="string">'女'</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="string">'其他'</span> <span class="keyword">END</span> ) <span class="keyword">as</span> gender</span><br><span class="line"></span><br><span class="line">两种方式，可以实现相同的功能。简单<span class="keyword">Case</span>函数的写法相对比较简洁，但是和<span class="keyword">Case</span>搜索函数相比，功能方面会有些限制，</span><br><span class="line">比如写判断式。还有一个需要注意的问题，<span class="keyword">Case</span>函数只返回第一个符合条件的值，剩下的<span class="keyword">Case</span>部分将会被自动忽略。</span><br></pre></td></tr></table></figure><blockquote><p>9.8 oracle 通配符匹配字符限制字符长度</p></blockquote><p><code>length(字段)&lt;Number</code> 限制字符串的长度，如果是数字型的，那么再to_char一下</p><blockquote><p>9.9 oracle截取字符串指定位数</p></blockquote><p>substr(field,start_index,[length]):select截取field字段，索引值从1或者0开始，截取指定length长度</p><blockquote><p>9.10 oracle怎样把查询的null转换为指定值</p></blockquote><p>nvl(field,Expr2)如果field字段为NULL，返回Expr2的值，否则返回Expr1的值</p><blockquote><p>9.11 多字段关联查询同一张字典表</p></blockquote><p>字典表（数据字典）：数据字典（Data dictionary）是一种用户可以访问的记录数据库和应用程序元数据的目录。</p><p>假设我们有一个学生表（姓名，学号，性别编号{0-1}，年纪{1-3}，成绩{A-F}）：我们已知了一个学生的基本信息，怎么从一个字典表（比如说性别编号0：男性，1:女性；年纪A：优，B:良，C:中，D:差，E:不合格）中来补全这个表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.name, a.id, a.sex_code, a.grade_cdoe, a.score_cdoe,b.sex_name,b.grade_name,b.score_name</span><br><span class="line"><span class="keyword">from</span> Student a</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> dictionary b</span><br><span class="line"><span class="keyword">on</span> a.sex_code = b.sex_code</span><br><span class="line"><span class="keyword">and</span> a.grade_code = b.grade_code</span><br><span class="line"><span class="keyword">and</span> a.score_code = b.score_code</span><br></pre></td></tr></table></figure><p>多个字段查询一张字段表时，就是在原来的<code>on</code>关键字上，多次使用<code>and</code>，多次关联字典表中的目标字段</p><h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><ul><li>Oracle中case when的用法：<a href="https://blog.csdn.net/weixin_40417658/article/details/82633834" target="_blank" rel="noopener">https://blog.csdn.net/weixin_40417658/article/details/82633834</a></li><li><a href="https://blog.csdn.net/qq_33866778/article/details/75258200" target="_blank" rel="noopener">https://blog.csdn.net/qq_33866778/article/details/75258200</a></li><li><a href="https://zhidao.baidu.com/question/464433814.html" target="_blank" rel="noopener">https://zhidao.baidu.com/question/464433814.html</a></li><li>sql的replace函数 <a href="https://www.cnblogs.com/1906859953Lucas/p/9244495.html" target="_blank" rel="noopener">https://www.cnblogs.com/1906859953Lucas/p/9244495.html</a></li><li>Oracle实现判断的三种方法： <a href="https://blog.csdn.net/yangzjchn/article/details/81019449" target="_blank" rel="noopener">https://blog.csdn.net/yangzjchn/article/details/81019449</a></li><li>Oracle中字符串截取常用方法总结： <a href="https://blog.csdn.net/rongtaoup/article/details/82217740" target="_blank" rel="noopener">https://blog.csdn.net/rongtaoup/article/details/82217740</a></li><li><a href="https://stackoverflow.com/questions/21145028/how-to-use-the-as-keyword-to-alias-a-table-in-oracle" target="_blank" rel="noopener">How to use the ‘as’ keyword to alias a table in Oracle?</a></li><li><a href="https://blog.csdn.net/qinsijun123/article/details/88824735" target="_blank" rel="noopener">多个字段关联同一张字典表-查询SQL</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> database </tag>
            
            <tag> mysql </tag>
            
            <tag> DDL </tag>
            
            <tag> DML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery学习</title>
      <link href="/2019/11/11/jquery/"/>
      <url>/2019/11/11/jquery/</url>
      
        <content type="html"><![CDATA[<p><font color=#00CD00>简单来说，jQuery是一个js库，却极大的简化了JavaScript编程。好记性不如烂笔头，mark一下自己遇到的问题</font><br><fancybox><img src="http://pic4.zhimg.com/v2-406e0657b46be0bb4b12ca3661c94397_b.jpg" width="60%"></fancybox></p><blockquote><p><font size=4 color=#FF0000>本文要点：</font><br>1.选择器<br>2.bootstrap的进度条功能添加<br>…</p></blockquote><a id="more"></a><h3 id="1-选择器"><a href="#1-选择器" class="headerlink" title="1. 选择器"></a>1. 选择器</h3><p>id选择器 $(“#div”)<br>    类选择器  $(“.div”)<br>    标签选择器 $(“div”)<br>    并集选择器 $(“selector1,selector2,…,selectN”)：使用逗号连接，以数组形式返回所有的合并元素<br>    后代选择器 $(“div p”):div标签下的p标签，包含子孙节点<br>    过滤选择器 $(“div:eq(n)”) :eq(index)获取给定索引值的元素  从0开始计数<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:gt(index) 匹配所有大于给定索引值的元素<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:lt(index) 匹配所有小于给定索引值的元素<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:even      匹配所有索引值为偶数的元素，从 0 开始计数<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:odd       匹配所有索引值为奇数的元素，从 0 开始计数<br>属性选择器 $(“div[attribute=”value”]”)   :匹配给定的属性是某个特定值的元素</p><p>表单的选择器:$(‘input:radio/checkbox/text/password/…’),即: type值为radio、checkbox、password等的input元素</p><p>筛选选择器 : $(‘div’).eq(n) 获取第n个元素 数值从0开始<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.first()获取第一个元素<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.last()获取最后一个元素<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.parent() 选择父亲元素<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.siblings()选择兄弟元素<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.find() 查找目标元素值 </p><p><font color=#00CD00>PS:注意筛选选择器与过滤选择器的函数位置</font></p><h3 id="2-bootstrap的进度条添加新功能"><a href="#2-bootstrap的进度条添加新功能" class="headerlink" title="2.bootstrap的进度条添加新功能"></a>2.bootstrap的进度条添加新功能</h3><p>bootstrap带动画效果的进度条的源代码为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--这里的class="one"是我自己添加到，方便找出一个div标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress-bar progress-bar-striped active one"</span> <span class="attr">role</span>=<span class="string">"progressbar"</span> <span class="attr">aria-valuenow</span>=<span class="string">"45"</span> <span class="attr">aria-valuemin</span>=<span class="string">"0"</span> <span class="attr">aria-valuemax</span>=<span class="string">"100"</span> <span class="attr">style</span>=<span class="string">"width: 45%"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>45% Complete<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为了使进度条能够“运动”起来，这里有几种方法：</p><blockquote><p>方法一：采用jQuery</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'.one'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 休眠函数，类似于python的time.sleep()</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">n</span>) </span>&#123; <span class="comment">//n表示的毫秒数</span></span><br><span class="line">            <span class="keyword">var</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() - start &gt; n) <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">        <span class="comment">// 获取当前的进度条长度，并转换为正整数  </span></span><br><span class="line">        <span class="keyword">let</span> len = <span class="built_in">parseInt</span>($(<span class="keyword">this</span>).attr(<span class="string">"aria-valuenow"</span>));</span><br><span class="line">        <span class="keyword">while</span>(len&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">            <span class="comment">// 进度条的长度其实就是style属性的width长度</span></span><br><span class="line">            $(<span class="keyword">this</span>).css(<span class="string">'width'</span>,<span class="built_in">String</span>(len)+<span class="string">"%"</span>);</span><br><span class="line">            len ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="string">``</span><span class="string">`   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;方法二：setInterval(function,milliseconds)，给定的时间间隔内重复执行该函数   </span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).css(<span class="string">'width'</span>,<span class="built_in">String</span>(len)+<span class="string">"%"</span>);</span><br><span class="line">    len ++;</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/Images/QQ%E6%88%AA%E5%9B%BE20191224191729.jpg" alt=""></fancybox></p><h3 id="3-jQuery的事件"><a href="#3-jQuery的事件" class="headerlink" title="3.jQuery的事件"></a>3.jQuery的事件</h3><p><strong>常见的DOM事件:</strong></p><table><thead><tr><th>鼠标事件</th><th align="center">键盘事件</th><th align="center">表单事件</th><th align="right">文档/窗口事件</th></tr></thead><tbody><tr><td>click</td><td align="center">keypress</td><td align="center">submit</td><td align="right">load</td></tr><tr><td>dblclick</td><td align="center">keydown</td><td align="center">change</td><td align="right">resize</td></tr><tr><td>mouseenter</td><td align="center">keyup</td><td align="center">focus</td><td align="right">scroll</td></tr><tr><td>mouseleave</td><td align="center"></td><td align="center">blur</td><td align="right">unload</td></tr><tr><td>hover</td><td align="center"></td><td align="center"></td><td align="right"></td></tr></tbody></table><br>1.click鼠标点击事件:选择目标元素<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;p&quot;).click(function()&#123;</span><br><span class="line">    // 动作触发后执行的代码!!</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>2.dblclick(),当双击元素时，会发生 dblclick 事件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dblclick() 方法触发 dblclick 事件，或规定当发生 dblclick 事件时运行的函数：   </span><br><span class="line">实例</span><br><span class="line">$(&quot;p&quot;).dblclick(function()&#123;</span><br><span class="line">  $(this).hide();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>3.mouseenter():当鼠标指针穿过元素时，会发生 mouseenter 事件 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#p1&quot;).mouseenter(function()&#123;</span><br><span class="line">    alert(&apos;您的鼠标移到了 id=&quot;p1&quot; 的元素上!&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>4.mouseleave():当鼠标指针离开元素时，会发生 mouseleave 事件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mouseleave() 方法触发 mouseleave 事件，或规定当发生 mouseleave 事件时运行的函数：</span><br><span class="line">实例</span><br><span class="line">$(&quot;#p1&quot;).mouseleave(function()&#123;</span><br><span class="line">    alert(&quot;再见，您的鼠标离开了该段落。&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>5.mousedown():当鼠标指针移动到元素上方，并按下鼠标按键时，会发生 mousedown 事件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mousedown() 方法触发 mousedown 事件，或规定当发生 mousedown 事件时运行的函数：</span><br><span class="line">实例</span><br><span class="line">$(&quot;#p1&quot;).mousedown(function()&#123;</span><br><span class="line">    alert(&quot;鼠标在该段落上按下！&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>6.hover()方法用于模拟光标悬停事件。当鼠标移动到元素上时，会触发指定的第一个函数(mouseenter);当鼠标移出这个元素时，会触发指定的第二个函数(mouseleave)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;p&apos;).hover(</span><br><span class="line">function()&#123;</span><br><span class="line">    alert(&apos;你的鼠标在段落上&apos;);</span><br><span class="line">&#125;,</span><br><span class="line">function()&#123;</span><br><span class="line">    alert(&apos;你的鼠标已经离开了段落&apos;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="4-jQuery的Ajax-jQuery-get-和-post"><a href="#4-jQuery的Ajax-jQuery-get-和-post" class="headerlink" title="4.jQuery的Ajax:jQuery get() 和 post()"></a>4.jQuery的Ajax:jQuery get() 和 post()</h3><p><strong>4.1 jQuery $.get()方法，通过 HTTP GET 请求从服务器上请求数据。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">$.get(URL,callback);</span><br><span class="line">必需的 URL 参数规定您希望请求的 URL。</span><br><span class="line">可选的 callback 参数是请求成功后所执行的函数名。 </span><br><span class="line">下面的例子使用 $.get() 方法从服务器上的一个文件中取回数据：</span><br><span class="line">$(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    $.get(&quot;demo_test.php&quot;,function(data,status)&#123;</span><br><span class="line">      alert(&quot;数据: &quot; + data + &quot;\n状态: &quot; + status);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>4.2 jQuery $.post() 方法,通过 HTTP POST 请求向服务器提交数据。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">语法:</span><br><span class="line">$.post(URL,data,callback,data_type);</span><br><span class="line">url (String) : 发送请求的URL地址.</span><br><span class="line"></span><br><span class="line">data (Map) : (可选) 要发送给服务器的数据，以 Key/value 的键值对形式表示。</span><br><span class="line"></span><br><span class="line">callback (Function) : (可选) 载入成功时回调函数(只有当Response的返回状态是success才是调用该方法)。</span><br><span class="line"></span><br><span class="line">type (String) : (可选)官方的说明是：Type of data to be sent。其实应该为客户端请求的类型(JSON,XML,等等)</span><br><span class="line">    </span><br><span class="line">下面的例子使用 $.post() 连同请求一起发送数据：</span><br><span class="line"></span><br><span class="line">    $(&quot;button&quot;).click(function()&#123;</span><br><span class="line">        $.post(&quot;/try/ajax/demo_test_post.php&quot;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;:&quot;菜鸟教程&quot;,</span><br><span class="line">            &quot;age&quot;:18,</span><br><span class="line">            &quot;url&quot;:&quot;http://www.runoob.com&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        function(data,status)&#123;</span><br><span class="line">            alert(&quot;数据: \n&quot; + data + &quot;\n状态: &quot; + status);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,&quot;json&quot;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> API </tag>
            
            <tag> Ajax </tag>
            
            <tag> CSS </tag>
            
            <tag> jQuery </tag>
            
            <tag> 选择器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python全栈系列章节更新（一）：基本数据类型</title>
      <link href="/2019/11/11/python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2019/11/11/python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>Python是一个“优雅”、“明确”、“简单”的编程语言,主要流行于网络爬虫、数据分析挖掘、机器学习、人工智能以及运维等等</p><blockquote><p>字符串：len(),split(),join()…<br>列表：append(),pop(),count()…<br>元组：与列表类似，不同之处在于元组的元素不能修改<br>字典：是另一种可变容器模型，且可存储任意类型对象</p></blockquote><ul><li><p>直接赋值：其实就是对象的引用（别名）。</p></li><li><p>浅拷贝(copy)：拷贝父对象，不会拷贝对象的内部的子对象。</p></li><li><p>深拷贝(deepcopy)： copy 模块的 deepcopy 方法，完全拷贝了父对象及其子对象。</p><a id="more"></a><h3 id="1-字符串"><a href="#1-字符串" class="headerlink" title="1.字符串"></a>1.字符串</h3></li></ul><blockquote><p>zip()函数：将可迭代对象所包含的元素是由原列表元素组成的元组</p></blockquote><p>a = [“a”,”b”,”c”]  b = [1, 2, 3]<br>c = [x for x in zip(a,b)]<br>c = [(“a”, 1), (“b”, 2), (“c”, 3)]<br>结果为元祖型列表</p><blockquote><p>format():位置参数，参数索引从0开始，format里填写{}对应的参数值</p></blockquote><p>msg = “my name is {}, and age is {}”.format(‘chd’,18)<br>渲染结果：my name is chd, and age is 18</p><blockquote><p>str.index()字符串索引: 索引值从0开始,不存在就会报错</p></blockquote><p>s=’index’ s[0]=i<br>s.index(‘i’) = 0  : 查找目标字符串索引值</p><blockquote><p>str.find(‘目标字符串’)查找目标字符串,不存在就返回数值-1(推荐使用find)</p></blockquote><p>“i am iron man”.find(“man”) =&gt; 1</p><blockquote><p>移除指定字符串 str.strip()</p></blockquote><p>s = ‘  hello,world!  ‘<br>s.strip()<br>s.lstrip()<br>s.rstrip()<br>s2 = &#39;hello,world!&#39;<br>s2.strip(&#39;\ &#39;)</p><blockquote><p>len(str)字符串长度</p></blockquote><p>len(‘hello,world’) =&gt; 11</p><blockquote><p>str.replace(a,b)替换：在字符串str中，用b来替换a</p></blockquote><p>‘hello,world’.replace(‘o’,’a’) =&gt; ‘hella,warld’</p><blockquote><p>str[a:b:c] 切片操作(左闭右开)</p></blockquote><p>[a:b:c]：a表示为索引起始位置（索引以0开始）；b表示为索引结束位置；c表示为跳跃间隔<br>案例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; test=&quot;1234hello-world56789&quot;</span><br><span class="line">&gt;&gt;&gt; type(test)</span><br><span class="line">&lt;class &apos;str&apos;&gt;</span><br><span class="line">&gt;&gt;&gt; test[:]</span><br><span class="line">&apos;1234hello-world56789&apos;</span><br><span class="line">&gt;&gt;&gt; test[0:1]</span><br><span class="line">&apos;1&apos;</span><br><span class="line">&gt;&gt;&gt; test[0:2]</span><br><span class="line">&apos;12&apos;</span><br><span class="line">&gt;&gt;&gt; test[0:5:2]</span><br><span class="line">&apos;13h&apos;</span><br><span class="line">&gt;&gt;&gt; test[0:5]</span><br><span class="line">&apos;1234h&apos;</span><br></pre></td></tr></table></figure><blockquote><p>string.capitalize()</p></blockquote><p>把字符串的第一个字符大写</p><blockquote><p>str.count(‘目标字符串’):</p></blockquote><p>返回 str 在 string 里面出现的次数</p><blockquote><p>“连接字符”.join(seq序列):返回 str 在 string 里面出现的次数</p></blockquote><p>以指定字符串作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串</p><blockquote><p>str.lower()/upper() 将字符串全部转换为小写/大写</p></blockquote><p>“hello world”.lower()/upper() =&gt;”hello world” / “HELLO WORLD”</p><blockquote><p>str.split(指定字符串) 以指定字符串来分割目标字符串，以列表形式返回</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">"http://www.baidu.com/python/image/123456.jpg"</span></span><br><span class="line"><span class="comment">#以“.” 进行分隔</span></span><br><span class="line">path =url.split(<span class="string">"."</span>)</span><br><span class="line">path1=[<span class="string">'http://www'</span>, <span class="string">'baidu'</span>, <span class="string">'com/python/image/123456'</span>, <span class="string">'jpg'</span>]</span><br></pre></td></tr></table></figure><p><font color=#ed1941>2019-11-28 新增：</font><br>当split的参数为空时，即string.split():表示以空格作为分割符，并将换行符也去掉</p><h3 id="2-列表"><a href="#2-列表" class="headerlink" title="2.列表"></a>2.列表</h3><blockquote><p>列表截取（索引从0开始，且满足左闭右开原则）与拼接:从右至左取值，则索引默认从-1开始</p></blockquote><p>L=[‘Google’, ‘Runoob’, ‘Taobao’]<br>L[2]=’Taobao’ L[-1]=’Taobao’</p><blockquote><p>列表函数和方法</p></blockquote><table><thead><tr><th>函数和方法</th><th align="center">描述</th></tr></thead><tbody><tr><td>len(list)</td><td align="center">列表元素个数</td></tr><tr><td>list(seq)</td><td align="center">将元组或字符串转换为列表</td></tr><tr><td>max/min(list)</td><td align="center">返回列表元素最大/最小值</td></tr><tr><td>list.append(obj)</td><td align="center">在列表末尾添加新的对象</td></tr><tr><td>list.count(obj)</td><td align="center">统计某个元素在列表中出现的次数</td></tr><tr><td>list.extend(seq)</td><td align="center">在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</td></tr><tr><td>list.index(obj)</td><td align="center">从列表中找出某个值第一个匹配项的索引位置</td></tr><tr><td>list.insert(index, obj)</td><td align="center">将对象插入列表</td></tr><tr><td>list.pop([index=-1])</td><td align="center">移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</td></tr><tr><td>list.remove(obj)</td><td align="center">移除列表中某个值的第一个匹配项</td></tr><tr><td>list.reverse()</td><td align="center">反向列表中元素</td></tr><tr><td>list.sort( key=None, reverse=False)</td><td align="center">对原列表进行排序</td></tr></tbody></table><hr><font color=#ed1941>2019-12-2 新增：数组拆分：将一个含有m个数目的数组拆分成每n个一组，剩下的构成一个新数组</font><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将obj数组分割成每100个一组</span></span><br><span class="line">numbers=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,...,<span class="number">10000</span>]</span><br><span class="line">number =[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(numbers), <span class="number">100</span>):</span><br><span class="line">    number.append(numbers[i:i + <span class="number">100</span>])</span><br></pre></td></tr></table></figure><h3 id="3-元组"><a href="#3-元组" class="headerlink" title="3.元组"></a>3.元组</h3><blockquote><p>3.1元组的创建</p></blockquote><p>元组使用小括号，而列表使用方括号，只需要在括号中添加元素，并使用逗号隔开即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tup1 = (<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="number">336</span>)</span><br></pre></td></tr></table></figure><blockquote><p>3.2 元组的访问使用下脚标索引来访问元组中的值，下标索引从0开始</p></blockquote><p>tup1[0] =&gt; &#39;a&#39; ,tup[1] =&gt; &#39;b&#39;</p><blockquote><p>3.3 元组的修改</p></blockquote><p>元组中的元素是不允许修改或删除的，但我们开始对其进行拼接组合<br>tuple(seq)：将列表转换为元组。</p><h3 id="4-字典-可变模型，可存储任意类型对象"><a href="#4-字典-可变模型，可存储任意类型对象" class="headerlink" title="4.字典:可变模型，可存储任意类型对象"></a>4.字典:可变模型，可存储任意类型对象</h3><blockquote><p>4.1字典的创建</p></blockquote><p>字典的每个键值 key=&gt;value 对用冒号 : 分割，每个键值对之间用逗号&nbsp;&nbsp;,&nbsp;&nbsp;分割，整个字典包括在花括号 {}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;key1 : value1, key2 : value2 &#125;</span><br></pre></td></tr></table></figure><p><font color=#EE9A49>值可以取任何数据类型，但键必须是不可变的，如字符串，数字或元组</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;<span class="string">'Alice'</span>: <span class="string">'2341'</span>, <span class="string">'Beth'</span>: <span class="string">'9102'</span>, <span class="string">'Cecil'</span>: <span class="string">'3258'</span>,<span class="number">9527</span>:<span class="string">'badwoman'</span>,<span class="number">6394</span>:<span class="number">998</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>4.2 字典的访问</p></blockquote><p>访问方式：<br>字典名[&quot;键名&quot;] 或者<br>字典名.(&quot;键名&quot;,自定义数据)：当目标键名不存在时，使用自定义数据值作为默认值，注意此刻不会修改原字典</p><blockquote><p>4.3 字典的更新</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;<span class="string">'Name'</span>: <span class="string">'Zara'</span>, <span class="string">'Age'</span>: <span class="number">7</span>, <span class="string">'Class'</span>: <span class="string">'First'</span>&#125;</span><br><span class="line"> </span><br><span class="line">dict[<span class="string">'Age'</span>] = <span class="number">8</span> <span class="comment"># 更新</span></span><br><span class="line">dict[<span class="string">'School'</span>] = <span class="string">"RUNOOB"</span> <span class="comment"># 添加 </span></span><br><span class="line"> </span><br><span class="line">print(<span class="string">"dict['Age']: "</span>, dict[<span class="string">'Age'</span>])</span><br><span class="line">print(<span class="string">"dict['School']: "</span>, dict[<span class="string">'School'</span>])</span><br></pre></td></tr></table></figure><blockquote><p>4.4 内置函数和方法</p></blockquote><table><thead><tr><th>函数和方法</th><th align="center">描述</th></tr></thead><tbody><tr><td>cmp(dict1, dict2)</td><td align="center">比较字典元素值：如果两个字典的元素相同返回0，如果字典dict1大于字典dict2返回1，如果字典dict1小于字典dict2返回-1</td></tr><tr><td>len()</td><td align="center">计算字典元素个数，即键的总数</td></tr><tr><td>dict.items()</td><td align="center">将字典的键值一一对应组合成一个元组，以列表的形式返回值</td></tr><tr><td>dict.pop(key[,default])</td><td align="center">删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">demo=&#123;<span class="string">'Name'</span>: <span class="string">'Zara'</span>, <span class="string">'Age'</span>: <span class="number">8</span>, <span class="string">'Class'</span>: <span class="string">'First'</span>, <span class="string">'School'</span>: <span class="string">'RUNOOB'</span>&#125;</span><br><span class="line">demo.items() </span><br><span class="line"><span class="comment"># dict_items([('Name', 'Zara'), ('Age', 8), ('Class', 'First'), ('School', 'RUNOOB')])</span></span><br><span class="line"></span><br><span class="line">a = [x <span class="keyword">for</span> x <span class="keyword">in</span> demo.items()]</span><br><span class="line">print(a)  <span class="comment"># a=[('Name', 'Zara'), ('Age', 8), ('Class', 'First'), ('School', 'RUNOOB')]</span></span><br></pre></td></tr></table></figure><h3 id="python的直接赋值，浅拷贝和深拷贝"><a href="#python的直接赋值，浅拷贝和深拷贝" class="headerlink" title="python的直接赋值，浅拷贝和深拷贝"></a>python的直接赋值，浅拷贝和深拷贝</h3><ul><li><p>直接赋值：其实就是对象的引用（别名）。</p></li><li><p>浅拷贝(copy)：拷贝父对象，不会拷贝对象的内部的子对象。</p></li><li><p>深拷贝(deepcopy)： copy 模块的 deepcopy 方法，完全拷贝了父对象及其子对象。</p></li></ul><p>解析：</p><ol><li>b = a 赋值引用，a与b都指向同一个对象，即共有同一块内存地址<br><fancybox><img src="https://www.runoob.com/wp-content/uploads/2017/03/1489720931-7116-4AQC6.png"></fancybox></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;</span><br><span class="line">b = a   <span class="comment"># b = &#123;1: [1, 2, 3]&#125;</span></span><br><span class="line"><span class="comment"># 更新a的值</span></span><br><span class="line">a[<span class="number">1</span>]=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">print(b)  <span class="comment"># b = &#123;1: [1, 2, 3, 4]&#125;</span></span><br><span class="line"><span class="comment"># 即直接赋值也属于浅拷贝，共用同样一块地址</span></span><br></pre></td></tr></table></figure><ol start="2"><li>b = a.copy():浅拷贝，a与b是一个独立的对象，但他们的子对象还是指向统一对象（是引用）<br><fancybox><img src="https://www.runoob.com/wp-content/uploads/2017/03/1489720930-6827-Vtk4m.png" title="浅拷贝"></fancybox></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]&#125;</span><br><span class="line">b = a.copy()</span><br><span class="line">print(a,b)  <span class="comment"># (&#123;1: [1, 2, 3]&#125;, &#123;1: [1, 2, 3]&#125;)</span></span><br><span class="line">a[<span class="number">1</span>].append(<span class="number">4</span>)  <span class="comment"># 字典更新</span></span><br><span class="line">print(a, b)  <span class="comment">#(&#123;1: [1, 2, 3, 4]&#125;, &#123;1: [1, 2, 3, 4]&#125;)</span></span><br></pre></td></tr></table></figure><ol start="3"><li>b = copy.deepcopy(a) 深拷贝：深度拷贝, a 和 b 完全拷贝了父对象及其子对象，两者是完全独立的,是两块独立的地址。<br><fancybox><img src="https://www.runoob.com/wp-content/uploads/2017/03/1489720930-5882-BO4qO.png"></fancybox></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import copy</span><br><span class="line">&gt;&gt;&gt; c = copy.deepcopy(a)</span><br><span class="line">&gt;&gt;&gt; a, c</span><br><span class="line">(&#123;1: [1, 2, 3, 4]&#125;, &#123;1: [1, 2, 3, 4]&#125;)</span><br><span class="line">&gt;&gt;&gt; a[1].append(5)</span><br><span class="line">&gt;&gt;&gt; a, c</span><br><span class="line">(&#123;1: [1, 2, 3, 4, 5]&#125;, &#123;1: [1, 2, 3, 4]&#125;)</span><br></pre></td></tr></table></figure><h3 id="map与reducde函数（python2与python3的区别）"><a href="#map与reducde函数（python2与python3的区别）" class="headerlink" title="map与reducde函数（python2与python3的区别）"></a>map与reducde函数（python2与python3的区别）</h3><p>map()函数接收两个参数，一个是函数，一个是Iterable（可迭代对象），map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator（迭代器）返回(可以使用list转换为数组)，而python2返回的是一个数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line">   <span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line">r = map(f, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line">list(r)  <span class="comment"># [1, 4, 9, 16, 25, 36, 49, 64, 81]</span></span><br></pre></td></tr></table></figure><p>使用map返回结果是迭代器，将数据转换为列表<br>reduce把一个函数作用在一个序列[x1, x2, x3, …]上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算，其效果就是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)</span><br></pre></td></tr></table></figure><p>比方说对一个序列求和，就可以用reduce实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from functools import reduce</span><br><span class="line">&gt;&gt;&gt; def add(x, y):</span><br><span class="line">...     return x + y</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; reduce(add, [1, 3, 5, 7, 9])</span><br><span class="line">25</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 元组 </tag>
            
            <tag> 列表 </tag>
            
            <tag> 字典 </tag>
            
            <tag> 数值 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker容器虚拟化技术</title>
      <link href="/2019/11/10/docker%E5%AE%B9%E5%99%A8%E8%99%9A%E6%8B%9F%E6%8A%80%E6%9C%AF/"/>
      <url>/2019/11/10/docker%E5%AE%B9%E5%99%A8%E8%99%9A%E6%8B%9F%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<p><font color=#00CD00>简单来说，在Windows系统下安装各种运行环境的坑简直不要太多了(●￣(ｴ)￣●)，并不仅限于docker、Nginx、PHP、Python等等</font>，我会尽详细写出实际过程中遇到的各种各样的奇葩问题<br><fancybox><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1573382566146&di=7b10832832e7d3c37d3f4e2e84d45d5d&imgtype=jpg&src=http%3A%2F%2Fimg3.imgtn.bdimg.com%2Fit%2Fu%3D859959778%2C1194286727%26fm%3D214%26gp%3D0.jpg" alt=""></fancybox></p><a id="more"></a><h3 id="1-docker适用环境"><a href="#1-docker适用环境" class="headerlink" title="1.docker适用环境"></a>1.docker适用环境</h3><p>其实docker本身也没有太多在Windows下花功夫。<font color=#00CD00>目前，docker仅支持Linux与Windows企业版、专业版、教育版。ps：家庭版不支持docker</font>,并且win10下可以安装<a href="https://hub.docker.com/editions/community/docker-ce-desktop-windows?tab=description" target="_blank" rel="noopener">docker-for-windows</a>,这个安装包是<br>专门适用于win10，安装简单，而对于win7/8则可以使用<a href="https://github.com/docker/toolbox/releases" target="_blank" rel="noopener">Docker Toolbox下载地址</a></p><h3 id="2-Windows下无法对docker容器进行端口访问（端口映射的问题）"><a href="#2-Windows下无法对docker容器进行端口访问（端口映射的问题）" class="headerlink" title="2.Windows下无法对docker容器进行端口访问（端口映射的问题）"></a>2.Windows下无法对docker容器进行端口访问（端口映射的问题）</h3><p>1.问题详情<br><br>&nbsp;&nbsp;&nbsp;在Windows10系统服务器中安装了docker和docker-compose<br><br>&nbsp;&nbsp;&nbsp;并尝试在其中运行Nginx服务，映射也做好<br><br>&nbsp;&nbsp;&nbsp;问题：在主机的浏览器中，打开localhost:port无法访问对应的Web服务。<br><br>2.问题解析<br><br>&nbsp;&nbsp;&nbsp;原因：docker是运行在Linux上的，在Windows中运行docker，实际上还是在Windows下先安装了一个Linux环境，然后在这个系统中运行的docker。也就是说，服务中使用的localhost指的是这个Linux环境的地址，而不是我们的宿主环境Windows10。<br><br>3.解决办法<br><br>&nbsp;&nbsp;&nbsp;启动docker命令行窗口<br><br>&nbsp;&nbsp;&nbsp;输入命令:docker-machine ip default<br><br>&nbsp;&nbsp;&nbsp;Linux的ip地址，一般情况下这个地址是192.168.99.100<br><br>&nbsp;&nbsp;&nbsp;然后在Windows的浏览器中，输入 <a href="http://IP:port" target="_blank" rel="noopener">http://IP:port</a> 即可启用（<a href="http://192.168.99.100：8069）" target="_blank" rel="noopener">http://192.168.99.100：8069）</a><br></p><h3 id="3-docker与VMware不可兼容"><a href="#3-docker与VMware不可兼容" class="headerlink" title="3.docker与VMware不可兼容"></a>3.docker与VMware不可兼容</h3><p>&nbsp;&nbsp;&nbsp;在Windows下安装docker，第一步就是要打开Hyper-V(打开控制面板 - 程序和功能 - 启用或关闭Windows功能，勾选Hyper-V),开启win自带的虚拟管理技术。但是若想要使用VMware，则必须关闭Hyper-V，鱼和熊掌不可兼得呀！(′д｀ )…彡…彡</p><h3 id="4-Windows：vmware与hyper-v不兼容-请移除hyper-v角色"><a href="#4-Windows：vmware与hyper-v不兼容-请移除hyper-v角色" class="headerlink" title="4.Windows：vmware与hyper-v不兼容,请移除hyper-v角色"></a>4.Windows：vmware与hyper-v不兼容,请移除hyper-v角色</h3><p>1、请移除hyper-v角色。<br>（1）以管理员身份（win + x）运行命令提示符；<br>（2）执行命令：bcdedit /set hypervisorlaunchtype off<br>（3）重启系统，运行vm即可。<br>2、如果想要恢复hyper启动：<br>&nbsp;&nbsp;&nbsp;bcdedit / set hypervisorlaunchtype auto</p><h3 id="5-docker-run后接-bin-sh和接-bin-bash的区别是什么："><a href="#5-docker-run后接-bin-sh和接-bin-bash的区别是什么：" class="headerlink" title="5.docker run后接/bin/sh和接/bin/bash的区别是什么："></a>5.docker run后接/bin/sh和接/bin/bash的区别是什么：</h3><p>比如我们要获取一个nginx镜像，同一镜像存在有不同的tags<br>&nbsp;&nbsp;&nbsp;/bin/sh命令仅适用于tags带alpine标签的： nginx:1.17-alpine；<br>&nbsp;&nbsp;&nbsp;/bin/bash命令仅适用于tags不带alpine标识的：nginx：laster，nginx:1.8…</p><h3 id="6-docker运行MySQL服务"><a href="#6-docker运行MySQL服务" class="headerlink" title="6.docker运行MySQL服务"></a>6.<a href="https://blog.csdn.net/siying8419/article/details/79670246" target="_blank" rel="noopener">docker运行MySQL服务</a></h3><blockquote><ol><li>拉取镜像<br>docker pull mysql:[tag]</li><li>创建并运行容器<br>docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql：5.6</li></ol></blockquote><p>ps: -p 表示指定访问端口<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-e 设置环境变量，或者覆盖已存在的环境变量<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-d 表示以守护式方式来运行容器<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MYSQL_ROOT_PASSWORD=123456 声明MySQL的用户名为ROOT，密码为123456</p><blockquote><ol start="3"><li>查看容器是否启动<br>docker ps </li><li>启动容器<br>docker start container_id</li></ol></blockquote><blockquote><ol start="5"><li>进入容器内部,以命令行交互<br>docker exec -it container_id /bin/bash</li></ol></blockquote><blockquote><ol start="6"><li>登录MySQL<br>mysql -u root -p 然后在输入密码</li></ol></blockquote><blockquote><ol start="7"><li>成功表示已经成功登陆MySQL</li></ol></blockquote><h3 id="7-最强万能公式-数据卷挂载式创建容器"><a href="#7-最强万能公式-数据卷挂载式创建容器" class="headerlink" title="7.最强万能公式:数据卷挂载式创建容器"></a>7.最强万能公式:数据卷挂载式创建容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">守护式：docker run -di [--privileged=true] -P(或者指定端口 -p 外部port:该容器默认端口) \--name=&quot;newNginx&quot;  -v /home/chd/Desktop/entwechatapp:/var/www/EntWeChatApp:rw  nginx:1.15.7-alpine</span><br><span class="line">交互式：docker run -it [--privileged=true] -P(或者指定端口 -p 外部port:该容器默认端口) \--name=&quot;newNginx&quot;  -v /home/chd/Desktop/entwechatapp:/var/www/EntWeChatApp:rw  nginx:1.15.7-alpine</span><br><span class="line">含义：</span><br><span class="line">   a） 以-v /home/chd/Desktop/entwechatapp:/var/www/EntWeChatApp:rw 带rw(read,write)权限来将宿主机与容器进行数据卷挂载</span><br><span class="line">   b) docker run 以新容器名和端口号以及守护式或者交互式来创建容器</span><br></pre></td></tr></table></figure><h3 id="8-宿主机与docker容器权限纠纷"><a href="#8-宿主机与docker容器权限纠纷" class="headerlink" title="8.宿主机与docker容器权限纠纷"></a>8.宿主机与docker容器权限纠纷</h3><p>问题描述：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;它来了！问题又出现了！哭啦。数据卷挂载时，即使声明了rw权限，在宿主机中创建文件，数据共享后，容器内能够具有正常的rw权限；但在容器内新建了文件后，宿主机就只有只读权限，无法修改文件内容。</p><p>解决方案：宿主机的权限不够<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在（7）式中的万能公式中添加：docker run ··· --privileged=true ···</p><h3 id="9-docker配置nginx的配置文件"><a href="#9-docker配置nginx的配置文件" class="headerlink" title="9.docker配置nginx的配置文件"></a>9.<a href="https://www.cnblogs.com/zfding/p/11429695.html" target="_blank" rel="noopener">docker配置nginx的配置文件</a></h3><p><del>命令：<code>docker run --name=&quot;dnmp_nginx&quot; -p 80:80 -v /home/docker-nginx/nginx.conf:/etc/nginx/nginx.conf -v /home/docker-nginx/log:/var/log/nginx -v /home/docker-nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf -di nginx:\[tags]</code><br>&nbsp;&nbsp;&nbsp;&nbsp;第一个-v 表示将你本地的nginx.conf覆盖你要起启动的容器的nginx.conf文件，第二个表示将日志文件进行挂载，就是把nginx服务器的日志写到你docker宿主机的/home/docker-nginx/log/下面。第三个-v 表示的和第一个-v意思一样的<br>&nbsp;&nbsp;&nbsp;&nbsp;我个人更喜欢守护式映射的方式，麻烦的是需要自己准备好nginx.conf 和default.conf文件，我是直接从容器里面复制的，然后根据自己的需要改的</del></p><p>我都想把它杀了，部署nginx太多坑了，不过参考了<a href="https://blog.csdn.net/qierkang/article/details/92657302" target="_blank" rel="noopener">此博文</a>，最终解决了问题，解决方法：</p><blockquote><p>1.创建三个根目录根据情况创建：/docker/nginx/conf www logs</p></blockquote><p>docker run -d -p 80:80 --name=”nginx” --net host -v /docker/nginx/www:/usr/share/nginx/html -v /docker/nginx/logs:/var/log/nginx nginx:1.17.5</p><blockquote><p>2.不对配置文件进行数据挂载即 </p></blockquote><p>-v /docker/nginx/conf/nginx.conf:/etc/nginx/nginx.conf 这个   </p><blockquote><p>3.进入容器 获取文件</p></blockquote><p>docker exec -it nginx /bin/bash </p><blockquote><p>4.cd /etc/nginx/ </p></blockquote><p>（这里主要获取配置文件路径的）,然后exit</p><blockquote><p>5.数据拷贝</p></blockquote><p>进入宿主机目录文件 cd /docker/nginx/conf/<br>将已经运行成功的容器的配置文件拷贝到宿主机的配置文件目录：docker cp 容器ID:/etc/nginx/nginx.conf .（ps：“.”表示拷贝到当前目录）</p><p>ps：文件copy成功后 把nginx容器先删除掉</p><blockquote><p>6.创建最终的nginx容器</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -di -p 80:80 </span><br><span class="line">--name nginx </span><br><span class="line">[--net host] :再思考一下有没有必要写，使用–net = host时,它告诉容器使用主机网络堆栈.因此无法将端口暴露给主机,因为它是主机(就网络堆栈而言).</span><br><span class="line">-v /docker/nginx/www:/usr/share/nginx/html </span><br><span class="line">-v /docker/nginx/conf/nginx.conf:/etc/nginx/nginx.conf</span><br><span class="line">-v /docker/nginx/logs:/var/log/nginx </span><br><span class="line">nginx:1.17.5</span><br><span class="line">ps:成功后就代表部署成功</span><br></pre></td></tr></table></figure><p><font color=#ef4136>2019-11-29 新增：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里宿主机的nginx.conf其实是挂载了一个文件，docker是不推荐这样使用的，可以尝试在宿主机上创建目录为：/docker/nginx/conf/nginx.conf/nginx.conf(当前conf文件是一个具体的配置文件，不是一个目录)，这样上式就不会出现docker warning</font>，结合<a href="https://blog.csdn.net/u014106644/article/details/83152366" target="_blank" rel="noopener">此篇文章</a> 。</p><p>PS：访问可能会403 因为/docker/nginx/www/ 里面没有index.html放进去就好了</p><blockquote><p>7.权限赋予</p></blockquote><p>挂载成功后，给宿主机上的www目录（或整个文件目录）增加权限，不然一直无法读写：<br>&nbsp;&nbsp;&nbsp;&nbsp;sudo chmod -R 777 目标目录 ：给目标目录赋予最大管理员权限<br>&nbsp;&nbsp;&nbsp;&nbsp;sudo chmod +/-rwx 文件名|目录  给文件或目录的赋予权限</p><h3 id="10-docker配置MySQL，redis教程等，请点击此处链接"><a href="#10-docker配置MySQL，redis教程等，请点击此处链接" class="headerlink" title="10.docker配置MySQL，redis教程等，请点击此处链接"></a>10.docker配置MySQL，redis教程等，<a href="https://pan.baidu.com/s/1nUE4pfe2wThYVGMEYqADXw" target="_blank" rel="noopener">请点击此处链接</a></h3><p>命令:<code>docker run -di -p 12345:3306 \--name=&quot;mysql&quot; -v /lnmp/mysql/conf:/etc/mysql/conf.d -v /lnmp/mysql/logs:/logs -v /lnmp/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456:rw  mysql:5.6</code></p><p>命令说明：<br>-p 12345:3306：将主机的12345端口映射到docker容器的3306端口。<br>--name mysql：运行服务名字<br>-v /lnmp/mysql/conf:/etc/mysql/conf.d ：将主机/lnmp/mysql录下的conf/my.cnf 挂载到容器的 /etc/mysql/conf.d<br>-v /lnmp/mysql/logs:/logs：将主机/lnmp/mysql目录下的 logs 目录挂载到容器的 /logs。<br>-v /lnmp/mysql/data:/var/lib/mysql ：将主机/lnmp/mysql目录下的data目录挂载到容器的 /var/lib/mysql<br>-e MYSQL_ROOT_PASSWORD=123456：初始化 root 用户的密码。<br>-d mysql:5.6 : 后台程序运行mysql5.6</p><h3 id="11-docker-容器管理工具：portainer使用"><a href="#11-docker-容器管理工具：portainer使用" class="headerlink" title="11.docker 容器管理工具：portainer使用"></a>11.docker 容器管理工具：<a href="https://blog.csdn.net/yuanlingGeGe/article/details/100762360" target="_blank" rel="noopener">portainer使用</a></h3><ol><li>这个数据卷用于持久化Portainer数据：</li></ol><p>docker volume create portainer_data<br>2. 创建相关portainer容器<br>docker run -di -p 9000:9000 --name=”portainer”<br>-v /var/run/docker.sock:/var/run/docker.sock<br>-v portainer_data:/data portainer/portainer</p><h3 id="12-外部Windows如何访问docker内的容器"><a href="#12-外部Windows如何访问docker内的容器" class="headerlink" title="12.外部Windows如何访问docker内的容器"></a>12.外部Windows如何访问docker内的容器</h3><blockquote><p>1.基本架构：Windows，Dockers，Linux三者关系<br><fancybox><img src="https://images2018.cnblogs.com/blog/1228818/201805/1228818-20180510183714998-435698473.png" alt="Windows，Dockers，Linux三者关系"></fancybox></p></blockquote><blockquote><p>2.相关操作</p></blockquote><p>2.1 关闭Linux防火墙：systemctl stop firewalld.service</p><p>2.2 查看Linux，Docker的IP地址:ifconfig(区别于Windows的ipconfig命令)</p><p><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/CDN@1.2.2/docker.png" width="60%"></fancybox></p><p>2.3 Windows访问测试:</p><blockquote><p>思想：docker作为一个容器虚拟技术，创建并启动相关的容器服务，并把端口映射到Linux系统中。比如MySQL：docker启动MySQL服务后，并映射了一个外部访问的某端口（比如还是3306）<br>，则此刻Linux就具有了3306这个一个端口=&gt;外界访问方式应该是：访问虚拟机Linux上与之相绑定docker容器映射出的端口。</p></blockquote><p><fancybox><img src="https://cdn.jsdelivr.net/gh/FioraLove/CDN@1.2.2/test.JPG" height="60%"></fancybox><br><font color=#FF3030>2019-11-27 新增：</font><br>Linux:<br>在 windows 系统中访问 linux 中 nginx，默认不能访问的，因为防火墙问题,即我们可以有两种解决方法<br>（1）关闭防火墙：参考上述相关操作<br>（2）开放访问的端口号，比如80端口，操作如下： </p><p>查看开放的端口号 </p><blockquote><p>firewall-cmd --list-all </p></blockquote><p>设置开放的端口号 </p><blockquote><p>firewall-cmd --add-service=http --permanent<br>firewall-cmd --add-port=80(或其它开放端口号)/tcp --permanent </p></blockquote><p>重启防火墙 </p><blockquote><p>firewall-cmd --reload </p></blockquote><hr><p>Ubuntu:<br>Ubuntu与linux对于防火墙的操作存在很大的区别：注意区分<br>1、查看端口开启状态（inactive表示已经关闭了防火墙）<br>sudo ufw status</p><p>2、开启某个端口，比如我开启的是3306<br>sudo ufw allow 3306</p><p>3、开启防火墙<br>sudo ufw enable</p><p> 4、关闭防火墙<br>sudo ufw disable</p><p> 5、重启防火墙<br>sudo ufw reload</p><p>6、禁止外部某个端口比如80<br>sudo ufw delete allow 80</p><p>7、查看端口ip<br>netstat -ltn<br>————————————————</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> VMware </tag>
            
            <tag> images </tag>
            
            <tag> container </tag>
            
            <tag> Hyper-V </tag>
            
            <tag> Linux </tag>
            
            <tag> 交互式与守护式创建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue</title>
      <link href="/2019/11/08/Vue/"/>
      <url>/2019/11/08/Vue/</url>
      
        <content type="html"><![CDATA[<img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1573211421138&di=ed4a66a277a70944cfe8a99015bd8d2b&imgtype=0&src=http%3A%2F%2Fwww.igeekbar.com%2Figeekbar%2Fnetworks%2Fuploadimg%2Fa268122f-78c7-4f1b-ba31-a92f21ed1133.jpg" height="285px"><p>&nbsp;&nbsp;Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合,有很好的数据双向绑定性。</p><a id="more"></a><h3 id="1-jQuery与Vue糅合使用"><a href="#1-jQuery与Vue糅合使用" class="headerlink" title="1.jQuery与Vue糅合使用"></a>1.jQuery与Vue糅合使用</h3><blockquote><p>1.jquery基本使用：先导入相关jQuery库包，然后按人类正常思维，就声明入口函数,然后在入口函数中书写逻辑代码</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(function()&#123;</span><br><span class="line">          ...  </span><br><span class="line">          ...</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>但是，奇怪他个猪猪皮，即使不用声明入口函数，直接书写逻辑程序，经过多次测试，TM居然还可以正常使用</p><blockquote><p>2.jQuery+Vue(若想两者结合使用，则一定不能声明入口函数，否则Vue无法使用)<br>当你想测试Vue时，就会出现vue实例未声明的报错</p></blockquote><font color=#FF4040    ><p>&nbsp;&nbsp;1 Uncaught ReferenceError: vm is not defined<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at <anonymous>:1:1<br></font></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"rookie"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello fpx<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello IG<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello kk<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pre</span>&gt;</span>total:&#123;&#123;number&#125;&#125;<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h6</span> <span class="attr">:class</span>=<span class="string">"&#123;box:isactive&#125;"</span>&gt;</span>this is new h6&amp;nbsp;&amp;nbsp;<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h5</span> <span class="attr">:class</span>=<span class="string">"[box1,box2,box3?'luko':'']"</span>&gt;</span>this is new h6&amp;nbsp;&amp;nbsp;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"please input number"</span> <span class="attr">v-model</span>=<span class="string">"msg"</span> @<span class="attr">keyup.enter</span>=<span class="string">"fn"</span>&gt;</span>按键盘enter键触发:&#123;&#123;msg&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"please click enter"</span> <span class="attr">v-model</span>=<span class="string">"message"</span> @<span class="attr">keyup.13</span>=<span class="string">"greet(9527)"</span>&gt;</span>按键盘enter键触发&#123;&#123;message&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log($(<span class="string">'p'</span>).length);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">                el:<span class="string">'#app'</span>,</span></span><br><span class="line">                data:&#123;</span><br><span class="line"><span class="javascript">                    number:$(<span class="string">'p'</span>).length,</span></span><br><span class="line"><span class="actionscript">                    isactive:<span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">                    box1:<span class="string">'moko'</span>,</span></span><br><span class="line"><span class="actionscript">                    box2:<span class="string">'boka'</span>,</span></span><br><span class="line"><span class="actionscript">                    box3:<span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">                    msg:<span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">                    message:<span class="string">''</span>,</span></span><br><span class="line"></span><br><span class="line">                &#125;,</span><br><span class="line">                methods:&#123;</span><br><span class="line">                    fn()&#123;</span><br><span class="line"><span class="actionscript">                        alert(<span class="keyword">this</span>.msg)</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    greet(hi)&#123;</span><br><span class="line"><span class="actionscript">                        alert(<span class="keyword">this</span>.message+hi)</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;);</span><br><span class="line"><span class="javascript">            $(<span class="string">'h5'</span>).append(<span class="string">'&lt;b&gt;this is new plus increment&lt;/b&gt;'</span>);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">'h6'</span>).append(<span class="string">'&lt;br&gt; hello world'</span>);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-Vue的组件"><a href="#2-Vue的组件" class="headerlink" title="2.Vue的组件"></a>2.Vue的组件</h3><blockquote><p>1.组件创建方式分为全局组件与局部组件：</p></blockquote><p>&nbsp;&nbsp;&nbsp;全局组件：可以被多个APP进行调用,在APP实例外创建;定义一个名为 button-counter 的新组件:组件名称若使用驼峰原则，引用组件时需要全部小写，并且两个单词之间用“-”连接;若不使用驼峰原则时，直接使用原组件名</p><p>全局组件创建方式一：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Vue.component('buttonCounter', &#123;</span><br><span class="line">    data: function () &#123;  // 1.组件可以有自己的data数据，组件中的data必须是一个方法，且这个方法内部必须返回一个对象才行，而实例中的data可以为一个对象</span><br><span class="line">        return &#123;</span><br><span class="line">        count: 0,</span><br><span class="line">        info: 'hello world'</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;,</span><br><span class="line">      template: '<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"count++"</span>&gt;</span>&#123;&#123;message&#125;&#125; clicked me &#123;&#123; count &#125;&#125; times.<span class="tag">&lt;/<span class="name">button</span>&gt;</span>'</span><br><span class="line">      // 2. 全局组件有template属性 </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>全局组件创建方式二：调用公共模板对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    let project=&#123;</span><br><span class="line">        template:&apos;&apos;,</span><br><span class="line">        data:function()&#123;  // 组件中的data必须是一个方法</span><br><span class="line">            return &#123;</span><br><span class="line">            info:&apos;hello world&apos;,</span><br><span class="line">            message:&apos;badwoman&apos;      </span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;&#125;&#125;</span><br><span class="line">    Vue.component(&apos;组件名&apos;,project);     </span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>全局组件创建方式三：调用公共模板对象–其实这也是全局组件的一种创建方式，将template绑定到自身data函数中，此刻的data不同于实例中的data，此刻为一个函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template id=<span class="string">"tmpl"</span>&gt;  </span><br><span class="line">   &lt;div&gt;</span><br><span class="line">     &lt;h3&gt;&#123;&#123;count&#125;&#125;&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">   &lt;/</span>div&gt;</span><br><span class="line"> &lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp"> &lt;script&gt;</span></span><br><span class="line"><span class="regexp">   var dataObj = &#123; count: 0 &#125;;</span></span><br><span class="line"><span class="regexp">   /</span><span class="regexp">/ 这是一个计数器的组件, 身上有个按钮,每当点击按钮,让 data 中的 count 值 +1</span></span><br><span class="line"><span class="regexp">   Vue.component('counter', &#123;</span></span><br><span class="line"><span class="regexp">     data: function () &#123;</span></span><br><span class="line"><span class="regexp">       /</span><span class="regexp">/ return dataObj</span></span><br><span class="line"><span class="regexp">       return &#123; count: 0 &#125;</span></span><br><span class="line"><span class="regexp">     &#125;,</span></span><br><span class="line"><span class="regexp">     template: '#tmpl',</span></span><br><span class="line"><span class="regexp">     methods: &#123;&#125;</span></span><br><span class="line"><span class="regexp">   &#125;);</span></span><br><span class="line"><span class="regexp">   /</span><span class="regexp">/ 创建 Vue 实例，得到 ViewModel</span></span><br><span class="line"><span class="regexp">   var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">     el: '#app',</span></span><br><span class="line"><span class="regexp">     data: &#123;&#125;,</span></span><br><span class="line"><span class="regexp">     methods: &#123;&#125;</span></span><br><span class="line"><span class="regexp">   &#125;)</span></span><br><span class="line"><span class="regexp"> &lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h3 id="3-props属性使用："><a href="#3-props属性使用：" class="headerlink" title="3. props属性使用："></a>3. props属性使用：</h3><blockquote><p>数组写法</p></blockquote><p>props: [‘cmovies’, ‘cmessage’]</p><blockquote><p>对象写法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">props: &#123; </span><br><span class="line">    // propsName表示要传递的值</span><br><span class="line">    propsName: &#123;  </span><br><span class="line">    type: String, // 组件的值的类型</span><br><span class="line">    default: &apos;zzzzz&apos;, // 组件的默认值</span><br><span class="line">    required: true //在使用组件必传值</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>props对象写法样例如下：<br>拓展：组件props选项的值可以为为数组类型,也可以是对象类型，props选项的对象类型可以用于对外部传递进来的参数进行数据验证</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    Vue.component(<span class="string">'my-component'</span>,&#123;</span><br><span class="line">        props:&#123;</span><br><span class="line">            <span class="comment">// Number类型</span></span><br><span class="line">            propA: <span class="built_in">Number</span>,</span><br><span class="line">            <span class="comment">// 多种类型校验: String 或 Number类型</span></span><br><span class="line">            propB: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span><br><span class="line">            <span class="comment">// 布尔类型,默认值true</span></span><br><span class="line">            propC:&#123;</span><br><span class="line">                type:<span class="built_in">Boolean</span>,</span><br><span class="line">                <span class="keyword">default</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// String类型且必输</span></span><br><span class="line">            propD:&#123;</span><br><span class="line">                type:<span class="built_in">String</span>,</span><br><span class="line">                required: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// Array类型,默认返回一个数组对象</span></span><br><span class="line">            propE:&#123;</span><br><span class="line">                type:<span class="built_in">Array</span>,</span><br><span class="line">                <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// Object类型,默认返回一个对象</span></span><br><span class="line">            propF:&#123;</span><br><span class="line">                type:<span class="built_in">Object</span>,</span><br><span class="line">                <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;<span class="attr">a</span>:<span class="number">1</span>&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 自定义验证函数</span></span><br><span class="line">            propG:&#123;</span><br><span class="line">                validator:<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> value &lt; <span class="number">10</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">'#app'</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            parentInput:<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-接受动态数据与静态数据"><a href="#4-接受动态数据与静态数据" class="headerlink" title="4.接受动态数据与静态数据"></a>4.接受动态数据与静态数据</h3><p>有时候组件接收的参数是来自父组件的动态数据,需要使用v-bind动态绑定props值.<br>下列案例此刻使用了v-blid绑定props值，即此刻绑定的message的值就是为表单中输入的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> v-model=<span class="string">"parentInputText"</span> placeholder=<span class="string">"请输入..."</span>&gt;</span><br><span class="line">    &lt;my-component :message=<span class="string">"parentInputText"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    Vue.component('my-component',&#123;</span></span><br><span class="line"><span class="string">        props:['message'],</span></span><br><span class="line"><span class="string">        template:'&lt;div&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;'</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    const vm = new Vue(&#123;</span></span><br><span class="line"><span class="string">        el: '#app',</span></span><br><span class="line"><span class="string">        data:&#123;</span></span><br><span class="line"><span class="string">            parentInputText:''</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>在使用props对子组件传值时,如果不使用v-bind传递数字,布尔,数组,对象类型的数据，这时传递的数据都是字符串类型,由于未使用模板绑定语法,不会被编译，会被当做参数传递到模板中.<br>下列案例此刻没有使用了v-blid绑定props值，即此刻绑定的message的值直接就是”parentInputText“</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;my-component message=<span class="string">"parentInputText"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    Vue.component('my-component',&#123;</span></span><br><span class="line"><span class="string">        props:['message'],</span></span><br><span class="line"><span class="string">        template:'&lt;div&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;'</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    const vm = new Vue(&#123;</span></span><br><span class="line"><span class="string">        el: '#app',</span></span><br><span class="line"><span class="string">        data:&#123;</span></span><br><span class="line"><span class="string">            parentInputText:''</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><font  color=#080808>注意：重要的来了，必须理解┗|｀O′|┛ 嗷~~<br>创建格式：Vue.component('组件名',{ /* ..组件的模板对象.. */ })<br>&nbsp;&nbsp;&nbsp;组件的第一个参数为组件名，而第二个参数是以对象的形式去描述一个组件。组件是可复用的 Vue 实例，所以它们与 new Vue 接收相同的选项，例如 data、computed、watch、methods 以及生命周期钩子等。仅有的例外是像 el 这样根实例特有的选项</font><p><font color=#FF4040    >2019-12-9 新增：</font></p><h3 id="5-vue实例中的method方法抽象说明"><a href="#5-vue实例中的method方法抽象说明" class="headerlink" title="5.vue实例中的method方法抽象说明"></a>5.vue实例中的method方法抽象说明</h3><p>假设在HTML中有这样一个语句：调用methods里面的方法时，假如有返回值时，直接在&lt;!–￼10–&gt;里面展示，注意区分@click=”methodName”</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>&#123;&#123;test(2)&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">    <span class="comment">&lt;!---这里是调用methods里面的test()方法：判断参数的数据类型 ---&gt;</span></span><br><span class="line">    el:"#app",</span><br><span class="line">    data:&#123;&#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        test(hi) &#123;</span><br><span class="line">            arr = typeof(hi);</span><br><span class="line">            switch (arr) &#123;</span><br><span class="line">                case "string":</span><br><span class="line">                    return "this type is string";</span><br><span class="line">                case "number":</span><br><span class="line">                    console.log("good");</span><br><span class="line">                    if (hi<span class="tag">&lt;<span class="name">=10</span> &amp;&amp; <span class="attr">hi</span>%<span class="attr">2</span>===<span class="string">0)</span> &#123;</span></span><br><span class="line"><span class="tag">                        <span class="attr">return</span> <span class="attr">hi</span>;</span></span><br><span class="line"><span class="tag">                    &#125;</span></span><br><span class="line"><span class="tag">                    <span class="attr">else</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">return</span>("不满足条件");</span></span><br><span class="line"><span class="tag">                <span class="attr">case</span> "<span class="attr">object</span>"<span class="attr">:</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">return</span>("<span class="attr">this</span> <span class="attr">type</span> <span class="attr">is</span> <span class="attr">object</span>");</span></span><br><span class="line"><span class="tag">            &#125;</span></span><br><span class="line"><span class="tag">        &#125;</span></span><br><span class="line"><span class="tag">    &#125;</span></span><br><span class="line"><span class="tag">    </span></span><br><span class="line"><span class="tag">&#125;)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Jquery </tag>
            
            <tag> component </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python文件读read()、readline()、readlines()对比</title>
      <link href="/2019/11/07/python%E7%9A%84read_readlines_readline/"/>
      <url>/2019/11/07/python%E7%9A%84read_readlines_readline/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;read():读取整个文件，将文件内容放到一个字符串变量中<br><br>&nbsp;&nbsp;&nbsp;readline():每次读取一整行，包括换行符，并将其作为字符串返回<br><br>&nbsp;&nbsp;&nbsp;readlines():读取所有行然后把它们作为一个字符串型列表返回（即把每一行数据包括换行符作为一个列表元素）<br></p><a id="more"></a><h2 id="1-readline-示例："><a href="#1-readline-示例：" class="headerlink" title="1.readline()示例："></a>1.readline()示例：</h2><p>假设需求是读取一个多行的all_term.txt文件，并列出每一个单词<br>all_term.txt文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">new fallout chernobyl social impact chernobyl disast</span><br><span class="line">david r marpl st martin press cloth</span><br><span class="line">rnobyl social impact chernobyl disast</span><br><span class="line">david r marpl st martin piano</span><br></pre></td></tr></table></figure><p>程序源代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    obj = []</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'all_term.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>,errors=<span class="string">"ignore"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            myStr = f.readline()  <span class="comment"># 表示一次读取一行</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> myStr:</span><br><span class="line">                <span class="comment"># 读到数据最后跳出，结束循环。数据的最后也就是读不到数据了，mystr为空的时候</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="comment"># 指定字符串来分割目标字符串，以列表形式返回</span></span><br><span class="line">            new_list = myStr.split()</span><br><span class="line">            <span class="comment"># 表示将拆分好的每一行重新拼接成一个完整的数组</span></span><br><span class="line">            obj += new_list</span><br><span class="line">        print(obj)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>readline()表示读取一整行，那如果一个文件有多行数据，使用readline()函数是不是一直重复读取第一行？<br>其实不然，使用with open()打开文件后，第一个readline()读取第一行（也包括换行符），第二个读取第二行,…,第n个读取第n行数据，这是由系统机制判定的。<br>下面我列举一个实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""all_term.txt:</span></span><br><span class="line"><span class="string">new fallout chernobyl social impact chernobyl disast</span></span><br><span class="line"><span class="string">david r marpl st martin press cloth</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">new fallout chernobyl social impact chernobyl disast</span></span><br><span class="line"><span class="string">david r marpl st martin press cloth</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'all_term.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>, errors=<span class="string">'ignore'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    a = f.readline().replace(<span class="string">"\n"</span>, <span class="string">""</span>)</span><br><span class="line">    b = f.readline().replace(<span class="string">"\n"</span>, <span class="string">""</span>)</span><br><span class="line">print(<span class="string">"a:"</span>, a)</span><br><span class="line">print(<span class="string">"b:"</span>, b)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">结果为：</span></span><br><span class="line"><span class="string">a: new fallout chernobyl social impact chernobyl disast</span></span><br><span class="line"><span class="string">b: david r marpl st martin press cloth</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>根据结果可以得出结论：</p><p>1.第一个readline()读取第一行（也包括换行符），第二个读取第二行，……</p><p>2.上面是我们经常看到的按行遍历一个文件方法，你可能已经注意到我在代码中写的if not myStr:部分。当readline读取到为空的时候，意味着读到了文件的结束。这个时候，问题就在这里，很多人会想，是不是遇到一个空行，也会被认为是文件的结束呢？<br>事实上，文件的空白行并不会返回一个空行。因为在每一行的末尾还有一个或者多个分隔符，因此“空白行”至少会有一个换行符或者系统使用的其他符号。所以，即使文件中真的包含一个“空白行”，读入的行也不是空的，这就意味着在真实遍历读取到文件结束之前，程序实际上是不会停止的</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> read() - readline() - readlines() </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo主体设置知识点</title>
      <link href="/2019/10/26/Hexo%E4%B8%BB%E4%BD%93%E8%AE%BE%E7%BD%AE%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2019/10/26/Hexo%E4%B8%BB%E4%BD%93%E8%AE%BE%E7%BD%AE%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p><fancybox><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1572260590229&di=c342004ec7897ef8697bd65876b3b9c5&imgtype=0&src=http%3A%2F%2F02imgmini.eastday.com%2Fmobile%2F20180822%2F20180822234333_351cde5dc9236b7836296868f06a44b4_2.jpeg" width="80%"></fancybox><br>介绍Hexo一些基本设置，比如分类，标签，作者，简要概述等等以及MarkDown的写法</p><a id="more"></a><h4 id="1-Hexo创建文章、标签、分类的Front-matter方法-Ⅰ-nbsp-nbsp-Front-matter-Ⅱ"><a href="#1-Hexo创建文章、标签、分类的Front-matter方法-Ⅰ-nbsp-nbsp-Front-matter-Ⅱ" class="headerlink" title="1.Hexo创建文章、标签、分类的Front-matter方法 Ⅰ&nbsp;&nbsp; Front-matter Ⅱ"></a>1.<a href="https://www.jianshu.com/p/6e4af897a3f0" target="_blank" rel="noopener">Hexo创建文章、标签、分类的Front-matter方法 Ⅰ</a>&nbsp;&nbsp; <a href="https://xaoxuu.com/wiki/material-x/pages/index.html#Front-matter" target="_blank" rel="noopener">Front-matter Ⅱ</a></h4><p>Front-matter 是md文件最上方以 — 分隔的区域，用于指定个别文件的变量<br></p><blockquote><p>其实Front-matter就是在\Hexo\source_posts下的.md文件中书写文章标题，上传时间，分类名，标签名等等</p></blockquote><table><thead><tr><th align="center">字段</th><th align="center">含义</th><th align="center">值类型</th><th align="center">默认值</th></tr></thead><tbody><tr><td align="center">layout</td><td align="center">布局模版</td><td align="center">String</td><td align="center">-</td></tr><tr><td align="center">title</td><td align="center">标题</td><td align="center">String</td><td align="center">-</td></tr><tr><td align="center">date</td><td align="center">创建时间</td><td align="center">Date</td><td align="center">文件创建时间</td></tr><tr><td align="center">description</td><td align="center">页面描述、摘要</td><td align="center">String</td><td align="center">-</td></tr><tr><td align="center">cover</td><td align="center">是否显示封面</td><td align="center">Bool</td><td align="center">true</td></tr></tbody></table><h4 id="2-Makedown标题页的写法"><a href="#2-Makedown标题页的写法" class="headerlink" title="2.Makedown标题页的写法"></a>2.Makedown标题页的写法</h4><pre>    ---    layout: 页面布局（配合主题文档使用）    title: 文章名称    date: 文章日期    comments: 文章是否开启评论    photos: 文章封面图（仅部分主题支持）    tags:       - 文章标签一      - 文章标签二    categories: # 文章分类（文章分类等级）                - 父分类                - 子分类                - 孙分类    description: 文章描述，即要在首页显示的摘要（仅部分主题支持）    ---    这里是摘要       <!-- more -->        这里是正文    注意：description 和 <!-- more --> 方式显示摘要二选一即可，部分主题不支持description，    每个配置英文冒号后面要空一格，不同主题配置有所差异，具体要参考主题文档</pre><h4 id="3-md文件的基本写法"><a href="#3-md文件的基本写法" class="headerlink" title="3.md文件的基本写法"></a>3.md文件的基本写法</h4><blockquote><p>3.1. ``` 代码段 ``` : 表示以原格式展示代码片段。比如</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$(function () &#123;</span><br><span class="line">    ......</span><br><span class="line">     //鼠标进入的时候,其他的li标签透明度：0.5</span><br><span class="line">    $(&quot;.wrap li&quot;).hover(function() &#123;</span><br><span class="line">        $(this).siblings().stop().fadeTo(400, 0.5);  //.stop():停止所有在指定元素上正在运行的动画。</span><br><span class="line">    &#125;, function() &#123;</span><br><span class="line">        // 鼠标离开，其他li 透明度改为 1</span><br><span class="line">        $(this).siblings().stop().fadeTo(400, 1);</span><br><span class="line">    &#125;);</span><br><span class="line">    console.log($(&apos;.attr a&apos;).prop(&apos;href&apos;));</span><br><span class="line">    console.log($(&apos;.attr a&apos;).prop(&apos;title&apos;));</span><br><span class="line">    console.log($(&apos;input:checkbox&apos;).attr(&apos;id&apos;));</span><br><span class="line">    console.log($(&apos;.office p:eq(0)&apos;).scrollTop());</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>3.2. &lt;img src=”url” width=” “&gt;</p></blockquote><p>&nbsp;&nbsp;&nbsp;表示在md文件中展示图片，若不想破坏图片原格式，就只需要写width或者height其中一个，另一个会自适应变化</p><blockquote><p>3.3. 文本修饰:粗体，斜体…</p></blockquote><p>&nbsp;&nbsp;&nbsp;粗体文本用两个*或_包含，斜体文本用一个_包含</p><blockquote><p>3.4. 表格(注意其格式)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| Tables        | Are           | Cool  |</span><br><span class="line">| ------------- |:-------------:| -----:|</span><br><span class="line">| col 3 is      | right-aligned | $1600 |</span><br><span class="line">| col 2 is      | centered      |   $12 |</span><br><span class="line">| zebra stripes | are neat      |    $1 |</span><br></pre></td></tr></table></figure><blockquote><p>3.5. <a href="https://www.114la.com/other/rgb.htm" target="_blank" rel="noopener">颜色RGB</a>和字体以及背景颜色</p></blockquote><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"Tahoma"</span>&gt;</span></span>这是一串Tahoma字体<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"黑体"</span>&gt;</span></span>这是一串黑体字<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"微软雅黑"</span>&gt;</span></span>这是一串微软雅黑<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"STCAIYUN"</span>&gt;</span></span>这是一串华文彩云<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">#00ced1</span> <span class="attr">size</span>=<span class="string">7</span> <span class="attr">face</span>=<span class="string">"黑体"</span>&gt;</span></span>背景色+字体+字的size<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">#00ffff</span> <span class="attr">size</span>=<span class="string">72</span>&gt;</span></span>颜色设置<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">gray</span> <span class="attr">size</span>=<span class="string">72</span>&gt;</span></span>灰色处理<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">#bfe1f1</span>&gt;</span></span>背景色是：#bfe1f1<span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">Size：规定文本的尺寸大小。可能的值：从 1 到 7 的数字。浏览器默认值是 3</span><br></pre></td></tr></table></figure><p><font face="Tahoma">这是一串Tahoma字体</font><br/><br><font face="黑体">这是一串黑体字</font><br/><br><font face="微软雅黑">这是一串微软雅黑</font><br/><br><font face="STCAIYUN">这是一串华文彩云</font><br/><br><font color=#00ced1 size=7 face="黑体">背景色+字体+字的size</font><br/><br><font color=#00ffff size=72>颜色设置</font><br/><br><font color=gray size=72>灰色处理</font><br/></p><blockquote><p>3.6. 转义字符</p></blockquote><p>&lt;br&gt; : 换行<br><br>\ : 转义字符，原生字符，不加修饰<br><br>&amp;nbsp; : 空格</p><blockquote><p>3.7 每一篇博文设置图片</p></blockquote><p>只需要在文章前面配置 photos 关键字即可，若没有这种配置，可以选择在正文插入图片，然后使用 <!-- more --> 将图片显示在摘要里</p><blockquote><p>3.8 图片可点击设置，单独出现</p></blockquote><p>&lt;fancybox&gt;图片设置&lt;/fancybox&gt;</p><h4 id="4-Hexo的搜索search功能设置"><a href="#4-Hexo的搜索search功能设置" class="headerlink" title="4.Hexo的搜索search功能设置"></a>4.Hexo的搜索search功能设置</h4><p>问题描述：</p><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在我的博客中点击search，输入相关关键字后，点击查询到的相关文章，会出现404错误</p></blockquote><p>解决方法：</p><blockquote><p>1.检查是否安装文档要求正确的安装了依赖包。<br>2.检查根目录配置文件是否有search字段冲突（我的根目录配置文件中没有search字段）。<br>3.检查我们的主题（我使用的是<a href="https://xaoxuu.com/wiki/material-x/index.html" target="_blank" rel="noopener">Material X主题</a>）的配置文件是否开启search功能</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 搜索配置</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  service:</span> <span class="string">hexo</span></span><br><span class="line">  <span class="comment"># google</span></span><br><span class="line"><span class="attr">  google_api_key:</span></span><br><span class="line"><span class="attr">  google_engine_id:</span></span><br><span class="line">  <span class="comment"># algolia</span></span><br><span class="line"><span class="attr">  algolia_app_id:</span></span><br><span class="line"><span class="attr">  algolia_api_key:</span></span><br><span class="line"><span class="attr">  algolia_index_name:</span></span><br><span class="line">  <span class="comment"># azure</span></span><br><span class="line"><span class="attr">  azure_service_name:</span></span><br><span class="line"><span class="attr">  azure_index_name:</span></span><br><span class="line"><span class="attr">  azure_query_key:</span></span><br><span class="line">  <span class="comment"># baidu</span></span><br><span class="line"><span class="attr">  baidu_api_id:</span></span><br></pre></td></tr></table></figure><blockquote><p>4.这是最容易忽略的，但往往也是问题出现的源头，请检查根目录配置文件中的链接是否正确，如：</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="attr">https://fioralove.github.io</span></span><br><span class="line"><span class="comment"># 这里似乎存在一个bug，推荐填写GitHub Page的访问地址，不要使用自己在阿里云以及其它的域名注册服务商所提供的地址</span></span><br><span class="line"><span class="comment"># 比如我在阿里云所注册的https:AhriLove.top，填上依旧会出现404错误</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure><h4 id="5-封面轮播图"><a href="#5-封面轮播图" class="headerlink" title="5.封面轮播图"></a>5.封面轮播图</h4><p>封面幻灯片轮播图片怎么引入本地的照片？？<br>修改主题下_config.yml文件，里面有个banner改一下，多加几行即可</p><h4 id="6-front-matter设置"><a href="#6-front-matter设置" class="headerlink" title="6.front-matter设置"></a>6.front-matter设置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">front-matter是指两个\---之间的内容</span><br><span class="line">\---</span><br><span class="line">title: Javascript篇章四：快速入门</span><br><span class="line">// 小图标</span><br><span class="line">icons: [fas fa-fire accent]</span><br><span class="line">date: 2019-11-21</span><br><span class="line">toc: true #是否显示文章目录</span><br><span class="line">categories:  #分类</span><br><span class="line">    - javascript</span><br><span class="line">// 是否显示封面    </span><br><span class="line">cover: true</span><br><span class="line">tags:   #标签</span><br><span class="line">// 是否置顶文章</span><br><span class="line">top: true</span><br><span class="line">// 文章右边的音乐块</span><br><span class="line">music:</span><br><span class="line">  enable: true      # true（文章内和文章列表都显示） internal（只在文章内显示）</span><br><span class="line">  server: netease   # netease（网易云音乐）tencent（QQ音乐） xiami（虾米） kugou（酷狗）</span><br><span class="line">  type: song        # song （单曲） album （专辑） playlist （歌单） search （搜索）</span><br><span class="line">  id: 26664345      # 歌曲/专辑/歌单 ID</span><br><span class="line">// 作者相关信息块</span><br><span class="line">author:</span><br><span class="line">  name: 作者</span><br><span class="line">  avatar: https://img.vim-cn.com/a1/d53c11fb5d4fd69529bc805d385fe818feb3f6.png</span><br><span class="line">  url: https://baidu.com</span><br><span class="line">meta:</span><br><span class="line">  header: \[title, author, date, categories, counter, top]</span><br><span class="line">  footer: \[updated, tags, share]</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 文章描述</span><br><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> front-matter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Hexo</title>
      <link href="/2019/10/25/hello-world/"/>
      <url>/2019/10/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><fancybox><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1573382292526&di=0009d867e1bde90c696eb40e0fd840e4&imgtype=jpg&src=http%3A%2F%2Fimg4.imgtn.bdimg.com%2Fit%2Fu%3D3010013829%2C2497003625%26fm%3D214%26gp%3D0.jpg" alt=""></fancybox></p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>初次见面，请多关照</title>
      <link href="/2019/10/20/%E5%88%9D%E6%AC%A1%E8%A7%81%E9%9D%A2_%E8%AF%B7%E5%A4%9A%E5%85%B3%E7%85%A7/"/>
      <url>/2019/10/20/%E5%88%9D%E6%AC%A1%E8%A7%81%E9%9D%A2_%E8%AF%B7%E5%A4%9A%E5%85%B3%E7%85%A7/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;这是一篇有关我如何使用 Github Pages 和 Hexo 搭建属于自己独立博客的功能展示</p><a id="more"></a><p>大家好–^^__^^–，我叫陈浩东<br></p><p><img src="https://cdn.jsdelivr.net/gh/FioraLove/CDN@1.1/5d4d2f1ba61c7.jpg" width="30%"><br></p><p>&nbsp;&nbsp;&nbsp;<code>作为GP-12线,滚齿磨齿操作员</code>，目前正学习清洗包装流程、磨齿、滚齿、齿轮生产工艺以及安全生产。&nbsp;&nbsp;&nbsp;对网站开发的有关知识几乎为零，这也是我搭建好自己的不完全博客之后写的第一篇博客，刚开始搭建博客的时候自己也是网上各种百度，由于自己属于小白那种，历经了千辛万苦才弄好，所以借这个机会会一直坚持下去分析自己的知识，一起走向成功的彼岸！</p>]]></content>
      
      
      <categories>
          
          <category> 博客Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github Page </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
